// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

import 'dart:io';

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
import 'package:meta/meta.dart' as meta;
part 'attribute_twin_sse.freezed.dart';

// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `IgnoredStructTwinSse`, `StructWithOnlyIgnoredMethodTwinSse`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `fmt`
// These functions are ignored (category: IgnoreBecauseExplicitAttribute): `func_should_not_exist_in_dart_twin_sse`, `method_should_not_exist_in_dart_twin_sse`
// These functions are ignored (category: IgnoreBecauseOwnerTyShouldIgnore): `method_should_not_exist_in_dart_twin_sse`

Future<void> handleCustomizedStructTwinSse({required CustomizedTwinSse val}) =>
    RustLib.instance.api
        .crateApiPseudoManualAttributeTwinSseHandleCustomizedStructTwinSse(
            val: val);

Future<UserIdTwinSse> nextUserIdTwinSse(
        {UserIdTwinSse userId = const UserIdTwinSse()}) =>
    RustLib.instance.api
        .crateApiPseudoManualAttributeTwinSseNextUserIdTwinSse(userId: userId);

class CustomizedTwinSse {
  final String finalField;
  String? nonFinalField;

  CustomizedTwinSse({
    required this.finalField,
    this.nonFinalField,
  });

  @override
  int get hashCode => finalField.hashCode ^ nonFinalField.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is CustomizedTwinSse &&
          runtimeType == other.runtimeType &&
          finalField == other.finalField &&
          nonFinalField == other.nonFinalField;
}

/// Example for @freezed and @meta.immutable
@freezed
@meta.immutable
sealed class UserIdTwinSse with _$UserIdTwinSse {
  const factory UserIdTwinSse({
    @Default(0) int value,
  }) = _UserIdTwinSse;
}
