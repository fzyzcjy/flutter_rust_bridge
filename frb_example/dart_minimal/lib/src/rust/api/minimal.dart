// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import '../lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'minimal.freezed.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `clone`, `eq`, `eq`, `eq`

Future<int> minimalAdder({required int a, required int b}) =>
    RustLib.instance.api.crateApiMinimalMinimalAdder(a: a, b: b);

@freezed
sealed class ElementKind with _$ElementKind {
  const ElementKind._();

  const factory ElementKind.empty() = ElementKind_Empty;
  const factory ElementKind.occupied(
    Entity field0,
  ) = ElementKind_Occupied;
}

enum Entity {
  optionA,
  optionB,
  ;
}

class StateType {
  final ElementKindArray3Array3 area;

  const StateType({
    required this.area,
  });

  Future<void> f() => RustLib.instance.api.crateApiMinimalStateTypeF(
        that: this,
      );

  @override
  int get hashCode => area.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is StateType &&
          runtimeType == other.runtimeType &&
          area == other.area;
}
