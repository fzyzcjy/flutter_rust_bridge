// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

import 'dart:io';

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field
// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'api.dart';
import 'api/array.dart';
import 'api/async_misc.dart';
import 'api/async_spawn.dart';
import 'api/attribute.dart';
import 'api/benchmark_misc.dart';
import 'api/casted_primitive.dart';
import 'api/chrono_type.dart';
import 'api/comment.dart';
import 'api/constructor.dart';
import 'api/custom_ser_des.dart';
import 'api/customization.dart';
import 'api/dart_code.dart';
import 'api/dart_fn.dart';
import 'api/dart_opaque.dart';
import 'api/dart_opaque_sync.dart';
import 'api/deliberate_name_conflict.dart';
import 'api/dropping.dart';
import 'api/dyn_trait.dart';
import 'api/enumeration.dart';
import 'api/event_listener.dart';
import 'api/exception.dart';
import 'api/external_impl.dart';
import 'api/external_type_in_crate.dart';
import 'api/impl_trait.dart';
import 'api/inside_macro.dart';
import 'api/lifetimeable.dart';
import 'api/map_and_set.dart';
import 'api/method.dart';
import 'api/mirror.dart';
import 'api/misc_example.dart';
import 'api/misc_no_twin_example_a.dart';
import 'api/misc_no_twin_example_b.dart';
import 'api/misc_type.dart';
import 'api/newtype_pattern.dart';
import 'api/optional.dart';
import 'api/optional_primitive_misc.dart';
import 'api/ownership.dart';
import 'api/primitive_list_misc.dart';
import 'api/primitive_misc.dart';
import 'api/proxy.dart';
import 'api/pseudo_manual/array_twin_rust_async.dart';
import 'api/pseudo_manual/array_twin_sync.dart';
import 'api/pseudo_manual/attribute_twin_rust_async.dart';
import 'api/pseudo_manual/attribute_twin_sync.dart';
import 'api/pseudo_manual/basic.dart';
import 'api/pseudo_manual/basic_list.dart';
import 'api/pseudo_manual/basic_list_twin_rust_async.dart';
import 'api/pseudo_manual/basic_list_twin_sync.dart';
import 'api/pseudo_manual/basic_map.dart';
import 'api/pseudo_manual/basic_map_twin_rust_async.dart';
import 'api/pseudo_manual/basic_map_twin_sync.dart';
import 'api/pseudo_manual/basic_optional.dart';
import 'api/pseudo_manual/basic_optional_twin_rust_async.dart';
import 'api/pseudo_manual/basic_optional_twin_sync.dart';
import 'api/pseudo_manual/basic_twin_rust_async.dart';
import 'api/pseudo_manual/basic_twin_sync.dart';
import 'api/pseudo_manual/benchmark_api.dart';
import 'api/pseudo_manual/benchmark_api_twin_rust_async.dart';
import 'api/pseudo_manual/benchmark_api_twin_sync.dart';
import 'api/pseudo_manual/chrono_type_twin_rust_async.dart';
import 'api/pseudo_manual/chrono_type_twin_sync.dart';
import 'api/pseudo_manual/comment_twin_rust_async.dart';
import 'api/pseudo_manual/comment_twin_sync.dart';
import 'api/pseudo_manual/dart_fn_twin_rust_async.dart';
import 'api/pseudo_manual/dart_opaque_twin_rust_async.dart';
import 'api/pseudo_manual/dart_opaque_twin_sync.dart';
import 'api/pseudo_manual/dropping_twin_rust_async.dart';
import 'api/pseudo_manual/dropping_twin_sync.dart';
import 'api/pseudo_manual/enumeration_twin_rust_async.dart';
import 'api/pseudo_manual/enumeration_twin_sync.dart';
import 'api/pseudo_manual/event_listener_twin_rust_async.dart';
import 'api/pseudo_manual/exception_twin_rust_async.dart';
import 'api/pseudo_manual/exception_twin_sync.dart';
import 'api/pseudo_manual/external_type_in_crate_twin_rust_async.dart';
import 'api/pseudo_manual/external_type_in_crate_twin_sync.dart';
import 'api/pseudo_manual/impl_trait_twin_sync.dart';
import 'api/pseudo_manual/lifetimeable_twin_sync.dart';
import 'api/pseudo_manual/map_and_set_twin_rust_async.dart';
import 'api/pseudo_manual/map_and_set_twin_sync.dart';
import 'api/pseudo_manual/method_twin_rust_async.dart';
import 'api/pseudo_manual/method_twin_sync.dart';
import 'api/pseudo_manual/mirror_twin_rust_async.dart';
import 'api/pseudo_manual/mirror_twin_sync.dart';
import 'api/pseudo_manual/misc_example_twin_rust_async.dart';
import 'api/pseudo_manual/misc_example_twin_sync.dart';
import 'api/pseudo_manual/misc_type_twin_rust_async.dart';
import 'api/pseudo_manual/misc_type_twin_sync.dart';
import 'api/pseudo_manual/newtype_pattern_twin_rust_async.dart';
import 'api/pseudo_manual/newtype_pattern_twin_sync.dart';
import 'api/pseudo_manual/optional_primitive_misc_twin_rust_async.dart';
import 'api/pseudo_manual/optional_primitive_misc_twin_sync.dart';
import 'api/pseudo_manual/optional_twin_rust_async.dart';
import 'api/pseudo_manual/optional_twin_sync.dart';
import 'api/pseudo_manual/ownership_twin_rust_async.dart';
import 'api/pseudo_manual/ownership_twin_sync.dart';
import 'api/pseudo_manual/primitive_list_misc_twin_rust_async.dart';
import 'api/pseudo_manual/primitive_list_misc_twin_sync.dart';
import 'api/pseudo_manual/primitive_misc_twin_rust_async.dart';
import 'api/pseudo_manual/primitive_misc_twin_sync.dart';
import 'api/pseudo_manual/raw_string_twin_rust_async.dart';
import 'api/pseudo_manual/raw_string_twin_sync.dart';
import 'api/pseudo_manual/rust_auto_opaque_twin_rust_async.dart';
import 'api/pseudo_manual/rust_auto_opaque_twin_sync.dart';
import 'api/pseudo_manual/rust_opaque_twin_rust_async.dart';
import 'api/pseudo_manual/rust_opaque_twin_sync.dart';
import 'api/pseudo_manual/simple_twin_rust_async.dart';
import 'api/pseudo_manual/simple_twin_sync.dart';
import 'api/pseudo_manual/stream_twin_rust_async.dart';
import 'api/pseudo_manual/structure_twin_rust_async.dart';
import 'api/pseudo_manual/structure_twin_sync.dart';
import 'api/pseudo_manual/tuple_twin_rust_async.dart';
import 'api/pseudo_manual/tuple_twin_sync.dart';
import 'api/pseudo_manual/type_alias_twin_rust_async.dart';
import 'api/pseudo_manual/type_alias_twin_sync.dart';
import 'api/pseudo_manual/uuid_type_twin_rust_async.dart';
import 'api/pseudo_manual/uuid_type_twin_sync.dart';
import 'api/raw_string.dart';
import 'api/rust_auto_opaque.dart';
import 'api/rust_opaque.dart';
import 'api/rust_opaque_sync.dart';
import 'api/simple.dart';
import 'api/stream.dart';
import 'api/stream_misc.dart';
import 'api/structure.dart';
import 'api/tuple.dart';
import 'api/type_alias.dart';
import 'api/uuid_type.dart';
import 'auxiliary/new_module_system/sub_module.dart';
import 'auxiliary/old_module_system/sub_module.dart';
import 'auxiliary/sample_types.dart';
import 'dart:async';
import 'dart:convert';
import 'deliberate_name_conflict.dart';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
import 'package:meta/meta.dart' as meta;
import 'package:uuid/uuid.dart';
part 'frb_generated.freezed.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiCustomizationInitApp();
    await api.crateApiCustomizationMyInitOne();
    await api.crateApiCustomizationMyInitTwo();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => 2027027831;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'frb_example_pure_dart_pde',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  F32Array3 crateApiMiscNoTwinExampleAConstArrayTwinNormal();

  int crateApiMiscNoTwinExampleAConstIntTwinNormal();

  String crateApiConstructorConstructorOpaqueStructTwinNormalAutoAccessorGetOne(
      {required ConstructorOpaqueStructTwinNormal that});

  void crateApiConstructorConstructorOpaqueStructTwinNormalAutoAccessorSetOne(
      {required ConstructorOpaqueStructTwinNormal that, required String one});

  void crateApiConstructorConstructorOpaqueStructTwinNormalCheck(
      {required ConstructorOpaqueStructTwinNormal that});

  Future<ConstructorOpaqueStructTwinNormal>
      crateApiConstructorConstructorOpaqueStructTwinNormalNew();

  String
      crateApiConstructorConstructorOpaqueSyncStructTwinNormalAutoAccessorGetOne(
          {required ConstructorOpaqueSyncStructTwinNormal that});

  void
      crateApiConstructorConstructorOpaqueSyncStructTwinNormalAutoAccessorSetOne(
          {required ConstructorOpaqueSyncStructTwinNormal that,
          required String one});

  void crateApiConstructorConstructorOpaqueSyncStructTwinNormalCheck(
      {required ConstructorOpaqueSyncStructTwinNormal that});

  ConstructorOpaqueSyncStructTwinNormal
      crateApiConstructorConstructorOpaqueSyncStructTwinNormalNew();

  Uint8List
      crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorGetDeliberateBadFieldA(
          {required DeliberateFailSanityCheckTwinNormal that});

  OpaqueItemTwinNormal
      crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorGetDeliberateBadFieldB(
          {required DeliberateFailSanityCheckTwinNormal that});

  List<OpaqueItemTwinNormal>
      crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorGetDeliberateBadFieldC(
          {required DeliberateFailSanityCheckTwinNormal that});

  String
      crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorGetGoodFieldA(
          {required DeliberateFailSanityCheckTwinNormal that});

  int crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorGetGoodFieldB(
      {required DeliberateFailSanityCheckTwinNormal that});

  OpaqueItemTwinNormal
      crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorGetGoodFieldC(
          {required DeliberateFailSanityCheckTwinNormal that});

  void
      crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorSetDeliberateBadFieldA(
          {required DeliberateFailSanityCheckTwinNormal that,
          required Uint8List deliberateBadFieldA});

  void
      crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorSetDeliberateBadFieldB(
          {required DeliberateFailSanityCheckTwinNormal that,
          required OpaqueItemTwinNormal deliberateBadFieldB});

  void
      crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorSetDeliberateBadFieldC(
          {required DeliberateFailSanityCheckTwinNormal that,
          required List<OpaqueItemTwinNormal> deliberateBadFieldC});

  void
      crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorSetGoodFieldA(
          {required DeliberateFailSanityCheckTwinNormal that,
          required String goodFieldA});

  void
      crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorSetGoodFieldB(
          {required DeliberateFailSanityCheckTwinNormal that,
          required int goodFieldB});

  void
      crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorSetGoodFieldC(
          {required DeliberateFailSanityCheckTwinNormal that,
          required OpaqueItemTwinNormal goodFieldC});

  Future<void>
      crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalDummyFunctionTwinNormal();

  Stream<int> crateApiDroppingDroppableTwinNormalCreateStream(
      {required DroppableTwinNormal that});

  Future<int> crateApiDroppingDroppableTwinNormalGetDropCountTwinNormal();

  Future<DroppableTwinNormal>
      crateApiDroppingDroppableTwinNormalNewTwinNormal();

  Future<void> crateApiDroppingDroppableTwinNormalSimpleMethodTwinNormal(
      {required DroppableTwinNormal that});

  Stream<int>
      crateApiPseudoManualDroppingTwinRustAsyncDroppableTwinRustAsyncCreateStreamTwinRustAsync(
          {required DroppableTwinRustAsync that});

  Future<int>
      crateApiPseudoManualDroppingTwinRustAsyncDroppableTwinRustAsyncGetDropCountTwinRustAsync();

  Future<DroppableTwinRustAsync>
      crateApiPseudoManualDroppingTwinRustAsyncDroppableTwinRustAsyncNewTwinRustAsync();

  Future<void>
      crateApiPseudoManualDroppingTwinRustAsyncDroppableTwinRustAsyncSimpleMethodTwinRustAsync(
          {required DroppableTwinRustAsync that});

  Stream<int>
      crateApiPseudoManualDroppingTwinSyncDroppableTwinSyncCreateStreamTwinSync(
          {required DroppableTwinSync that});

  int crateApiPseudoManualDroppingTwinSyncDroppableTwinSyncGetDropCountTwinSync();

  DroppableTwinSync
      crateApiPseudoManualDroppingTwinSyncDroppableTwinSyncNewTwinSync();

  void
      crateApiPseudoManualDroppingTwinSyncDroppableTwinSyncSimpleMethodTwinSync(
          {required DroppableTwinSync that});

  String
      crateApiMiscNoTwinExampleAItemContainerSolutionOneTwinNormalAutoAccessorGetName(
          {required ItemContainerSolutionOneTwinNormal that});

  void
      crateApiMiscNoTwinExampleAItemContainerSolutionOneTwinNormalAutoAccessorSetName(
          {required ItemContainerSolutionOneTwinNormal that,
          required String name});

  Future<ItemContainerSolutionOneTwinNormal>
      crateApiMiscNoTwinExampleAItemContainerSolutionOneTwinNormalCreateTwinNormal();

  Future<Int32List>
      crateApiMiscNoTwinExampleAItemContainerSolutionOneTwinNormalGetItemContentsTwinNormal(
          {required ItemContainerSolutionOneTwinNormal that});

  Future<String>
      crateApiLifetimeableLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtNestedTypeWithLifetimeTwinNormalstaticGreetBorrowMutSelfTwinNormal(
          {required LtNestedTypeWithLifetimeTwinNormal that});

  Future<String>
      crateApiLifetimeableLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtNestedTypeWithLifetimeTwinNormalstaticGreetBorrowSelfTwinNormal(
          {required LtNestedTypeWithLifetimeTwinNormal that});

  String
      crateApiPseudoManualLifetimeableTwinSyncLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtNestedTypeWithLifetimeTwinSyncstaticGreetBorrowMutSelfTwinSync(
          {required LtNestedTypeWithLifetimeTwinSync that});

  String
      crateApiPseudoManualLifetimeableTwinSyncLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtNestedTypeWithLifetimeTwinSyncstaticGreetBorrowSelfTwinSync(
          {required LtNestedTypeWithLifetimeTwinSync that});

  Future<LtTypeWithLifetimeTwinNormal>
      crateApiLifetimeableLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithLifetimeTwinNormalstaticComputeArgGenericLifetimeTwinNormal(
          {required LtTypeWithLifetimeTwinNormal arg});

  Future<LtNestedTypeWithLifetimeTwinNormal>
      crateApiLifetimeableLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithLifetimeTwinNormalstaticComputeNestedTypeWithLifetimeTwinNormal(
          {required LtTypeWithLifetimeTwinNormal that});

  Future<String>
      crateApiLifetimeableLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithLifetimeTwinNormalstaticGreetBorrowMutSelfTwinNormal(
          {required LtTypeWithLifetimeTwinNormal that});

  Future<String>
      crateApiLifetimeableLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithLifetimeTwinNormalstaticGreetBorrowSelfTwinNormal(
          {required LtTypeWithLifetimeTwinNormal that});

  Future<LtTypeWithLifetimeTwinSync>
      crateApiPseudoManualLifetimeableTwinSyncLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithLifetimeTwinSyncstaticComputeArgGenericLifetimeTwinSync(
          {required LtTypeWithLifetimeTwinSync arg});

  Future<LtNestedTypeWithLifetimeTwinSync>
      crateApiPseudoManualLifetimeableTwinSyncLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithLifetimeTwinSyncstaticComputeNestedTypeWithLifetimeTwinSync(
          {required LtTypeWithLifetimeTwinSync that});

  String
      crateApiPseudoManualLifetimeableTwinSyncLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithLifetimeTwinSyncstaticGreetBorrowMutSelfTwinSync(
          {required LtTypeWithLifetimeTwinSync that});

  String
      crateApiPseudoManualLifetimeableTwinSyncLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithLifetimeTwinSyncstaticGreetBorrowSelfTwinSync(
          {required LtTypeWithLifetimeTwinSync that});

  Future<LtTypeWithMultiDepTwinNormal>
      crateApiLifetimeableLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithMultiDepTwinNormalstaticComputeWithMultiArgHavingLifetimeTwinNormal(
          {required LtOwnedStructTwinNormal a,
          required LtOwnedStructTwinNormal b,
          required LtOwnedStructTwinNormal unrelatedBorrowed,
          required LtOwnedStructTwinNormal unrelatedOwned});

  Future<List<String>>
      crateApiLifetimeableLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithMultiDepTwinNormalstaticGreetBorrowMutSelfTwinNormal(
          {required LtTypeWithMultiDepTwinNormal that});

  Future<List<String>>
      crateApiLifetimeableLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithMultiDepTwinNormalstaticGreetBorrowSelfTwinNormal(
          {required LtTypeWithMultiDepTwinNormal that});

  Future<LtTypeWithMultiDepTwinSync>
      crateApiPseudoManualLifetimeableTwinSyncLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithMultiDepTwinSyncstaticComputeWithMultiArgHavingLifetimeTwinSync(
          {required LtOwnedStructTwinSync a,
          required LtOwnedStructTwinSync b,
          required LtOwnedStructTwinSync unrelatedBorrowed,
          required LtOwnedStructTwinSync unrelatedOwned});

  List<String>
      crateApiPseudoManualLifetimeableTwinSyncLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithMultiDepTwinSyncstaticGreetBorrowMutSelfTwinSync(
          {required LtTypeWithMultiDepTwinSync that});

  List<String>
      crateApiPseudoManualLifetimeableTwinSyncLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithMultiDepTwinSyncstaticGreetBorrowSelfTwinSync(
          {required LtTypeWithMultiDepTwinSync that});

  Future<LtTypeWithLifetimeTwinNormal>
      crateApiLifetimeableLtOwnedStructTwinNormalComputeTypeWithLifetimeTwinNormal(
          {required LtOwnedStructTwinNormal that});

  Future<LtTypeWithLifetimeTwinNormal>
      crateApiLifetimeableLtOwnedStructTwinNormalComputeWithUnrelatedBorrowedArgTwinNormal(
          {required LtOwnedStructTwinNormal that,
          required LtOwnedStructTwinNormal unrelatedBorrowed,
          required LtOwnedStructTwinNormal unrelatedOwned});

  Future<LtOwnedStructTwinNormal>
      crateApiLifetimeableLtOwnedStructTwinNormalCreateTwinNormal(
          {required String value});

  Future<LtOwnedStructTwinNormal>
      crateApiLifetimeableLtOwnedStructTwinNormalCreateWithLoggerTwinNormal(
          {required String value, required SimpleLogger logger});

  Future<LtTypeWithLifetimeTwinSync>
      crateApiPseudoManualLifetimeableTwinSyncLtOwnedStructTwinSyncComputeTypeWithLifetimeTwinSync(
          {required LtOwnedStructTwinSync that});

  Future<LtTypeWithLifetimeTwinSync>
      crateApiPseudoManualLifetimeableTwinSyncLtOwnedStructTwinSyncComputeWithUnrelatedBorrowedArgTwinSync(
          {required LtOwnedStructTwinSync that,
          required LtOwnedStructTwinSync unrelatedBorrowed,
          required LtOwnedStructTwinSync unrelatedOwned});

  LtOwnedStructTwinSync
      crateApiPseudoManualLifetimeableTwinSyncLtOwnedStructTwinSyncCreateTwinSync(
          {required String value});

  LtOwnedStructTwinSync
      crateApiPseudoManualLifetimeableTwinSyncLtOwnedStructTwinSyncCreateWithLoggerTwinSync(
          {required String value, required SimpleLogger logger});

  Future<String>
      crateApiLifetimeableLtSubStructTwinNormalGreetBorrowMutSelfTwinNormal(
          {required LtSubStructTwinNormal that});

  Future<String>
      crateApiLifetimeableLtSubStructTwinNormalGreetBorrowSelfTwinNormal(
          {required LtSubStructTwinNormal that});

  String
      crateApiPseudoManualLifetimeableTwinSyncLtSubStructTwinSyncGreetBorrowMutSelfTwinSync(
          {required LtSubStructTwinSync that});

  String
      crateApiPseudoManualLifetimeableTwinSyncLtSubStructTwinSyncGreetBorrowSelfTwinSync(
          {required LtSubStructTwinSync that});

  Future<MyAudioParamTwinNormal>
      crateApiProxyMyAudioParamTwinNormalCreateTwinNormal(
          {required String value});

  Future<String> crateApiProxyMyAudioParamTwinNormalMyMethodTwinNormal(
      {required MyAudioParamTwinNormal that});

  Future<void>
      crateApiImplTraitMyImplTraitWithSelfTwinNormalMethodWithBadSelfTwinNormal(
          {required MyImplTraitWithSelfTwinNormal that,
          required MyImplTraitWithSelfTwinNormal another});

  Future<MyImplTraitWithSelfTwinNormal>
      crateApiImplTraitMyImplTraitWithSelfTwinNormalMethodWithGoodSelfTwinNormal(
          {required MyImplTraitWithSelfTwinNormal that});

  Future<void>
      crateApiPseudoManualImplTraitTwinSyncMyImplTraitWithSelfTwinSyncMethodWithBadSelfTwinSync(
          {required MyImplTraitWithSelfTwinSync that,
          required MyImplTraitWithSelfTwinSync another});

  Future<MyImplTraitWithSelfTwinSync>
      crateApiPseudoManualImplTraitTwinSyncMyImplTraitWithSelfTwinSyncMethodWithGoodSelfTwinSync(
          {required MyImplTraitWithSelfTwinSync that});

  Future<MyNodeTwinNormal> crateApiProxyMyNodeTwinNormalCreateTwinNormal();

  Future<MyStructWithTryFromTwinNormal>
      crateApiMiscNoTwinExampleAMyStructWithTryFromTwinNormalTryFrom(
          {required String value});

  Future<String>
      crateApiMiscNoTwinExampleAMyStructWithTryFromTwinNormalValueTwinNormal(
          {required MyStructWithTryFromTwinNormal that});

  Future<void>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalInstanceMethodArgBorrowTwinNormal(
          {required NonCloneSimpleTwinNormal that});

  Future<void>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalInstanceMethodArgMutBorrowTwinNormal(
          {required NonCloneSimpleTwinNormal that});

  Future<void>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalInstanceMethodArgOwnTwinNormal(
          {required NonCloneSimpleTwinNormal that});

  Future<int>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalInstanceMethodGetterTwinNormal(
          {required NonCloneSimpleTwinNormal that});

  Future<NonCloneSimpleTwinNormal>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalInstanceMethodReturnOwnTwinNormal(
          {required NonCloneSimpleTwinNormal that});

  Future<NonCloneSimpleTwinNormal>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalNewCustomNameTwinNormal();

  Future<NonCloneSimpleTwinNormal>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalNewTwinNormal();

  Future<NonCloneSimpleTwinNormal>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalNewWithResultTwinNormal();

  Future<void>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalStaticMethodArgBorrowTwinNormal(
          {required NonCloneSimpleTwinNormal arg});

  Future<void>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalStaticMethodArgMutBorrowTwinNormal(
          {required NonCloneSimpleTwinNormal arg});

  Future<void>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalStaticMethodArgOwnTwinNormal(
          {required NonCloneSimpleTwinNormal arg});

  Future<NonCloneSimpleTwinNormal>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalStaticMethodReturnOwnTwinNormal();

  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodArgBorrowTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync that});

  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodArgMutBorrowTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync that});

  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodArgOwnTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync that});

  Future<int>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodGetterTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync that});

  Future<NonCloneSimpleTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodReturnOwnTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync that});

  Future<NonCloneSimpleTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncNewCustomNameTwinRustAsync();

  Future<NonCloneSimpleTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncNewTwinRustAsync();

  Future<NonCloneSimpleTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncNewWithResultTwinRustAsync();

  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncStaticMethodArgBorrowTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync arg});

  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncStaticMethodArgMutBorrowTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync arg});

  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncStaticMethodArgOwnTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync arg});

  Future<NonCloneSimpleTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncStaticMethodReturnOwnTwinRustAsync();

  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncInstanceMethodArgBorrowTwinSync(
          {required NonCloneSimpleTwinSync that});

  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncInstanceMethodArgMutBorrowTwinSync(
          {required NonCloneSimpleTwinSync that});

  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncInstanceMethodArgOwnTwinSync(
          {required NonCloneSimpleTwinSync that});

  int crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncInstanceMethodGetterTwinSync(
      {required NonCloneSimpleTwinSync that});

  NonCloneSimpleTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncInstanceMethodReturnOwnTwinSync(
          {required NonCloneSimpleTwinSync that});

  NonCloneSimpleTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncNewCustomNameTwinSync();

  NonCloneSimpleTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncNewTwinSync();

  NonCloneSimpleTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncNewWithResultTwinSync();

  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncStaticMethodArgBorrowTwinSync(
          {required NonCloneSimpleTwinSync arg});

  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncStaticMethodArgMutBorrowTwinSync(
          {required NonCloneSimpleTwinSync arg});

  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncStaticMethodArgOwnTwinSync(
          {required NonCloneSimpleTwinSync arg});

  NonCloneSimpleTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncStaticMethodReturnOwnTwinSync();

  Future<int>
      crateApiDartCodeOpaqueStructWithDartCodeTwinNormalNormalMethodTwinNormal(
          {required OpaqueStructWithDartCodeTwinNormal that});

  List<String> crateApiMiscNoTwinExampleASimpleLoggerGetAndReset(
      {required SimpleLogger that});

  SimpleLogger crateApiMiscNoTwinExampleASimpleLoggerNew();

  SimpleOpaqueExternalStructWithMethod
      crateApiExternalImplSimpleOpaqueExternalStructWithMethodNew(
          {required String a});

  Future<String>
      crateApiExternalImplSimpleOpaqueExternalStructWithMethodSimpleExternalMethod(
          {required SimpleOpaqueExternalStructWithMethod that});

  Future<int> crateApiMethodStaticGetterOnlyTwinNormalStaticGetterTwinNormal();

  Future<int>
      crateApiPseudoManualMethodTwinRustAsyncStaticGetterOnlyTwinRustAsyncStaticGetterTwinRustAsync();

  int crateApiPseudoManualMethodTwinSyncStaticGetterOnlyTwinSyncStaticGetterTwinSync();

  Future<void>
      crateApiMiscNoTwinExampleAStructInMiscNoTwinExampleASampleFunctionA(
          {required StructInMiscNoTwinExampleA that});

  Future<StructInMiscNoTwinExampleA>
      crateApiMiscNoTwinExampleBStructInMiscNoTwinExampleBGetStructInMiscNoTwinExampleA(
          {required StructInMiscNoTwinExampleB that});

  Future<void>
      crateApiMiscNoTwinExampleBStructInMiscNoTwinExampleBSampleFunctionB(
          {required StructInMiscNoTwinExampleB that});

  int crateApiDynTraitStructOneWithTraitForDynTwinNormalAutoAccessorGetOne(
      {required StructOneWithTraitForDynTwinNormal that});

  void crateApiDynTraitStructOneWithTraitForDynTwinNormalAutoAccessorSetOne(
      {required StructOneWithTraitForDynTwinNormal that, required int one});

  Future<StructOneWithTraitForDynTwinNormal>
      crateApiDynTraitStructOneWithTraitForDynTwinNormalCreateTwinNormal(
          {required int one});

  Future<int>
      crateApiDynTraitStructOneWithTraitForDynTwinNormalSimpleMethodTwinNormal(
          {required StructOneWithTraitForDynTwinNormal that});

  int crateApiImplTraitStructOneWithTraitTwinNormalAutoAccessorGetOne(
      {required StructOneWithTraitTwinNormal that});

  void crateApiImplTraitStructOneWithTraitTwinNormalAutoAccessorSetOne(
      {required StructOneWithTraitTwinNormal that, required int one});

  Future<int>
      crateApiImplTraitStructOneWithTraitTwinNormalSimpleTraitFnReceiverBorrowTwinNormal(
          {required StructOneWithTraitTwinNormal that});

  Future<StructOneWithTraitTwinNormal>
      crateApiImplTraitStructOneWithTraitTwinNormalSimpleTraitFnTwinNormal(
          {required int value});

  Future<int>
      crateApiImplTraitStructOneWithTraitTwinNormalSimpleTraitFnWithDefaultImplTwinNormal();

  int crateApiPseudoManualImplTraitTwinSyncStructOneWithTraitTwinSyncAutoAccessorGetOne(
      {required StructOneWithTraitTwinSync that});

  void
      crateApiPseudoManualImplTraitTwinSyncStructOneWithTraitTwinSyncAutoAccessorSetOne(
          {required StructOneWithTraitTwinSync that, required int one});

  Future<int>
      crateApiPseudoManualImplTraitTwinSyncStructOneWithTraitTwinSyncSimpleTraitFnReceiverBorrowTwinSync(
          {required StructOneWithTraitTwinSync that});

  Future<StructOneWithTraitTwinSync>
      crateApiPseudoManualImplTraitTwinSyncStructOneWithTraitTwinSyncSimpleTraitFnTwinSync(
          {required int value});

  Future<int>
      crateApiPseudoManualImplTraitTwinSyncStructOneWithTraitTwinSyncSimpleTraitFnWithDefaultImplTwinSync();

  int crateApiDynTraitStructTwoWithTraitForDynTwinNormalAutoAccessorGetTwo(
      {required StructTwoWithTraitForDynTwinNormal that});

  void crateApiDynTraitStructTwoWithTraitForDynTwinNormalAutoAccessorSetTwo(
      {required StructTwoWithTraitForDynTwinNormal that, required int two});

  Future<StructTwoWithTraitForDynTwinNormal>
      crateApiDynTraitStructTwoWithTraitForDynTwinNormalCreateTwinNormal(
          {required int two});

  Future<int>
      crateApiDynTraitStructTwoWithTraitForDynTwinNormalSimpleMethodTwinNormal(
          {required StructTwoWithTraitForDynTwinNormal that});

  int crateApiImplTraitStructTwoWithTraitTwinNormalAutoAccessorGetTwo(
      {required StructTwoWithTraitTwinNormal that});

  void crateApiImplTraitStructTwoWithTraitTwinNormalAutoAccessorSetTwo(
      {required StructTwoWithTraitTwinNormal that, required int two});

  Future<int>
      crateApiImplTraitStructTwoWithTraitTwinNormalSimpleTraitFnReceiverBorrowTwinNormal(
          {required StructTwoWithTraitTwinNormal that});

  Future<StructTwoWithTraitTwinNormal>
      crateApiImplTraitStructTwoWithTraitTwinNormalSimpleTraitFnTwinNormal(
          {required int value});

  Future<int>
      crateApiImplTraitStructTwoWithTraitTwinNormalSimpleTraitFnWithDefaultImplTwinNormal();

  int crateApiPseudoManualImplTraitTwinSyncStructTwoWithTraitTwinSyncAutoAccessorGetTwo(
      {required StructTwoWithTraitTwinSync that});

  void
      crateApiPseudoManualImplTraitTwinSyncStructTwoWithTraitTwinSyncAutoAccessorSetTwo(
          {required StructTwoWithTraitTwinSync that, required int two});

  Future<int>
      crateApiPseudoManualImplTraitTwinSyncStructTwoWithTraitTwinSyncSimpleTraitFnReceiverBorrowTwinSync(
          {required StructTwoWithTraitTwinSync that});

  Future<StructTwoWithTraitTwinSync>
      crateApiPseudoManualImplTraitTwinSyncStructTwoWithTraitTwinSyncSimpleTraitFnTwinSync(
          {required int value});

  Future<int>
      crateApiPseudoManualImplTraitTwinSyncStructTwoWithTraitTwinSyncSimpleTraitFnWithDefaultImplTwinSync();

  String
      crateApiRustAutoOpaqueStructWithGoodAndOpaqueFieldWithoutOptionTwinNormalAutoAccessorGetGood(
          {required StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal that});

  void
      crateApiRustAutoOpaqueStructWithGoodAndOpaqueFieldWithoutOptionTwinNormalAutoAccessorSetGood(
          {required StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal that,
          required String good});

  String
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncAutoAccessorGetGood(
          {required StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync
              that});

  void
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncAutoAccessorSetGood(
          {required StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync that,
          required String good});

  String
      crateApiPseudoManualRustAutoOpaqueTwinSyncStructWithGoodAndOpaqueFieldWithoutOptionTwinSyncAutoAccessorGetGood(
          {required StructWithGoodAndOpaqueFieldWithoutOptionTwinSync that});

  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncStructWithGoodAndOpaqueFieldWithoutOptionTwinSyncAutoAccessorSetGood(
          {required StructWithGoodAndOpaqueFieldWithoutOptionTwinSync that,
          required String good});

  Future<void>
      crateApiMiscNoTwinExampleAStructWithImplBlockInMultiFileMethodInA(
          {required StructWithImplBlockInMultiFile that});

  Future<void>
      crateApiMiscNoTwinExampleAStructWithImplBlockInMultiFileMethodInB(
          {required StructWithImplBlockInMultiFile that});

  Future<StructWithRustAutoOpaqueFieldWithManyDeriveInner>
      crateApiMiscNoTwinExampleAStructWithRustAutoOpaqueFieldWithManyDeriveInnerDefault();

  int crateApiMiscNoTwinExampleAStructWithSimpleSetterTwinNormalGetSomething(
      {required StructWithSimpleSetterTwinNormal that});

  StructWithSimpleSetterTwinNormal
      crateApiMiscNoTwinExampleAStructWithSimpleSetterTwinNormalNew();

  void crateApiMiscNoTwinExampleAStructWithSimpleSetterTwinNormalSetSomething(
      {required StructWithSimpleSetterTwinNormal that, required int value});

  int crateApiMiscNoTwinExampleAStructWithSimpleSetterTwinNormalSimpleGetter(
      {required StructWithSimpleSetterTwinNormal that});

  void crateApiMiscNoTwinExampleAStructWithSimpleSetterTwinNormalSimpleSetter(
      {required StructWithSimpleSetterTwinNormal that, required int value});

  int crateApiMiscNoTwinExampleATypeForIgnoreAllAutoAccessorGetField2(
      {required TypeForIgnoreAll that});

  void crateApiMiscNoTwinExampleATypeForIgnoreAllAutoAccessorSetField2(
      {required TypeForIgnoreAll that, required int field2});

  Future<TypeForIgnoreAll> crateApiMiscNoTwinExampleATypeForIgnoreAllDefault();

  Future<int> crateApiMiscNoTwinExampleATypeForIgnoreAllField1(
      {required TypeForIgnoreAll that});

  Future<TypeForIgnoreAll> crateApiMiscNoTwinExampleATypeForIgnoreAllNew();

  Future<TypeForIgnore> crateApiMiscNoTwinExampleATypeForIgnoreDefault();

  Future<int> crateApiMiscNoTwinExampleATypeForIgnoreField1(
      {required TypeForIgnore that});

  Future<TypeForIgnore> crateApiMiscNoTwinExampleATypeForIgnoreNew();

  Future<AnotherMacroStructTwinNormal>
      crateApiInsideMacroAnotherMacroStructTwinNormal();

  Stream<ApplicationSettings> crateApiMirrorAppSettingsStreamTwinNormal();

  Stream<ApplicationSettings>
      crateApiPseudoManualMirrorTwinRustAsyncAppSettingsStreamTwinRustAsync();

  Stream<ApplicationSettings>
      crateApiPseudoManualMirrorTwinSyncAppSettingsStreamTwinSync();

  Stream<List<ApplicationSettings>>
      crateApiMirrorAppSettingsVecStreamTwinNormal();

  Stream<List<ApplicationSettings>>
      crateApiPseudoManualMirrorTwinRustAsyncAppSettingsVecStreamTwinRustAsync();

  Stream<List<ApplicationSettings>>
      crateApiPseudoManualMirrorTwinSyncAppSettingsVecStreamTwinSync();

  Future<String> crateApiDartOpaqueAsyncAcceptDartOpaqueTwinNormal(
      {required Object opaque});

  Future<String>
      crateApiPseudoManualDartOpaqueTwinRustAsyncAsyncAcceptDartOpaqueTwinRustAsync(
          {required Object opaque});

  String crateApiPseudoManualDartOpaqueTwinSyncAsyncAcceptDartOpaqueTwinSync(
      {required Object opaque});

  Future<void>
      crateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeInputJsonTwinNormal(
          {required String raw});

  Future<void>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeInputJsonTwinRustAsync(
          {required String raw});

  void
      crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeInputJsonTwinSync(
          {required String raw});

  Future<void>
      crateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeInputProtobufTwinNormal(
          {required List<int> raw});

  Future<void>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeInputProtobufTwinRustAsync(
          {required List<int> raw});

  void
      crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeInputProtobufTwinSync(
          {required List<int> raw});

  Future<void>
      crateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeInputTwinNormal(
          {required BenchmarkBinaryTreeTwinNormal tree});

  Future<void>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeInputTwinRustAsync(
          {required BenchmarkBinaryTreeTwinRustAsync tree});

  void crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeInputTwinSync(
      {required BenchmarkBinaryTreeTwinSync tree});

  Future<String>
      crateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeOutputJsonTwinNormal(
          {required int depth});

  Future<String>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeOutputJsonTwinRustAsync(
          {required int depth});

  String
      crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeOutputJsonTwinSync(
          {required int depth});

  Future<Uint8List>
      crateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeOutputProtobufTwinNormal(
          {required int depth});

  Future<Uint8List>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeOutputProtobufTwinRustAsync(
          {required int depth});

  Uint8List
      crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeOutputProtobufTwinSync(
          {required int depth});

  Future<BenchmarkBinaryTreeTwinNormal>
      crateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeOutputTwinNormal(
          {required int depth});

  Future<BenchmarkBinaryTreeTwinRustAsync>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeOutputTwinRustAsync(
          {required int depth});

  BenchmarkBinaryTreeTwinSync
      crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeOutputTwinSync(
          {required int depth});

  Future<void> crateApiPseudoManualBenchmarkApiBenchmarkBlobInputJsonTwinNormal(
      {required String raw});

  Future<void>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobInputJsonTwinRustAsync(
          {required String raw});

  void crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobInputJsonTwinSync(
      {required String raw});

  Future<void>
      crateApiPseudoManualBenchmarkApiBenchmarkBlobInputProtobufTwinNormal(
          {required List<int> raw});

  Future<void>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobInputProtobufTwinRustAsync(
          {required List<int> raw});

  void
      crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobInputProtobufTwinSync(
          {required List<int> raw});

  Future<void> crateApiPseudoManualBenchmarkApiBenchmarkBlobInputTwinNormal(
      {required BenchmarkBlobTwinNormal blob});

  Future<void>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobInputTwinRustAsync(
          {required BenchmarkBlobTwinRustAsync blob});

  void crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobInputTwinSync(
      {required BenchmarkBlobTwinSync blob});

  Future<String>
      crateApiPseudoManualBenchmarkApiBenchmarkBlobOutputJsonTwinNormal(
          {required int size});

  Future<String>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobOutputJsonTwinRustAsync(
          {required int size});

  String
      crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobOutputJsonTwinSync(
          {required int size});

  Future<Uint8List>
      crateApiPseudoManualBenchmarkApiBenchmarkBlobOutputProtobufTwinNormal(
          {required int size});

  Future<Uint8List>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobOutputProtobufTwinRustAsync(
          {required int size});

  Uint8List
      crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobOutputProtobufTwinSync(
          {required int size});

  Future<BenchmarkBlobTwinNormal>
      crateApiPseudoManualBenchmarkApiBenchmarkBlobOutputTwinNormal(
          {required int size});

  Future<BenchmarkBlobTwinRustAsync>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobOutputTwinRustAsync(
          {required int size});

  BenchmarkBlobTwinSync
      crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobOutputTwinSync(
          {required int size});

  Future<int> crateApiPseudoManualBenchmarkApiBenchmarkInputBytesTwinNormal(
      {required List<int> bytes});

  Future<int>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkInputBytesTwinRustAsync(
          {required List<int> bytes});

  int crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkInputBytesTwinSync(
      {required List<int> bytes});

  Future<Uint8List>
      crateApiPseudoManualBenchmarkApiBenchmarkOutputBytesTwinNormal(
          {required int size});

  Future<Uint8List>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkOutputBytesTwinRustAsync(
          {required int size});

  Uint8List
      crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkOutputBytesTwinSync(
          {required int size});

  void crateApiBenchmarkMiscBenchmarkVoidSemiSerialize();

  Future<void> crateApiPseudoManualBenchmarkApiBenchmarkVoidTwinNormal();

  Future<void>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkVoidTwinRustAsync();

  void crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkVoidTwinSync();

  Future<int> crateApiOwnershipBorrowI32TwinNormal({required int arg});

  Future<int> crateApiPseudoManualOwnershipTwinRustAsyncBorrowI32TwinRustAsync(
      {required int arg});

  int crateApiPseudoManualOwnershipTwinSyncBorrowI32TwinSync(
      {required int arg});

  Future<List<String>> crateApiOwnershipBorrowSliceStringTwinNormal(
      {required List<String> arg});

  Future<List<String>>
      crateApiPseudoManualOwnershipTwinRustAsyncBorrowSliceStringTwinRustAsync(
          {required List<String> arg});

  List<String> crateApiPseudoManualOwnershipTwinSyncBorrowSliceStringTwinSync(
      {required List<String> arg});

  Future<Uint8List> crateApiOwnershipBorrowSliceU8TwinNormal(
      {required List<int> arg});

  Future<Uint8List>
      crateApiPseudoManualOwnershipTwinRustAsyncBorrowSliceU8TwinRustAsync(
          {required List<int> arg});

  Uint8List crateApiPseudoManualOwnershipTwinSyncBorrowSliceU8TwinSync(
      {required List<int> arg});

  Future<String> crateApiOwnershipBorrowStrTwinNormal({required String arg});

  Future<String>
      crateApiPseudoManualOwnershipTwinRustAsyncBorrowStrTwinRustAsync(
          {required String arg});

  String crateApiPseudoManualOwnershipTwinSyncBorrowStrTwinSync(
      {required String arg});

  Future<String> crateApiOwnershipBorrowStringTwinNormal({required String arg});

  Future<String>
      crateApiPseudoManualOwnershipTwinRustAsyncBorrowStringTwinRustAsync(
          {required String arg});

  String crateApiPseudoManualOwnershipTwinSyncBorrowStringTwinSync(
      {required String arg});

  Future<SimpleStructForBorrowTwinNormal>
      crateApiOwnershipBorrowStructTwinNormal(
          {required SimpleStructForBorrowTwinNormal arg});

  Future<SimpleStructForBorrowTwinRustAsync>
      crateApiPseudoManualOwnershipTwinRustAsyncBorrowStructTwinRustAsync(
          {required SimpleStructForBorrowTwinRustAsync arg});

  SimpleStructForBorrowTwinSync
      crateApiPseudoManualOwnershipTwinSyncBorrowStructTwinSync(
          {required SimpleStructForBorrowTwinSync arg});

  Future<BlobTwinNormal> crateApiArrayBoxedBlobTwinNormal(
      {required U8Array1600 blob});

  Future<BlobTwinRustAsync>
      crateApiPseudoManualArrayTwinRustAsyncBoxedBlobTwinRustAsync(
          {required U8Array1600 blob});

  BlobTwinSync crateApiPseudoManualArrayTwinSyncBoxedBlobTwinSync(
      {required U8Array1600 blob});

  Future<NewSimpleStruct>
      crateApiExternalTypeInCrateCallNewModuleSystemTwinNormal();

  Future<NewSimpleStruct>
      crateApiPseudoManualExternalTypeInCrateTwinRustAsyncCallNewModuleSystemTwinRustAsync();

  NewSimpleStruct
      crateApiPseudoManualExternalTypeInCrateTwinSyncCallNewModuleSystemTwinSync();

  Future<OldSimpleStruct>
      crateApiExternalTypeInCrateCallOldModuleSystemTwinNormal();

  Future<OldSimpleStruct>
      crateApiPseudoManualExternalTypeInCrateTwinRustAsyncCallOldModuleSystemTwinRustAsync();

  OldSimpleStruct
      crateApiPseudoManualExternalTypeInCrateTwinSyncCallOldModuleSystemTwinSync();

  Future<int> crateApiCastedPrimitiveCastedPrimitiveI64TwinNormal(
      {required int arg});

  Future<int> crateApiCastedPrimitiveCastedPrimitiveIsizeTwinNormal(
      {required int arg});

  Future<void> crateApiCastedPrimitiveCastedPrimitiveMultiArgTwinNormal(
      {required int a, required int b, required int c, required BigInt d});

  Future<int> crateApiCastedPrimitiveCastedPrimitiveU64TwinNormal(
      {required int arg});

  Future<int> crateApiCastedPrimitiveCastedPrimitiveUsizeTwinNormal(
      {required int arg});

  Future<bool> crateApiCustomizationCheckInitDone();

  Future<List<Object>> crateApiDartOpaqueCloneDartOpaqueTwinNormal(
      {required Object opaque});

  Future<List<Object>>
      crateApiPseudoManualDartOpaqueTwinRustAsyncCloneDartOpaqueTwinRustAsync(
          {required Object opaque});

  List<Object> crateApiPseudoManualDartOpaqueTwinSyncCloneDartOpaqueTwinSync(
      {required Object opaque});

  Future<void> crateApiEventListenerCloseEventListenerTwinNormal();

  Future<void>
      crateApiPseudoManualEventListenerTwinRustAsyncCloseEventListenerTwinRustAsync();

  Future<String>
      crateApiMethodConcatenateWithTwinNormalConcatenateStaticTwinNormal(
          {required String a, required String b});

  Future<String> crateApiMethodConcatenateWithTwinNormalConcatenateTwinNormal(
      {required ConcatenateWithTwinNormal that, required String b});

  Stream<int>
      crateApiMethodConcatenateWithTwinNormalHandleSomeStaticStreamSinkSingleArgTwinNormal();

  Stream<Log2TwinNormal>
      crateApiMethodConcatenateWithTwinNormalHandleSomeStaticStreamSinkTwinNormal(
          {required int key, required int max});

  Stream<int>
      crateApiMethodConcatenateWithTwinNormalHandleSomeStreamSinkAt1TwinNormal(
          {required ConcatenateWithTwinNormal that});

  Stream<Log2TwinNormal>
      crateApiMethodConcatenateWithTwinNormalHandleSomeStreamSinkTwinNormal(
          {required ConcatenateWithTwinNormal that,
          required int key,
          required int max});

  Future<ConcatenateWithTwinNormal>
      crateApiMethodConcatenateWithTwinNormalNewTwinNormal({required String a});

  Future<String> crateApiMethodConcatenateWithTwinNormalSimpleGetterTwinNormal(
      {required ConcatenateWithTwinNormal that});

  Future<String>
      crateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncConcatenateStaticTwinRustAsync(
          {required String a, required String b});

  Future<String>
      crateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncConcatenateTwinRustAsync(
          {required ConcatenateWithTwinRustAsync that, required String b});

  Stream<int>
      crateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncHandleSomeStaticStreamSinkSingleArgTwinRustAsync();

  Stream<Log2TwinRustAsync>
      crateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncHandleSomeStaticStreamSinkTwinRustAsync(
          {required int key, required int max});

  Stream<int>
      crateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncHandleSomeStreamSinkAt1TwinRustAsync(
          {required ConcatenateWithTwinRustAsync that});

  Stream<Log2TwinRustAsync>
      crateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncHandleSomeStreamSinkTwinRustAsync(
          {required ConcatenateWithTwinRustAsync that,
          required int key,
          required int max});

  Future<ConcatenateWithTwinRustAsync>
      crateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncNewTwinRustAsync(
          {required String a});

  Future<String>
      crateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncSimpleGetterTwinRustAsync(
          {required ConcatenateWithTwinRustAsync that});

  String
      crateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncConcatenateStaticTwinSync(
          {required String a, required String b});

  String
      crateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncConcatenateTwinSync(
          {required ConcatenateWithTwinSync that, required String b});

  Stream<int>
      crateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncHandleSomeStaticStreamSinkSingleArgTwinSync();

  Stream<Log2TwinSync>
      crateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncHandleSomeStaticStreamSinkTwinSync(
          {required int key, required int max});

  Stream<int>
      crateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncHandleSomeStreamSinkAt1TwinSync(
          {required ConcatenateWithTwinSync that});

  Stream<Log2TwinSync>
      crateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncHandleSomeStreamSinkTwinSync(
          {required ConcatenateWithTwinSync that,
          required int key,
          required int max});

  ConcatenateWithTwinSync
      crateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncNewTwinSync(
          {required String a});

  String
      crateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncSimpleGetterTwinSync(
          {required ConcatenateWithTwinSync that});

  Future<ConstructorTranslatableStructTwinNormal>
      crateApiConstructorConstructorTranslatableStructTwinNormalNew();

  ConstructorTranslatableSyncStructTwinNormal
      crateApiConstructorConstructorTranslatableSyncStructTwinNormalNew();

  Future<EnumOpaqueTwinNormalArray5>
      crateApiRustOpaqueCreateArrayOpaqueEnumTwinNormal();

  Future<EnumOpaqueTwinRustAsyncArray5>
      crateApiPseudoManualRustOpaqueTwinRustAsyncCreateArrayOpaqueEnumTwinRustAsync();

  EnumOpaqueTwinSyncArray5
      crateApiPseudoManualRustOpaqueTwinSyncCreateArrayOpaqueEnumTwinSync();

  Future<EnumDartOpaqueTwinNormal>
      crateApiDartOpaqueCreateEnumDartOpaqueTwinNormal(
          {required Object opaque});

  Future<EnumDartOpaqueTwinRustAsync>
      crateApiPseudoManualDartOpaqueTwinRustAsyncCreateEnumDartOpaqueTwinRustAsync(
          {required Object opaque});

  EnumDartOpaqueTwinSync
      crateApiPseudoManualDartOpaqueTwinSyncCreateEnumDartOpaqueTwinSync(
          {required Object opaque});

  void crateApiEventListenerCreateEventSyncTwinNormal(
      {required String address, required String payload});

  Future<void> crateApiEventListenerCreateEventTwinNormal(
      {required String address, required String payload});

  Future<void>
      crateApiPseudoManualEventListenerTwinRustAsyncCreateEventTwinRustAsync(
          {required String address, required String payload});

  Future<DartOpaqueNestedTwinNormal>
      crateApiDartOpaqueCreateNestedDartOpaqueTwinNormal(
          {required Object opaque1, required Object opaque2});

  Future<DartOpaqueNestedTwinRustAsync>
      crateApiPseudoManualDartOpaqueTwinRustAsyncCreateNestedDartOpaqueTwinRustAsync(
          {required Object opaque1, required Object opaque2});

  DartOpaqueNestedTwinSync
      crateApiPseudoManualDartOpaqueTwinSyncCreateNestedDartOpaqueTwinSync(
          {required Object opaque1, required Object opaque2});

  Future<OpaqueNestedTwinNormal>
      crateApiRustOpaqueCreateNestedOpaqueTwinNormal();

  Future<OpaqueNestedTwinRustAsync>
      crateApiPseudoManualRustOpaqueTwinRustAsyncCreateNestedOpaqueTwinRustAsync();

  OpaqueNestedTwinSync
      crateApiPseudoManualRustOpaqueTwinSyncCreateNestedOpaqueTwinSync();

  Future<HideDataTwinNormal> crateApiRustOpaqueCreateOpaqueTwinNormal();

  Future<HideDataTwinRustAsync>
      crateApiPseudoManualRustOpaqueTwinRustAsyncCreateOpaqueTwinRustAsync();

  HideDataTwinSync crateApiPseudoManualRustOpaqueTwinSyncCreateOpaqueTwinSync();

  Future<HideDataTwinNormal?> crateApiRustOpaqueCreateOptionOpaqueTwinNormal(
      {HideDataTwinNormal? opaque});

  Future<HideDataTwinRustAsync?>
      crateApiPseudoManualRustOpaqueTwinRustAsyncCreateOptionOpaqueTwinRustAsync(
          {HideDataTwinRustAsync? opaque});

  HideDataTwinSync?
      crateApiPseudoManualRustOpaqueTwinSyncCreateOptionOpaqueTwinSync(
          {HideDataTwinSync? opaque});

  Future<void> crateApiExceptionCustomEnumErrorPanicTwinNormal();

  Future<void>
      crateApiPseudoManualExceptionTwinRustAsyncCustomEnumErrorPanicTwinRustAsync();

  void crateApiPseudoManualExceptionTwinSyncCustomEnumErrorPanicTwinSync();

  Future<int> crateApiExceptionCustomEnumErrorReturnErrorTwinNormal();

  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncCustomEnumErrorReturnErrorTwinRustAsync();

  int crateApiPseudoManualExceptionTwinSyncCustomEnumErrorReturnErrorTwinSync();

  Future<int> crateApiExceptionCustomEnumErrorReturnOkTwinNormal(
      {required int arg});

  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncCustomEnumErrorReturnOkTwinRustAsync(
          {required int arg});

  int crateApiPseudoManualExceptionTwinSyncCustomEnumErrorReturnOkTwinSync(
      {required int arg});

  Future<void> crateApiExceptionCustomNestedErrorReturnErrorTwinNormal(
      {required CustomNestedErrorOuterTwinNormal arg});

  Future<void>
      crateApiPseudoManualExceptionTwinRustAsyncCustomNestedErrorReturnErrorTwinRustAsync(
          {required CustomNestedErrorOuterTwinRustAsync arg});

  void
      crateApiPseudoManualExceptionTwinSyncCustomNestedErrorReturnErrorTwinSync(
          {required CustomNestedErrorOuterTwinSync arg});

  Future<void> crateApiExceptionCustomStructErrorReturnErrorTwinNormal(
      {required CustomStructErrorTwinNormal arg});

  Future<void>
      crateApiPseudoManualExceptionTwinRustAsyncCustomStructErrorReturnErrorTwinRustAsync(
          {required CustomStructErrorTwinRustAsync arg});

  void
      crateApiPseudoManualExceptionTwinSyncCustomStructErrorReturnErrorTwinSync(
          {required CustomStructErrorTwinSync arg});

  Future<CustomStructTwinNormal>
      crateApiExceptionCustomStructTwinNormalNewTwinNormal(
          {required String message});

  Future<void>
      crateApiExceptionCustomStructTwinNormalNonstaticReturnCustomStructErrorTwinNormal(
          {required CustomStructTwinNormal that});

  Future<int>
      crateApiExceptionCustomStructTwinNormalNonstaticReturnCustomStructOkTwinNormal(
          {required CustomStructTwinNormal that});

  Future<void>
      crateApiExceptionCustomStructTwinNormalStaticReturnCustomStructErrorTwinNormal();

  Future<int>
      crateApiExceptionCustomStructTwinNormalStaticReturnCustomStructOkTwinNormal();

  Future<CustomStructTwinRustAsync>
      crateApiPseudoManualExceptionTwinRustAsyncCustomStructTwinRustAsyncNewTwinRustAsync(
          {required String message});

  Future<void>
      crateApiPseudoManualExceptionTwinRustAsyncCustomStructTwinRustAsyncNonstaticReturnCustomStructErrorTwinRustAsync(
          {required CustomStructTwinRustAsync that});

  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncCustomStructTwinRustAsyncNonstaticReturnCustomStructOkTwinRustAsync(
          {required CustomStructTwinRustAsync that});

  Future<void>
      crateApiPseudoManualExceptionTwinRustAsyncCustomStructTwinRustAsyncStaticReturnCustomStructErrorTwinRustAsync();

  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncCustomStructTwinRustAsyncStaticReturnCustomStructOkTwinRustAsync();

  CustomStructTwinSync
      crateApiPseudoManualExceptionTwinSyncCustomStructTwinSyncNewTwinSync(
          {required String message});

  void
      crateApiPseudoManualExceptionTwinSyncCustomStructTwinSyncNonstaticReturnCustomStructErrorTwinSync(
          {required CustomStructTwinSync that});

  int crateApiPseudoManualExceptionTwinSyncCustomStructTwinSyncNonstaticReturnCustomStructOkTwinSync(
      {required CustomStructTwinSync that});

  void
      crateApiPseudoManualExceptionTwinSyncCustomStructTwinSyncStaticReturnCustomStructErrorTwinSync();

  int crateApiPseudoManualExceptionTwinSyncCustomStructTwinSyncStaticReturnCustomStructOkTwinSync();

  Future<DateTime> crateApiChronoTypeDatetimeLocalTwinNormal(
      {required DateTime d});

  Future<DateTime>
      crateApiPseudoManualChronoTypeTwinRustAsyncDatetimeLocalTwinRustAsync(
          {required DateTime d});

  DateTime crateApiPseudoManualChronoTypeTwinSyncDatetimeLocalTwinSync(
      {required DateTime d});

  Future<DateTime> crateApiChronoTypeDatetimeUtcTwinNormal(
      {required DateTime d});

  Future<DateTime>
      crateApiPseudoManualChronoTypeTwinRustAsyncDatetimeUtcTwinRustAsync(
          {required DateTime d});

  DateTime crateApiPseudoManualChronoTypeTwinSyncDatetimeUtcTwinSync(
      {required DateTime d});

  Future<void> crateApiDartOpaqueDropStaticDartOpaqueTwinNormal(
      {required int id});

  Future<void>
      crateApiPseudoManualDartOpaqueTwinRustAsyncDropStaticDartOpaqueTwinRustAsync(
          {required int id});

  void crateApiPseudoManualDartOpaqueTwinSyncDropStaticDartOpaqueTwinSync(
      {required int id});

  Future<Duration> crateApiChronoTypeDurationTwinNormal({required Duration d});

  Future<Duration>
      crateApiPseudoManualChronoTypeTwinRustAsyncDurationTwinRustAsync(
          {required Duration d});

  Duration crateApiPseudoManualChronoTypeTwinSyncDurationTwinSync(
      {required Duration d});

  Future<ElementTwinNormal> crateApiOptionalElementTwinNormalDefault();

  Future<ElementTwinRustAsync>
      crateApiPseudoManualOptionalTwinRustAsyncElementTwinRustAsyncDefault();

  Future<ElementTwinSync>
      crateApiPseudoManualOptionalTwinSyncElementTwinSyncDefault();

  Future<EmptyTwinNormal> crateApiMiscTypeEmptyStructTwinNormal(
      {required EmptyTwinNormal empty});

  Future<EmptyTwinRustAsync>
      crateApiPseudoManualMiscTypeTwinRustAsyncEmptyStructTwinRustAsync(
          {required EmptyTwinRustAsync empty});

  EmptyTwinSync crateApiPseudoManualMiscTypeTwinSyncEmptyStructTwinSync(
      {required EmptyTwinSync empty});

  Future<String> crateApiEventListenerEventTwinNormalAsStringTwinNormal(
      {required EventTwinNormal that});

  Future<String>
      crateApiPseudoManualEventListenerTwinRustAsyncEventTwinRustAsyncAsStringTwinRustAsync(
          {required EventTwinRustAsync that});

  Future<List<BasicGeneralEnumTwinNormal>>
      crateApiPseudoManualBasicListExampleBasicListTypeBasicGeneralEnumTwinNormalTwinNormal(
          {required List<BasicGeneralEnumTwinNormal> arg});

  Future<List<BasicGeneralEnumTwinRustAsync>>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeBasicGeneralEnumTwinRustAsyncTwinRustAsync(
          {required List<BasicGeneralEnumTwinRustAsync> arg});

  List<BasicGeneralEnumTwinSync>
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeBasicGeneralEnumTwinSyncTwinSync(
          {required List<BasicGeneralEnumTwinSync> arg});

  Future<List<BasicPrimitiveEnumTwinNormal>>
      crateApiPseudoManualBasicListExampleBasicListTypeBasicPrimitiveEnumTwinNormalTwinNormal(
          {required List<BasicPrimitiveEnumTwinNormal> arg});

  Future<List<BasicPrimitiveEnumTwinRustAsync>>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsync(
          {required List<BasicPrimitiveEnumTwinRustAsync> arg});

  List<BasicPrimitiveEnumTwinSync>
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeBasicPrimitiveEnumTwinSyncTwinSync(
          {required List<BasicPrimitiveEnumTwinSync> arg});

  Future<List<BasicStructTwinNormal>>
      crateApiPseudoManualBasicListExampleBasicListTypeBasicStructTwinNormalTwinNormal(
          {required List<BasicStructTwinNormal> arg});

  Future<List<BasicStructTwinRustAsync>>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeBasicStructTwinRustAsyncTwinRustAsync(
          {required List<BasicStructTwinRustAsync> arg});

  List<BasicStructTwinSync>
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeBasicStructTwinSyncTwinSync(
          {required List<BasicStructTwinSync> arg});

  Future<List<bool>>
      crateApiPseudoManualBasicListExampleBasicListTypeBoolTwinNormal(
          {required List<bool> arg});

  Future<List<bool>>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeBoolTwinRustAsync(
          {required List<bool> arg});

  List<bool>
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeBoolTwinSync(
          {required List<bool> arg});

  Future<List<Uint8List>>
      crateApiPseudoManualBasicListExampleBasicListTypeBytesTwinNormal(
          {required List<Uint8List> arg});

  Future<List<Uint8List>>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeBytesTwinRustAsync(
          {required List<Uint8List> arg});

  List<Uint8List>
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeBytesTwinSync(
          {required List<Uint8List> arg});

  Future<Float32List>
      crateApiPseudoManualBasicListExampleBasicListTypeF32TwinNormal(
          {required List<double> arg});

  Future<Float32List>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeF32TwinRustAsync(
          {required List<double> arg});

  Float32List
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeF32TwinSync(
          {required List<double> arg});

  Future<Float64List>
      crateApiPseudoManualBasicListExampleBasicListTypeF64TwinNormal(
          {required List<double> arg});

  Future<Float64List>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeF64TwinRustAsync(
          {required List<double> arg});

  Float64List
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeF64TwinSync(
          {required List<double> arg});

  Future<Int16List>
      crateApiPseudoManualBasicListExampleBasicListTypeI16TwinNormal(
          {required List<int> arg});

  Future<Int16List>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeI16TwinRustAsync(
          {required List<int> arg});

  Int16List
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeI16TwinSync(
          {required List<int> arg});

  Future<Int32List>
      crateApiPseudoManualBasicListExampleBasicListTypeI32TwinNormal(
          {required List<int> arg});

  Future<Int32List>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeI32TwinRustAsync(
          {required List<int> arg});

  Int32List
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeI32TwinSync(
          {required List<int> arg});

  Future<Int64List>
      crateApiPseudoManualBasicListExampleBasicListTypeI64TwinNormal(
          {required Int64List arg});

  Future<Int64List>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeI64TwinRustAsync(
          {required Int64List arg});

  Int64List
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeI64TwinSync(
          {required Int64List arg});

  Future<Int8List>
      crateApiPseudoManualBasicListExampleBasicListTypeI8TwinNormal(
          {required List<int> arg});

  Future<Int8List>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeI8TwinRustAsync(
          {required List<int> arg});

  Int8List crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeI8TwinSync(
      {required List<int> arg});

  Future<List<String>>
      crateApiPseudoManualBasicListExampleBasicListTypeStringTwinNormal(
          {required List<String> arg});

  Future<List<String>>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeStringTwinRustAsync(
          {required List<String> arg});

  List<String>
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeStringTwinSync(
          {required List<String> arg});

  Future<Uint16List>
      crateApiPseudoManualBasicListExampleBasicListTypeU16TwinNormal(
          {required List<int> arg});

  Future<Uint16List>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeU16TwinRustAsync(
          {required List<int> arg});

  Uint16List
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeU16TwinSync(
          {required List<int> arg});

  Future<Uint32List>
      crateApiPseudoManualBasicListExampleBasicListTypeU32TwinNormal(
          {required List<int> arg});

  Future<Uint32List>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeU32TwinRustAsync(
          {required List<int> arg});

  Uint32List
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeU32TwinSync(
          {required List<int> arg});

  Future<Uint64List>
      crateApiPseudoManualBasicListExampleBasicListTypeU64TwinNormal(
          {required Uint64List arg});

  Future<Uint64List>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeU64TwinRustAsync(
          {required Uint64List arg});

  Uint64List
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeU64TwinSync(
          {required Uint64List arg});

  Future<Uint8List>
      crateApiPseudoManualBasicListExampleBasicListTypeU8TwinNormal(
          {required List<int> arg});

  Future<Uint8List>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeU8TwinRustAsync(
          {required List<int> arg});

  Uint8List crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeU8TwinSync(
      {required List<int> arg});

  Future<Map<int, BasicGeneralEnumTwinNormal>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeBasicGeneralEnumTwinNormalTwinNormal(
          {required Map<int, BasicGeneralEnumTwinNormal> arg});

  Future<Map<int, BasicGeneralEnumTwinRustAsync>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeBasicGeneralEnumTwinRustAsyncTwinRustAsync(
          {required Map<int, BasicGeneralEnumTwinRustAsync> arg});

  Map<int, BasicGeneralEnumTwinSync>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeBasicGeneralEnumTwinSyncTwinSync(
          {required Map<int, BasicGeneralEnumTwinSync> arg});

  Future<Map<int, BasicPrimitiveEnumTwinNormal>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeBasicPrimitiveEnumTwinNormalTwinNormal(
          {required Map<int, BasicPrimitiveEnumTwinNormal> arg});

  Future<Map<int, BasicPrimitiveEnumTwinRustAsync>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsync(
          {required Map<int, BasicPrimitiveEnumTwinRustAsync> arg});

  Map<int, BasicPrimitiveEnumTwinSync>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeBasicPrimitiveEnumTwinSyncTwinSync(
          {required Map<int, BasicPrimitiveEnumTwinSync> arg});

  Future<Map<int, BasicStructTwinNormal>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeBasicStructTwinNormalTwinNormal(
          {required Map<int, BasicStructTwinNormal> arg});

  Future<Map<int, BasicStructTwinRustAsync>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeBasicStructTwinRustAsyncTwinRustAsync(
          {required Map<int, BasicStructTwinRustAsync> arg});

  Map<int, BasicStructTwinSync>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeBasicStructTwinSyncTwinSync(
          {required Map<int, BasicStructTwinSync> arg});

  Future<Map<int, bool>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeBoolTwinNormal(
          {required Map<int, bool> arg});

  Future<Map<int, bool>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeBoolTwinRustAsync(
          {required Map<int, bool> arg});

  Map<int, bool>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeBoolTwinSync(
          {required Map<int, bool> arg});

  Future<Map<int, Uint8List>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeBytesTwinNormal(
          {required Map<int, Uint8List> arg});

  Future<Map<int, Uint8List>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeBytesTwinRustAsync(
          {required Map<int, Uint8List> arg});

  Map<int, Uint8List>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeBytesTwinSync(
          {required Map<int, Uint8List> arg});

  Future<Map<int, double>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeF32TwinNormal(
          {required Map<int, double> arg});

  Future<Map<int, double>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeF32TwinRustAsync(
          {required Map<int, double> arg});

  Map<int, double>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeF32TwinSync(
          {required Map<int, double> arg});

  Future<Map<int, double>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeF64TwinNormal(
          {required Map<int, double> arg});

  Future<Map<int, double>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeF64TwinRustAsync(
          {required Map<int, double> arg});

  Map<int, double>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeF64TwinSync(
          {required Map<int, double> arg});

  Future<Map<int, BigInt>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeI128TwinNormal(
          {required Map<int, BigInt> arg});

  Future<Map<int, BigInt>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeI128TwinRustAsync(
          {required Map<int, BigInt> arg});

  Map<int, BigInt>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeI128TwinSync(
          {required Map<int, BigInt> arg});

  Future<Map<int, int>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeI16TwinNormal(
          {required Map<int, int> arg});

  Future<Map<int, int>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeI16TwinRustAsync(
          {required Map<int, int> arg});

  Map<int, int>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeI16TwinSync(
          {required Map<int, int> arg});

  Future<Map<int, int>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeI32TwinNormal(
          {required Map<int, int> arg});

  Future<Map<int, int>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeI32TwinRustAsync(
          {required Map<int, int> arg});

  Map<int, int>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeI32TwinSync(
          {required Map<int, int> arg});

  Future<Map<int, PlatformInt64>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeI64TwinNormal(
          {required Map<int, PlatformInt64> arg});

  Future<Map<int, PlatformInt64>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeI64TwinRustAsync(
          {required Map<int, PlatformInt64> arg});

  Map<int, PlatformInt64>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeI64TwinSync(
          {required Map<int, PlatformInt64> arg});

  Future<Map<int, int>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeI8TwinNormal(
          {required Map<int, int> arg});

  Future<Map<int, int>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeI8TwinRustAsync(
          {required Map<int, int> arg});

  Map<int, int>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeI8TwinSync(
          {required Map<int, int> arg});

  Future<Map<int, PlatformInt64>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeIsizeTwinNormal(
          {required Map<int, PlatformInt64> arg});

  Future<Map<int, PlatformInt64>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeIsizeTwinRustAsync(
          {required Map<int, PlatformInt64> arg});

  Map<int, PlatformInt64>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeIsizeTwinSync(
          {required Map<int, PlatformInt64> arg});

  Future<Map<int, String>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeStringTwinNormal(
          {required Map<int, String> arg});

  Future<Map<int, String>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeStringTwinRustAsync(
          {required Map<int, String> arg});

  Map<int, String>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeStringTwinSync(
          {required Map<int, String> arg});

  Future<Map<int, BigInt>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeU128TwinNormal(
          {required Map<int, BigInt> arg});

  Future<Map<int, BigInt>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeU128TwinRustAsync(
          {required Map<int, BigInt> arg});

  Map<int, BigInt>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeU128TwinSync(
          {required Map<int, BigInt> arg});

  Future<Map<int, int>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeU16TwinNormal(
          {required Map<int, int> arg});

  Future<Map<int, int>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeU16TwinRustAsync(
          {required Map<int, int> arg});

  Map<int, int>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeU16TwinSync(
          {required Map<int, int> arg});

  Future<Map<int, int>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeU32TwinNormal(
          {required Map<int, int> arg});

  Future<Map<int, int>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeU32TwinRustAsync(
          {required Map<int, int> arg});

  Map<int, int>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeU32TwinSync(
          {required Map<int, int> arg});

  Future<Map<int, BigInt>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeU64TwinNormal(
          {required Map<int, BigInt> arg});

  Future<Map<int, BigInt>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeU64TwinRustAsync(
          {required Map<int, BigInt> arg});

  Map<int, BigInt>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeU64TwinSync(
          {required Map<int, BigInt> arg});

  Future<Map<int, int>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeU8TwinNormal(
          {required Map<int, int> arg});

  Future<Map<int, int>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeU8TwinRustAsync(
          {required Map<int, int> arg});

  Map<int, int>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeU8TwinSync(
          {required Map<int, int> arg});

  Future<Map<int, BigInt>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeUsizeTwinNormal(
          {required Map<int, BigInt> arg});

  Future<Map<int, BigInt>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeUsizeTwinRustAsync(
          {required Map<int, BigInt> arg});

  Map<int, BigInt>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeUsizeTwinSync(
          {required Map<int, BigInt> arg});

  Future<BasicGeneralEnumTwinNormal?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeBasicGeneralEnumTwinNormalTwinNormal(
          {BasicGeneralEnumTwinNormal? arg});

  Future<BasicGeneralEnumTwinRustAsync?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeBasicGeneralEnumTwinRustAsyncTwinRustAsync(
          {BasicGeneralEnumTwinRustAsync? arg});

  BasicGeneralEnumTwinSync?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeBasicGeneralEnumTwinSyncTwinSync(
          {BasicGeneralEnumTwinSync? arg});

  Future<BasicPrimitiveEnumTwinNormal?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeBasicPrimitiveEnumTwinNormalTwinNormal(
          {BasicPrimitiveEnumTwinNormal? arg});

  Future<BasicPrimitiveEnumTwinRustAsync?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsync(
          {BasicPrimitiveEnumTwinRustAsync? arg});

  BasicPrimitiveEnumTwinSync?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeBasicPrimitiveEnumTwinSyncTwinSync(
          {BasicPrimitiveEnumTwinSync? arg});

  Future<BasicStructTwinNormal?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeBasicStructTwinNormalTwinNormal(
          {BasicStructTwinNormal? arg});

  Future<BasicStructTwinRustAsync?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeBasicStructTwinRustAsyncTwinRustAsync(
          {BasicStructTwinRustAsync? arg});

  BasicStructTwinSync?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeBasicStructTwinSyncTwinSync(
          {BasicStructTwinSync? arg});

  Future<bool?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeBoolTwinNormal(
          {bool? arg});

  Future<bool?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeBoolTwinRustAsync(
          {bool? arg});

  bool?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeBoolTwinSync(
          {bool? arg});

  Future<Uint8List?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeBytesTwinNormal(
          {Uint8List? arg});

  Future<Uint8List?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeBytesTwinRustAsync(
          {Uint8List? arg});

  Uint8List?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeBytesTwinSync(
          {Uint8List? arg});

  Future<double?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeF32TwinNormal(
          {double? arg});

  Future<double?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeF32TwinRustAsync(
          {double? arg});

  double?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeF32TwinSync(
          {double? arg});

  Future<double?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeF64TwinNormal(
          {double? arg});

  Future<double?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeF64TwinRustAsync(
          {double? arg});

  double?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeF64TwinSync(
          {double? arg});

  Future<BigInt?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeI128TwinNormal(
          {BigInt? arg});

  Future<BigInt?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeI128TwinRustAsync(
          {BigInt? arg});

  BigInt?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeI128TwinSync(
          {BigInt? arg});

  Future<int?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeI16TwinNormal(
          {int? arg});

  Future<int?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeI16TwinRustAsync(
          {int? arg});

  int?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeI16TwinSync(
          {int? arg});

  Future<int?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeI32TwinNormal(
          {int? arg});

  Future<int?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeI32TwinRustAsync(
          {int? arg});

  int?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeI32TwinSync(
          {int? arg});

  Future<PlatformInt64?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeI64TwinNormal(
          {PlatformInt64? arg});

  Future<PlatformInt64?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeI64TwinRustAsync(
          {PlatformInt64? arg});

  PlatformInt64?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeI64TwinSync(
          {PlatformInt64? arg});

  Future<int?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeI8TwinNormal(
          {int? arg});

  Future<int?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeI8TwinRustAsync(
          {int? arg});

  int?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeI8TwinSync(
          {int? arg});

  Future<PlatformInt64?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeIsizeTwinNormal(
          {PlatformInt64? arg});

  Future<PlatformInt64?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeIsizeTwinRustAsync(
          {PlatformInt64? arg});

  PlatformInt64?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeIsizeTwinSync(
          {PlatformInt64? arg});

  Future<String?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeStringTwinNormal(
          {String? arg});

  Future<String?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeStringTwinRustAsync(
          {String? arg});

  String?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeStringTwinSync(
          {String? arg});

  Future<BigInt?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeU128TwinNormal(
          {BigInt? arg});

  Future<BigInt?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeU128TwinRustAsync(
          {BigInt? arg});

  BigInt?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeU128TwinSync(
          {BigInt? arg});

  Future<int?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeU16TwinNormal(
          {int? arg});

  Future<int?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeU16TwinRustAsync(
          {int? arg});

  int?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeU16TwinSync(
          {int? arg});

  Future<int?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeU32TwinNormal(
          {int? arg});

  Future<int?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeU32TwinRustAsync(
          {int? arg});

  int?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeU32TwinSync(
          {int? arg});

  Future<BigInt?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeU64TwinNormal(
          {BigInt? arg});

  Future<BigInt?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeU64TwinRustAsync(
          {BigInt? arg});

  BigInt?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeU64TwinSync(
          {BigInt? arg});

  Future<int?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeU8TwinNormal(
          {int? arg});

  Future<int?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeU8TwinRustAsync(
          {int? arg});

  int?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeU8TwinSync(
          {int? arg});

  Future<BigInt?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeUsizeTwinNormal(
          {BigInt? arg});

  Future<BigInt?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeUsizeTwinRustAsync(
          {BigInt? arg});

  BigInt?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeUsizeTwinSync(
          {BigInt? arg});

  Future<BasicGeneralEnumTwinNormal>
      crateApiPseudoManualBasicExampleBasicTypeBasicGeneralEnumTwinNormalTwinNormal(
          {required BasicGeneralEnumTwinNormal arg});

  Future<BasicGeneralEnumTwinRustAsync>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeBasicGeneralEnumTwinRustAsyncTwinRustAsync(
          {required BasicGeneralEnumTwinRustAsync arg});

  BasicGeneralEnumTwinSync
      crateApiPseudoManualBasicTwinSyncExampleBasicTypeBasicGeneralEnumTwinSyncTwinSync(
          {required BasicGeneralEnumTwinSync arg});

  Future<BasicPrimitiveEnumTwinNormal>
      crateApiPseudoManualBasicExampleBasicTypeBasicPrimitiveEnumTwinNormalTwinNormal(
          {required BasicPrimitiveEnumTwinNormal arg});

  Future<BasicPrimitiveEnumTwinRustAsync>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsync(
          {required BasicPrimitiveEnumTwinRustAsync arg});

  BasicPrimitiveEnumTwinSync
      crateApiPseudoManualBasicTwinSyncExampleBasicTypeBasicPrimitiveEnumTwinSyncTwinSync(
          {required BasicPrimitiveEnumTwinSync arg});

  Future<BasicStructTwinNormal>
      crateApiPseudoManualBasicExampleBasicTypeBasicStructTwinNormalTwinNormal(
          {required BasicStructTwinNormal arg});

  Future<BasicStructTwinRustAsync>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeBasicStructTwinRustAsyncTwinRustAsync(
          {required BasicStructTwinRustAsync arg});

  BasicStructTwinSync
      crateApiPseudoManualBasicTwinSyncExampleBasicTypeBasicStructTwinSyncTwinSync(
          {required BasicStructTwinSync arg});

  Future<bool> crateApiPseudoManualBasicExampleBasicTypeBoolTwinNormal(
      {required bool arg});

  Future<bool>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeBoolTwinRustAsync(
          {required bool arg});

  bool crateApiPseudoManualBasicTwinSyncExampleBasicTypeBoolTwinSync(
      {required bool arg});

  Future<Uint8List> crateApiPseudoManualBasicExampleBasicTypeBytesTwinNormal(
      {required List<int> arg});

  Future<Uint8List>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeBytesTwinRustAsync(
          {required List<int> arg});

  Uint8List crateApiPseudoManualBasicTwinSyncExampleBasicTypeBytesTwinSync(
      {required List<int> arg});

  Future<double> crateApiPseudoManualBasicExampleBasicTypeF32TwinNormal(
      {required double arg});

  Future<double>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeF32TwinRustAsync(
          {required double arg});

  double crateApiPseudoManualBasicTwinSyncExampleBasicTypeF32TwinSync(
      {required double arg});

  Future<double> crateApiPseudoManualBasicExampleBasicTypeF64TwinNormal(
      {required double arg});

  Future<double>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeF64TwinRustAsync(
          {required double arg});

  double crateApiPseudoManualBasicTwinSyncExampleBasicTypeF64TwinSync(
      {required double arg});

  Future<BigInt> crateApiPseudoManualBasicExampleBasicTypeI128TwinNormal(
      {required BigInt arg, required String expect});

  Future<BigInt>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeI128TwinRustAsync(
          {required BigInt arg, required String expect});

  BigInt crateApiPseudoManualBasicTwinSyncExampleBasicTypeI128TwinSync(
      {required BigInt arg, required String expect});

  Future<int> crateApiPseudoManualBasicExampleBasicTypeI16TwinNormal(
      {required int arg, required String expect});

  Future<int>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeI16TwinRustAsync(
          {required int arg, required String expect});

  int crateApiPseudoManualBasicTwinSyncExampleBasicTypeI16TwinSync(
      {required int arg, required String expect});

  Future<int> crateApiPseudoManualBasicExampleBasicTypeI32TwinNormal(
      {required int arg, required String expect});

  Future<int>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeI32TwinRustAsync(
          {required int arg, required String expect});

  int crateApiPseudoManualBasicTwinSyncExampleBasicTypeI32TwinSync(
      {required int arg, required String expect});

  Future<PlatformInt64> crateApiPseudoManualBasicExampleBasicTypeI64TwinNormal(
      {required PlatformInt64 arg, required String expect});

  Future<PlatformInt64>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeI64TwinRustAsync(
          {required PlatformInt64 arg, required String expect});

  PlatformInt64 crateApiPseudoManualBasicTwinSyncExampleBasicTypeI64TwinSync(
      {required PlatformInt64 arg, required String expect});

  Future<int> crateApiPseudoManualBasicExampleBasicTypeI8TwinNormal(
      {required int arg, required String expect});

  Future<int>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeI8TwinRustAsync(
          {required int arg, required String expect});

  int crateApiPseudoManualBasicTwinSyncExampleBasicTypeI8TwinSync(
      {required int arg, required String expect});

  Future<PlatformInt64>
      crateApiPseudoManualBasicExampleBasicTypeIsizeTwinNormal(
          {required PlatformInt64 arg, required String expect});

  Future<PlatformInt64>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeIsizeTwinRustAsync(
          {required PlatformInt64 arg, required String expect});

  PlatformInt64 crateApiPseudoManualBasicTwinSyncExampleBasicTypeIsizeTwinSync(
      {required PlatformInt64 arg, required String expect});

  Future<String> crateApiPseudoManualBasicExampleBasicTypeStringTwinNormal(
      {required String arg});

  Future<String>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeStringTwinRustAsync(
          {required String arg});

  String crateApiPseudoManualBasicTwinSyncExampleBasicTypeStringTwinSync(
      {required String arg});

  Future<BigInt> crateApiPseudoManualBasicExampleBasicTypeU128TwinNormal(
      {required BigInt arg, required String expect});

  Future<BigInt>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeU128TwinRustAsync(
          {required BigInt arg, required String expect});

  BigInt crateApiPseudoManualBasicTwinSyncExampleBasicTypeU128TwinSync(
      {required BigInt arg, required String expect});

  Future<int> crateApiPseudoManualBasicExampleBasicTypeU16TwinNormal(
      {required int arg, required String expect});

  Future<int>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeU16TwinRustAsync(
          {required int arg, required String expect});

  int crateApiPseudoManualBasicTwinSyncExampleBasicTypeU16TwinSync(
      {required int arg, required String expect});

  Future<int> crateApiPseudoManualBasicExampleBasicTypeU32TwinNormal(
      {required int arg, required String expect});

  Future<int>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeU32TwinRustAsync(
          {required int arg, required String expect});

  int crateApiPseudoManualBasicTwinSyncExampleBasicTypeU32TwinSync(
      {required int arg, required String expect});

  Future<BigInt> crateApiPseudoManualBasicExampleBasicTypeU64TwinNormal(
      {required BigInt arg, required String expect});

  Future<BigInt>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeU64TwinRustAsync(
          {required BigInt arg, required String expect});

  BigInt crateApiPseudoManualBasicTwinSyncExampleBasicTypeU64TwinSync(
      {required BigInt arg, required String expect});

  Future<int> crateApiPseudoManualBasicExampleBasicTypeU8TwinNormal(
      {required int arg, required String expect});

  Future<int>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeU8TwinRustAsync(
          {required int arg, required String expect});

  int crateApiPseudoManualBasicTwinSyncExampleBasicTypeU8TwinSync(
      {required int arg, required String expect});

  Future<BigInt> crateApiPseudoManualBasicExampleBasicTypeUsizeTwinNormal(
      {required BigInt arg, required String expect});

  Future<BigInt>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeUsizeTwinRustAsync(
          {required BigInt arg, required String expect});

  BigInt crateApiPseudoManualBasicTwinSyncExampleBasicTypeUsizeTwinSync(
      {required BigInt arg, required String expect});

  Future<String> crateApiMiscNoTwinExampleAFeatureGatedFunction();

  Future<int?> crateApiMirrorFirstNumberTwinNormal({required Numbers nums});

  Future<int?> crateApiPseudoManualMirrorTwinRustAsyncFirstNumberTwinRustAsync(
      {required Numbers nums});

  int? crateApiPseudoManualMirrorTwinSyncFirstNumberTwinSync(
      {required Numbers nums});

  Future<int?> crateApiMirrorFirstSequenceTwinNormal({required Sequences seqs});

  Future<int?>
      crateApiPseudoManualMirrorTwinRustAsyncFirstSequenceTwinRustAsync(
          {required Sequences seqs});

  int? crateApiPseudoManualMirrorTwinSyncFirstSequenceTwinSync(
      {required Sequences seqs});

  Future<void> crateApiMiscNoTwinExampleAFor({required String type});

  Future<FrbOpaqueReturnTwinNormal>
      crateApiRustOpaqueFrbGeneratorTestTwinNormal();

  Future<FrbOpaqueReturnTwinRustAsync>
      crateApiPseudoManualRustOpaqueTwinRustAsyncFrbGeneratorTestTwinRustAsync();

  FrbOpaqueReturnTwinSync
      crateApiPseudoManualRustOpaqueTwinSyncFrbGeneratorTestTwinSync();

  FrbOpaqueSyncReturnTwinNormal
      crateApiRustOpaqueSyncFrbSyncGeneratorTestTwinNormal();

  Future<int> crateApiDynTraitFuncArgDynTraitTwinNormal(
      {required SimpleTraitForDynTwinNormal arg});

  Future<int> crateApiAsyncMiscFuncAsyncSimpleAddTwinNormal(
      {required int a, required int b});

  Future<void> crateApiAsyncMiscFuncAsyncVoidTwinNormal();

  Future<EnumSimpleTwinNormal> crateApiEnumerationFuncEnumSimpleTwinNormal(
      {required EnumSimpleTwinNormal arg});

  Future<EnumSimpleTwinRustAsync>
      crateApiPseudoManualEnumerationTwinRustAsyncFuncEnumSimpleTwinRustAsync(
          {required EnumSimpleTwinRustAsync arg});

  EnumSimpleTwinSync
      crateApiPseudoManualEnumerationTwinSyncFuncEnumSimpleTwinSync(
          {required EnumSimpleTwinSync arg});

  Future<EnumWithDiscriminantTwinNormal>
      crateApiEnumerationFuncEnumWithDiscriminantTwinNormal(
          {required EnumWithDiscriminantTwinNormal arg});

  Future<EnumWithDiscriminantTwinRustAsync>
      crateApiPseudoManualEnumerationTwinRustAsyncFuncEnumWithDiscriminantTwinRustAsync(
          {required EnumWithDiscriminantTwinRustAsync arg});

  EnumWithDiscriminantTwinSync
      crateApiPseudoManualEnumerationTwinSyncFuncEnumWithDiscriminantTwinSync(
          {required EnumWithDiscriminantTwinSync arg});

  Future<EnumWithItemMixedTwinNormal>
      crateApiEnumerationFuncEnumWithItemMixedTwinNormal(
          {required EnumWithItemMixedTwinNormal arg});

  Future<EnumWithItemMixedTwinRustAsync>
      crateApiPseudoManualEnumerationTwinRustAsyncFuncEnumWithItemMixedTwinRustAsync(
          {required EnumWithItemMixedTwinRustAsync arg});

  EnumWithItemMixedTwinSync
      crateApiPseudoManualEnumerationTwinSyncFuncEnumWithItemMixedTwinSync(
          {required EnumWithItemMixedTwinSync arg});

  Future<EnumWithItemStructTwinNormal>
      crateApiEnumerationFuncEnumWithItemStructTwinNormal(
          {required EnumWithItemStructTwinNormal arg});

  Future<EnumWithItemStructTwinRustAsync>
      crateApiPseudoManualEnumerationTwinRustAsyncFuncEnumWithItemStructTwinRustAsync(
          {required EnumWithItemStructTwinRustAsync arg});

  EnumWithItemStructTwinSync
      crateApiPseudoManualEnumerationTwinSyncFuncEnumWithItemStructTwinSync(
          {required EnumWithItemStructTwinSync arg});

  Future<EnumWithItemTupleTwinNormal>
      crateApiEnumerationFuncEnumWithItemTupleTwinNormal(
          {required EnumWithItemTupleTwinNormal arg});

  Future<EnumWithItemTupleTwinRustAsync>
      crateApiPseudoManualEnumerationTwinRustAsyncFuncEnumWithItemTupleTwinRustAsync(
          {required EnumWithItemTupleTwinRustAsync arg});

  EnumWithItemTupleTwinSync
      crateApiPseudoManualEnumerationTwinSyncFuncEnumWithItemTupleTwinSync(
          {required EnumWithItemTupleTwinSync arg});

  Future<StructWithDartKeywordFieldTwinNormal>
      crateApiStructureFuncForStructWithDartKeywordFieldTwinNormal(
          {required StructWithDartKeywordFieldTwinNormal arg});

  Future<StructWithDartKeywordFieldTwinRustAsync>
      crateApiPseudoManualStructureTwinRustAsyncFuncForStructWithDartKeywordFieldTwinRustAsync(
          {required StructWithDartKeywordFieldTwinRustAsync arg});

  StructWithDartKeywordFieldTwinSync
      crateApiPseudoManualStructureTwinSyncFuncForStructWithDartKeywordFieldTwinSync(
          {required StructWithDartKeywordFieldTwinSync arg});

  Future<StructWithFieldRenameTwinNormal>
      crateApiStructureFuncForStructWithFieldRenameTwinNormal(
          {required StructWithFieldRenameTwinNormal arg});

  Future<StructWithFieldRenameTwinRustAsync>
      crateApiPseudoManualStructureTwinRustAsyncFuncForStructWithFieldRenameTwinRustAsync(
          {required StructWithFieldRenameTwinRustAsync arg});

  StructWithFieldRenameTwinSync
      crateApiPseudoManualStructureTwinSyncFuncForStructWithFieldRenameTwinSync(
          {required StructWithFieldRenameTwinSync arg});

  Future<Map<int, int>> crateApiMapAndSetFuncHashMapI32I32TwinNormal(
      {required Map<int, int> arg});

  Future<Map<int, int>>
      crateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapI32I32TwinRustAsync(
          {required Map<int, int> arg});

  Map<int, int> crateApiPseudoManualMapAndSetTwinSyncFuncHashMapI32I32TwinSync(
      {required Map<int, int> arg});

  Future<Map<String, Uint8List>>
      crateApiMapAndSetFuncHashMapStringBytesTwinNormal(
          {required Map<String, Uint8List> arg});

  Future<Map<String, Uint8List>>
      crateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapStringBytesTwinRustAsync(
          {required Map<String, Uint8List> arg});

  Map<String, Uint8List>
      crateApiPseudoManualMapAndSetTwinSyncFuncHashMapStringBytesTwinSync(
          {required Map<String, Uint8List> arg});

  Future<Map<String, KitchenSinkTwinNormal>>
      crateApiMapAndSetFuncHashMapStringComplexEnumTwinNormal(
          {required Map<String, KitchenSinkTwinNormal> arg});

  Future<Map<String, KitchenSinkTwinRustAsync>>
      crateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapStringComplexEnumTwinRustAsync(
          {required Map<String, KitchenSinkTwinRustAsync> arg});

  Map<String, KitchenSinkTwinSync>
      crateApiPseudoManualMapAndSetTwinSyncFuncHashMapStringComplexEnumTwinSync(
          {required Map<String, KitchenSinkTwinSync> arg});

  Future<Map<String, EnumSimpleTwinNormal>>
      crateApiMapAndSetFuncHashMapStringSimpleEnumTwinNormal(
          {required Map<String, EnumSimpleTwinNormal> arg});

  Future<Map<String, EnumSimpleTwinRustAsync>>
      crateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapStringSimpleEnumTwinRustAsync(
          {required Map<String, EnumSimpleTwinRustAsync> arg});

  Map<String, EnumSimpleTwinSync>
      crateApiPseudoManualMapAndSetTwinSyncFuncHashMapStringSimpleEnumTwinSync(
          {required Map<String, EnumSimpleTwinSync> arg});

  Future<Map<String, String>>
      crateApiMapAndSetFuncHashMapStringStringHasherTwinNormal(
          {required Map<String, String> arg});

  Future<Map<String, String>>
      crateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapStringStringHasherTwinRustAsync(
          {required Map<String, String> arg});

  Map<String, String>
      crateApiPseudoManualMapAndSetTwinSyncFuncHashMapStringStringHasherTwinSync(
          {required Map<String, String> arg});

  Future<Map<String, String>>
      crateApiMapAndSetFuncHashMapStringStringTwinNormal(
          {required Map<String, String> arg});

  Future<Map<String, String>>
      crateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapStringStringTwinRustAsync(
          {required Map<String, String> arg});

  Map<String, String>
      crateApiPseudoManualMapAndSetTwinSyncFuncHashMapStringStringTwinSync(
          {required Map<String, String> arg});

  Future<Map<String, MySize>>
      crateApiMapAndSetFuncHashMapStringStructTwinNormal(
          {required Map<String, MySize> arg});

  Future<Map<String, MySize>>
      crateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapStringStructTwinRustAsync(
          {required Map<String, MySize> arg});

  Map<String, MySize>
      crateApiPseudoManualMapAndSetTwinSyncFuncHashMapStringStructTwinSync(
          {required Map<String, MySize> arg});

  Future<Set<int>> crateApiMapAndSetFuncHashSetI32TwinNormal(
      {required Set<int> arg});

  Future<Set<int>>
      crateApiPseudoManualMapAndSetTwinRustAsyncFuncHashSetI32TwinRustAsync(
          {required Set<int> arg});

  Set<int> crateApiPseudoManualMapAndSetTwinSyncFuncHashSetI32TwinSync(
      {required Set<int> arg});

  Future<Set<String>> crateApiMapAndSetFuncHashSetStringHasherTwinNormal(
      {required Set<String> arg});

  Future<Set<String>>
      crateApiPseudoManualMapAndSetTwinRustAsyncFuncHashSetStringHasherTwinRustAsync(
          {required Set<String> arg});

  Set<String>
      crateApiPseudoManualMapAndSetTwinSyncFuncHashSetStringHasherTwinSync(
          {required Set<String> arg});

  Future<Set<String>> crateApiMapAndSetFuncHashSetStringTwinNormal(
      {required Set<String> arg});

  Future<Set<String>>
      crateApiPseudoManualMapAndSetTwinRustAsyncFuncHashSetStringTwinRustAsync(
          {required Set<String> arg});

  Set<String> crateApiPseudoManualMapAndSetTwinSyncFuncHashSetStringTwinSync(
      {required Set<String> arg});

  Future<MacroStruct> crateApiInsideMacroFuncMacroStructTwinNormal(
      {required MacroStruct arg});

  Future<int> crateApiExceptionFuncReturnErrorTwinNormal();

  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncFuncReturnErrorTwinRustAsync();

  int crateApiPseudoManualExceptionTwinSyncFuncReturnErrorTwinSync();

  Future<void> crateApiMiscTypeFuncReturnUnitTwinNormal();

  Future<void>
      crateApiPseudoManualMiscTypeTwinRustAsyncFuncReturnUnitTwinRustAsync();

  void crateApiPseudoManualMiscTypeTwinSyncFuncReturnUnitTwinSync();

  Stream<int> crateApiStreamFuncStreamAddValueAndErrorTwinNormal();

  Stream<int>
      crateApiPseudoManualStreamTwinRustAsyncFuncStreamAddValueAndErrorTwinRustAsync();

  Stream<String> crateApiStreamMiscFuncStreamRealisticTwinNormal(
      {required String arg});

  Future<Stream<String>> crateApiStreamFuncStreamReturnErrorTwinNormal();

  Future<Stream<String>>
      crateApiPseudoManualStreamTwinRustAsyncFuncStreamReturnErrorTwinRustAsync();

  Future<Stream<String>> crateApiStreamFuncStreamReturnPanicTwinNormal();

  Future<Stream<String>>
      crateApiPseudoManualStreamTwinRustAsyncFuncStreamReturnPanicTwinRustAsync();

  Stream<int> crateApiStreamFuncStreamSinkArgPositionTwinNormal(
      {required int a, required int b});

  Stream<int>
      crateApiPseudoManualStreamTwinRustAsyncFuncStreamSinkArgPositionTwinRustAsync(
          {required int a, required int b});

  Future<StructWithOneFieldTwinNormal>
      crateApiStructureFuncStructWithOneFieldTwinNormal(
          {required StructWithOneFieldTwinNormal arg});

  Future<StructWithOneFieldTwinRustAsync>
      crateApiPseudoManualStructureTwinRustAsyncFuncStructWithOneFieldTwinRustAsync(
          {required StructWithOneFieldTwinRustAsync arg});

  StructWithOneFieldTwinSync
      crateApiPseudoManualStructureTwinSyncFuncStructWithOneFieldTwinSync(
          {required StructWithOneFieldTwinSync arg});

  Future<StructWithTwoFieldTwinNormal>
      crateApiStructureFuncStructWithTwoFieldTwinNormal(
          {required StructWithTwoFieldTwinNormal arg});

  Future<StructWithTwoFieldTwinRustAsync>
      crateApiPseudoManualStructureTwinRustAsyncFuncStructWithTwoFieldTwinRustAsync(
          {required StructWithTwoFieldTwinRustAsync arg});

  StructWithTwoFieldTwinSync
      crateApiPseudoManualStructureTwinSyncFuncStructWithTwoFieldTwinSync(
          {required StructWithTwoFieldTwinSync arg});

  Future<StructWithZeroFieldTwinNormal>
      crateApiStructureFuncStructWithZeroFieldTwinNormal(
          {required StructWithZeroFieldTwinNormal arg});

  Future<StructWithZeroFieldTwinRustAsync>
      crateApiPseudoManualStructureTwinRustAsyncFuncStructWithZeroFieldTwinRustAsync(
          {required StructWithZeroFieldTwinRustAsync arg});

  StructWithZeroFieldTwinSync
      crateApiPseudoManualStructureTwinSyncFuncStructWithZeroFieldTwinSync(
          {required StructWithZeroFieldTwinSync arg});

  Future<TestIdTwinNormal> crateApiArrayFuncTestIdTwinNormal(
      {required TestIdTwinNormal id});

  Future<TestIdTwinRustAsync>
      crateApiPseudoManualArrayTwinRustAsyncFuncTestIdTwinRustAsync(
          {required TestIdTwinRustAsync id});

  TestIdTwinSync crateApiPseudoManualArrayTwinSyncFuncTestIdTwinSync(
      {required TestIdTwinSync id});

  Future<TupleStructWithOneFieldTwinNormal>
      crateApiStructureFuncTupleStructWithOneFieldTwinNormal(
          {required TupleStructWithOneFieldTwinNormal arg});

  Future<TupleStructWithOneFieldTwinRustAsync>
      crateApiPseudoManualStructureTwinRustAsyncFuncTupleStructWithOneFieldTwinRustAsync(
          {required TupleStructWithOneFieldTwinRustAsync arg});

  TupleStructWithOneFieldTwinSync
      crateApiPseudoManualStructureTwinSyncFuncTupleStructWithOneFieldTwinSync(
          {required TupleStructWithOneFieldTwinSync arg});

  Future<TupleStructWithTwoFieldTwinNormal>
      crateApiStructureFuncTupleStructWithTwoFieldTwinNormal(
          {required TupleStructWithTwoFieldTwinNormal arg});

  Future<TupleStructWithTwoFieldTwinRustAsync>
      crateApiPseudoManualStructureTwinRustAsyncFuncTupleStructWithTwoFieldTwinRustAsync(
          {required TupleStructWithTwoFieldTwinRustAsync arg});

  TupleStructWithTwoFieldTwinSync
      crateApiPseudoManualStructureTwinSyncFuncTupleStructWithTwoFieldTwinSync(
          {required TupleStructWithTwoFieldTwinSync arg});

  Future<int> crateApiExceptionFuncTypeFalliblePanicTwinNormal();

  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncFuncTypeFalliblePanicTwinRustAsync();

  int crateApiPseudoManualExceptionTwinSyncFuncTypeFalliblePanicTwinSync();

  Future<int> crateApiExceptionFuncTypeInfalliblePanicTwinNormal();

  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncFuncTypeInfalliblePanicTwinRustAsync();

  int crateApiPseudoManualExceptionTwinSyncFuncTypeInfalliblePanicTwinSync();

  Future<InternetAddress> crateApiCustomSerDesFuncUsingIpv4Addr(
      {required InternetAddress arg});

  Future<NonOpaqueStructContainingIpv4Addr>
      crateApiCustomSerDesFuncUsingNonOpaqueStructContainingIpv4Addr(
          {required NonOpaqueStructContainingIpv4Addr arg});

  Future<void> crateApiFunctionAtApiModRs();

  Future<StructWithCastedPrimitiveTwinNormal>
      crateApiCastedPrimitiveFunctionForStructWithCastedPrimitiveTwinNormal(
          {required StructWithCastedPrimitiveTwinNormal arg});

  Future<int> crateApiCustomSerDesFunctionUsingTypeWithCustomSerializer(
      {required int arg});

  Future<void> crateApiMiscNoTwinExampleAFunctionWithArgTypeNameOverride(
      {required BoxAnyMyDartTypeRename a});

  Future<void> crateApiCommentFunctionWithCommentsSlashStarStarTwinNormal();

  Future<void>
      crateApiPseudoManualCommentTwinRustAsyncFunctionWithCommentsSlashStarStarTwinRustAsync();

  void
      crateApiPseudoManualCommentTwinSyncFunctionWithCommentsSlashStarStarTwinSync();

  Future<void>
      crateApiCommentFunctionWithCommentsTripleSlashMultiLineTwinNormal();

  Future<void>
      crateApiPseudoManualCommentTwinRustAsyncFunctionWithCommentsTripleSlashMultiLineTwinRustAsync();

  void
      crateApiPseudoManualCommentTwinSyncFunctionWithCommentsTripleSlashMultiLineTwinSync();

  Future<void>
      crateApiCommentFunctionWithCommentsTripleSlashSingleLineTwinNormal();

  Future<void>
      crateApiPseudoManualCommentTwinRustAsyncFunctionWithCommentsTripleSlashSingleLineTwinRustAsync();

  void
      crateApiPseudoManualCommentTwinSyncFunctionWithCommentsTripleSlashSingleLineTwinSync();

  Future<void> crateApiMiscNoTwinExampleAFunctionWithCustomNameTwinNormal();

  Future<ApplicationSettings> crateApiMirrorGetAppSettingsTwinNormal();

  Future<ApplicationSettings>
      crateApiPseudoManualMirrorTwinRustAsyncGetAppSettingsTwinRustAsync();

  ApplicationSettings
      crateApiPseudoManualMirrorTwinSyncGetAppSettingsTwinSync();

  Future<U8Array5> crateApiArrayGetArrayTwinNormal();

  Future<U8Array5>
      crateApiPseudoManualArrayTwinRustAsyncGetArrayTwinRustAsync();

  U8Array5 crateApiPseudoManualArrayTwinSyncGetArrayTwinSync();

  Future<PointTwinNormalArray2> crateApiArrayGetComplexArrayTwinNormal();

  Future<PointTwinRustAsyncArray2>
      crateApiPseudoManualArrayTwinRustAsyncGetComplexArrayTwinRustAsync();

  PointTwinSyncArray2
      crateApiPseudoManualArrayTwinSyncGetComplexArrayTwinSync();

  Future<void> crateApiDartOpaqueGetEnumDartOpaqueTwinNormal(
      {required EnumDartOpaqueTwinNormal opaque});

  Future<void>
      crateApiPseudoManualDartOpaqueTwinRustAsyncGetEnumDartOpaqueTwinRustAsync(
          {required EnumDartOpaqueTwinRustAsync opaque});

  void crateApiPseudoManualDartOpaqueTwinSyncGetEnumDartOpaqueTwinSync(
      {required EnumDartOpaqueTwinSync opaque});

  Future<ApplicationSettings> crateApiMirrorGetFallibleAppSettingsTwinNormal();

  Future<ApplicationSettings>
      crateApiPseudoManualMirrorTwinRustAsyncGetFallibleAppSettingsTwinRustAsync();

  ApplicationSettings
      crateApiPseudoManualMirrorTwinSyncGetFallibleAppSettingsTwinSync();

  Future<ApplicationMessage> crateApiMirrorGetMessageTwinNormal();

  Future<ApplicationMessage>
      crateApiPseudoManualMirrorTwinRustAsyncGetMessageTwinRustAsync();

  ApplicationMessage crateApiPseudoManualMirrorTwinSyncGetMessageTwinSync();

  Future<void> crateApiDartOpaqueGetNestedDartOpaqueTwinNormal(
      {required DartOpaqueNestedTwinNormal opaque});

  Future<void>
      crateApiPseudoManualDartOpaqueTwinRustAsyncGetNestedDartOpaqueTwinRustAsync(
          {required DartOpaqueNestedTwinRustAsync opaque});

  void crateApiPseudoManualDartOpaqueTwinSyncGetNestedDartOpaqueTwinSync(
      {required DartOpaqueNestedTwinSync opaque});

  Future<SumWithTwinNormalArray3> crateApiMethodGetSumArrayTwinNormal(
      {required int a, required int b, required int c});

  Future<SumWithTwinRustAsyncArray3>
      crateApiPseudoManualMethodTwinRustAsyncGetSumArrayTwinRustAsync(
          {required int a, required int b, required int c});

  SumWithTwinSyncArray3 crateApiPseudoManualMethodTwinSyncGetSumArrayTwinSync(
      {required int a, required int b, required int c});

  Future<SumWithTwinNormal> crateApiMethodGetSumStructTwinNormal();

  Future<SumWithTwinRustAsync>
      crateApiPseudoManualMethodTwinRustAsyncGetSumStructTwinRustAsync();

  SumWithTwinSync crateApiPseudoManualMethodTwinSyncGetSumStructTwinSync();

  Future<BigBuffersTwinNormal> crateApiMiscExampleHandleBigBuffersTwinNormal();

  Future<BigBuffersTwinRustAsync>
      crateApiPseudoManualMiscExampleTwinRustAsyncHandleBigBuffersTwinRustAsync();

  BigBuffersTwinSync
      crateApiPseudoManualMiscExampleTwinSyncHandleBigBuffersTwinSync();

  Future<String> crateApiMiscExampleHandleCharTwinNormal({required String arg});

  Future<String>
      crateApiPseudoManualMiscExampleTwinRustAsyncHandleCharTwinRustAsync(
          {required String arg});

  String crateApiPseudoManualMiscExampleTwinSyncHandleCharTwinSync(
      {required String arg});

  Future<MyTreeNodeTwinNormal> crateApiMiscExampleHandleComplexStructTwinNormal(
      {required MyTreeNodeTwinNormal s});

  Future<MyTreeNodeTwinRustAsync>
      crateApiPseudoManualMiscExampleTwinRustAsyncHandleComplexStructTwinRustAsync(
          {required MyTreeNodeTwinRustAsync s});

  MyTreeNodeTwinSync
      crateApiPseudoManualMiscExampleTwinSyncHandleComplexStructTwinSync(
          {required MyTreeNodeTwinSync s});

  Future<void> crateApiAttributeHandleCustomizedStructTwinNormal(
      {required CustomizedTwinNormal val});

  Future<void>
      crateApiPseudoManualAttributeTwinRustAsyncHandleCustomizedStructTwinRustAsync(
          {required CustomizedTwinRustAsync val});

  void crateApiPseudoManualAttributeTwinSyncHandleCustomizedStructTwinSync(
      {required CustomizedTwinSync val});

  Future<List<DateTime>> crateApiChronoTypeHandleDurationsTwinNormal(
      {required List<Duration> durations, required DateTime since});

  Future<List<DateTime>>
      crateApiPseudoManualChronoTypeTwinRustAsyncHandleDurationsTwinRustAsync(
          {required List<Duration> durations, required DateTime since});

  List<DateTime> crateApiPseudoManualChronoTypeTwinSyncHandleDurationsTwinSync(
      {required List<Duration> durations, required DateTime since});

  Future<WeekdaysTwinNormal> crateApiEnumerationHandleEnumParameterTwinNormal(
      {required WeekdaysTwinNormal weekday});

  Future<WeekdaysTwinRustAsync>
      crateApiPseudoManualEnumerationTwinRustAsyncHandleEnumParameterTwinRustAsync(
          {required WeekdaysTwinRustAsync weekday});

  WeekdaysTwinSync
      crateApiPseudoManualEnumerationTwinSyncHandleEnumParameterTwinSync(
          {required WeekdaysTwinSync weekday});

  Future<KitchenSinkTwinNormal> crateApiEnumerationHandleEnumStructTwinNormal(
      {required KitchenSinkTwinNormal val});

  Future<KitchenSinkTwinRustAsync>
      crateApiPseudoManualEnumerationTwinRustAsyncHandleEnumStructTwinRustAsync(
          {required KitchenSinkTwinRustAsync val});

  KitchenSinkTwinSync
      crateApiPseudoManualEnumerationTwinSyncHandleEnumStructTwinSync(
          {required KitchenSinkTwinSync val});

  Future<double> crateApiOptionalHandleIncrementBoxedOptionalTwinNormal(
      {double? opt});

  Future<double>
      crateApiPseudoManualOptionalTwinRustAsyncHandleIncrementBoxedOptionalTwinRustAsync(
          {double? opt});

  double
      crateApiPseudoManualOptionalTwinSyncHandleIncrementBoxedOptionalTwinSync(
          {double? opt});

  Future<List<MySize>> crateApiMiscTypeHandleListOfStructTwinNormal(
      {required List<MySize> l});

  Future<List<MySize>>
      crateApiPseudoManualMiscTypeTwinRustAsyncHandleListOfStructTwinRustAsync(
          {required List<MySize> l});

  List<MySize> crateApiPseudoManualMiscTypeTwinSyncHandleListOfStructTwinSync(
      {required List<MySize> l});

  Future<MyNestedStructTwinNormal>
      crateApiMiscExampleHandleNestedStructTwinNormal(
          {required MyNestedStructTwinNormal s});

  Future<MyNestedStructTwinRustAsync>
      crateApiPseudoManualMiscExampleTwinRustAsyncHandleNestedStructTwinRustAsync(
          {required MyNestedStructTwinRustAsync s});

  MyNestedStructTwinSync
      crateApiPseudoManualMiscExampleTwinSyncHandleNestedStructTwinSync(
          {required MyNestedStructTwinSync s});

  Future<FeatureUuidTwinNormal> crateApiUuidTypeHandleNestedUuidsTwinNormal(
      {required FeatureUuidTwinNormal ids});

  Future<FeatureUuidTwinRustAsync>
      crateApiPseudoManualUuidTypeTwinRustAsyncHandleNestedUuidsTwinRustAsync(
          {required FeatureUuidTwinRustAsync ids});

  FeatureUuidTwinSync
      crateApiPseudoManualUuidTypeTwinSyncHandleNestedUuidsTwinSync(
          {required FeatureUuidTwinSync ids});

  Future<NewTypeIntTwinNormal> crateApiNewtypePatternHandleNewtypeTwinNormal(
      {required NewTypeIntTwinNormal arg});

  Future<NewTypeIntTwinRustAsync>
      crateApiPseudoManualNewtypePatternTwinRustAsyncHandleNewtypeTwinRustAsync(
          {required NewTypeIntTwinRustAsync arg});

  NewTypeIntTwinSync
      crateApiPseudoManualNewtypePatternTwinSyncHandleNewtypeTwinSync(
          {required NewTypeIntTwinSync arg});

  Future<String> crateApiOptionalHandleOptionBoxArgumentsTwinNormal(
      {int? i8Box,
      int? u8Box,
      int? i32Box,
      PlatformInt64? i64Box,
      double? f64Box,
      bool? boolbox,
      ExoticOptionalsTwinNormal? structbox});

  Future<String>
      crateApiPseudoManualOptionalTwinRustAsyncHandleOptionBoxArgumentsTwinRustAsync(
          {int? i8Box,
          int? u8Box,
          int? i32Box,
          PlatformInt64? i64Box,
          double? f64Box,
          bool? boolbox,
          ExoticOptionalsTwinRustAsync? structbox});

  String crateApiPseudoManualOptionalTwinSyncHandleOptionBoxArgumentsTwinSync(
      {int? i8Box,
      int? u8Box,
      int? i32Box,
      PlatformInt64? i64Box,
      double? f64Box,
      bool? boolbox,
      ExoticOptionalsTwinSync? structbox});

  Future<ExoticOptionalsTwinNormal?>
      crateApiOptionalHandleOptionalIncrementTwinNormal(
          {ExoticOptionalsTwinNormal? opt});

  Future<ExoticOptionalsTwinRustAsync?>
      crateApiPseudoManualOptionalTwinRustAsyncHandleOptionalIncrementTwinRustAsync(
          {ExoticOptionalsTwinRustAsync? opt});

  ExoticOptionalsTwinSync?
      crateApiPseudoManualOptionalTwinSyncHandleOptionalIncrementTwinSync(
          {ExoticOptionalsTwinSync? opt});

  Future<double?> crateApiOptionalHandleOptionalReturnTwinNormal(
      {required double left, required double right});

  Future<double?>
      crateApiPseudoManualOptionalTwinRustAsyncHandleOptionalReturnTwinRustAsync(
          {required double left, required double right});

  double? crateApiPseudoManualOptionalTwinSyncHandleOptionalReturnTwinSync(
      {required double left, required double right});

  Future<ElementTwinNormal?> crateApiOptionalHandleOptionalStructTwinNormal(
      {String? document});

  Future<ElementTwinRustAsync?>
      crateApiPseudoManualOptionalTwinRustAsyncHandleOptionalStructTwinRustAsync(
          {String? document});

  ElementTwinSync?
      crateApiPseudoManualOptionalTwinSyncHandleOptionalStructTwinSync(
          {String? document});

  Future<WeekdaysTwinNormal?> crateApiEnumerationHandleReturnEnumTwinNormal(
      {required String input});

  Future<WeekdaysTwinRustAsync?>
      crateApiPseudoManualEnumerationTwinRustAsyncHandleReturnEnumTwinRustAsync(
          {required String input});

  WeekdaysTwinSync?
      crateApiPseudoManualEnumerationTwinSyncHandleReturnEnumTwinSync(
          {required String input});

  Stream<MyStreamEntryTwinNormal>
      crateApiStreamHandleStreamOfStructTwinNormal();

  Stream<MyStreamEntryTwinRustAsync>
      crateApiPseudoManualStreamTwinRustAsyncHandleStreamOfStructTwinRustAsync();

  Stream<LogTwinNormal> crateApiStreamHandleStreamSinkAt1TwinNormal(
      {required int key, required int max});

  Stream<LogTwinRustAsync>
      crateApiPseudoManualStreamTwinRustAsyncHandleStreamSinkAt1TwinRustAsync(
          {required int key, required int max});

  Stream<LogTwinNormal> crateApiStreamHandleStreamSinkAt2TwinNormal(
      {required int key, required int max});

  Stream<LogTwinRustAsync>
      crateApiPseudoManualStreamTwinRustAsyncHandleStreamSinkAt2TwinRustAsync(
          {required int key, required int max});

  Stream<LogTwinNormal> crateApiStreamHandleStreamSinkAt3TwinNormal(
      {required int key, required int max});

  Stream<LogTwinRustAsync>
      crateApiPseudoManualStreamTwinRustAsyncHandleStreamSinkAt3TwinRustAsync(
          {required int key, required int max});

  Future<List<String>> crateApiMiscTypeHandleStringListTwinNormal(
      {required List<String> names});

  Future<List<String>>
      crateApiPseudoManualMiscTypeTwinRustAsyncHandleStringListTwinRustAsync(
          {required List<String> names});

  List<String> crateApiPseudoManualMiscTypeTwinSyncHandleStringListTwinSync(
      {required List<String> names});

  Future<String> crateApiMiscExampleHandleStringTwinNormal({required String s});

  Future<String>
      crateApiPseudoManualMiscExampleTwinRustAsyncHandleStringTwinRustAsync(
          {required String s});

  String crateApiPseudoManualMiscExampleTwinSyncHandleStringTwinSync(
      {required String s});

  Future<MySize> crateApiMiscExampleHandleStructTwinNormal(
      {required MySize arg, required MySize boxed});

  Future<MySize>
      crateApiPseudoManualMiscExampleTwinRustAsyncHandleStructTwinRustAsync(
          {required MySize arg, required MySize boxed});

  MySize crateApiPseudoManualMiscExampleTwinSyncHandleStructTwinSync(
      {required MySize arg, required MySize boxed});

  Future<List<Duration>> crateApiChronoTypeHandleTimestampsTwinNormal(
      {required List<DateTime> timestamps, required DateTime epoch});

  Future<List<Duration>>
      crateApiPseudoManualChronoTypeTwinRustAsyncHandleTimestampsTwinRustAsync(
          {required List<DateTime> timestamps, required DateTime epoch});

  List<Duration> crateApiPseudoManualChronoTypeTwinSyncHandleTimestampsTwinSync(
      {required List<DateTime> timestamps, required DateTime epoch});

  Future<BigInt> crateApiTypeAliasHandleTypeAliasIdTwinNormal(
      {required BigInt input});

  Future<BigInt>
      crateApiPseudoManualTypeAliasTwinRustAsyncHandleTypeAliasIdTwinRustAsync(
          {required BigInt input});

  BigInt crateApiPseudoManualTypeAliasTwinSyncHandleTypeAliasIdTwinSync(
      {required BigInt input});

  Future<TestModelTwinNormal> crateApiTypeAliasHandleTypeAliasModelTwinNormal(
      {required BigInt input});

  Future<TestModelTwinRustAsync>
      crateApiPseudoManualTypeAliasTwinRustAsyncHandleTypeAliasModelTwinRustAsync(
          {required BigInt input});

  TestModelTwinSync
      crateApiPseudoManualTypeAliasTwinSyncHandleTypeAliasModelTwinSync(
          {required BigInt input});

  Future<BigInt> crateApiTypeAliasHandleTypeNestAliasIdTwinNormal(
      {required BigInt input});

  Future<BigInt>
      crateApiPseudoManualTypeAliasTwinRustAsyncHandleTypeNestAliasIdTwinRustAsync(
          {required BigInt input});

  BigInt crateApiPseudoManualTypeAliasTwinSyncHandleTypeNestAliasIdTwinSync(
      {required BigInt input});

  Future<UuidValue> crateApiUuidTypeHandleUuidTwinNormal(
      {required UuidValue id});

  Future<UuidValue>
      crateApiPseudoManualUuidTypeTwinRustAsyncHandleUuidTwinRustAsync(
          {required UuidValue id});

  UuidValue crateApiPseudoManualUuidTypeTwinSyncHandleUuidTwinSync(
      {required UuidValue id});

  Future<List<UuidValue>> crateApiUuidTypeHandleUuidsTwinNormal(
      {required List<UuidValue> ids});

  Future<List<UuidValue>>
      crateApiPseudoManualUuidTypeTwinRustAsyncHandleUuidsTwinRustAsync(
          {required List<UuidValue> ids});

  List<UuidValue> crateApiPseudoManualUuidTypeTwinSyncHandleUuidsTwinSync(
      {required List<UuidValue> ids});

  Future<OptVecsTwinNormal> crateApiOptionalHandleVecOfOptsTwinNormal(
      {required OptVecsTwinNormal opt});

  Future<OptVecsTwinRustAsync>
      crateApiPseudoManualOptionalTwinRustAsyncHandleVecOfOptsTwinRustAsync(
          {required OptVecsTwinRustAsync opt});

  OptVecsTwinSync crateApiPseudoManualOptionalTwinSyncHandleVecOfOptsTwinSync(
      {required OptVecsTwinSync opt});

  Future<VecOfPrimitivePackTwinNormal>
      crateApiPrimitiveListMiscHandleVecOfPrimitiveTwinNormal({required int n});

  Future<VecOfPrimitivePackTwinRustAsync>
      crateApiPseudoManualPrimitiveListMiscTwinRustAsyncHandleVecOfPrimitiveTwinRustAsync(
          {required int n});

  VecOfPrimitivePackTwinSync
      crateApiPseudoManualPrimitiveListMiscTwinSyncHandleVecOfPrimitiveTwinSync(
          {required int n});

  Future<Uint8List> crateApiMiscExampleHandleVecU8TwinNormal(
      {required List<int> v});

  Future<Uint8List>
      crateApiPseudoManualMiscExampleTwinRustAsyncHandleVecU8TwinRustAsync(
          {required List<int> v});

  Uint8List crateApiPseudoManualMiscExampleTwinSyncHandleVecU8TwinSync(
      {required List<int> v});

  Future<Duration> crateApiChronoTypeHowLongDoesItTakeTwinNormal(
      {required FeatureChronoTwinNormal mine});

  Future<Duration>
      crateApiPseudoManualChronoTypeTwinRustAsyncHowLongDoesItTakeTwinRustAsync(
          {required FeatureChronoTwinRustAsync mine});

  Duration crateApiPseudoManualChronoTypeTwinSyncHowLongDoesItTakeTwinSync(
      {required FeatureChronoTwinSync mine});

  Future<void> crateApiCustomizationInitApp();

  Future<bool> crateApiMirrorIsAppEmbeddedTwinNormal(
      {required ApplicationSettings appSettings});

  Future<bool>
      crateApiPseudoManualMirrorTwinRustAsyncIsAppEmbeddedTwinRustAsync(
          {required ApplicationSettings appSettings});

  bool crateApiPseudoManualMirrorTwinSyncIsAppEmbeddedTwinSync(
      {required ApplicationSettings appSettings});

  Future<ItemContainerSolutionTwoTwinNormal>
      crateApiMiscNoTwinExampleAItemContainerSolutionTwoTwinNormalCreateTwinNormal();

  Future<Int32List>
      crateApiMiscNoTwinExampleAItemContainerSolutionTwoTwinNormalGetItemContentsTwinNormal(
          {required ItemContainerSolutionTwoTwinNormal that});

  Future<double> crateApiArrayLastNumberTwinNormal({required F64Array16 array});

  Future<double> crateApiPseudoManualArrayTwinRustAsyncLastNumberTwinRustAsync(
      {required F64Array16 array});

  double crateApiPseudoManualArrayTwinSyncLastNumberTwinSync(
      {required F64Array16 array});

  Future<List<WeekdaysTwinNormal>>
      crateApiMiscExampleListOfPrimitiveEnumsTwinNormal(
          {required List<WeekdaysTwinNormal> weekdays});

  Future<List<WeekdaysTwinRustAsync>>
      crateApiPseudoManualMiscExampleTwinRustAsyncListOfPrimitiveEnumsTwinRustAsync(
          {required List<WeekdaysTwinRustAsync> weekdays});

  List<WeekdaysTwinSync>
      crateApiPseudoManualMiscExampleTwinSyncListOfPrimitiveEnumsTwinSync(
          {required List<WeekdaysTwinSync> weekdays});

  Future<void> crateApiDartOpaqueLoopBackArrayGetTwinNormal(
      {required ObjectArray1 opaque});

  Future<void>
      crateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackArrayGetTwinRustAsync(
          {required ObjectArray1 opaque});

  void crateApiPseudoManualDartOpaqueTwinSyncLoopBackArrayGetTwinSync(
      {required ObjectArray1 opaque});

  Future<ObjectArray1> crateApiDartOpaqueLoopBackArrayTwinNormal(
      {required Object opaque});

  Future<ObjectArray1>
      crateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackArrayTwinRustAsync(
          {required Object opaque});

  ObjectArray1 crateApiPseudoManualDartOpaqueTwinSyncLoopBackArrayTwinSync(
      {required Object opaque});

  Future<void> crateApiDartOpaqueLoopBackOptionGetTwinNormal({Object? opaque});

  Future<void>
      crateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackOptionGetTwinRustAsync(
          {Object? opaque});

  void crateApiPseudoManualDartOpaqueTwinSyncLoopBackOptionGetTwinSync(
      {Object? opaque});

  Future<Object?> crateApiDartOpaqueLoopBackOptionTwinNormal(
      {required Object opaque});

  Future<Object?>
      crateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackOptionTwinRustAsync(
          {required Object opaque});

  Object? crateApiPseudoManualDartOpaqueTwinSyncLoopBackOptionTwinSync(
      {required Object opaque});

  Future<Object> crateApiDartOpaqueLoopBackTwinNormal({required Object opaque});

  Future<Object>
      crateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackTwinRustAsync(
          {required Object opaque});

  Object crateApiPseudoManualDartOpaqueTwinSyncLoopBackTwinSync(
      {required Object opaque});

  Future<void> crateApiDartOpaqueLoopBackVecGetTwinNormal(
      {required List<Object> opaque});

  Future<void>
      crateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackVecGetTwinRustAsync(
          {required List<Object> opaque});

  void crateApiPseudoManualDartOpaqueTwinSyncLoopBackVecGetTwinSync(
      {required List<Object> opaque});

  Future<List<Object>> crateApiDartOpaqueLoopBackVecTwinNormal(
      {required Object opaque});

  Future<List<Object>>
      crateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackVecTwinRustAsync(
          {required Object opaque});

  List<Object> crateApiPseudoManualDartOpaqueTwinSyncLoopBackVecTwinSync(
      {required Object opaque});

  Future<LtTypeWithLifetimeTwinNormal>
      crateApiLifetimeableLtComputeWithLifetimeFunctionTwinNormal(
          {required LtOwnedStructTwinNormal arg});

  Future<LtTypeWithLifetimeTwinSync>
      crateApiPseudoManualLifetimeableTwinSyncLtComputeWithLifetimeFunctionTwinSync(
          {required LtOwnedStructTwinSync arg});

  Stream<ApplicationModeArray2> crateApiMirrorMirrorArrayEnumStreamTwinNormal();

  Stream<ApplicationModeArray2>
      crateApiPseudoManualMirrorTwinRustAsyncMirrorArrayEnumStreamTwinRustAsync();

  Stream<ApplicationModeArray2>
      crateApiPseudoManualMirrorTwinSyncMirrorArrayEnumStreamTwinSync();

  Stream<ApplicationMode> crateApiMirrorMirrorEnumStreamTwinNormal();

  Stream<ApplicationMode>
      crateApiPseudoManualMirrorTwinRustAsyncMirrorEnumStreamTwinRustAsync();

  Stream<ApplicationMode>
      crateApiPseudoManualMirrorTwinSyncMirrorEnumStreamTwinSync();

  Stream<Map<int, ApplicationMode>>
      crateApiMirrorMirrorMapEnumStreamTwinNormal();

  Stream<Map<int, ApplicationMode>>
      crateApiPseudoManualMirrorTwinRustAsyncMirrorMapEnumStreamTwinRustAsync();

  Stream<Map<int, ApplicationMode>>
      crateApiPseudoManualMirrorTwinSyncMirrorMapEnumStreamTwinSync();

  Stream<ApplicationMode?> crateApiMirrorMirrorOptionEnumStreamTwinNormal();

  Stream<ApplicationMode?>
      crateApiPseudoManualMirrorTwinRustAsyncMirrorOptionEnumStreamTwinRustAsync();

  Stream<ApplicationMode?>
      crateApiPseudoManualMirrorTwinSyncMirrorOptionEnumStreamTwinSync();

  Stream<Set<ApplicationMode>> crateApiMirrorMirrorSetEnumStreamTwinNormal();

  Stream<Set<ApplicationMode>>
      crateApiPseudoManualMirrorTwinRustAsyncMirrorSetEnumStreamTwinRustAsync();

  Stream<Set<ApplicationMode>>
      crateApiPseudoManualMirrorTwinSyncMirrorSetEnumStreamTwinSync();

  Stream<MirrorStructTwinNormal> crateApiMirrorMirrorStructStreamTwinNormal();

  Stream<MirrorStructTwinRustAsync>
      crateApiPseudoManualMirrorTwinRustAsyncMirrorStructStreamTwinRustAsync();

  Stream<MirrorStructTwinSync>
      crateApiPseudoManualMirrorTwinSyncMirrorStructStreamTwinSync();

  Stream<(ApplicationSettings, RawStringEnumMirrored)>
      crateApiMirrorMirrorTupleStreamTwinNormal();

  Stream<(ApplicationSettings, RawStringEnumMirrored)>
      crateApiPseudoManualMirrorTwinRustAsyncMirrorTupleStreamTwinRustAsync();

  Stream<(ApplicationSettings, RawStringEnumMirrored)>
      crateApiPseudoManualMirrorTwinSyncMirrorTupleStreamTwinSync();

  Stream<List<ApplicationMode>> crateApiMirrorMirrorVecEnumStreamTwinNormal();

  Stream<List<ApplicationMode>>
      crateApiPseudoManualMirrorTwinRustAsyncMirrorVecEnumStreamTwinRustAsync();

  Stream<List<ApplicationMode>>
      crateApiPseudoManualMirrorTwinSyncMirrorVecEnumStreamTwinSync();

  Future<MeasureTwinNormal?> crateApiEnumerationMultiplyByTenTwinNormal(
      {required MeasureTwinNormal measure});

  Future<MeasureTwinRustAsync?>
      crateApiPseudoManualEnumerationTwinRustAsyncMultiplyByTenTwinRustAsync(
          {required MeasureTwinRustAsync measure});

  MeasureTwinSync? crateApiPseudoManualEnumerationTwinSyncMultiplyByTenTwinSync(
      {required MeasureTwinSync measure});

  Future<String> crateApiMethodMyCallableTwinNormalCall(
      {required MyCallableTwinNormal that, required String two});

  Future<String>
      crateApiPseudoManualMethodTwinRustAsyncMyCallableTwinRustAsyncCall(
          {required MyCallableTwinRustAsync that, required String two});

  String crateApiPseudoManualMethodTwinSyncMyCallableTwinSyncCall(
      {required MyCallableTwinSync that, required String two});

  Future<void> crateApiMiscNoTwinExampleAMyEnumWithJsonSerializableTwinNormalF(
      {required MyEnumWithJsonSerializableTwinNormal that});

  Future<void> crateApiCustomizationMyInitOne();

  Future<void> crateApiCustomizationMyInitTwo();

  Future<void>
      crateApiMiscNoTwinExampleAMyStructWithJsonSerializableTwinNormalF(
          {required MyStructWithJsonSerializableTwinNormal that});

  Future<void> crateApiMiscNoTwinExampleAMyStructWithSyncSync(
      {required MyStructWithSync that});

  Future<DateTime> crateApiChronoTypeNaivedatetimeTwinNormal(
      {required DateTime d});

  Future<DateTime>
      crateApiPseudoManualChronoTypeTwinRustAsyncNaivedatetimeTwinRustAsync(
          {required DateTime d});

  DateTime crateApiPseudoManualChronoTypeTwinSyncNaivedatetimeTwinSync(
      {required DateTime d});

  Future<TestIdTwinNormalArray2> crateApiArrayNestedIdTwinNormal(
      {required TestIdTwinNormalArray4 id});

  Future<TestIdTwinRustAsyncArray2>
      crateApiPseudoManualArrayTwinRustAsyncNestedIdTwinRustAsync(
          {required TestIdTwinRustAsyncArray4 id});

  TestIdTwinSyncArray2 crateApiPseudoManualArrayTwinSyncNestedIdTwinSync(
      {required TestIdTwinSyncArray4 id});

  Future<MessageIdTwinNormal> crateApiArrayNewMsgidTwinNormal(
      {required U8Array32 id});

  Future<MessageIdTwinRustAsync>
      crateApiPseudoManualArrayTwinRustAsyncNewMsgidTwinRustAsync(
          {required U8Array32 id});

  MessageIdTwinSync crateApiPseudoManualArrayTwinSyncNewMsgidTwinSync(
      {required U8Array32 id});

  Future<UserIdTwinNormal> crateApiAttributeNextUserIdTwinNormal(
      {UserIdTwinNormal userId = const UserIdTwinNormal()});

  Future<UserIdTwinRustAsync>
      crateApiPseudoManualAttributeTwinRustAsyncNextUserIdTwinRustAsync(
          {UserIdTwinRustAsync userId = const UserIdTwinRustAsync()});

  UserIdTwinSync crateApiPseudoManualAttributeTwinSyncNextUserIdTwinSync(
      {UserIdTwinSync userId = const UserIdTwinSync()});

  Future<void> crateApiRustOpaqueOpaqueArrayRunTwinNormal(
      {required HideDataTwinNormalArray2 data});

  Future<void>
      crateApiPseudoManualRustOpaqueTwinRustAsyncOpaqueArrayRunTwinRustAsync(
          {required HideDataTwinRustAsyncArray2 data});

  void crateApiPseudoManualRustOpaqueTwinSyncOpaqueArrayRunTwinSync(
      {required HideDataTwinSyncArray2 data});

  Future<HideDataTwinNormalArray2> crateApiRustOpaqueOpaqueArrayTwinNormal();

  Future<HideDataTwinRustAsyncArray2>
      crateApiPseudoManualRustOpaqueTwinRustAsyncOpaqueArrayTwinRustAsync();

  HideDataTwinSyncArray2
      crateApiPseudoManualRustOpaqueTwinSyncOpaqueArrayTwinSync();

  Future<void> crateApiRustOpaqueOpaqueVecRunTwinNormal(
      {required List<HideDataTwinNormal> data});

  Future<void>
      crateApiPseudoManualRustOpaqueTwinRustAsyncOpaqueVecRunTwinRustAsync(
          {required List<HideDataTwinRustAsync> data});

  void crateApiPseudoManualRustOpaqueTwinSyncOpaqueVecRunTwinSync(
      {required List<HideDataTwinSync> data});

  Future<List<HideDataTwinNormal>> crateApiRustOpaqueOpaqueVecTwinNormal();

  Future<List<HideDataTwinRustAsync>>
      crateApiPseudoManualRustOpaqueTwinRustAsyncOpaqueVecTwinRustAsync();

  List<HideDataTwinSync>
      crateApiPseudoManualRustOpaqueTwinSyncOpaqueVecTwinSync();

  Future<DateTime?> crateApiChronoTypeOptionalEmptyDatetimeUtcTwinNormal(
      {DateTime? d});

  Future<DateTime?>
      crateApiPseudoManualChronoTypeTwinRustAsyncOptionalEmptyDatetimeUtcTwinRustAsync(
          {DateTime? d});

  DateTime?
      crateApiPseudoManualChronoTypeTwinSyncOptionalEmptyDatetimeUtcTwinSync(
          {DateTime? d});

  Future<void> crateApiDartOpaquePanicUnwrapDartOpaqueTwinNormal(
      {required Object opaque});

  Future<void>
      crateApiPseudoManualDartOpaqueTwinRustAsyncPanicUnwrapDartOpaqueTwinRustAsync(
          {required Object opaque});

  void crateApiPseudoManualDartOpaqueTwinSyncPanicUnwrapDartOpaqueTwinSync(
      {required Object opaque});

  Future<void> crateApiExceptionPanicWithCustomResultTwinNormal();

  Future<void>
      crateApiPseudoManualExceptionTwinRustAsyncPanicWithCustomResultTwinRustAsync();

  void crateApiPseudoManualExceptionTwinSyncPanicWithCustomResultTwinSync();

  Future<int> crateApiMiscExamplePositionalArgumentsTwinNormal(
      {required int a, required int b});

  Future<int>
      crateApiPseudoManualMiscExampleTwinRustAsyncPositionalArgumentsTwinRustAsync(
          {required int a, required int b});

  int crateApiPseudoManualMiscExampleTwinSyncPositionalArgumentsTwinSync(
      {required int a, required int b});

  Future<int?> crateApiOptionalPrimitiveMiscPrimitiveOptionalTypesTwinNormal(
      {int? myI32, PlatformInt64? myI64, double? myF64, bool? myBool});

  Future<int?>
      crateApiPseudoManualOptionalPrimitiveMiscTwinRustAsyncPrimitiveOptionalTypesTwinRustAsync(
          {int? myI32, PlatformInt64? myI64, double? myF64, bool? myBool});

  int?
      crateApiPseudoManualOptionalPrimitiveMiscTwinSyncPrimitiveOptionalTypesTwinSync(
          {int? myI32, PlatformInt64? myI64, double? myF64, bool? myBool});

  Future<int> crateApiPrimitiveMiscPrimitiveTypesTwinNormal(
      {required int myI32,
      required PlatformInt64 myI64,
      required double myF64,
      required bool myBool});

  Future<int>
      crateApiPseudoManualPrimitiveMiscTwinRustAsyncPrimitiveTypesTwinRustAsync(
          {required int myI32,
          required PlatformInt64 myI64,
          required double myF64,
          required bool myBool});

  int crateApiPseudoManualPrimitiveMiscTwinSyncPrimitiveTypesTwinSync(
      {required int myI32,
      required PlatformInt64 myI64,
      required double myF64,
      required bool myBool});

  Future<int> crateApiPrimitiveMiscPrimitiveU32TwinNormal({required int myU32});

  Future<int>
      crateApiPseudoManualPrimitiveMiscTwinRustAsyncPrimitiveU32TwinRustAsync(
          {required int myU32});

  int crateApiPseudoManualPrimitiveMiscTwinSyncPrimitiveU32TwinSync(
      {required int myU32});

  Future<Uint8List> crateApiEnumerationPrintNoteTwinNormal(
      {required NoteTwinNormal note});

  Future<Uint8List>
      crateApiPseudoManualEnumerationTwinRustAsyncPrintNoteTwinRustAsync(
          {required NoteTwinRustAsync note});

  Uint8List crateApiPseudoManualEnumerationTwinSyncPrintNoteTwinSync(
      {required NoteTwinSync note});

  Future<Stream<EventTwinNormal>>
      crateApiEventListenerRegisterEventListenerTwinNormal();

  Future<Stream<EventTwinRustAsync>>
      crateApiPseudoManualEventListenerTwinRustAsyncRegisterEventListenerTwinRustAsync();

  Future<Numbers> crateApiMirrorRepeatNumberTwinNormal(
      {required int num, required BigInt times});

  Future<Numbers>
      crateApiPseudoManualMirrorTwinRustAsyncRepeatNumberTwinRustAsync(
          {required int num, required BigInt times});

  Numbers crateApiPseudoManualMirrorTwinSyncRepeatNumberTwinSync(
      {required int num, required BigInt times});

  Future<Sequences> crateApiMirrorRepeatSequenceTwinNormal(
      {required int seq, required BigInt times});

  Future<Sequences>
      crateApiPseudoManualMirrorTwinRustAsyncRepeatSequenceTwinRustAsync(
          {required int seq, required BigInt times});

  Sequences crateApiPseudoManualMirrorTwinSyncRepeatSequenceTwinSync(
      {required int seq, required BigInt times});

  Future<FeedIdTwinNormal> crateApiArrayReturnBoxedFeedIdTwinNormal(
      {required U8Array8 id});

  Future<FeedIdTwinRustAsync>
      crateApiPseudoManualArrayTwinRustAsyncReturnBoxedFeedIdTwinRustAsync(
          {required U8Array8 id});

  FeedIdTwinSync crateApiPseudoManualArrayTwinSyncReturnBoxedFeedIdTwinSync(
      {required U8Array8 id});

  Future<U8Array8> crateApiArrayReturnBoxedRawFeedIdTwinNormal(
      {required FeedIdTwinNormal id});

  Future<U8Array8>
      crateApiPseudoManualArrayTwinRustAsyncReturnBoxedRawFeedIdTwinRustAsync(
          {required FeedIdTwinRustAsync id});

  U8Array8 crateApiPseudoManualArrayTwinSyncReturnBoxedRawFeedIdTwinSync(
      {required FeedIdTwinSync id});

  Future<void> crateApiExceptionReturnCustomNestedError1TwinNormal();

  Future<void>
      crateApiPseudoManualExceptionTwinRustAsyncReturnCustomNestedError1TwinRustAsync();

  void crateApiPseudoManualExceptionTwinSyncReturnCustomNestedError1TwinSync();

  Future<void> crateApiExceptionReturnCustomNestedError1Variant1TwinNormal();

  Future<void>
      crateApiPseudoManualExceptionTwinRustAsyncReturnCustomNestedError1Variant1TwinRustAsync();

  void
      crateApiPseudoManualExceptionTwinSyncReturnCustomNestedError1Variant1TwinSync();

  Future<void> crateApiExceptionReturnCustomNestedError2TwinNormal();

  Future<void>
      crateApiPseudoManualExceptionTwinRustAsyncReturnCustomNestedError2TwinRustAsync();

  void crateApiPseudoManualExceptionTwinSyncReturnCustomNestedError2TwinSync();

  Future<void> crateApiExceptionReturnCustomStructErrorTwinNormal();

  Future<void>
      crateApiPseudoManualExceptionTwinRustAsyncReturnCustomStructErrorTwinRustAsync();

  void crateApiPseudoManualExceptionTwinSyncReturnCustomStructErrorTwinSync();

  Future<int> crateApiExceptionReturnCustomStructOkTwinNormal();

  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncReturnCustomStructOkTwinRustAsync();

  int crateApiPseudoManualExceptionTwinSyncReturnCustomStructOkTwinSync();

  Future<int> crateApiExceptionReturnErrCustomErrorTwinNormal();

  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncReturnErrCustomErrorTwinRustAsync();

  int crateApiPseudoManualExceptionTwinSyncReturnErrCustomErrorTwinSync();

  Future<int> crateApiExceptionReturnErrorVariantTwinNormal(
      {required int variant});

  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncReturnErrorVariantTwinRustAsync(
          {required int variant});

  int crateApiPseudoManualExceptionTwinSyncReturnErrorVariantTwinSync(
      {required int variant});

  Future<int> crateApiExceptionReturnOkCustomErrorTwinNormal();

  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncReturnOkCustomErrorTwinRustAsync();

  int crateApiPseudoManualExceptionTwinSyncReturnOkCustomErrorTwinSync();

  Future<String> crateApiRustOpaqueRunEnumOpaqueTwinNormal(
      {required EnumOpaqueTwinNormal opaque});

  Future<String>
      crateApiPseudoManualRustOpaqueTwinRustAsyncRunEnumOpaqueTwinRustAsync(
          {required EnumOpaqueTwinRustAsync opaque});

  String crateApiPseudoManualRustOpaqueTwinSyncRunEnumOpaqueTwinSync(
      {required EnumOpaqueTwinSync opaque});

  Future<void> crateApiRustOpaqueRunNestedOpaqueTwinNormal(
      {required OpaqueNestedTwinNormal opaque});

  Future<void>
      crateApiPseudoManualRustOpaqueTwinRustAsyncRunNestedOpaqueTwinRustAsync(
          {required OpaqueNestedTwinRustAsync opaque});

  void crateApiPseudoManualRustOpaqueTwinSyncRunNestedOpaqueTwinSync(
      {required OpaqueNestedTwinSync opaque});

  Future<String> crateApiRustOpaqueRunNonCloneTwinNormal(
      {required NonCloneDataTwinNormal clone});

  Future<String>
      crateApiPseudoManualRustOpaqueTwinRustAsyncRunNonCloneTwinRustAsync(
          {required NonCloneDataTwinRustAsync clone});

  String crateApiPseudoManualRustOpaqueTwinSyncRunNonCloneTwinSync(
      {required NonCloneDataTwinSync clone});

  Future<String> crateApiRustOpaqueRunOpaqueTwinNormal(
      {required HideDataTwinNormal opaque});

  Future<String>
      crateApiPseudoManualRustOpaqueTwinRustAsyncRunOpaqueTwinRustAsync(
          {required HideDataTwinRustAsync opaque});

  String crateApiPseudoManualRustOpaqueTwinSyncRunOpaqueTwinSync(
      {required HideDataTwinSync opaque});

  Future<String> crateApiRustOpaqueRunOpaqueWithDelayTwinNormal(
      {required HideDataTwinNormal opaque});

  Future<String>
      crateApiPseudoManualRustOpaqueTwinRustAsyncRunOpaqueWithDelayTwinRustAsync(
          {required HideDataTwinRustAsync opaque});

  String crateApiPseudoManualRustOpaqueTwinSyncRunOpaqueWithDelayTwinSync(
      {required HideDataTwinSync opaque});

  Future<void> crateApiRustAutoOpaqueRustAutoOpaqueArgBorrowTwinNormal(
      {required NonCloneSimpleTwinNormal arg, required int expect});

  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueArgBorrowTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync arg, required int expect});

  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueArgBorrowTwinSync(
          {required NonCloneSimpleTwinSync arg, required int expect});

  Future<void> crateApiRustAutoOpaqueRustAutoOpaqueArgMutBorrowTwinNormal(
      {required NonCloneSimpleTwinNormal arg,
      required int expect,
      required int adder});

  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueArgMutBorrowTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync arg,
          required int expect,
          required int adder});

  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueArgMutBorrowTwinSync(
          {required NonCloneSimpleTwinSync arg,
          required int expect,
          required int adder});

  Future<NonCloneSimpleTwinNormal>
      crateApiRustAutoOpaqueRustAutoOpaqueArgOwnAndReturnOwnTwinNormal(
          {required NonCloneSimpleTwinNormal arg});

  Future<NonCloneSimpleTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueArgOwnAndReturnOwnTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync arg});

  NonCloneSimpleTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueArgOwnAndReturnOwnTwinSync(
          {required NonCloneSimpleTwinSync arg});

  Future<void> crateApiRustAutoOpaqueRustAutoOpaqueArgOwnTwinNormal(
      {required NonCloneSimpleTwinNormal arg, required int expect});

  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueArgOwnTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync arg, required int expect});

  void crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueArgOwnTwinSync(
      {required NonCloneSimpleTwinSync arg, required int expect});

  Future<void> crateApiRustAutoOpaqueRustAutoOpaqueArgVecOwnTwinNormal(
      {required List<NonCloneSimpleTwinNormal> arg, required List<int> expect});

  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueArgVecOwnTwinRustAsync(
          {required List<NonCloneSimpleTwinRustAsync> arg,
          required List<int> expect});

  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueArgVecOwnTwinSync(
          {required List<NonCloneSimpleTwinSync> arg,
          required List<int> expect});

  Future<int> crateApiRustAutoOpaqueRustAutoOpaqueBorrowAndBorrowTwinNormal(
      {required NonCloneSimpleTwinNormal a,
      required NonCloneSimpleTwinNormal b});

  Future<int>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueBorrowAndBorrowTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync a,
          required NonCloneSimpleTwinRustAsync b});

  int crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueBorrowAndBorrowTwinSync(
      {required NonCloneSimpleTwinSync a, required NonCloneSimpleTwinSync b});

  Future<int> crateApiRustAutoOpaqueRustAutoOpaqueBorrowAndMutBorrowTwinNormal(
      {required NonCloneSimpleTwinNormal borrow,
      required NonCloneSimpleTwinNormal mutBorrow});

  Future<int>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueBorrowAndMutBorrowTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync borrow,
          required NonCloneSimpleTwinRustAsync mutBorrow});

  int crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueBorrowAndMutBorrowTwinSync(
      {required NonCloneSimpleTwinSync borrow,
      required NonCloneSimpleTwinSync mutBorrow});

  Future<void> crateApiRustAutoOpaqueRustAutoOpaqueCallableArgTwinNormal(
      {required BoxFnStringString arg});

  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueCallableArgTwinRustAsync(
          {required BoxFnStringString arg});

  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueCallableArgTwinSync(
          {required BoxFnStringString arg});

  Future<BoxFnStringString>
      crateApiRustAutoOpaqueRustAutoOpaqueCallableReturnTwinNormal();

  Future<BoxFnStringString>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueCallableReturnTwinRustAsync();

  BoxFnStringString
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueCallableReturnTwinSync();

  Future<void> crateApiRustAutoOpaqueRustAutoOpaqueDummyTwinNormal(
      {required StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal a,
      required EnumWithGoodAndOpaqueWithoutOptionTwinNormal b});

  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueDummyTwinRustAsync(
          {required StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync a,
          required EnumWithGoodAndOpaqueWithoutOptionTwinRustAsync b});

  void crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueDummyTwinSync(
      {required StructWithGoodAndOpaqueFieldWithoutOptionTwinSync a,
      required EnumWithGoodAndOpaqueWithoutOptionTwinSync b});

  Future<void> crateApiRustAutoOpaqueRustAutoOpaqueEnumArgBorrowTwinNormal(
      {required NonCloneSimpleEnumTwinNormal arg});

  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueEnumArgBorrowTwinRustAsync(
          {required NonCloneSimpleEnumTwinRustAsync arg});

  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueEnumArgBorrowTwinSync(
          {required NonCloneSimpleEnumTwinSync arg});

  Future<NonCloneSimpleEnumTwinNormal>
      crateApiRustAutoOpaqueRustAutoOpaqueEnumReturnOwnTwinNormal();

  Future<NonCloneSimpleEnumTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueEnumReturnOwnTwinRustAsync();

  NonCloneSimpleEnumTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueEnumReturnOwnTwinSync();

  Future<void>
      crateApiRustAutoOpaqueRustAutoOpaqueEnumWithGoodAndOpaqueArgOwnTwinNormal(
          {required EnumWithGoodAndOpaqueTwinNormal arg});

  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueEnumWithGoodAndOpaqueArgOwnTwinRustAsync(
          {required EnumWithGoodAndOpaqueTwinRustAsync arg});

  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueEnumWithGoodAndOpaqueArgOwnTwinSync(
          {required EnumWithGoodAndOpaqueTwinSync arg});

  Future<EnumWithGoodAndOpaqueTwinNormal>
      crateApiRustAutoOpaqueRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnGoodTwinNormal();

  Future<EnumWithGoodAndOpaqueTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnGoodTwinRustAsync();

  EnumWithGoodAndOpaqueTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnGoodTwinSync();

  Future<EnumWithGoodAndOpaqueTwinNormal>
      crateApiRustAutoOpaqueRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnOpaqueTwinNormal();

  Future<EnumWithGoodAndOpaqueTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnOpaqueTwinRustAsync();

  EnumWithGoodAndOpaqueTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnOpaqueTwinSync();

  Future<void> crateApiRustAutoOpaqueRustAutoOpaqueExplicitArgTwinNormal(
      {required NonCloneSimpleTwinNormal arg, required int expect});

  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueExplicitArgTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync arg, required int expect});

  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueExplicitArgTwinSync(
          {required NonCloneSimpleTwinSync arg, required int expect});

  Future<StructWithExplicitAutoOpaqueFieldTwinNormal>
      crateApiRustAutoOpaqueRustAutoOpaqueExplicitReturnStructTwinNormal();

  Future<StructWithExplicitAutoOpaqueFieldTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueExplicitReturnStructTwinRustAsync();

  StructWithExplicitAutoOpaqueFieldTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueExplicitReturnStructTwinSync();

  Future<NonCloneSimpleTwinNormal>
      crateApiRustAutoOpaqueRustAutoOpaqueExplicitReturnTwinNormal(
          {required int initial});

  Future<NonCloneSimpleTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueExplicitReturnTwinRustAsync(
          {required int initial});

  NonCloneSimpleTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueExplicitReturnTwinSync(
          {required int initial});

  Future<void> crateApiRustAutoOpaqueRustAutoOpaqueExplicitStructTwinNormal(
      {required StructWithExplicitAutoOpaqueFieldTwinNormal arg});

  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueExplicitStructTwinRustAsync(
          {required StructWithExplicitAutoOpaqueFieldTwinRustAsync arg});

  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueExplicitStructTwinSync(
          {required StructWithExplicitAutoOpaqueFieldTwinSync arg});

  Future<void> crateApiRustAutoOpaqueRustAutoOpaqueNormalAndOpaqueArgTwinNormal(
      {required NonCloneSimpleTwinNormal a, required String b});

  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueNormalAndOpaqueArgTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync a, required String b});

  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueNormalAndOpaqueArgTwinSync(
          {required NonCloneSimpleTwinSync a, required String b});

  Future<void> crateApiRustAutoOpaqueRustAutoOpaquePlusSignArgTwinNormal(
      {required BoxMyTraitTwinNormal arg});

  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaquePlusSignArgTwinRustAsync(
          {required BoxMyTraitTwinRustAsync arg});

  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaquePlusSignArgTwinSync(
          {required BoxMyTraitTwinSync arg});

  Future<BoxMyTraitTwinNormal>
      crateApiRustAutoOpaqueRustAutoOpaquePlusSignReturnTwinNormal();

  Future<BoxMyTraitTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaquePlusSignReturnTwinRustAsync();

  BoxMyTraitTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaquePlusSignReturnTwinSync();

  Future<(OpaqueOneTwinNormal, OpaqueTwoTwinNormal)>
      crateApiRustAutoOpaqueRustAutoOpaqueReturnOpaqueOneAndTwoTwinNormal();

  Future<(OpaqueOneTwinRustAsync, OpaqueTwoTwinRustAsync)>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueReturnOpaqueOneAndTwoTwinRustAsync();

  (
    OpaqueOneTwinSync,
    OpaqueTwoTwinSync
  ) crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueReturnOpaqueOneAndTwoTwinSync();

  Future<OpaqueTwoTwinNormal>
      crateApiRustAutoOpaqueRustAutoOpaqueReturnOpaqueTwoTwinNormal();

  Future<OpaqueTwoTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueReturnOpaqueTwoTwinRustAsync();

  OpaqueTwoTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueReturnOpaqueTwoTwinSync();

  Future<NonCloneSimpleTwinNormal>
      crateApiRustAutoOpaqueRustAutoOpaqueReturnOwnTwinNormal(
          {required int initial});

  Future<NonCloneSimpleTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueReturnOwnTwinRustAsync(
          {required int initial});

  NonCloneSimpleTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueReturnOwnTwinSync(
          {required int initial});

  Future<List<NonCloneSimpleTwinNormal>>
      crateApiRustAutoOpaqueRustAutoOpaqueReturnVecOwnTwinNormal();

  Future<List<NonCloneSimpleTwinRustAsync>>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueReturnVecOwnTwinRustAsync();

  List<NonCloneSimpleTwinSync>
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueReturnVecOwnTwinSync();

  Future<int> crateApiRustAutoOpaqueRustAutoOpaqueSleepTwinNormal(
      {required NonCloneSimpleTwinNormal apple,
      required NonCloneSimpleTwinNormal orange});

  Future<int>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueSleepTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync apple,
          required NonCloneSimpleTwinRustAsync orange});

  int crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueSleepTwinSync(
      {required NonCloneSimpleTwinSync apple,
      required NonCloneSimpleTwinSync orange});

  Stream<NonCloneSimpleTwinNormal>
      crateApiRustAutoOpaqueRustAutoOpaqueStreamSinkTwinNormal();

  Stream<NonCloneSimpleTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueStreamSinkTwinRustAsync();

  Stream<NonCloneSimpleTwinSync>
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueStreamSinkTwinSync();

  Future<void>
      crateApiRustAutoOpaqueRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinNormal(
          {required StructWithGoodAndOpaqueFieldTwinNormal arg});

  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinRustAsync(
          {required StructWithGoodAndOpaqueFieldTwinRustAsync arg});

  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinSync(
          {required StructWithGoodAndOpaqueFieldTwinSync arg});

  Future<StructWithGoodAndOpaqueFieldTwinNormal>
      crateApiRustAutoOpaqueRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinNormal();

  Future<StructWithGoodAndOpaqueFieldTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinRustAsync();

  StructWithGoodAndOpaqueFieldTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinSync();

  Future<void> crateApiRustAutoOpaqueRustAutoOpaqueTwoArgsTwinNormal(
      {required NonCloneSimpleTwinNormal a,
      required NonCloneSimpleTwinNormal b});

  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueTwoArgsTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync a,
          required NonCloneSimpleTwinRustAsync b});

  void crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueTwoArgsTwinSync(
      {required NonCloneSimpleTwinSync a, required NonCloneSimpleTwinSync b});

  Future<void> crateApiDartFnRustCallDartLoopbackTwinNormal(
      {required FutureOr<DemoStructForRustCallDartTwinNormal> Function(
              DemoStructForRustCallDartTwinNormal)
          callback});

  Future<void>
      crateApiPseudoManualDartFnTwinRustAsyncRustCallDartLoopbackTwinRustAsync(
          {required FutureOr<DemoStructForRustCallDartTwinRustAsync> Function(
                  DemoStructForRustCallDartTwinRustAsync)
              callback});

  Future<void> crateApiDartFnRustCallDartMultiTimesTwinNormal(
      {required FutureOr<void> Function() callback, required int numTimes});

  Future<void>
      crateApiPseudoManualDartFnTwinRustAsyncRustCallDartMultiTimesTwinRustAsync(
          {required FutureOr<void> Function() callback, required int numTimes});

  Future<void> crateApiDartFnRustCallDartOneArgTwinNormal(
      {required FutureOr<void> Function(String) callback});

  Future<void>
      crateApiPseudoManualDartFnTwinRustAsyncRustCallDartOneArgTwinRustAsync(
          {required FutureOr<void> Function(String) callback});

  Future<void> crateApiDartFnRustCallDartReturnResultTwinNormal(
      {required FutureOr<String> Function(String) callback,
      String? expectOutput});

  Future<void>
      crateApiPseudoManualDartFnTwinRustAsyncRustCallDartReturnResultTwinRustAsync(
          {required FutureOr<String> Function(String) callback,
          String? expectOutput});

  Future<void> crateApiDartFnRustCallDartReturnTwinNormal(
      {required FutureOr<String> Function() callback});

  Future<void>
      crateApiPseudoManualDartFnTwinRustAsyncRustCallDartReturnTwinRustAsync(
          {required FutureOr<String> Function() callback});

  Future<void> crateApiDartFnRustCallDartSimpleTwinNormal(
      {required FutureOr<void> Function() callback});

  Future<void>
      crateApiPseudoManualDartFnTwinRustAsyncRustCallDartSimpleTwinRustAsync(
          {required FutureOr<void> Function() callback});

  Future<void> crateApiDartFnRustCallDartTwoArgsTwinNormal(
      {required FutureOr<void> Function(
              String, DemoStructForRustCallDartTwinNormal)
          callback});

  Future<void>
      crateApiPseudoManualDartFnTwinRustAsyncRustCallDartTwoArgsTwinRustAsync(
          {required FutureOr<void> Function(
                  String, DemoStructForRustCallDartTwinRustAsync)
              callback});

  Future<void> crateApiDartFnRustCallDartWithDartOpaqueArgTwinNormal(
      {required Object input,
      required FutureOr<void> Function(Object) callback});

  Future<void>
      crateApiPseudoManualDartFnTwinRustAsyncRustCallDartWithDartOpaqueArgTwinRustAsync(
          {required Object input,
          required FutureOr<void> Function(Object) callback});

  Future<Object> crateApiDartFnRustCallDartWithDartOpaqueResultTwinNormal(
      {required FutureOr<Object> Function() callback});

  Future<Object>
      crateApiPseudoManualDartFnTwinRustAsyncRustCallDartWithDartOpaqueResultTwinRustAsync(
          {required FutureOr<Object> Function() callback});

  Future<void> crateApiMiscNoTwinExampleASameFunctionNameInDifferentFiles();

  Future<void> crateApiMiscNoTwinExampleBSameFunctionNameInDifferentFiles();

  Future<void> crateApiDartOpaqueSetStaticDartOpaqueTwinNormal(
      {required int id, required Object opaque});

  Future<void>
      crateApiPseudoManualDartOpaqueTwinRustAsyncSetStaticDartOpaqueTwinRustAsync(
          {required int id, required Object opaque});

  void crateApiPseudoManualDartOpaqueTwinSyncSetStaticDartOpaqueTwinSync(
      {required int id, required Object opaque});

  Future<int> crateApiSimpleSimpleAdderTwinNormal(
      {required int a, required int b});

  Future<int> crateApiPseudoManualSimpleTwinRustAsyncSimpleAdderTwinRustAsync(
      {required int a, required int b});

  int crateApiPseudoManualSimpleTwinSyncSimpleAdderTwinSync(
      {required int a, required int b});

  Future<SimpleEnumTwinNormal>
      crateApiMethodSimpleEnumTwinNormalReturnSelfTwinNormal(
          {required String one});

  Future<String> crateApiMethodSimpleEnumTwinNormalSimpleMethodTwinNormal(
      {required SimpleEnumTwinNormal that});

  Future<SimpleEnumTwinRustAsync>
      crateApiPseudoManualMethodTwinRustAsyncSimpleEnumTwinRustAsyncReturnSelfTwinRustAsync(
          {required String one});

  Future<String>
      crateApiPseudoManualMethodTwinRustAsyncSimpleEnumTwinRustAsyncSimpleMethodTwinRustAsync(
          {required SimpleEnumTwinRustAsync that});

  SimpleEnumTwinSync
      crateApiPseudoManualMethodTwinSyncSimpleEnumTwinSyncReturnSelfTwinSync(
          {required String one});

  String
      crateApiPseudoManualMethodTwinSyncSimpleEnumTwinSyncSimpleMethodTwinSync(
          {required SimpleEnumTwinSync that});

  Future<int> crateApiMethodSimplePrimitiveEnumTwinNormalSimpleMethodTwinNormal(
      {required SimplePrimitiveEnumTwinNormal that});

  Future<int>
      crateApiPseudoManualMethodTwinRustAsyncSimplePrimitiveEnumTwinRustAsyncSimpleMethodTwinRustAsync(
          {required SimplePrimitiveEnumTwinRustAsync that});

  int crateApiPseudoManualMethodTwinSyncSimplePrimitiveEnumTwinSyncSimpleMethodTwinSync(
      {required SimplePrimitiveEnumTwinSync that});

  Future<String> crateApiMethodSimpleStructTwinNormalArgSelfTwinNormal(
      {required SimpleStructTwinNormal a, required SimpleStructTwinNormal b});

  Future<String> crateApiMethodSimpleStructTwinNormalReceiverBorrowTwinNormal(
      {required SimpleStructTwinNormal that});

  Future<String> crateApiMethodSimpleStructTwinNormalReceiverOwnTwinNormal(
      {required SimpleStructTwinNormal that});

  Future<SimpleStructTwinNormal>
      crateApiMethodSimpleStructTwinNormalReturnSelfTwinNormal(
          {required String one});

  Future<List<String>> crateApiMethodSimpleStructTwinNormalVecSelfTwinNormal(
      {required List<SimpleStructTwinNormal> arg});

  Future<String>
      crateApiPseudoManualMethodTwinRustAsyncSimpleStructTwinRustAsyncArgSelfTwinRustAsync(
          {required SimpleStructTwinRustAsync a,
          required SimpleStructTwinRustAsync b});

  Future<String>
      crateApiPseudoManualMethodTwinRustAsyncSimpleStructTwinRustAsyncReceiverBorrowTwinRustAsync(
          {required SimpleStructTwinRustAsync that});

  Future<String>
      crateApiPseudoManualMethodTwinRustAsyncSimpleStructTwinRustAsyncReceiverOwnTwinRustAsync(
          {required SimpleStructTwinRustAsync that});

  Future<SimpleStructTwinRustAsync>
      crateApiPseudoManualMethodTwinRustAsyncSimpleStructTwinRustAsyncReturnSelfTwinRustAsync(
          {required String one});

  Future<List<String>>
      crateApiPseudoManualMethodTwinRustAsyncSimpleStructTwinRustAsyncVecSelfTwinRustAsync(
          {required List<SimpleStructTwinRustAsync> arg});

  String crateApiPseudoManualMethodTwinSyncSimpleStructTwinSyncArgSelfTwinSync(
      {required SimpleStructTwinSync a, required SimpleStructTwinSync b});

  String
      crateApiPseudoManualMethodTwinSyncSimpleStructTwinSyncReceiverBorrowTwinSync(
          {required SimpleStructTwinSync that});

  String
      crateApiPseudoManualMethodTwinSyncSimpleStructTwinSyncReceiverOwnTwinSync(
          {required SimpleStructTwinSync that});

  SimpleStructTwinSync
      crateApiPseudoManualMethodTwinSyncSimpleStructTwinSyncReturnSelfTwinSync(
          {required String one});

  List<String>
      crateApiPseudoManualMethodTwinSyncSimpleStructTwinSyncVecSelfTwinSync(
          {required List<SimpleStructTwinSync> arg});

  Future<String>
      crateApiExternalImplSimpleTranslatableExternalStructWithMethodSimpleExternalMethod(
          {required SimpleTranslatableExternalStructWithMethod that});

  Future<String> crateApiAsyncSpawnSimpleUseAsyncSpawn({required String arg});

  Future<String> crateApiAsyncSpawnSimpleUseAsyncSpawnBlocking(
      {required String arg});

  Stream<String> crateApiAsyncSpawnSimpleUseAsyncSpawnLocal(
      {required String arg});

  Future<SomeStructTwinNormal>
      crateApiExceptionSomeStructTwinNormalNewTwinNormal({required int value});

  Future<int>
      crateApiExceptionSomeStructTwinNormalNonStaticReturnErrCustomErrorTwinNormal(
          {required SomeStructTwinNormal that});

  Future<int>
      crateApiExceptionSomeStructTwinNormalNonStaticReturnOkCustomErrorTwinNormal(
          {required SomeStructTwinNormal that});

  Future<int>
      crateApiExceptionSomeStructTwinNormalStaticReturnErrCustomErrorTwinNormal();

  Future<int>
      crateApiExceptionSomeStructTwinNormalStaticReturnOkCustomErrorTwinNormal();

  Future<SomeStructTwinRustAsync>
      crateApiPseudoManualExceptionTwinRustAsyncSomeStructTwinRustAsyncNewTwinRustAsync(
          {required int value});

  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncSomeStructTwinRustAsyncNonStaticReturnErrCustomErrorTwinRustAsync(
          {required SomeStructTwinRustAsync that});

  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncSomeStructTwinRustAsyncNonStaticReturnOkCustomErrorTwinRustAsync(
          {required SomeStructTwinRustAsync that});

  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncSomeStructTwinRustAsyncStaticReturnErrCustomErrorTwinRustAsync();

  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncSomeStructTwinRustAsyncStaticReturnOkCustomErrorTwinRustAsync();

  SomeStructTwinSync
      crateApiPseudoManualExceptionTwinSyncSomeStructTwinSyncNewTwinSync(
          {required int value});

  int crateApiPseudoManualExceptionTwinSyncSomeStructTwinSyncNonStaticReturnErrCustomErrorTwinSync(
      {required SomeStructTwinSync that});

  int crateApiPseudoManualExceptionTwinSyncSomeStructTwinSyncNonStaticReturnOkCustomErrorTwinSync(
      {required SomeStructTwinSync that});

  int crateApiPseudoManualExceptionTwinSyncSomeStructTwinSyncStaticReturnErrCustomErrorTwinSync();

  int crateApiPseudoManualExceptionTwinSyncSomeStructTwinSyncStaticReturnOkCustomErrorTwinSync();

  Future<int> crateApiMethodStaticOnlyTwinNormalStaticMethodTwinNormal(
      {required int a});

  Future<int>
      crateApiPseudoManualMethodTwinRustAsyncStaticOnlyTwinRustAsyncStaticMethodTwinRustAsync(
          {required int a});

  int crateApiPseudoManualMethodTwinSyncStaticOnlyTwinSyncStaticMethodTwinSync(
      {required int a});

  Future<Stream<int>> crateApiStreamMiscStreamSinkDartAsyncTwinNormal();

  Stream<U8Array2> crateApiStreamStreamSinkFixedSizedPrimitiveArrayTwinNormal();

  Stream<U8Array2>
      crateApiPseudoManualStreamTwinRustAsyncStreamSinkFixedSizedPrimitiveArrayTwinRustAsync();

  Future<void> crateApiStreamStreamSinkInsideStructTwinNormal(
      {required MyStructContainingStreamSinkTwinNormal arg});

  Future<void>
      crateApiPseudoManualStreamTwinRustAsyncStreamSinkInsideStructTwinRustAsync(
          {required MyStructContainingStreamSinkTwinRustAsync arg});

  Future<void> crateApiStreamStreamSinkInsideVecTwinNormal(
      {required List<RustStreamSink<int>> arg});

  Future<void>
      crateApiPseudoManualStreamTwinRustAsyncStreamSinkInsideVecTwinRustAsync(
          {required List<RustStreamSink<int>> arg});

  Future<Stream<String>> crateApiExceptionStreamSinkThrowAnyhowTwinNormal();

  Future<Stream<String>>
      crateApiPseudoManualExceptionTwinRustAsyncStreamSinkThrowAnyhowTwinRustAsync();

  Stream<String>
      crateApiPseudoManualExceptionTwinSyncStreamSinkThrowAnyhowTwinSync();

  Future<void>
      crateApiCommentStructWithCommentsTwinNormalInstanceMethodTwinNormal(
          {required StructWithCommentsTwinNormal that});

  Future<void>
      crateApiCommentStructWithCommentsTwinNormalStaticMethodTwinNormal();

  Future<void>
      crateApiPseudoManualCommentTwinRustAsyncStructWithCommentsTwinRustAsyncInstanceMethodTwinRustAsync(
          {required StructWithCommentsTwinRustAsync that});

  Future<void>
      crateApiPseudoManualCommentTwinRustAsyncStructWithCommentsTwinRustAsyncStaticMethodTwinRustAsync();

  void
      crateApiPseudoManualCommentTwinSyncStructWithCommentsTwinSyncInstanceMethodTwinSync(
          {required StructWithCommentsTwinSync that});

  void
      crateApiPseudoManualCommentTwinSyncStructWithCommentsTwinSyncStaticMethodTwinSync();

  void
      crateApiMiscNoTwinExampleAStructWithCustomNameMethodTwinNormalMethodWithCustomNameTwinNormal(
          {required StructWithCustomNameMethodTwinNormal that});

  Future<void> crateApiMiscNoTwinExampleAStructWithImplBlockInAnotherFileF(
      {required StructWithImplBlockInAnotherFileDependency arg});

  Future<void> crateApiMiscNoTwinExampleAStructWithRawNameFieldDummyFunction();

  Future<StructWithRustAutoOpaqueFieldWithManyDerive>
      crateApiMiscNoTwinExampleAStructWithRustAutoOpaqueFieldWithManyDeriveDefault();

  Future<void>
      crateApiMiscNoTwinExampleAStructWithRustAutoOpaqueFieldWithManyDeriveF(
          {required StructWithRustAutoOpaqueFieldWithManyDerive that});

  Future<void>
      crateApiMiscNoTwinExampleAStructWithRustAutoOpaqueWithNonCloneDataF(
          {required StructWithRustAutoOpaqueWithNonCloneData that});

  Future<int> crateApiMethodSumWithTwinNormalSumTwinNormal(
      {required SumWithTwinNormal that, required int y, required int z});

  Future<int>
      crateApiPseudoManualMethodTwinRustAsyncSumWithTwinRustAsyncSumTwinRustAsync(
          {required SumWithTwinRustAsync that, required int y, required int z});

  int crateApiPseudoManualMethodTwinSyncSumWithTwinSyncSumTwinSync(
      {required SumWithTwinSync that, required int y, required int z});

  String crateApiDartOpaqueSyncSyncAcceptDartOpaqueTwinNormal(
      {required Object opaque});

  NonCloneDataTwinNormal crateApiRustOpaqueSyncSyncCreateNonCloneTwinNormal();

  HideDataAnotherTwinNormal crateApiRustOpaqueSyncSyncCreateOpaqueTwinNormal();

  Object crateApiDartOpaqueSyncSyncLoopbackTwinNormal({required Object opaque});

  Object? crateApiDartOpaqueSyncSyncOptionDartOpaqueTwinNormal(
      {required Object opaque});

  Object? crateApiDartOpaqueSyncSyncOptionLoopbackTwinNormal({Object? opaque});

  HideDataAnotherTwinNormal?
      crateApiRustOpaqueSyncSyncOptionRustOpaqueTwinNormal();

  Future<AbcTwinNormal> crateApiMiscExampleTestAbcEnumTwinNormal(
      {required AbcTwinNormal abc});

  Future<AbcTwinRustAsync>
      crateApiPseudoManualMiscExampleTwinRustAsyncTestAbcEnumTwinRustAsync(
          {required AbcTwinRustAsync abc});

  AbcTwinSync crateApiPseudoManualMiscExampleTwinSyncTestAbcEnumTwinSync(
      {required AbcTwinSync abc});

  Future<TestChronoTwinNormal> crateApiChronoTypeTestChronoTwinNormal();

  Future<TestChronoTwinRustAsync>
      crateApiPseudoManualChronoTypeTwinRustAsyncTestChronoTwinRustAsync();

  TestChronoTwinSync crateApiPseudoManualChronoTypeTwinSyncTestChronoTwinSync();

  Future<ContainsMirroredSubStructTwinNormal>
      crateApiMirrorTestContainsMirroredSubStructTwinNormal();

  Future<ContainsMirroredSubStructTwinRustAsync>
      crateApiPseudoManualMirrorTwinRustAsyncTestContainsMirroredSubStructTwinRustAsync();

  ContainsMirroredSubStructTwinSync
      crateApiPseudoManualMirrorTwinSyncTestContainsMirroredSubStructTwinSync();

  Future<StructInUpperLevel>
      crateApiDeliberateNameConflictTestDuplicatedModuleNames(
          {required StructInLowerLevel s});

  Future<List<RawStringMirrored>>
      crateApiMirrorTestFallibleOfRawStringMirroredTwinNormal();

  Future<List<RawStringMirrored>>
      crateApiPseudoManualMirrorTwinRustAsyncTestFallibleOfRawStringMirroredTwinRustAsync();

  List<RawStringMirrored>
      crateApiPseudoManualMirrorTwinSyncTestFallibleOfRawStringMirroredTwinSync();

  Future<StructWithHashMap>
      crateApiMirrorTestHashmapWithMirroredValueTwinNormal();

  Future<StructWithHashMap>
      crateApiPseudoManualMirrorTwinRustAsyncTestHashmapWithMirroredValueTwinRustAsync();

  StructWithHashMap
      crateApiPseudoManualMirrorTwinSyncTestHashmapWithMirroredValueTwinSync();

  Future<List<RawStringEnumMirrored>>
      crateApiMirrorTestListOfNestedEnumsMirroredTwinNormal();

  Future<List<RawStringEnumMirrored>>
      crateApiPseudoManualMirrorTwinRustAsyncTestListOfNestedEnumsMirroredTwinRustAsync();

  List<RawStringEnumMirrored>
      crateApiPseudoManualMirrorTwinSyncTestListOfNestedEnumsMirroredTwinSync();

  Future<ListOfNestedRawStringMirrored>
      crateApiMirrorTestListOfRawNestedStringMirroredTwinNormal();

  Future<ListOfNestedRawStringMirrored>
      crateApiPseudoManualMirrorTwinRustAsyncTestListOfRawNestedStringMirroredTwinRustAsync();

  ListOfNestedRawStringMirrored
      crateApiPseudoManualMirrorTwinSyncTestListOfRawNestedStringMirroredTwinSync();

  Future<MoreThanJustOneRawStringStructTwinNormal>
      crateApiRawStringTestMoreThanJustOneRawStringStructTwinNormal();

  Future<MoreThanJustOneRawStringStructTwinRustAsync>
      crateApiPseudoManualRawStringTwinRustAsyncTestMoreThanJustOneRawStringStructTwinRustAsync();

  MoreThanJustOneRawStringStructTwinSync
      crateApiPseudoManualRawStringTwinSyncTestMoreThanJustOneRawStringStructTwinSync();

  Future<NestedRawStringMirrored>
      crateApiMirrorTestNestedRawStringMirroredTwinNormal();

  Future<NestedRawStringMirrored>
      crateApiPseudoManualMirrorTwinRustAsyncTestNestedRawStringMirroredTwinRustAsync();

  NestedRawStringMirrored
      crateApiPseudoManualMirrorTwinSyncTestNestedRawStringMirroredTwinSync();

  Future<TestChronoTwinNormal> crateApiChronoTypeTestPreciseChronoTwinNormal();

  Future<TestChronoTwinRustAsync>
      crateApiPseudoManualChronoTypeTwinRustAsyncTestPreciseChronoTwinRustAsync();

  TestChronoTwinSync
      crateApiPseudoManualChronoTypeTwinSyncTestPreciseChronoTwinSync();

  Future<RawStringEnumMirrored>
      crateApiMirrorTestRawStringEnumMirroredTwinNormal({required bool nested});

  Future<RawStringEnumMirrored>
      crateApiPseudoManualMirrorTwinRustAsyncTestRawStringEnumMirroredTwinRustAsync(
          {required bool nested});

  RawStringEnumMirrored
      crateApiPseudoManualMirrorTwinSyncTestRawStringEnumMirroredTwinSync(
          {required bool nested});

  Future<RawStringItemEnumTwinNormal>
      crateApiRawStringTestRawStringItemEnumTwinNormal();

  Future<RawStringItemEnumTwinRustAsync>
      crateApiPseudoManualRawStringTwinRustAsyncTestRawStringItemEnumTwinRustAsync();

  RawStringItemEnumTwinSync
      crateApiPseudoManualRawStringTwinSyncTestRawStringItemEnumTwinSync();

  Future<RawStringItemStructTwinNormal>
      crateApiRawStringTestRawStringItemStructTwinNormal();

  Future<RawStringItemStructTwinRustAsync>
      crateApiPseudoManualRawStringTwinRustAsyncTestRawStringItemStructTwinRustAsync();

  RawStringItemStructTwinSync
      crateApiPseudoManualRawStringTwinSyncTestRawStringItemStructTwinSync();

  Future<RawStringMirrored> crateApiMirrorTestRawStringMirroredTwinNormal();

  Future<RawStringMirrored>
      crateApiPseudoManualMirrorTwinRustAsyncTestRawStringMirroredTwinRustAsync();

  RawStringMirrored
      crateApiPseudoManualMirrorTwinSyncTestRawStringMirroredTwinSync();

  Future<StructWithEnumTwinNormal>
      crateApiMiscExampleTestStructWithEnumTwinNormal(
          {required StructWithEnumTwinNormal se});

  Future<StructWithEnumTwinRustAsync>
      crateApiPseudoManualMiscExampleTwinRustAsyncTestStructWithEnumTwinRustAsync(
          {required StructWithEnumTwinRustAsync se});

  StructWithEnumTwinSync
      crateApiPseudoManualMiscExampleTwinSyncTestStructWithEnumTwinSync(
          {required StructWithEnumTwinSync se});

  Future<void> crateApiTupleTestTuple2TwinNormal(
      {required List<(String, int)> value});

  Future<void> crateApiPseudoManualTupleTwinRustAsyncTestTuple2TwinRustAsync(
      {required List<(String, int)> value});

  void crateApiPseudoManualTupleTwinSyncTestTuple2TwinSync(
      {required List<(String, int)> value});

  Future<(String, int)> crateApiTupleTestTupleTwinNormal(
      {(String, int)? value});

  Future<(String, int)>
      crateApiPseudoManualTupleTwinRustAsyncTestTupleTwinRustAsync(
          {(String, int)? value});

  (String, int) crateApiPseudoManualTupleTwinSyncTestTupleTwinSync(
      {(String, int)? value});

  Future<void> crateApiExceptionThrowAnyhowTwinNormal();

  Future<void>
      crateApiPseudoManualExceptionTwinRustAsyncThrowAnyhowTwinRustAsync();

  void crateApiPseudoManualExceptionTwinSyncThrowAnyhowTwinSync();

  Future<int>
      crateApiDartCodeTranslatableStructWithDartCodeTwinNormalNormalMethodTwinNormal(
          {required TranslatableStructWithDartCodeTwinNormal that});

  String crateApiDartOpaqueSyncUnwrapDartOpaqueTwinNormal(
      {required Object opaque});

  Future<String> crateApiRustOpaqueUnwrapRustOpaqueTwinNormal(
      {required HideDataTwinNormal opaque});

  Future<String>
      crateApiPseudoManualRustOpaqueTwinRustAsyncUnwrapRustOpaqueTwinRustAsync(
          {required HideDataTwinRustAsync opaque});

  String crateApiPseudoManualRustOpaqueTwinSyncUnwrapRustOpaqueTwinSync(
      {required HideDataTwinSync opaque});

  Future<U8Array1600> crateApiArrayUseBoxedBlobTwinNormal(
      {required BlobTwinNormal blob});

  Future<U8Array1600>
      crateApiPseudoManualArrayTwinRustAsyncUseBoxedBlobTwinRustAsync(
          {required BlobTwinRustAsync blob});

  U8Array1600 crateApiPseudoManualArrayTwinSyncUseBoxedBlobTwinSync(
      {required BlobTwinSync blob});

  Future<bool> crateApiExternalTypeInCrateUseImportedEnumTwinNormal(
      {required MyEnum myEnum});

  Future<bool>
      crateApiPseudoManualExternalTypeInCrateTwinRustAsyncUseImportedEnumTwinRustAsync(
          {required MyEnum myEnum});

  bool crateApiPseudoManualExternalTypeInCrateTwinSyncUseImportedEnumTwinSync(
      {required MyEnum myEnum});

  Future<bool> crateApiExternalTypeInCrateUseImportedStructTwinNormal(
      {required MyStruct myStruct});

  Future<bool>
      crateApiPseudoManualExternalTypeInCrateTwinRustAsyncUseImportedStructTwinRustAsync(
          {required MyStruct myStruct});

  bool crateApiPseudoManualExternalTypeInCrateTwinSyncUseImportedStructTwinSync(
      {required MyStruct myStruct});

  Future<U8Array32> crateApiArrayUseMsgidTwinNormal(
      {required MessageIdTwinNormal id});

  Future<U8Array32> crateApiPseudoManualArrayTwinRustAsyncUseMsgidTwinRustAsync(
      {required MessageIdTwinRustAsync id});

  U8Array32 crateApiPseudoManualArrayTwinSyncUseMsgidTwinSync(
      {required MessageIdTwinSync id});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxDartDebugTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxDartDebugTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxDartDebugTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxDartDebugTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxDartDebugTwinRustAsync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxDartDebugTwinRustAsyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxDartDebugTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxDartDebugTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxDartDebugTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbOpaqueReturnTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbOpaqueReturnTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_FrbOpaqueReturnTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbOpaqueReturnTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbOpaqueReturnTwinRustAsync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_FrbOpaqueReturnTwinRustAsyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbOpaqueReturnTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbOpaqueReturnTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_FrbOpaqueReturnTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbOpaqueSyncReturnTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbOpaqueSyncReturnTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_FrbOpaqueSyncReturnTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_HideDataAnotherTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_HideDataAnotherTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_HideDataAnotherTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_HideDataTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_HideDataTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_HideDataTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_HideDataTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_HideDataTwinRustAsync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_HideDataTwinRustAsyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_HideDataTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_HideDataTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_HideDataTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MutexHideDataTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MutexHideDataTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MutexHideDataTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MutexHideDataTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MutexHideDataTwinRustAsync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MutexHideDataTwinRustAsyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MutexHideDataTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MutexHideDataTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MutexHideDataTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneDataTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneDataTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_NonCloneDataTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneDataTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneDataTwinRustAsync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_NonCloneDataTwinRustAsyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneDataTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneDataTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_NonCloneDataTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockHideDataTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockHideDataTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockHideDataTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockHideDataTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockHideDataTwinRustAsync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockHideDataTwinRustAsyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockHideDataTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockHideDataTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockHideDataTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxAnyMyDartTypeRename;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxAnyMyDartTypeRename;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxAnyMyDartTypeRenamePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxFnStringString;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxFnStringString;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxFnStringStringPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxMyTraitTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxMyTraitTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxMyTraitTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxMyTraitTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxMyTraitTwinRustAsync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxMyTraitTwinRustAsyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxMyTraitTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxMyTraitTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxMyTraitTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ConstructorOpaqueStructTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ConstructorOpaqueStructTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ConstructorOpaqueStructTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ConstructorOpaqueSyncStructTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ConstructorOpaqueSyncStructTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ConstructorOpaqueSyncStructTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_CustomHasherTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_CustomHasherTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_CustomHasherTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_CustomHasherTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_CustomHasherTwinRustAsync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_CustomHasherTwinRustAsyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_CustomHasherTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_CustomHasherTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_CustomHasherTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DeliberateFailSanityCheckTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DeliberateFailSanityCheckTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_DeliberateFailSanityCheckTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DroppableTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DroppableTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_DroppableTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DroppableTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DroppableTwinRustAsync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_DroppableTwinRustAsyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DroppableTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DroppableTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_DroppableTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinRustAsync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ItemContainerSolutionOneTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ItemContainerSolutionOneTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ItemContainerSolutionOneTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LtNestedTypeWithLifetimeTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LtNestedTypeWithLifetimeTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_LtNestedTypeWithLifetimeTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LtNestedTypeWithLifetimeTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LtNestedTypeWithLifetimeTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_LtNestedTypeWithLifetimeTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LtTypeWithLifetimeTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LtTypeWithLifetimeTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_LtTypeWithLifetimeTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LtTypeWithLifetimeTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LtTypeWithLifetimeTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_LtTypeWithLifetimeTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LtTypeWithMultiDepTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LtTypeWithMultiDepTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_LtTypeWithMultiDepTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LtTypeWithMultiDepTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LtTypeWithMultiDepTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_LtTypeWithMultiDepTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LtOwnedStructTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LtOwnedStructTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_LtOwnedStructTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LtOwnedStructTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LtOwnedStructTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_LtOwnedStructTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LtSubStructTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LtSubStructTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_LtSubStructTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LtSubStructTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LtSubStructTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_LtSubStructTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MyAudioParamTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MyAudioParamTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MyAudioParamTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MyImplTraitWithSelfTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MyImplTraitWithSelfTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MyImplTraitWithSelfTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MyImplTraitWithSelfTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MyImplTraitWithSelfTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MyImplTraitWithSelfTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MyNodeTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MyNodeTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MyNodeTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MyStructWithTryFromTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MyStructWithTryFromTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MyStructWithTryFromTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneDataRaw;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneDataRaw;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_NonCloneDataRawPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneSimpleEnumTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneSimpleEnumTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_NonCloneSimpleEnumTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneSimpleEnumTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneSimpleEnumTwinRustAsync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_NonCloneSimpleEnumTwinRustAsyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneSimpleEnumTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneSimpleEnumTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_NonCloneSimpleEnumTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneSimpleTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneSimpleTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_NonCloneSimpleTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneSimpleTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneSimpleTwinRustAsync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_NonCloneSimpleTwinRustAsyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneSimpleTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneSimpleTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_NonCloneSimpleTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueItemTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueItemTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_OpaqueItemTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueOneTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueOneTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_OpaqueOneTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueOneTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueOneTwinRustAsync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_OpaqueOneTwinRustAsyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueOneTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueOneTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_OpaqueOneTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueStructWithDartCodeTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueStructWithDartCodeTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_OpaqueStructWithDartCodeTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueTwoTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueTwoTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_OpaqueTwoTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueTwoTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueTwoTwinRustAsync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_OpaqueTwoTwinRustAsyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueTwoTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueTwoTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_OpaqueTwoTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SimpleLogger;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SimpleLogger;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SimpleLoggerPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SimpleOpaqueExternalStructWithMethod;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SimpleOpaqueExternalStructWithMethod;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_SimpleOpaqueExternalStructWithMethodPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StaticGetterOnlyTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StaticGetterOnlyTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_StaticGetterOnlyTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StaticGetterOnlyTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StaticGetterOnlyTwinRustAsync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_StaticGetterOnlyTwinRustAsyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StaticGetterOnlyTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StaticGetterOnlyTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_StaticGetterOnlyTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructInMiscNoTwinExampleA;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructInMiscNoTwinExampleA;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_StructInMiscNoTwinExampleAPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructInMiscNoTwinExampleB;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructInMiscNoTwinExampleB;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_StructInMiscNoTwinExampleBPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructOneWithTraitForDynTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructOneWithTraitForDynTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_StructOneWithTraitForDynTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructOneWithTraitTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructOneWithTraitTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_StructOneWithTraitTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructOneWithTraitTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructOneWithTraitTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_StructOneWithTraitTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructTwoWithTraitForDynTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructTwoWithTraitForDynTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_StructTwoWithTraitForDynTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructTwoWithTraitTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructTwoWithTraitTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_StructTwoWithTraitTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructTwoWithTraitTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructTwoWithTraitTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_StructTwoWithTraitTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructWithImplBlockInMultiFile;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructWithImplBlockInMultiFile;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_StructWithImplBlockInMultiFilePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructWithRustAutoOpaqueFieldWithManyDeriveInner;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructWithRustAutoOpaqueFieldWithManyDeriveInner;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_StructWithRustAutoOpaqueFieldWithManyDeriveInnerPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructWithSimpleSetterTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructWithSimpleSetterTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_StructWithSimpleSetterTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_TypeForIgnore;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_TypeForIgnore;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_TypeForIgnorePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_TypeForIgnoreAll;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_TypeForIgnoreAll;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_TypeForIgnoreAllPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_I32;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_I32;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_I32Ptr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  F32Array3 crateApiMiscNoTwinExampleAConstArrayTwinNormal() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_32_array_3,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMiscNoTwinExampleAConstArrayTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMiscNoTwinExampleAConstArrayTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "CONST_ARRAY_TWIN_NORMAL",
        argNames: [],
      );

  @override
  int crateApiMiscNoTwinExampleAConstIntTwinNormal() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMiscNoTwinExampleAConstIntTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMiscNoTwinExampleAConstIntTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "CONST_INT_TWIN_NORMAL",
        argNames: [],
      );

  @override
  String crateApiConstructorConstructorOpaqueStructTwinNormalAutoAccessorGetOne(
      {required ConstructorOpaqueStructTwinNormal that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueStructTwinNormal(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiConstructorConstructorOpaqueStructTwinNormalAutoAccessorGetOneConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiConstructorConstructorOpaqueStructTwinNormalAutoAccessorGetOneConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConstructorOpaqueStructTwinNormal_auto_accessor_get_one",
            argNames: ["that"],
          );

  @override
  void crateApiConstructorConstructorOpaqueStructTwinNormalAutoAccessorSetOne(
      {required ConstructorOpaqueStructTwinNormal that, required String one}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueStructTwinNormal(
            that, serializer);
        sse_encode_String(one, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiConstructorConstructorOpaqueStructTwinNormalAutoAccessorSetOneConstMeta,
      argValues: [that, one],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiConstructorConstructorOpaqueStructTwinNormalAutoAccessorSetOneConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConstructorOpaqueStructTwinNormal_auto_accessor_set_one",
            argNames: ["that", "one"],
          );

  @override
  void crateApiConstructorConstructorOpaqueStructTwinNormalCheck(
      {required ConstructorOpaqueStructTwinNormal that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueStructTwinNormal(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiConstructorConstructorOpaqueStructTwinNormalCheckConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiConstructorConstructorOpaqueStructTwinNormalCheckConstMeta =>
          const TaskConstMeta(
            debugName: "ConstructorOpaqueStructTwinNormal_check",
            argNames: ["that"],
          );

  @override
  Future<ConstructorOpaqueStructTwinNormal>
      crateApiConstructorConstructorOpaqueStructTwinNormalNew() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueStructTwinNormal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiConstructorConstructorOpaqueStructTwinNormalNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiConstructorConstructorOpaqueStructTwinNormalNewConstMeta =>
          const TaskConstMeta(
            debugName: "ConstructorOpaqueStructTwinNormal_new",
            argNames: [],
          );

  @override
  String
      crateApiConstructorConstructorOpaqueSyncStructTwinNormalAutoAccessorGetOne(
          {required ConstructorOpaqueSyncStructTwinNormal that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueSyncStructTwinNormal(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiConstructorConstructorOpaqueSyncStructTwinNormalAutoAccessorGetOneConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiConstructorConstructorOpaqueSyncStructTwinNormalAutoAccessorGetOneConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConstructorOpaqueSyncStructTwinNormal_auto_accessor_get_one",
            argNames: ["that"],
          );

  @override
  void
      crateApiConstructorConstructorOpaqueSyncStructTwinNormalAutoAccessorSetOne(
          {required ConstructorOpaqueSyncStructTwinNormal that,
          required String one}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueSyncStructTwinNormal(
            that, serializer);
        sse_encode_String(one, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiConstructorConstructorOpaqueSyncStructTwinNormalAutoAccessorSetOneConstMeta,
      argValues: [that, one],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiConstructorConstructorOpaqueSyncStructTwinNormalAutoAccessorSetOneConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConstructorOpaqueSyncStructTwinNormal_auto_accessor_set_one",
            argNames: ["that", "one"],
          );

  @override
  void crateApiConstructorConstructorOpaqueSyncStructTwinNormalCheck(
      {required ConstructorOpaqueSyncStructTwinNormal that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueSyncStructTwinNormal(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiConstructorConstructorOpaqueSyncStructTwinNormalCheckConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiConstructorConstructorOpaqueSyncStructTwinNormalCheckConstMeta =>
          const TaskConstMeta(
            debugName: "ConstructorOpaqueSyncStructTwinNormal_check",
            argNames: ["that"],
          );

  @override
  ConstructorOpaqueSyncStructTwinNormal
      crateApiConstructorConstructorOpaqueSyncStructTwinNormalNew() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueSyncStructTwinNormal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiConstructorConstructorOpaqueSyncStructTwinNormalNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiConstructorConstructorOpaqueSyncStructTwinNormalNewConstMeta =>
          const TaskConstMeta(
            debugName: "ConstructorOpaqueSyncStructTwinNormal_new",
            argNames: [],
          );

  @override
  Uint8List
      crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorGetDeliberateBadFieldA(
          {required DeliberateFailSanityCheckTwinNormal that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDeliberateFailSanityCheckTwinNormal(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorGetDeliberateBadFieldAConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorGetDeliberateBadFieldAConstMeta =>
          const TaskConstMeta(
            debugName:
                "DeliberateFailSanityCheckTwinNormal_auto_accessor_get_deliberate_bad_field_a",
            argNames: ["that"],
          );

  @override
  OpaqueItemTwinNormal
      crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorGetDeliberateBadFieldB(
          {required DeliberateFailSanityCheckTwinNormal that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDeliberateFailSanityCheckTwinNormal(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueItemTwinNormal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorGetDeliberateBadFieldBConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorGetDeliberateBadFieldBConstMeta =>
          const TaskConstMeta(
            debugName:
                "DeliberateFailSanityCheckTwinNormal_auto_accessor_get_deliberate_bad_field_b",
            argNames: ["that"],
          );

  @override
  List<OpaqueItemTwinNormal>
      crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorGetDeliberateBadFieldC(
          {required DeliberateFailSanityCheckTwinNormal that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDeliberateFailSanityCheckTwinNormal(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueItemTwinNormal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorGetDeliberateBadFieldCConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorGetDeliberateBadFieldCConstMeta =>
          const TaskConstMeta(
            debugName:
                "DeliberateFailSanityCheckTwinNormal_auto_accessor_get_deliberate_bad_field_c",
            argNames: ["that"],
          );

  @override
  String
      crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorGetGoodFieldA(
          {required DeliberateFailSanityCheckTwinNormal that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDeliberateFailSanityCheckTwinNormal(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorGetGoodFieldAConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorGetGoodFieldAConstMeta =>
          const TaskConstMeta(
            debugName:
                "DeliberateFailSanityCheckTwinNormal_auto_accessor_get_good_field_a",
            argNames: ["that"],
          );

  @override
  int crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorGetGoodFieldB(
      {required DeliberateFailSanityCheckTwinNormal that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDeliberateFailSanityCheckTwinNormal(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorGetGoodFieldBConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorGetGoodFieldBConstMeta =>
          const TaskConstMeta(
            debugName:
                "DeliberateFailSanityCheckTwinNormal_auto_accessor_get_good_field_b",
            argNames: ["that"],
          );

  @override
  OpaqueItemTwinNormal
      crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorGetGoodFieldC(
          {required DeliberateFailSanityCheckTwinNormal that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDeliberateFailSanityCheckTwinNormal(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueItemTwinNormal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorGetGoodFieldCConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorGetGoodFieldCConstMeta =>
          const TaskConstMeta(
            debugName:
                "DeliberateFailSanityCheckTwinNormal_auto_accessor_get_good_field_c",
            argNames: ["that"],
          );

  @override
  void
      crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorSetDeliberateBadFieldA(
          {required DeliberateFailSanityCheckTwinNormal that,
          required Uint8List deliberateBadFieldA}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDeliberateFailSanityCheckTwinNormal(
            that, serializer);
        sse_encode_list_prim_u_8_strict(deliberateBadFieldA, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorSetDeliberateBadFieldAConstMeta,
      argValues: [that, deliberateBadFieldA],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorSetDeliberateBadFieldAConstMeta =>
          const TaskConstMeta(
            debugName:
                "DeliberateFailSanityCheckTwinNormal_auto_accessor_set_deliberate_bad_field_a",
            argNames: ["that", "deliberateBadFieldA"],
          );

  @override
  void
      crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorSetDeliberateBadFieldB(
          {required DeliberateFailSanityCheckTwinNormal that,
          required OpaqueItemTwinNormal deliberateBadFieldB}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDeliberateFailSanityCheckTwinNormal(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueItemTwinNormal(
            deliberateBadFieldB, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 18)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorSetDeliberateBadFieldBConstMeta,
      argValues: [that, deliberateBadFieldB],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorSetDeliberateBadFieldBConstMeta =>
          const TaskConstMeta(
            debugName:
                "DeliberateFailSanityCheckTwinNormal_auto_accessor_set_deliberate_bad_field_b",
            argNames: ["that", "deliberateBadFieldB"],
          );

  @override
  void
      crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorSetDeliberateBadFieldC(
          {required DeliberateFailSanityCheckTwinNormal that,
          required List<OpaqueItemTwinNormal> deliberateBadFieldC}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDeliberateFailSanityCheckTwinNormal(
            that, serializer);
        sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueItemTwinNormal(
            deliberateBadFieldC, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 19)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorSetDeliberateBadFieldCConstMeta,
      argValues: [that, deliberateBadFieldC],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorSetDeliberateBadFieldCConstMeta =>
          const TaskConstMeta(
            debugName:
                "DeliberateFailSanityCheckTwinNormal_auto_accessor_set_deliberate_bad_field_c",
            argNames: ["that", "deliberateBadFieldC"],
          );

  @override
  void
      crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorSetGoodFieldA(
          {required DeliberateFailSanityCheckTwinNormal that,
          required String goodFieldA}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDeliberateFailSanityCheckTwinNormal(
            that, serializer);
        sse_encode_String(goodFieldA, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 20)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorSetGoodFieldAConstMeta,
      argValues: [that, goodFieldA],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorSetGoodFieldAConstMeta =>
          const TaskConstMeta(
            debugName:
                "DeliberateFailSanityCheckTwinNormal_auto_accessor_set_good_field_a",
            argNames: ["that", "goodFieldA"],
          );

  @override
  void
      crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorSetGoodFieldB(
          {required DeliberateFailSanityCheckTwinNormal that,
          required int goodFieldB}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDeliberateFailSanityCheckTwinNormal(
            that, serializer);
        sse_encode_i_32(goodFieldB, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 21)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorSetGoodFieldBConstMeta,
      argValues: [that, goodFieldB],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorSetGoodFieldBConstMeta =>
          const TaskConstMeta(
            debugName:
                "DeliberateFailSanityCheckTwinNormal_auto_accessor_set_good_field_b",
            argNames: ["that", "goodFieldB"],
          );

  @override
  void
      crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorSetGoodFieldC(
          {required DeliberateFailSanityCheckTwinNormal that,
          required OpaqueItemTwinNormal goodFieldC}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDeliberateFailSanityCheckTwinNormal(
            that, serializer);
        sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueItemTwinNormal(
            goodFieldC, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 22)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorSetGoodFieldCConstMeta,
      argValues: [that, goodFieldC],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorSetGoodFieldCConstMeta =>
          const TaskConstMeta(
            debugName:
                "DeliberateFailSanityCheckTwinNormal_auto_accessor_set_good_field_c",
            argNames: ["that", "goodFieldC"],
          );

  @override
  Future<void>
      crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalDummyFunctionTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 23, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalDummyFunctionTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalDummyFunctionTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "DeliberateFailSanityCheckTwinNormal_dummy_function_twin_normal",
            argNames: [],
          );

  @override
  Stream<int> crateApiDroppingDroppableTwinNormalCreateStream(
      {required DroppableTwinNormal that}) {
    final sink = RustStreamSink<int>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinNormal(
            that, serializer);
        sse_encode_StreamSink_i_32_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 24, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDroppingDroppableTwinNormalCreateStreamConstMeta,
      argValues: [that, sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiDroppingDroppableTwinNormalCreateStreamConstMeta =>
      const TaskConstMeta(
        debugName: "DroppableTwinNormal_create_stream",
        argNames: ["that", "sink"],
      );

  @override
  Future<int> crateApiDroppingDroppableTwinNormalGetDropCountTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 25, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiDroppingDroppableTwinNormalGetDropCountTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiDroppingDroppableTwinNormalGetDropCountTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "DroppableTwinNormal_get_drop_count_twin_normal",
            argNames: [],
          );

  @override
  Future<DroppableTwinNormal>
      crateApiDroppingDroppableTwinNormalNewTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 26, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinNormal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDroppingDroppableTwinNormalNewTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiDroppingDroppableTwinNormalNewTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "DroppableTwinNormal_new_twin_normal",
            argNames: [],
          );

  @override
  Future<void> crateApiDroppingDroppableTwinNormalSimpleMethodTwinNormal(
      {required DroppableTwinNormal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinNormal(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 27, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiDroppingDroppableTwinNormalSimpleMethodTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiDroppingDroppableTwinNormalSimpleMethodTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "DroppableTwinNormal_simple_method_twin_normal",
            argNames: ["that"],
          );

  @override
  Stream<int>
      crateApiPseudoManualDroppingTwinRustAsyncDroppableTwinRustAsyncCreateStreamTwinRustAsync(
          {required DroppableTwinRustAsync that}) {
    final sink = RustStreamSink<int>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinRustAsync(
            that, serializer);
        sse_encode_StreamSink_i_32_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 28, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDroppingTwinRustAsyncDroppableTwinRustAsyncCreateStreamTwinRustAsyncConstMeta,
      argValues: [that, sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualDroppingTwinRustAsyncDroppableTwinRustAsyncCreateStreamTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "DroppableTwinRustAsync_create_stream_twin_rust_async",
            argNames: ["that", "sink"],
          );

  @override
  Future<int>
      crateApiPseudoManualDroppingTwinRustAsyncDroppableTwinRustAsyncGetDropCountTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 29, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDroppingTwinRustAsyncDroppableTwinRustAsyncGetDropCountTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDroppingTwinRustAsyncDroppableTwinRustAsyncGetDropCountTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "DroppableTwinRustAsync_get_drop_count_twin_rust_async",
            argNames: [],
          );

  @override
  Future<DroppableTwinRustAsync>
      crateApiPseudoManualDroppingTwinRustAsyncDroppableTwinRustAsyncNewTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 30, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinRustAsync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDroppingTwinRustAsyncDroppableTwinRustAsyncNewTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDroppingTwinRustAsyncDroppableTwinRustAsyncNewTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "DroppableTwinRustAsync_new_twin_rust_async",
            argNames: [],
          );

  @override
  Future<void>
      crateApiPseudoManualDroppingTwinRustAsyncDroppableTwinRustAsyncSimpleMethodTwinRustAsync(
          {required DroppableTwinRustAsync that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinRustAsync(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 31, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDroppingTwinRustAsyncDroppableTwinRustAsyncSimpleMethodTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDroppingTwinRustAsyncDroppableTwinRustAsyncSimpleMethodTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "DroppableTwinRustAsync_simple_method_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Stream<int>
      crateApiPseudoManualDroppingTwinSyncDroppableTwinSyncCreateStreamTwinSync(
          {required DroppableTwinSync that}) {
    final sink = RustStreamSink<int>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinSync(
            that, serializer);
        sse_encode_StreamSink_i_32_Sse(sink, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 32)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDroppingTwinSyncDroppableTwinSyncCreateStreamTwinSyncConstMeta,
      argValues: [that, sink],
      apiImpl: this,
    ));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualDroppingTwinSyncDroppableTwinSyncCreateStreamTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "DroppableTwinSync_create_stream_twin_sync",
            argNames: ["that", "sink"],
          );

  @override
  int crateApiPseudoManualDroppingTwinSyncDroppableTwinSyncGetDropCountTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 33)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDroppingTwinSyncDroppableTwinSyncGetDropCountTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDroppingTwinSyncDroppableTwinSyncGetDropCountTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "DroppableTwinSync_get_drop_count_twin_sync",
            argNames: [],
          );

  @override
  DroppableTwinSync
      crateApiPseudoManualDroppingTwinSyncDroppableTwinSyncNewTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 34)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDroppingTwinSyncDroppableTwinSyncNewTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDroppingTwinSyncDroppableTwinSyncNewTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "DroppableTwinSync_new_twin_sync",
            argNames: [],
          );

  @override
  void
      crateApiPseudoManualDroppingTwinSyncDroppableTwinSyncSimpleMethodTwinSync(
          {required DroppableTwinSync that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinSync(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 35)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDroppingTwinSyncDroppableTwinSyncSimpleMethodTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDroppingTwinSyncDroppableTwinSyncSimpleMethodTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "DroppableTwinSync_simple_method_twin_sync",
            argNames: ["that"],
          );

  @override
  String
      crateApiMiscNoTwinExampleAItemContainerSolutionOneTwinNormalAutoAccessorGetName(
          {required ItemContainerSolutionOneTwinNormal that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerItemContainerSolutionOneTwinNormal(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 36)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleAItemContainerSolutionOneTwinNormalAutoAccessorGetNameConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleAItemContainerSolutionOneTwinNormalAutoAccessorGetNameConstMeta =>
          const TaskConstMeta(
            debugName:
                "ItemContainerSolutionOneTwinNormal_auto_accessor_get_name",
            argNames: ["that"],
          );

  @override
  void
      crateApiMiscNoTwinExampleAItemContainerSolutionOneTwinNormalAutoAccessorSetName(
          {required ItemContainerSolutionOneTwinNormal that,
          required String name}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerItemContainerSolutionOneTwinNormal(
            that, serializer);
        sse_encode_String(name, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 37)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleAItemContainerSolutionOneTwinNormalAutoAccessorSetNameConstMeta,
      argValues: [that, name],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleAItemContainerSolutionOneTwinNormalAutoAccessorSetNameConstMeta =>
          const TaskConstMeta(
            debugName:
                "ItemContainerSolutionOneTwinNormal_auto_accessor_set_name",
            argNames: ["that", "name"],
          );

  @override
  Future<ItemContainerSolutionOneTwinNormal>
      crateApiMiscNoTwinExampleAItemContainerSolutionOneTwinNormalCreateTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 38, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerItemContainerSolutionOneTwinNormal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleAItemContainerSolutionOneTwinNormalCreateTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleAItemContainerSolutionOneTwinNormalCreateTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "ItemContainerSolutionOneTwinNormal_create_twin_normal",
            argNames: [],
          );

  @override
  Future<Int32List>
      crateApiMiscNoTwinExampleAItemContainerSolutionOneTwinNormalGetItemContentsTwinNormal(
          {required ItemContainerSolutionOneTwinNormal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerItemContainerSolutionOneTwinNormal(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 39, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_i_32_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleAItemContainerSolutionOneTwinNormalGetItemContentsTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleAItemContainerSolutionOneTwinNormalGetItemContentsTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "ItemContainerSolutionOneTwinNormal_get_item_contents_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<String>
      crateApiLifetimeableLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtNestedTypeWithLifetimeTwinNormalstaticGreetBorrowMutSelfTwinNormal(
          {required LtNestedTypeWithLifetimeTwinNormal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Lifetimeable_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtNestedTypeWithLifetimeTwinNormalstatic(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 40, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiLifetimeableLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtNestedTypeWithLifetimeTwinNormalstaticGreetBorrowMutSelfTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiLifetimeableLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtNestedTypeWithLifetimeTwinNormalstaticGreetBorrowMutSelfTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtNestedTypeWithLifetimeTwinNormalstatic_greet_borrow_mut_self_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<String>
      crateApiLifetimeableLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtNestedTypeWithLifetimeTwinNormalstaticGreetBorrowSelfTwinNormal(
          {required LtNestedTypeWithLifetimeTwinNormal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtNestedTypeWithLifetimeTwinNormalstatic(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 41, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiLifetimeableLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtNestedTypeWithLifetimeTwinNormalstaticGreetBorrowSelfTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiLifetimeableLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtNestedTypeWithLifetimeTwinNormalstaticGreetBorrowSelfTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtNestedTypeWithLifetimeTwinNormalstatic_greet_borrow_self_twin_normal",
            argNames: ["that"],
          );

  @override
  String
      crateApiPseudoManualLifetimeableTwinSyncLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtNestedTypeWithLifetimeTwinSyncstaticGreetBorrowMutSelfTwinSync(
          {required LtNestedTypeWithLifetimeTwinSync that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Lifetimeable_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtNestedTypeWithLifetimeTwinSyncstatic(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 42)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualLifetimeableTwinSyncLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtNestedTypeWithLifetimeTwinSyncstaticGreetBorrowMutSelfTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualLifetimeableTwinSyncLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtNestedTypeWithLifetimeTwinSyncstaticGreetBorrowMutSelfTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtNestedTypeWithLifetimeTwinSyncstatic_greet_borrow_mut_self_twin_sync",
            argNames: ["that"],
          );

  @override
  String
      crateApiPseudoManualLifetimeableTwinSyncLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtNestedTypeWithLifetimeTwinSyncstaticGreetBorrowSelfTwinSync(
          {required LtNestedTypeWithLifetimeTwinSync that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtNestedTypeWithLifetimeTwinSyncstatic(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 43)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualLifetimeableTwinSyncLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtNestedTypeWithLifetimeTwinSyncstaticGreetBorrowSelfTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualLifetimeableTwinSyncLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtNestedTypeWithLifetimeTwinSyncstaticGreetBorrowSelfTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtNestedTypeWithLifetimeTwinSyncstatic_greet_borrow_self_twin_sync",
            argNames: ["that"],
          );

  @override
  Future<LtTypeWithLifetimeTwinNormal>
      crateApiLifetimeableLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithLifetimeTwinNormalstaticComputeArgGenericLifetimeTwinNormal(
          {required LtTypeWithLifetimeTwinNormal arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithLifetimeTwinNormalstatic(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 44, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithLifetimeTwinNormalstatic,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiLifetimeableLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithLifetimeTwinNormalstaticComputeArgGenericLifetimeTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiLifetimeableLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithLifetimeTwinNormalstaticComputeArgGenericLifetimeTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithLifetimeTwinNormalstatic_compute_arg_generic_lifetime_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<LtNestedTypeWithLifetimeTwinNormal>
      crateApiLifetimeableLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithLifetimeTwinNormalstaticComputeNestedTypeWithLifetimeTwinNormal(
          {required LtTypeWithLifetimeTwinNormal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithLifetimeTwinNormalstatic(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 45, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtNestedTypeWithLifetimeTwinNormalstatic,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiLifetimeableLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithLifetimeTwinNormalstaticComputeNestedTypeWithLifetimeTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiLifetimeableLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithLifetimeTwinNormalstaticComputeNestedTypeWithLifetimeTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithLifetimeTwinNormalstatic_compute_nested_type_with_lifetime_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<String>
      crateApiLifetimeableLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithLifetimeTwinNormalstaticGreetBorrowMutSelfTwinNormal(
          {required LtTypeWithLifetimeTwinNormal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Lifetimeable_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithLifetimeTwinNormalstatic(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 46, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiLifetimeableLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithLifetimeTwinNormalstaticGreetBorrowMutSelfTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiLifetimeableLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithLifetimeTwinNormalstaticGreetBorrowMutSelfTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithLifetimeTwinNormalstatic_greet_borrow_mut_self_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<String>
      crateApiLifetimeableLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithLifetimeTwinNormalstaticGreetBorrowSelfTwinNormal(
          {required LtTypeWithLifetimeTwinNormal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithLifetimeTwinNormalstatic(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 47, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiLifetimeableLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithLifetimeTwinNormalstaticGreetBorrowSelfTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiLifetimeableLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithLifetimeTwinNormalstaticGreetBorrowSelfTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithLifetimeTwinNormalstatic_greet_borrow_self_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<LtTypeWithLifetimeTwinSync>
      crateApiPseudoManualLifetimeableTwinSyncLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithLifetimeTwinSyncstaticComputeArgGenericLifetimeTwinSync(
          {required LtTypeWithLifetimeTwinSync arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithLifetimeTwinSyncstatic(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 48, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithLifetimeTwinSyncstatic,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualLifetimeableTwinSyncLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithLifetimeTwinSyncstaticComputeArgGenericLifetimeTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualLifetimeableTwinSyncLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithLifetimeTwinSyncstaticComputeArgGenericLifetimeTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithLifetimeTwinSyncstatic_compute_arg_generic_lifetime_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<LtNestedTypeWithLifetimeTwinSync>
      crateApiPseudoManualLifetimeableTwinSyncLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithLifetimeTwinSyncstaticComputeNestedTypeWithLifetimeTwinSync(
          {required LtTypeWithLifetimeTwinSync that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithLifetimeTwinSyncstatic(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 49, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtNestedTypeWithLifetimeTwinSyncstatic,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualLifetimeableTwinSyncLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithLifetimeTwinSyncstaticComputeNestedTypeWithLifetimeTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualLifetimeableTwinSyncLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithLifetimeTwinSyncstaticComputeNestedTypeWithLifetimeTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithLifetimeTwinSyncstatic_compute_nested_type_with_lifetime_twin_sync",
            argNames: ["that"],
          );

  @override
  String
      crateApiPseudoManualLifetimeableTwinSyncLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithLifetimeTwinSyncstaticGreetBorrowMutSelfTwinSync(
          {required LtTypeWithLifetimeTwinSync that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Lifetimeable_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithLifetimeTwinSyncstatic(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 50)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualLifetimeableTwinSyncLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithLifetimeTwinSyncstaticGreetBorrowMutSelfTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualLifetimeableTwinSyncLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithLifetimeTwinSyncstaticGreetBorrowMutSelfTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithLifetimeTwinSyncstatic_greet_borrow_mut_self_twin_sync",
            argNames: ["that"],
          );

  @override
  String
      crateApiPseudoManualLifetimeableTwinSyncLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithLifetimeTwinSyncstaticGreetBorrowSelfTwinSync(
          {required LtTypeWithLifetimeTwinSync that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithLifetimeTwinSyncstatic(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 51)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualLifetimeableTwinSyncLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithLifetimeTwinSyncstaticGreetBorrowSelfTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualLifetimeableTwinSyncLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithLifetimeTwinSyncstaticGreetBorrowSelfTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithLifetimeTwinSyncstatic_greet_borrow_self_twin_sync",
            argNames: ["that"],
          );

  @override
  Future<LtTypeWithMultiDepTwinNormal>
      crateApiLifetimeableLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithMultiDepTwinNormalstaticComputeWithMultiArgHavingLifetimeTwinNormal(
          {required LtOwnedStructTwinNormal a,
          required LtOwnedStructTwinNormal b,
          required LtOwnedStructTwinNormal unrelatedBorrowed,
          required LtOwnedStructTwinNormal unrelatedOwned}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtOwnedStructTwinNormal(
            a, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtOwnedStructTwinNormal(
            b, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtOwnedStructTwinNormal(
            unrelatedBorrowed, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtOwnedStructTwinNormal(
            unrelatedOwned, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 52, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithMultiDepTwinNormalstatic,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiLifetimeableLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithMultiDepTwinNormalstaticComputeWithMultiArgHavingLifetimeTwinNormalConstMeta,
      argValues: [a, b, unrelatedBorrowed, unrelatedOwned],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiLifetimeableLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithMultiDepTwinNormalstaticComputeWithMultiArgHavingLifetimeTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithMultiDepTwinNormalstatic_compute_with_multi_arg_having_lifetime_twin_normal",
            argNames: ["a", "b", "unrelatedBorrowed", "unrelatedOwned"],
          );

  @override
  Future<List<String>>
      crateApiLifetimeableLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithMultiDepTwinNormalstaticGreetBorrowMutSelfTwinNormal(
          {required LtTypeWithMultiDepTwinNormal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Lifetimeable_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithMultiDepTwinNormalstatic(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 53, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiLifetimeableLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithMultiDepTwinNormalstaticGreetBorrowMutSelfTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiLifetimeableLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithMultiDepTwinNormalstaticGreetBorrowMutSelfTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithMultiDepTwinNormalstatic_greet_borrow_mut_self_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<List<String>>
      crateApiLifetimeableLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithMultiDepTwinNormalstaticGreetBorrowSelfTwinNormal(
          {required LtTypeWithMultiDepTwinNormal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithMultiDepTwinNormalstatic(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 54, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiLifetimeableLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithMultiDepTwinNormalstaticGreetBorrowSelfTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiLifetimeableLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithMultiDepTwinNormalstaticGreetBorrowSelfTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithMultiDepTwinNormalstatic_greet_borrow_self_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<LtTypeWithMultiDepTwinSync>
      crateApiPseudoManualLifetimeableTwinSyncLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithMultiDepTwinSyncstaticComputeWithMultiArgHavingLifetimeTwinSync(
          {required LtOwnedStructTwinSync a,
          required LtOwnedStructTwinSync b,
          required LtOwnedStructTwinSync unrelatedBorrowed,
          required LtOwnedStructTwinSync unrelatedOwned}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtOwnedStructTwinSync(
            a, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtOwnedStructTwinSync(
            b, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtOwnedStructTwinSync(
            unrelatedBorrowed, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtOwnedStructTwinSync(
            unrelatedOwned, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 55, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithMultiDepTwinSyncstatic,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualLifetimeableTwinSyncLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithMultiDepTwinSyncstaticComputeWithMultiArgHavingLifetimeTwinSyncConstMeta,
      argValues: [a, b, unrelatedBorrowed, unrelatedOwned],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualLifetimeableTwinSyncLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithMultiDepTwinSyncstaticComputeWithMultiArgHavingLifetimeTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithMultiDepTwinSyncstatic_compute_with_multi_arg_having_lifetime_twin_sync",
            argNames: ["a", "b", "unrelatedBorrowed", "unrelatedOwned"],
          );

  @override
  List<String>
      crateApiPseudoManualLifetimeableTwinSyncLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithMultiDepTwinSyncstaticGreetBorrowMutSelfTwinSync(
          {required LtTypeWithMultiDepTwinSync that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Lifetimeable_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithMultiDepTwinSyncstatic(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 56)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualLifetimeableTwinSyncLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithMultiDepTwinSyncstaticGreetBorrowMutSelfTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualLifetimeableTwinSyncLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithMultiDepTwinSyncstaticGreetBorrowMutSelfTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithMultiDepTwinSyncstatic_greet_borrow_mut_self_twin_sync",
            argNames: ["that"],
          );

  @override
  List<String>
      crateApiPseudoManualLifetimeableTwinSyncLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithMultiDepTwinSyncstaticGreetBorrowSelfTwinSync(
          {required LtTypeWithMultiDepTwinSync that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithMultiDepTwinSyncstatic(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 57)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualLifetimeableTwinSyncLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithMultiDepTwinSyncstaticGreetBorrowSelfTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualLifetimeableTwinSyncLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithMultiDepTwinSyncstaticGreetBorrowSelfTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithMultiDepTwinSyncstatic_greet_borrow_self_twin_sync",
            argNames: ["that"],
          );

  @override
  Future<LtTypeWithLifetimeTwinNormal>
      crateApiLifetimeableLtOwnedStructTwinNormalComputeTypeWithLifetimeTwinNormal(
          {required LtOwnedStructTwinNormal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtOwnedStructTwinNormal(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 58, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithLifetimeTwinNormalstatic,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiLifetimeableLtOwnedStructTwinNormalComputeTypeWithLifetimeTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiLifetimeableLtOwnedStructTwinNormalComputeTypeWithLifetimeTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "LtOwnedStructTwinNormal_compute_type_with_lifetime_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<LtTypeWithLifetimeTwinNormal>
      crateApiLifetimeableLtOwnedStructTwinNormalComputeWithUnrelatedBorrowedArgTwinNormal(
          {required LtOwnedStructTwinNormal that,
          required LtOwnedStructTwinNormal unrelatedBorrowed,
          required LtOwnedStructTwinNormal unrelatedOwned}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtOwnedStructTwinNormal(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtOwnedStructTwinNormal(
            unrelatedBorrowed, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtOwnedStructTwinNormal(
            unrelatedOwned, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 59, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithLifetimeTwinNormalstatic,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiLifetimeableLtOwnedStructTwinNormalComputeWithUnrelatedBorrowedArgTwinNormalConstMeta,
      argValues: [that, unrelatedBorrowed, unrelatedOwned],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiLifetimeableLtOwnedStructTwinNormalComputeWithUnrelatedBorrowedArgTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "LtOwnedStructTwinNormal_compute_with_unrelated_borrowed_arg_twin_normal",
            argNames: ["that", "unrelatedBorrowed", "unrelatedOwned"],
          );

  @override
  Future<LtOwnedStructTwinNormal>
      crateApiLifetimeableLtOwnedStructTwinNormalCreateTwinNormal(
          {required String value}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(value, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 60, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtOwnedStructTwinNormal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiLifetimeableLtOwnedStructTwinNormalCreateTwinNormalConstMeta,
      argValues: [value],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiLifetimeableLtOwnedStructTwinNormalCreateTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "LtOwnedStructTwinNormal_create_twin_normal",
            argNames: ["value"],
          );

  @override
  Future<LtOwnedStructTwinNormal>
      crateApiLifetimeableLtOwnedStructTwinNormalCreateWithLoggerTwinNormal(
          {required String value, required SimpleLogger logger}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(value, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSimpleLogger(
            logger, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 61, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtOwnedStructTwinNormal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiLifetimeableLtOwnedStructTwinNormalCreateWithLoggerTwinNormalConstMeta,
      argValues: [value, logger],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiLifetimeableLtOwnedStructTwinNormalCreateWithLoggerTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "LtOwnedStructTwinNormal_create_with_logger_twin_normal",
            argNames: ["value", "logger"],
          );

  @override
  Future<LtTypeWithLifetimeTwinSync>
      crateApiPseudoManualLifetimeableTwinSyncLtOwnedStructTwinSyncComputeTypeWithLifetimeTwinSync(
          {required LtOwnedStructTwinSync that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtOwnedStructTwinSync(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 62, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithLifetimeTwinSyncstatic,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualLifetimeableTwinSyncLtOwnedStructTwinSyncComputeTypeWithLifetimeTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualLifetimeableTwinSyncLtOwnedStructTwinSyncComputeTypeWithLifetimeTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "LtOwnedStructTwinSync_compute_type_with_lifetime_twin_sync",
            argNames: ["that"],
          );

  @override
  Future<LtTypeWithLifetimeTwinSync>
      crateApiPseudoManualLifetimeableTwinSyncLtOwnedStructTwinSyncComputeWithUnrelatedBorrowedArgTwinSync(
          {required LtOwnedStructTwinSync that,
          required LtOwnedStructTwinSync unrelatedBorrowed,
          required LtOwnedStructTwinSync unrelatedOwned}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtOwnedStructTwinSync(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtOwnedStructTwinSync(
            unrelatedBorrowed, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtOwnedStructTwinSync(
            unrelatedOwned, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 63, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithLifetimeTwinSyncstatic,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualLifetimeableTwinSyncLtOwnedStructTwinSyncComputeWithUnrelatedBorrowedArgTwinSyncConstMeta,
      argValues: [that, unrelatedBorrowed, unrelatedOwned],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualLifetimeableTwinSyncLtOwnedStructTwinSyncComputeWithUnrelatedBorrowedArgTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "LtOwnedStructTwinSync_compute_with_unrelated_borrowed_arg_twin_sync",
            argNames: ["that", "unrelatedBorrowed", "unrelatedOwned"],
          );

  @override
  LtOwnedStructTwinSync
      crateApiPseudoManualLifetimeableTwinSyncLtOwnedStructTwinSyncCreateTwinSync(
          {required String value}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(value, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 64)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtOwnedStructTwinSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualLifetimeableTwinSyncLtOwnedStructTwinSyncCreateTwinSyncConstMeta,
      argValues: [value],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualLifetimeableTwinSyncLtOwnedStructTwinSyncCreateTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "LtOwnedStructTwinSync_create_twin_sync",
            argNames: ["value"],
          );

  @override
  LtOwnedStructTwinSync
      crateApiPseudoManualLifetimeableTwinSyncLtOwnedStructTwinSyncCreateWithLoggerTwinSync(
          {required String value, required SimpleLogger logger}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(value, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSimpleLogger(
            logger, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 65)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtOwnedStructTwinSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualLifetimeableTwinSyncLtOwnedStructTwinSyncCreateWithLoggerTwinSyncConstMeta,
      argValues: [value, logger],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualLifetimeableTwinSyncLtOwnedStructTwinSyncCreateWithLoggerTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "LtOwnedStructTwinSync_create_with_logger_twin_sync",
            argNames: ["value", "logger"],
          );

  @override
  Future<String>
      crateApiLifetimeableLtSubStructTwinNormalGreetBorrowMutSelfTwinNormal(
          {required LtSubStructTwinNormal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtSubStructTwinNormal(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 66, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiLifetimeableLtSubStructTwinNormalGreetBorrowMutSelfTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiLifetimeableLtSubStructTwinNormalGreetBorrowMutSelfTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "LtSubStructTwinNormal_greet_borrow_mut_self_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<String>
      crateApiLifetimeableLtSubStructTwinNormalGreetBorrowSelfTwinNormal(
          {required LtSubStructTwinNormal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtSubStructTwinNormal(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 67, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiLifetimeableLtSubStructTwinNormalGreetBorrowSelfTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiLifetimeableLtSubStructTwinNormalGreetBorrowSelfTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "LtSubStructTwinNormal_greet_borrow_self_twin_normal",
            argNames: ["that"],
          );

  @override
  String
      crateApiPseudoManualLifetimeableTwinSyncLtSubStructTwinSyncGreetBorrowMutSelfTwinSync(
          {required LtSubStructTwinSync that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtSubStructTwinSync(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 68)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualLifetimeableTwinSyncLtSubStructTwinSyncGreetBorrowMutSelfTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualLifetimeableTwinSyncLtSubStructTwinSyncGreetBorrowMutSelfTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "LtSubStructTwinSync_greet_borrow_mut_self_twin_sync",
            argNames: ["that"],
          );

  @override
  String
      crateApiPseudoManualLifetimeableTwinSyncLtSubStructTwinSyncGreetBorrowSelfTwinSync(
          {required LtSubStructTwinSync that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtSubStructTwinSync(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 69)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualLifetimeableTwinSyncLtSubStructTwinSyncGreetBorrowSelfTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualLifetimeableTwinSyncLtSubStructTwinSyncGreetBorrowSelfTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "LtSubStructTwinSync_greet_borrow_self_twin_sync",
            argNames: ["that"],
          );

  @override
  Future<MyAudioParamTwinNormal>
      crateApiProxyMyAudioParamTwinNormalCreateTwinNormal(
          {required String value}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(value, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 70, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyAudioParamTwinNormal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProxyMyAudioParamTwinNormalCreateTwinNormalConstMeta,
      argValues: [value],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiProxyMyAudioParamTwinNormalCreateTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "MyAudioParamTwinNormal_create_twin_normal",
            argNames: ["value"],
          );

  @override
  Future<String> crateApiProxyMyAudioParamTwinNormalMyMethodTwinNormal(
      {required MyAudioParamTwinNormal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_my_audio_param_twin_normal_proxy_enum(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 71, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiProxyMyAudioParamTwinNormalMyMethodTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiProxyMyAudioParamTwinNormalMyMethodTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "MyAudioParamTwinNormal_my_method_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<void>
      crateApiImplTraitMyImplTraitWithSelfTwinNormalMethodWithBadSelfTwinNormal(
          {required MyImplTraitWithSelfTwinNormal that,
          required MyImplTraitWithSelfTwinNormal another}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyImplTraitWithSelfTwinNormal(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyImplTraitWithSelfTwinNormal(
            another, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 72, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiImplTraitMyImplTraitWithSelfTwinNormalMethodWithBadSelfTwinNormalConstMeta,
      argValues: [that, another],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiImplTraitMyImplTraitWithSelfTwinNormalMethodWithBadSelfTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "MyImplTraitWithSelfTwinNormal_method_with_bad_self_twin_normal",
            argNames: ["that", "another"],
          );

  @override
  Future<MyImplTraitWithSelfTwinNormal>
      crateApiImplTraitMyImplTraitWithSelfTwinNormalMethodWithGoodSelfTwinNormal(
          {required MyImplTraitWithSelfTwinNormal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyImplTraitWithSelfTwinNormal(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 73, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyImplTraitWithSelfTwinNormal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiImplTraitMyImplTraitWithSelfTwinNormalMethodWithGoodSelfTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiImplTraitMyImplTraitWithSelfTwinNormalMethodWithGoodSelfTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "MyImplTraitWithSelfTwinNormal_method_with_good_self_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<void>
      crateApiPseudoManualImplTraitTwinSyncMyImplTraitWithSelfTwinSyncMethodWithBadSelfTwinSync(
          {required MyImplTraitWithSelfTwinSync that,
          required MyImplTraitWithSelfTwinSync another}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyImplTraitWithSelfTwinSync(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyImplTraitWithSelfTwinSync(
            another, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 74, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualImplTraitTwinSyncMyImplTraitWithSelfTwinSyncMethodWithBadSelfTwinSyncConstMeta,
      argValues: [that, another],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualImplTraitTwinSyncMyImplTraitWithSelfTwinSyncMethodWithBadSelfTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "MyImplTraitWithSelfTwinSync_method_with_bad_self_twin_sync",
            argNames: ["that", "another"],
          );

  @override
  Future<MyImplTraitWithSelfTwinSync>
      crateApiPseudoManualImplTraitTwinSyncMyImplTraitWithSelfTwinSyncMethodWithGoodSelfTwinSync(
          {required MyImplTraitWithSelfTwinSync that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyImplTraitWithSelfTwinSync(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 75, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyImplTraitWithSelfTwinSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualImplTraitTwinSyncMyImplTraitWithSelfTwinSyncMethodWithGoodSelfTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualImplTraitTwinSyncMyImplTraitWithSelfTwinSyncMethodWithGoodSelfTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "MyImplTraitWithSelfTwinSync_method_with_good_self_twin_sync",
            argNames: ["that"],
          );

  @override
  Future<MyNodeTwinNormal> crateApiProxyMyNodeTwinNormalCreateTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 76, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyNodeTwinNormal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiProxyMyNodeTwinNormalCreateTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiProxyMyNodeTwinNormalCreateTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "MyNodeTwinNormal_create_twin_normal",
        argNames: [],
      );

  @override
  Future<MyStructWithTryFromTwinNormal>
      crateApiMiscNoTwinExampleAMyStructWithTryFromTwinNormalTryFrom(
          {required String value}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(value, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 79, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyStructWithTryFromTwinNormal,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleAMyStructWithTryFromTwinNormalTryFromConstMeta,
      argValues: [value],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleAMyStructWithTryFromTwinNormalTryFromConstMeta =>
          const TaskConstMeta(
            debugName: "MyStructWithTryFromTwinNormal_try_from",
            argNames: ["value"],
          );

  @override
  Future<String>
      crateApiMiscNoTwinExampleAMyStructWithTryFromTwinNormalValueTwinNormal(
          {required MyStructWithTryFromTwinNormal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyStructWithTryFromTwinNormal(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 80, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleAMyStructWithTryFromTwinNormalValueTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleAMyStructWithTryFromTwinNormalValueTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "MyStructWithTryFromTwinNormal_value_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<void>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalInstanceMethodArgBorrowTwinNormal(
          {required NonCloneSimpleTwinNormal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 81, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalInstanceMethodArgBorrowTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalInstanceMethodArgBorrowTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinNormal_instance_method_arg_borrow_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<void>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalInstanceMethodArgMutBorrowTwinNormal(
          {required NonCloneSimpleTwinNormal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 82, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalInstanceMethodArgMutBorrowTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalInstanceMethodArgMutBorrowTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinNormal_instance_method_arg_mut_borrow_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<void>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalInstanceMethodArgOwnTwinNormal(
          {required NonCloneSimpleTwinNormal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 83, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalInstanceMethodArgOwnTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalInstanceMethodArgOwnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinNormal_instance_method_arg_own_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<int>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalInstanceMethodGetterTwinNormal(
          {required NonCloneSimpleTwinNormal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 84, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalInstanceMethodGetterTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalInstanceMethodGetterTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinNormal_instance_method_getter_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<NonCloneSimpleTwinNormal>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalInstanceMethodReturnOwnTwinNormal(
          {required NonCloneSimpleTwinNormal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 85, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalInstanceMethodReturnOwnTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalInstanceMethodReturnOwnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinNormal_instance_method_return_own_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<NonCloneSimpleTwinNormal>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalNewCustomNameTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 86, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalNewCustomNameTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalNewCustomNameTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "NonCloneSimpleTwinNormal_new_custom_name_twin_normal",
            argNames: [],
          );

  @override
  Future<NonCloneSimpleTwinNormal>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalNewTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 87, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalNewTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalNewTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "NonCloneSimpleTwinNormal_new_twin_normal",
            argNames: [],
          );

  @override
  Future<NonCloneSimpleTwinNormal>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalNewWithResultTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 88, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalNewWithResultTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalNewWithResultTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "NonCloneSimpleTwinNormal_new_with_result_twin_normal",
            argNames: [],
          );

  @override
  Future<void>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalStaticMethodArgBorrowTwinNormal(
          {required NonCloneSimpleTwinNormal arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 89, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalStaticMethodArgBorrowTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalStaticMethodArgBorrowTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinNormal_static_method_arg_borrow_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<void>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalStaticMethodArgMutBorrowTwinNormal(
          {required NonCloneSimpleTwinNormal arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 90, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalStaticMethodArgMutBorrowTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalStaticMethodArgMutBorrowTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinNormal_static_method_arg_mut_borrow_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<void>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalStaticMethodArgOwnTwinNormal(
          {required NonCloneSimpleTwinNormal arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 91, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalStaticMethodArgOwnTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalStaticMethodArgOwnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinNormal_static_method_arg_own_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<NonCloneSimpleTwinNormal>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalStaticMethodReturnOwnTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 92, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalStaticMethodReturnOwnTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalStaticMethodReturnOwnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinNormal_static_method_return_own_twin_normal",
            argNames: [],
          );

  @override
  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodArgBorrowTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 93, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodArgBorrowTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodArgBorrowTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinRustAsync_instance_method_arg_borrow_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodArgMutBorrowTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 94, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodArgMutBorrowTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodArgMutBorrowTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinRustAsync_instance_method_arg_mut_borrow_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodArgOwnTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 95, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodArgOwnTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodArgOwnTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinRustAsync_instance_method_arg_own_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Future<int>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodGetterTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 96, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodGetterTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodGetterTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinRustAsync_instance_method_getter_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Future<NonCloneSimpleTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodReturnOwnTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 97, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodReturnOwnTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodReturnOwnTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinRustAsync_instance_method_return_own_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Future<NonCloneSimpleTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncNewCustomNameTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 98, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncNewCustomNameTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncNewCustomNameTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinRustAsync_new_custom_name_twin_rust_async",
            argNames: [],
          );

  @override
  Future<NonCloneSimpleTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncNewTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 99, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncNewTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncNewTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "NonCloneSimpleTwinRustAsync_new_twin_rust_async",
            argNames: [],
          );

  @override
  Future<NonCloneSimpleTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncNewWithResultTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 100, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncNewWithResultTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncNewWithResultTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinRustAsync_new_with_result_twin_rust_async",
            argNames: [],
          );

  @override
  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncStaticMethodArgBorrowTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 101, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncStaticMethodArgBorrowTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncStaticMethodArgBorrowTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinRustAsync_static_method_arg_borrow_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncStaticMethodArgMutBorrowTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 102, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncStaticMethodArgMutBorrowTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncStaticMethodArgMutBorrowTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinRustAsync_static_method_arg_mut_borrow_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncStaticMethodArgOwnTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 103, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncStaticMethodArgOwnTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncStaticMethodArgOwnTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinRustAsync_static_method_arg_own_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<NonCloneSimpleTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncStaticMethodReturnOwnTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 104, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncStaticMethodReturnOwnTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncStaticMethodReturnOwnTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinRustAsync_static_method_return_own_twin_rust_async",
            argNames: [],
          );

  @override
  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncInstanceMethodArgBorrowTwinSync(
          {required NonCloneSimpleTwinSync that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 105)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncInstanceMethodArgBorrowTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncInstanceMethodArgBorrowTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSync_instance_method_arg_borrow_twin_sync",
            argNames: ["that"],
          );

  @override
  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncInstanceMethodArgMutBorrowTwinSync(
          {required NonCloneSimpleTwinSync that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 106)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncInstanceMethodArgMutBorrowTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncInstanceMethodArgMutBorrowTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSync_instance_method_arg_mut_borrow_twin_sync",
            argNames: ["that"],
          );

  @override
  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncInstanceMethodArgOwnTwinSync(
          {required NonCloneSimpleTwinSync that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 107)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncInstanceMethodArgOwnTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncInstanceMethodArgOwnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSync_instance_method_arg_own_twin_sync",
            argNames: ["that"],
          );

  @override
  int crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncInstanceMethodGetterTwinSync(
      {required NonCloneSimpleTwinSync that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 108)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncInstanceMethodGetterTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncInstanceMethodGetterTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSync_instance_method_getter_twin_sync",
            argNames: ["that"],
          );

  @override
  NonCloneSimpleTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncInstanceMethodReturnOwnTwinSync(
          {required NonCloneSimpleTwinSync that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 109)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncInstanceMethodReturnOwnTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncInstanceMethodReturnOwnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSync_instance_method_return_own_twin_sync",
            argNames: ["that"],
          );

  @override
  NonCloneSimpleTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncNewCustomNameTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 110)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncNewCustomNameTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncNewCustomNameTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "NonCloneSimpleTwinSync_new_custom_name_twin_sync",
            argNames: [],
          );

  @override
  NonCloneSimpleTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncNewTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 111)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncNewTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncNewTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "NonCloneSimpleTwinSync_new_twin_sync",
            argNames: [],
          );

  @override
  NonCloneSimpleTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncNewWithResultTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 112)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncNewWithResultTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncNewWithResultTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "NonCloneSimpleTwinSync_new_with_result_twin_sync",
            argNames: [],
          );

  @override
  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncStaticMethodArgBorrowTwinSync(
          {required NonCloneSimpleTwinSync arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 113)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncStaticMethodArgBorrowTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncStaticMethodArgBorrowTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSync_static_method_arg_borrow_twin_sync",
            argNames: ["arg"],
          );

  @override
  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncStaticMethodArgMutBorrowTwinSync(
          {required NonCloneSimpleTwinSync arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 114)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncStaticMethodArgMutBorrowTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncStaticMethodArgMutBorrowTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSync_static_method_arg_mut_borrow_twin_sync",
            argNames: ["arg"],
          );

  @override
  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncStaticMethodArgOwnTwinSync(
          {required NonCloneSimpleTwinSync arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 115)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncStaticMethodArgOwnTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncStaticMethodArgOwnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "NonCloneSimpleTwinSync_static_method_arg_own_twin_sync",
            argNames: ["arg"],
          );

  @override
  NonCloneSimpleTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncStaticMethodReturnOwnTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 116)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncStaticMethodReturnOwnTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncStaticMethodReturnOwnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSync_static_method_return_own_twin_sync",
            argNames: [],
          );

  @override
  Future<int>
      crateApiDartCodeOpaqueStructWithDartCodeTwinNormalNormalMethodTwinNormal(
          {required OpaqueStructWithDartCodeTwinNormal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueStructWithDartCodeTwinNormal(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 117, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiDartCodeOpaqueStructWithDartCodeTwinNormalNormalMethodTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiDartCodeOpaqueStructWithDartCodeTwinNormalNormalMethodTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "OpaqueStructWithDartCodeTwinNormal_normal_method_twin_normal",
            argNames: ["that"],
          );

  @override
  List<String> crateApiMiscNoTwinExampleASimpleLoggerGetAndReset(
      {required SimpleLogger that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSimpleLogger(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 118)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMiscNoTwinExampleASimpleLoggerGetAndResetConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleASimpleLoggerGetAndResetConstMeta =>
          const TaskConstMeta(
            debugName: "SimpleLogger_get_and_reset",
            argNames: ["that"],
          );

  @override
  SimpleLogger crateApiMiscNoTwinExampleASimpleLoggerNew() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 119)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSimpleLogger,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMiscNoTwinExampleASimpleLoggerNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMiscNoTwinExampleASimpleLoggerNewConstMeta =>
      const TaskConstMeta(
        debugName: "SimpleLogger_new",
        argNames: [],
      );

  @override
  SimpleOpaqueExternalStructWithMethod
      crateApiExternalImplSimpleOpaqueExternalStructWithMethodNew(
          {required String a}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(a, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 120)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSimpleOpaqueExternalStructWithMethod,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiExternalImplSimpleOpaqueExternalStructWithMethodNewConstMeta,
      argValues: [a],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiExternalImplSimpleOpaqueExternalStructWithMethodNewConstMeta =>
          const TaskConstMeta(
            debugName: "SimpleOpaqueExternalStructWithMethod_new",
            argNames: ["a"],
          );

  @override
  Future<String>
      crateApiExternalImplSimpleOpaqueExternalStructWithMethodSimpleExternalMethod(
          {required SimpleOpaqueExternalStructWithMethod that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSimpleOpaqueExternalStructWithMethod(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 121, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiExternalImplSimpleOpaqueExternalStructWithMethodSimpleExternalMethodConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiExternalImplSimpleOpaqueExternalStructWithMethodSimpleExternalMethodConstMeta =>
          const TaskConstMeta(
            debugName:
                "SimpleOpaqueExternalStructWithMethod_simple_external_method",
            argNames: ["that"],
          );

  @override
  Future<int> crateApiMethodStaticGetterOnlyTwinNormalStaticGetterTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 122, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMethodStaticGetterOnlyTwinNormalStaticGetterTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMethodStaticGetterOnlyTwinNormalStaticGetterTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "StaticGetterOnlyTwinNormal_static_getter_twin_normal",
            argNames: [],
          );

  @override
  Future<int>
      crateApiPseudoManualMethodTwinRustAsyncStaticGetterOnlyTwinRustAsyncStaticGetterTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 123, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinRustAsyncStaticGetterOnlyTwinRustAsyncStaticGetterTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinRustAsyncStaticGetterOnlyTwinRustAsyncStaticGetterTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "StaticGetterOnlyTwinRustAsync_static_getter_twin_rust_async",
            argNames: [],
          );

  @override
  int crateApiPseudoManualMethodTwinSyncStaticGetterOnlyTwinSyncStaticGetterTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 124)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinSyncStaticGetterOnlyTwinSyncStaticGetterTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinSyncStaticGetterOnlyTwinSyncStaticGetterTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "StaticGetterOnlyTwinSync_static_getter_twin_sync",
            argNames: [],
          );

  @override
  Future<void>
      crateApiMiscNoTwinExampleAStructInMiscNoTwinExampleASampleFunctionA(
          {required StructInMiscNoTwinExampleA that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleA(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 125, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleAStructInMiscNoTwinExampleASampleFunctionAConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleAStructInMiscNoTwinExampleASampleFunctionAConstMeta =>
          const TaskConstMeta(
            debugName: "StructInMiscNoTwinExampleA_sample_function_a",
            argNames: ["that"],
          );

  @override
  Future<StructInMiscNoTwinExampleA>
      crateApiMiscNoTwinExampleBStructInMiscNoTwinExampleBGetStructInMiscNoTwinExampleA(
          {required StructInMiscNoTwinExampleB that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleB(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 126, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleA,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleBStructInMiscNoTwinExampleBGetStructInMiscNoTwinExampleAConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleBStructInMiscNoTwinExampleBGetStructInMiscNoTwinExampleAConstMeta =>
          const TaskConstMeta(
            debugName:
                "StructInMiscNoTwinExampleB_get_struct_in_misc_no_twin_example_a",
            argNames: ["that"],
          );

  @override
  Future<void>
      crateApiMiscNoTwinExampleBStructInMiscNoTwinExampleBSampleFunctionB(
          {required StructInMiscNoTwinExampleB that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleB(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 127, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleBStructInMiscNoTwinExampleBSampleFunctionBConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleBStructInMiscNoTwinExampleBSampleFunctionBConstMeta =>
          const TaskConstMeta(
            debugName: "StructInMiscNoTwinExampleB_sample_function_b",
            argNames: ["that"],
          );

  @override
  int crateApiDynTraitStructOneWithTraitForDynTwinNormalAutoAccessorGetOne(
      {required StructOneWithTraitForDynTwinNormal that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitForDynTwinNormal(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 128)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiDynTraitStructOneWithTraitForDynTwinNormalAutoAccessorGetOneConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiDynTraitStructOneWithTraitForDynTwinNormalAutoAccessorGetOneConstMeta =>
          const TaskConstMeta(
            debugName:
                "StructOneWithTraitForDynTwinNormal_auto_accessor_get_one",
            argNames: ["that"],
          );

  @override
  void crateApiDynTraitStructOneWithTraitForDynTwinNormalAutoAccessorSetOne(
      {required StructOneWithTraitForDynTwinNormal that, required int one}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitForDynTwinNormal(
            that, serializer);
        sse_encode_i_32(one, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 129)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiDynTraitStructOneWithTraitForDynTwinNormalAutoAccessorSetOneConstMeta,
      argValues: [that, one],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiDynTraitStructOneWithTraitForDynTwinNormalAutoAccessorSetOneConstMeta =>
          const TaskConstMeta(
            debugName:
                "StructOneWithTraitForDynTwinNormal_auto_accessor_set_one",
            argNames: ["that", "one"],
          );

  @override
  Future<StructOneWithTraitForDynTwinNormal>
      crateApiDynTraitStructOneWithTraitForDynTwinNormalCreateTwinNormal(
          {required int one}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(one, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 130, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitForDynTwinNormal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiDynTraitStructOneWithTraitForDynTwinNormalCreateTwinNormalConstMeta,
      argValues: [one],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiDynTraitStructOneWithTraitForDynTwinNormalCreateTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "StructOneWithTraitForDynTwinNormal_create_twin_normal",
            argNames: ["one"],
          );

  @override
  Future<int>
      crateApiDynTraitStructOneWithTraitForDynTwinNormalSimpleMethodTwinNormal(
          {required StructOneWithTraitForDynTwinNormal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitForDynTwinNormal(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 131, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiDynTraitStructOneWithTraitForDynTwinNormalSimpleMethodTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiDynTraitStructOneWithTraitForDynTwinNormalSimpleMethodTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "StructOneWithTraitForDynTwinNormal_simple_method_twin_normal",
            argNames: ["that"],
          );

  @override
  int crateApiImplTraitStructOneWithTraitTwinNormalAutoAccessorGetOne(
      {required StructOneWithTraitTwinNormal that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitTwinNormal(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 132)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiImplTraitStructOneWithTraitTwinNormalAutoAccessorGetOneConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiImplTraitStructOneWithTraitTwinNormalAutoAccessorGetOneConstMeta =>
          const TaskConstMeta(
            debugName: "StructOneWithTraitTwinNormal_auto_accessor_get_one",
            argNames: ["that"],
          );

  @override
  void crateApiImplTraitStructOneWithTraitTwinNormalAutoAccessorSetOne(
      {required StructOneWithTraitTwinNormal that, required int one}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitTwinNormal(
            that, serializer);
        sse_encode_i_32(one, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 133)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiImplTraitStructOneWithTraitTwinNormalAutoAccessorSetOneConstMeta,
      argValues: [that, one],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiImplTraitStructOneWithTraitTwinNormalAutoAccessorSetOneConstMeta =>
          const TaskConstMeta(
            debugName: "StructOneWithTraitTwinNormal_auto_accessor_set_one",
            argNames: ["that", "one"],
          );

  @override
  Future<int>
      crateApiImplTraitStructOneWithTraitTwinNormalSimpleTraitFnReceiverBorrowTwinNormal(
          {required StructOneWithTraitTwinNormal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitTwinNormal(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 134, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiImplTraitStructOneWithTraitTwinNormalSimpleTraitFnReceiverBorrowTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiImplTraitStructOneWithTraitTwinNormalSimpleTraitFnReceiverBorrowTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "StructOneWithTraitTwinNormal_simple_trait_fn_receiver_borrow_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<StructOneWithTraitTwinNormal>
      crateApiImplTraitStructOneWithTraitTwinNormalSimpleTraitFnTwinNormal(
          {required int value}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(value, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 135, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitTwinNormal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiImplTraitStructOneWithTraitTwinNormalSimpleTraitFnTwinNormalConstMeta,
      argValues: [value],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiImplTraitStructOneWithTraitTwinNormalSimpleTraitFnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "StructOneWithTraitTwinNormal_simple_trait_fn_twin_normal",
            argNames: ["value"],
          );

  @override
  Future<int>
      crateApiImplTraitStructOneWithTraitTwinNormalSimpleTraitFnWithDefaultImplTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 136, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiImplTraitStructOneWithTraitTwinNormalSimpleTraitFnWithDefaultImplTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiImplTraitStructOneWithTraitTwinNormalSimpleTraitFnWithDefaultImplTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "StructOneWithTraitTwinNormal_simple_trait_fn_with_default_impl_twin_normal",
            argNames: [],
          );

  @override
  int crateApiPseudoManualImplTraitTwinSyncStructOneWithTraitTwinSyncAutoAccessorGetOne(
      {required StructOneWithTraitTwinSync that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitTwinSync(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 137)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualImplTraitTwinSyncStructOneWithTraitTwinSyncAutoAccessorGetOneConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualImplTraitTwinSyncStructOneWithTraitTwinSyncAutoAccessorGetOneConstMeta =>
          const TaskConstMeta(
            debugName: "StructOneWithTraitTwinSync_auto_accessor_get_one",
            argNames: ["that"],
          );

  @override
  void
      crateApiPseudoManualImplTraitTwinSyncStructOneWithTraitTwinSyncAutoAccessorSetOne(
          {required StructOneWithTraitTwinSync that, required int one}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitTwinSync(
            that, serializer);
        sse_encode_i_32(one, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 138)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualImplTraitTwinSyncStructOneWithTraitTwinSyncAutoAccessorSetOneConstMeta,
      argValues: [that, one],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualImplTraitTwinSyncStructOneWithTraitTwinSyncAutoAccessorSetOneConstMeta =>
          const TaskConstMeta(
            debugName: "StructOneWithTraitTwinSync_auto_accessor_set_one",
            argNames: ["that", "one"],
          );

  @override
  Future<int>
      crateApiPseudoManualImplTraitTwinSyncStructOneWithTraitTwinSyncSimpleTraitFnReceiverBorrowTwinSync(
          {required StructOneWithTraitTwinSync that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitTwinSync(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 139, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualImplTraitTwinSyncStructOneWithTraitTwinSyncSimpleTraitFnReceiverBorrowTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualImplTraitTwinSyncStructOneWithTraitTwinSyncSimpleTraitFnReceiverBorrowTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "StructOneWithTraitTwinSync_simple_trait_fn_receiver_borrow_twin_sync",
            argNames: ["that"],
          );

  @override
  Future<StructOneWithTraitTwinSync>
      crateApiPseudoManualImplTraitTwinSyncStructOneWithTraitTwinSyncSimpleTraitFnTwinSync(
          {required int value}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(value, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 140, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitTwinSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualImplTraitTwinSyncStructOneWithTraitTwinSyncSimpleTraitFnTwinSyncConstMeta,
      argValues: [value],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualImplTraitTwinSyncStructOneWithTraitTwinSyncSimpleTraitFnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "StructOneWithTraitTwinSync_simple_trait_fn_twin_sync",
            argNames: ["value"],
          );

  @override
  Future<int>
      crateApiPseudoManualImplTraitTwinSyncStructOneWithTraitTwinSyncSimpleTraitFnWithDefaultImplTwinSync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 141, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualImplTraitTwinSyncStructOneWithTraitTwinSyncSimpleTraitFnWithDefaultImplTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualImplTraitTwinSyncStructOneWithTraitTwinSyncSimpleTraitFnWithDefaultImplTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "StructOneWithTraitTwinSync_simple_trait_fn_with_default_impl_twin_sync",
            argNames: [],
          );

  @override
  int crateApiDynTraitStructTwoWithTraitForDynTwinNormalAutoAccessorGetTwo(
      {required StructTwoWithTraitForDynTwinNormal that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitForDynTwinNormal(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 142)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiDynTraitStructTwoWithTraitForDynTwinNormalAutoAccessorGetTwoConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiDynTraitStructTwoWithTraitForDynTwinNormalAutoAccessorGetTwoConstMeta =>
          const TaskConstMeta(
            debugName:
                "StructTwoWithTraitForDynTwinNormal_auto_accessor_get_two",
            argNames: ["that"],
          );

  @override
  void crateApiDynTraitStructTwoWithTraitForDynTwinNormalAutoAccessorSetTwo(
      {required StructTwoWithTraitForDynTwinNormal that, required int two}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitForDynTwinNormal(
            that, serializer);
        sse_encode_i_32(two, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 143)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiDynTraitStructTwoWithTraitForDynTwinNormalAutoAccessorSetTwoConstMeta,
      argValues: [that, two],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiDynTraitStructTwoWithTraitForDynTwinNormalAutoAccessorSetTwoConstMeta =>
          const TaskConstMeta(
            debugName:
                "StructTwoWithTraitForDynTwinNormal_auto_accessor_set_two",
            argNames: ["that", "two"],
          );

  @override
  Future<StructTwoWithTraitForDynTwinNormal>
      crateApiDynTraitStructTwoWithTraitForDynTwinNormalCreateTwinNormal(
          {required int two}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(two, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 144, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitForDynTwinNormal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiDynTraitStructTwoWithTraitForDynTwinNormalCreateTwinNormalConstMeta,
      argValues: [two],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiDynTraitStructTwoWithTraitForDynTwinNormalCreateTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "StructTwoWithTraitForDynTwinNormal_create_twin_normal",
            argNames: ["two"],
          );

  @override
  Future<int>
      crateApiDynTraitStructTwoWithTraitForDynTwinNormalSimpleMethodTwinNormal(
          {required StructTwoWithTraitForDynTwinNormal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitForDynTwinNormal(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 145, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiDynTraitStructTwoWithTraitForDynTwinNormalSimpleMethodTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiDynTraitStructTwoWithTraitForDynTwinNormalSimpleMethodTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "StructTwoWithTraitForDynTwinNormal_simple_method_twin_normal",
            argNames: ["that"],
          );

  @override
  int crateApiImplTraitStructTwoWithTraitTwinNormalAutoAccessorGetTwo(
      {required StructTwoWithTraitTwinNormal that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitTwinNormal(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 146)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiImplTraitStructTwoWithTraitTwinNormalAutoAccessorGetTwoConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiImplTraitStructTwoWithTraitTwinNormalAutoAccessorGetTwoConstMeta =>
          const TaskConstMeta(
            debugName: "StructTwoWithTraitTwinNormal_auto_accessor_get_two",
            argNames: ["that"],
          );

  @override
  void crateApiImplTraitStructTwoWithTraitTwinNormalAutoAccessorSetTwo(
      {required StructTwoWithTraitTwinNormal that, required int two}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitTwinNormal(
            that, serializer);
        sse_encode_i_32(two, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 147)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiImplTraitStructTwoWithTraitTwinNormalAutoAccessorSetTwoConstMeta,
      argValues: [that, two],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiImplTraitStructTwoWithTraitTwinNormalAutoAccessorSetTwoConstMeta =>
          const TaskConstMeta(
            debugName: "StructTwoWithTraitTwinNormal_auto_accessor_set_two",
            argNames: ["that", "two"],
          );

  @override
  Future<int>
      crateApiImplTraitStructTwoWithTraitTwinNormalSimpleTraitFnReceiverBorrowTwinNormal(
          {required StructTwoWithTraitTwinNormal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitTwinNormal(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 148, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiImplTraitStructTwoWithTraitTwinNormalSimpleTraitFnReceiverBorrowTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiImplTraitStructTwoWithTraitTwinNormalSimpleTraitFnReceiverBorrowTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "StructTwoWithTraitTwinNormal_simple_trait_fn_receiver_borrow_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<StructTwoWithTraitTwinNormal>
      crateApiImplTraitStructTwoWithTraitTwinNormalSimpleTraitFnTwinNormal(
          {required int value}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(value, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 149, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitTwinNormal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiImplTraitStructTwoWithTraitTwinNormalSimpleTraitFnTwinNormalConstMeta,
      argValues: [value],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiImplTraitStructTwoWithTraitTwinNormalSimpleTraitFnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "StructTwoWithTraitTwinNormal_simple_trait_fn_twin_normal",
            argNames: ["value"],
          );

  @override
  Future<int>
      crateApiImplTraitStructTwoWithTraitTwinNormalSimpleTraitFnWithDefaultImplTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 150, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiImplTraitStructTwoWithTraitTwinNormalSimpleTraitFnWithDefaultImplTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiImplTraitStructTwoWithTraitTwinNormalSimpleTraitFnWithDefaultImplTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "StructTwoWithTraitTwinNormal_simple_trait_fn_with_default_impl_twin_normal",
            argNames: [],
          );

  @override
  int crateApiPseudoManualImplTraitTwinSyncStructTwoWithTraitTwinSyncAutoAccessorGetTwo(
      {required StructTwoWithTraitTwinSync that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitTwinSync(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 151)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualImplTraitTwinSyncStructTwoWithTraitTwinSyncAutoAccessorGetTwoConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualImplTraitTwinSyncStructTwoWithTraitTwinSyncAutoAccessorGetTwoConstMeta =>
          const TaskConstMeta(
            debugName: "StructTwoWithTraitTwinSync_auto_accessor_get_two",
            argNames: ["that"],
          );

  @override
  void
      crateApiPseudoManualImplTraitTwinSyncStructTwoWithTraitTwinSyncAutoAccessorSetTwo(
          {required StructTwoWithTraitTwinSync that, required int two}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitTwinSync(
            that, serializer);
        sse_encode_i_32(two, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 152)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualImplTraitTwinSyncStructTwoWithTraitTwinSyncAutoAccessorSetTwoConstMeta,
      argValues: [that, two],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualImplTraitTwinSyncStructTwoWithTraitTwinSyncAutoAccessorSetTwoConstMeta =>
          const TaskConstMeta(
            debugName: "StructTwoWithTraitTwinSync_auto_accessor_set_two",
            argNames: ["that", "two"],
          );

  @override
  Future<int>
      crateApiPseudoManualImplTraitTwinSyncStructTwoWithTraitTwinSyncSimpleTraitFnReceiverBorrowTwinSync(
          {required StructTwoWithTraitTwinSync that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitTwinSync(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 153, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualImplTraitTwinSyncStructTwoWithTraitTwinSyncSimpleTraitFnReceiverBorrowTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualImplTraitTwinSyncStructTwoWithTraitTwinSyncSimpleTraitFnReceiverBorrowTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "StructTwoWithTraitTwinSync_simple_trait_fn_receiver_borrow_twin_sync",
            argNames: ["that"],
          );

  @override
  Future<StructTwoWithTraitTwinSync>
      crateApiPseudoManualImplTraitTwinSyncStructTwoWithTraitTwinSyncSimpleTraitFnTwinSync(
          {required int value}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(value, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 154, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitTwinSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualImplTraitTwinSyncStructTwoWithTraitTwinSyncSimpleTraitFnTwinSyncConstMeta,
      argValues: [value],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualImplTraitTwinSyncStructTwoWithTraitTwinSyncSimpleTraitFnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "StructTwoWithTraitTwinSync_simple_trait_fn_twin_sync",
            argNames: ["value"],
          );

  @override
  Future<int>
      crateApiPseudoManualImplTraitTwinSyncStructTwoWithTraitTwinSyncSimpleTraitFnWithDefaultImplTwinSync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 155, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualImplTraitTwinSyncStructTwoWithTraitTwinSyncSimpleTraitFnWithDefaultImplTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualImplTraitTwinSyncStructTwoWithTraitTwinSyncSimpleTraitFnWithDefaultImplTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "StructTwoWithTraitTwinSync_simple_trait_fn_with_default_impl_twin_sync",
            argNames: [],
          );

  @override
  String
      crateApiRustAutoOpaqueStructWithGoodAndOpaqueFieldWithoutOptionTwinNormalAutoAccessorGetGood(
          {required StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinNormal(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 156)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueStructWithGoodAndOpaqueFieldWithoutOptionTwinNormalAutoAccessorGetGoodConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueStructWithGoodAndOpaqueFieldWithoutOptionTwinNormalAutoAccessorGetGoodConstMeta =>
          const TaskConstMeta(
            debugName:
                "StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal_auto_accessor_get_good",
            argNames: ["that"],
          );

  @override
  void
      crateApiRustAutoOpaqueStructWithGoodAndOpaqueFieldWithoutOptionTwinNormalAutoAccessorSetGood(
          {required StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal that,
          required String good}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinNormal(
            that, serializer);
        sse_encode_String(good, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 157)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueStructWithGoodAndOpaqueFieldWithoutOptionTwinNormalAutoAccessorSetGoodConstMeta,
      argValues: [that, good],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueStructWithGoodAndOpaqueFieldWithoutOptionTwinNormalAutoAccessorSetGoodConstMeta =>
          const TaskConstMeta(
            debugName:
                "StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal_auto_accessor_set_good",
            argNames: ["that", "good"],
          );

  @override
  String
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncAutoAccessorGetGood(
          {required StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync
              that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 158)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncAutoAccessorGetGoodConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncAutoAccessorGetGoodConstMeta =>
          const TaskConstMeta(
            debugName:
                "StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync_auto_accessor_get_good",
            argNames: ["that"],
          );

  @override
  void
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncAutoAccessorSetGood(
          {required StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync that,
          required String good}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync(
            that, serializer);
        sse_encode_String(good, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 159)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncAutoAccessorSetGoodConstMeta,
      argValues: [that, good],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncAutoAccessorSetGoodConstMeta =>
          const TaskConstMeta(
            debugName:
                "StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync_auto_accessor_set_good",
            argNames: ["that", "good"],
          );

  @override
  String
      crateApiPseudoManualRustAutoOpaqueTwinSyncStructWithGoodAndOpaqueFieldWithoutOptionTwinSyncAutoAccessorGetGood(
          {required StructWithGoodAndOpaqueFieldWithoutOptionTwinSync that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinSync(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 160)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncStructWithGoodAndOpaqueFieldWithoutOptionTwinSyncAutoAccessorGetGoodConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncStructWithGoodAndOpaqueFieldWithoutOptionTwinSyncAutoAccessorGetGoodConstMeta =>
          const TaskConstMeta(
            debugName:
                "StructWithGoodAndOpaqueFieldWithoutOptionTwinSync_auto_accessor_get_good",
            argNames: ["that"],
          );

  @override
  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncStructWithGoodAndOpaqueFieldWithoutOptionTwinSyncAutoAccessorSetGood(
          {required StructWithGoodAndOpaqueFieldWithoutOptionTwinSync that,
          required String good}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinSync(
            that, serializer);
        sse_encode_String(good, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 161)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncStructWithGoodAndOpaqueFieldWithoutOptionTwinSyncAutoAccessorSetGoodConstMeta,
      argValues: [that, good],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncStructWithGoodAndOpaqueFieldWithoutOptionTwinSyncAutoAccessorSetGoodConstMeta =>
          const TaskConstMeta(
            debugName:
                "StructWithGoodAndOpaqueFieldWithoutOptionTwinSync_auto_accessor_set_good",
            argNames: ["that", "good"],
          );

  @override
  Future<void>
      crateApiMiscNoTwinExampleAStructWithImplBlockInMultiFileMethodInA(
          {required StructWithImplBlockInMultiFile that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithImplBlockInMultiFile(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 162, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleAStructWithImplBlockInMultiFileMethodInAConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleAStructWithImplBlockInMultiFileMethodInAConstMeta =>
          const TaskConstMeta(
            debugName: "StructWithImplBlockInMultiFile_method_in_a",
            argNames: ["that"],
          );

  @override
  Future<void>
      crateApiMiscNoTwinExampleAStructWithImplBlockInMultiFileMethodInB(
          {required StructWithImplBlockInMultiFile that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithImplBlockInMultiFile(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 163, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleAStructWithImplBlockInMultiFileMethodInBConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleAStructWithImplBlockInMultiFileMethodInBConstMeta =>
          const TaskConstMeta(
            debugName: "StructWithImplBlockInMultiFile_method_in_b",
            argNames: ["that"],
          );

  @override
  Future<StructWithRustAutoOpaqueFieldWithManyDeriveInner>
      crateApiMiscNoTwinExampleAStructWithRustAutoOpaqueFieldWithManyDeriveInnerDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 164, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithRustAutoOpaqueFieldWithManyDeriveInner,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleAStructWithRustAutoOpaqueFieldWithManyDeriveInnerDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleAStructWithRustAutoOpaqueFieldWithManyDeriveInnerDefaultConstMeta =>
          const TaskConstMeta(
            debugName:
                "StructWithRustAutoOpaqueFieldWithManyDeriveInner_default",
            argNames: [],
          );

  @override
  int crateApiMiscNoTwinExampleAStructWithSimpleSetterTwinNormalGetSomething(
      {required StructWithSimpleSetterTwinNormal that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithSimpleSetterTwinNormal(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 165)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleAStructWithSimpleSetterTwinNormalGetSomethingConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleAStructWithSimpleSetterTwinNormalGetSomethingConstMeta =>
          const TaskConstMeta(
            debugName:
                "StructWithSimpleSetterTwinNormal_get_something(dart_style=something)",
            argNames: ["that"],
          );

  @override
  StructWithSimpleSetterTwinNormal
      crateApiMiscNoTwinExampleAStructWithSimpleSetterTwinNormalNew() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 166)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithSimpleSetterTwinNormal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleAStructWithSimpleSetterTwinNormalNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleAStructWithSimpleSetterTwinNormalNewConstMeta =>
          const TaskConstMeta(
            debugName: "StructWithSimpleSetterTwinNormal_new",
            argNames: [],
          );

  @override
  void crateApiMiscNoTwinExampleAStructWithSimpleSetterTwinNormalSetSomething(
      {required StructWithSimpleSetterTwinNormal that, required int value}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithSimpleSetterTwinNormal(
            that, serializer);
        sse_encode_i_32(value, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 167)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleAStructWithSimpleSetterTwinNormalSetSomethingConstMeta,
      argValues: [that, value],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleAStructWithSimpleSetterTwinNormalSetSomethingConstMeta =>
          const TaskConstMeta(
            debugName:
                "StructWithSimpleSetterTwinNormal_set_something(dart_style=something)",
            argNames: ["that", "value"],
          );

  @override
  int crateApiMiscNoTwinExampleAStructWithSimpleSetterTwinNormalSimpleGetter(
      {required StructWithSimpleSetterTwinNormal that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithSimpleSetterTwinNormal(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 168)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleAStructWithSimpleSetterTwinNormalSimpleGetterConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleAStructWithSimpleSetterTwinNormalSimpleGetterConstMeta =>
          const TaskConstMeta(
            debugName: "StructWithSimpleSetterTwinNormal_simple_getter",
            argNames: ["that"],
          );

  @override
  void crateApiMiscNoTwinExampleAStructWithSimpleSetterTwinNormalSimpleSetter(
      {required StructWithSimpleSetterTwinNormal that, required int value}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithSimpleSetterTwinNormal(
            that, serializer);
        sse_encode_i_32(value, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 169)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleAStructWithSimpleSetterTwinNormalSimpleSetterConstMeta,
      argValues: [that, value],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleAStructWithSimpleSetterTwinNormalSimpleSetterConstMeta =>
          const TaskConstMeta(
            debugName: "StructWithSimpleSetterTwinNormal_simple_setter",
            argNames: ["that", "value"],
          );

  @override
  int crateApiMiscNoTwinExampleATypeForIgnoreAllAutoAccessorGetField2(
      {required TypeForIgnoreAll that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTypeForIgnoreAll(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 183)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleATypeForIgnoreAllAutoAccessorGetField2ConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleATypeForIgnoreAllAutoAccessorGetField2ConstMeta =>
          const TaskConstMeta(
            debugName: "TypeForIgnoreAll_auto_accessor_get_field_2",
            argNames: ["that"],
          );

  @override
  void crateApiMiscNoTwinExampleATypeForIgnoreAllAutoAccessorSetField2(
      {required TypeForIgnoreAll that, required int field2}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTypeForIgnoreAll(
            that, serializer);
        sse_encode_u_32(field2, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 184)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleATypeForIgnoreAllAutoAccessorSetField2ConstMeta,
      argValues: [that, field2],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleATypeForIgnoreAllAutoAccessorSetField2ConstMeta =>
          const TaskConstMeta(
            debugName: "TypeForIgnoreAll_auto_accessor_set_field_2",
            argNames: ["that", "field2"],
          );

  @override
  Future<TypeForIgnoreAll> crateApiMiscNoTwinExampleATypeForIgnoreAllDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 185, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTypeForIgnoreAll,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMiscNoTwinExampleATypeForIgnoreAllDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleATypeForIgnoreAllDefaultConstMeta =>
          const TaskConstMeta(
            debugName: "TypeForIgnoreAll_default",
            argNames: [],
          );

  @override
  Future<int> crateApiMiscNoTwinExampleATypeForIgnoreAllField1(
      {required TypeForIgnoreAll that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTypeForIgnoreAll(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 186, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMiscNoTwinExampleATypeForIgnoreAllField1ConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleATypeForIgnoreAllField1ConstMeta =>
          const TaskConstMeta(
            debugName: "TypeForIgnoreAll_field_1",
            argNames: ["that"],
          );

  @override
  Future<TypeForIgnoreAll> crateApiMiscNoTwinExampleATypeForIgnoreAllNew() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 187, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTypeForIgnoreAll,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMiscNoTwinExampleATypeForIgnoreAllNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMiscNoTwinExampleATypeForIgnoreAllNewConstMeta =>
      const TaskConstMeta(
        debugName: "TypeForIgnoreAll_new",
        argNames: [],
      );

  @override
  Future<TypeForIgnore> crateApiMiscNoTwinExampleATypeForIgnoreDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 188, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTypeForIgnore,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMiscNoTwinExampleATypeForIgnoreDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMiscNoTwinExampleATypeForIgnoreDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "TypeForIgnore_default",
        argNames: [],
      );

  @override
  Future<int> crateApiMiscNoTwinExampleATypeForIgnoreField1(
      {required TypeForIgnore that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTypeForIgnore(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 189, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMiscNoTwinExampleATypeForIgnoreField1ConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMiscNoTwinExampleATypeForIgnoreField1ConstMeta =>
      const TaskConstMeta(
        debugName: "TypeForIgnore_field_1",
        argNames: ["that"],
      );

  @override
  Future<TypeForIgnore> crateApiMiscNoTwinExampleATypeForIgnoreNew() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 190, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTypeForIgnore,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMiscNoTwinExampleATypeForIgnoreNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMiscNoTwinExampleATypeForIgnoreNewConstMeta =>
      const TaskConstMeta(
        debugName: "TypeForIgnore_new",
        argNames: [],
      );

  @override
  Future<AnotherMacroStructTwinNormal>
      crateApiInsideMacroAnotherMacroStructTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 191, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_another_macro_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiInsideMacroAnotherMacroStructTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInsideMacroAnotherMacroStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "another_macro_struct_twin_normal",
        argNames: [],
      );

  @override
  Stream<ApplicationSettings> crateApiMirrorAppSettingsStreamTwinNormal() {
    final sink = RustStreamSink<ApplicationSettings>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_application_settings_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 192, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMirrorAppSettingsStreamTwinNormalConstMeta,
      argValues: [sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiMirrorAppSettingsStreamTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "app_settings_stream_twin_normal",
        argNames: ["sink"],
      );

  @override
  Stream<ApplicationSettings>
      crateApiPseudoManualMirrorTwinRustAsyncAppSettingsStreamTwinRustAsync() {
    final sink = RustStreamSink<ApplicationSettings>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_application_settings_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 193, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncAppSettingsStreamTwinRustAsyncConstMeta,
      argValues: [sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncAppSettingsStreamTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "app_settings_stream_twin_rust_async",
            argNames: ["sink"],
          );

  @override
  Stream<ApplicationSettings>
      crateApiPseudoManualMirrorTwinSyncAppSettingsStreamTwinSync() {
    final sink = RustStreamSink<ApplicationSettings>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_application_settings_Sse(sink, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 194)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncAppSettingsStreamTwinSyncConstMeta,
      argValues: [sink],
      apiImpl: this,
    ));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncAppSettingsStreamTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "app_settings_stream_twin_sync",
            argNames: ["sink"],
          );

  @override
  Stream<List<ApplicationSettings>>
      crateApiMirrorAppSettingsVecStreamTwinNormal() {
    final sink = RustStreamSink<List<ApplicationSettings>>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_list_application_settings_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 195, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMirrorAppSettingsVecStreamTwinNormalConstMeta,
      argValues: [sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiMirrorAppSettingsVecStreamTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "app_settings_vec_stream_twin_normal",
        argNames: ["sink"],
      );

  @override
  Stream<List<ApplicationSettings>>
      crateApiPseudoManualMirrorTwinRustAsyncAppSettingsVecStreamTwinRustAsync() {
    final sink = RustStreamSink<List<ApplicationSettings>>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_list_application_settings_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 196, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncAppSettingsVecStreamTwinRustAsyncConstMeta,
      argValues: [sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncAppSettingsVecStreamTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "app_settings_vec_stream_twin_rust_async",
            argNames: ["sink"],
          );

  @override
  Stream<List<ApplicationSettings>>
      crateApiPseudoManualMirrorTwinSyncAppSettingsVecStreamTwinSync() {
    final sink = RustStreamSink<List<ApplicationSettings>>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_list_application_settings_Sse(sink, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 197)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncAppSettingsVecStreamTwinSyncConstMeta,
      argValues: [sink],
      apiImpl: this,
    ));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncAppSettingsVecStreamTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "app_settings_vec_stream_twin_sync",
            argNames: ["sink"],
          );

  @override
  Future<String> crateApiDartOpaqueAsyncAcceptDartOpaqueTwinNormal(
      {required Object opaque}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 198, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartOpaqueAsyncAcceptDartOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiDartOpaqueAsyncAcceptDartOpaqueTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "async_accept_dart_opaque_twin_normal",
            argNames: ["opaque"],
          );

  @override
  Future<String>
      crateApiPseudoManualDartOpaqueTwinRustAsyncAsyncAcceptDartOpaqueTwinRustAsync(
          {required Object opaque}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 199, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinRustAsyncAsyncAcceptDartOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinRustAsyncAsyncAcceptDartOpaqueTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "async_accept_dart_opaque_twin_rust_async",
            argNames: ["opaque"],
          );

  @override
  String crateApiPseudoManualDartOpaqueTwinSyncAsyncAcceptDartOpaqueTwinSync(
      {required Object opaque}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 200)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinSyncAsyncAcceptDartOpaqueTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinSyncAsyncAcceptDartOpaqueTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "async_accept_dart_opaque_twin_sync",
            argNames: ["opaque"],
          );

  @override
  Future<void>
      crateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeInputJsonTwinNormal(
          {required String raw}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(raw, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 201, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeInputJsonTwinNormalConstMeta,
      argValues: [raw],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeInputJsonTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_binary_tree_input_json_twin_normal",
            argNames: ["raw"],
          );

  @override
  Future<void>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeInputJsonTwinRustAsync(
          {required String raw}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(raw, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 202, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeInputJsonTwinRustAsyncConstMeta,
      argValues: [raw],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeInputJsonTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_binary_tree_input_json_twin_rust_async",
            argNames: ["raw"],
          );

  @override
  void
      crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeInputJsonTwinSync(
          {required String raw}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(raw, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 203)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeInputJsonTwinSyncConstMeta,
      argValues: [raw],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeInputJsonTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_binary_tree_input_json_twin_sync",
            argNames: ["raw"],
          );

  @override
  Future<void>
      crateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeInputProtobufTwinNormal(
          {required List<int> raw}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(raw, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 204, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeInputProtobufTwinNormalConstMeta,
      argValues: [raw],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeInputProtobufTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_binary_tree_input_protobuf_twin_normal",
            argNames: ["raw"],
          );

  @override
  Future<void>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeInputProtobufTwinRustAsync(
          {required List<int> raw}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(raw, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 205, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeInputProtobufTwinRustAsyncConstMeta,
      argValues: [raw],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeInputProtobufTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_binary_tree_input_protobuf_twin_rust_async",
            argNames: ["raw"],
          );

  @override
  void
      crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeInputProtobufTwinSync(
          {required List<int> raw}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(raw, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 206)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeInputProtobufTwinSyncConstMeta,
      argValues: [raw],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeInputProtobufTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_binary_tree_input_protobuf_twin_sync",
            argNames: ["raw"],
          );

  @override
  Future<void>
      crateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeInputTwinNormal(
          {required BenchmarkBinaryTreeTwinNormal tree}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_benchmark_binary_tree_twin_normal(
            tree, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 207, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeInputTwinNormalConstMeta,
      argValues: [tree],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeInputTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_binary_tree_input_twin_normal",
            argNames: ["tree"],
          );

  @override
  Future<void>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeInputTwinRustAsync(
          {required BenchmarkBinaryTreeTwinRustAsync tree}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_benchmark_binary_tree_twin_rust_async(
            tree, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 208, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeInputTwinRustAsyncConstMeta,
      argValues: [tree],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeInputTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_binary_tree_input_twin_rust_async",
            argNames: ["tree"],
          );

  @override
  void crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeInputTwinSync(
      {required BenchmarkBinaryTreeTwinSync tree}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_benchmark_binary_tree_twin_sync(
            tree, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 209)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeInputTwinSyncConstMeta,
      argValues: [tree],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeInputTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_binary_tree_input_twin_sync",
            argNames: ["tree"],
          );

  @override
  Future<String>
      crateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeOutputJsonTwinNormal(
          {required int depth}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(depth, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 210, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeOutputJsonTwinNormalConstMeta,
      argValues: [depth],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeOutputJsonTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_binary_tree_output_json_twin_normal",
            argNames: ["depth"],
          );

  @override
  Future<String>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeOutputJsonTwinRustAsync(
          {required int depth}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(depth, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 211, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeOutputJsonTwinRustAsyncConstMeta,
      argValues: [depth],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeOutputJsonTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_binary_tree_output_json_twin_rust_async",
            argNames: ["depth"],
          );

  @override
  String
      crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeOutputJsonTwinSync(
          {required int depth}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(depth, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 212)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeOutputJsonTwinSyncConstMeta,
      argValues: [depth],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeOutputJsonTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_binary_tree_output_json_twin_sync",
            argNames: ["depth"],
          );

  @override
  Future<Uint8List>
      crateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeOutputProtobufTwinNormal(
          {required int depth}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(depth, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 213, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeOutputProtobufTwinNormalConstMeta,
      argValues: [depth],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeOutputProtobufTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_binary_tree_output_protobuf_twin_normal",
            argNames: ["depth"],
          );

  @override
  Future<Uint8List>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeOutputProtobufTwinRustAsync(
          {required int depth}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(depth, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 214, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeOutputProtobufTwinRustAsyncConstMeta,
      argValues: [depth],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeOutputProtobufTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_binary_tree_output_protobuf_twin_rust_async",
            argNames: ["depth"],
          );

  @override
  Uint8List
      crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeOutputProtobufTwinSync(
          {required int depth}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(depth, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 215)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeOutputProtobufTwinSyncConstMeta,
      argValues: [depth],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeOutputProtobufTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_binary_tree_output_protobuf_twin_sync",
            argNames: ["depth"],
          );

  @override
  Future<BenchmarkBinaryTreeTwinNormal>
      crateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeOutputTwinNormal(
          {required int depth}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(depth, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 216, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_benchmark_binary_tree_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeOutputTwinNormalConstMeta,
      argValues: [depth],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeOutputTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_binary_tree_output_twin_normal",
            argNames: ["depth"],
          );

  @override
  Future<BenchmarkBinaryTreeTwinRustAsync>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeOutputTwinRustAsync(
          {required int depth}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(depth, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 217, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_benchmark_binary_tree_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeOutputTwinRustAsyncConstMeta,
      argValues: [depth],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeOutputTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_binary_tree_output_twin_rust_async",
            argNames: ["depth"],
          );

  @override
  BenchmarkBinaryTreeTwinSync
      crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeOutputTwinSync(
          {required int depth}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(depth, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 218)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_benchmark_binary_tree_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeOutputTwinSyncConstMeta,
      argValues: [depth],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeOutputTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_binary_tree_output_twin_sync",
            argNames: ["depth"],
          );

  @override
  Future<void> crateApiPseudoManualBenchmarkApiBenchmarkBlobInputJsonTwinNormal(
      {required String raw}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(raw, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 219, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiBenchmarkBlobInputJsonTwinNormalConstMeta,
      argValues: [raw],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiBenchmarkBlobInputJsonTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_blob_input_json_twin_normal",
            argNames: ["raw"],
          );

  @override
  Future<void>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobInputJsonTwinRustAsync(
          {required String raw}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(raw, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 220, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobInputJsonTwinRustAsyncConstMeta,
      argValues: [raw],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobInputJsonTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_blob_input_json_twin_rust_async",
            argNames: ["raw"],
          );

  @override
  void crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobInputJsonTwinSync(
      {required String raw}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(raw, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 221)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobInputJsonTwinSyncConstMeta,
      argValues: [raw],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobInputJsonTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_blob_input_json_twin_sync",
            argNames: ["raw"],
          );

  @override
  Future<void>
      crateApiPseudoManualBenchmarkApiBenchmarkBlobInputProtobufTwinNormal(
          {required List<int> raw}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(raw, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 222, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiBenchmarkBlobInputProtobufTwinNormalConstMeta,
      argValues: [raw],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiBenchmarkBlobInputProtobufTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_blob_input_protobuf_twin_normal",
            argNames: ["raw"],
          );

  @override
  Future<void>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobInputProtobufTwinRustAsync(
          {required List<int> raw}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(raw, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 223, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobInputProtobufTwinRustAsyncConstMeta,
      argValues: [raw],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobInputProtobufTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_blob_input_protobuf_twin_rust_async",
            argNames: ["raw"],
          );

  @override
  void
      crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobInputProtobufTwinSync(
          {required List<int> raw}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(raw, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 224)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobInputProtobufTwinSyncConstMeta,
      argValues: [raw],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobInputProtobufTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_blob_input_protobuf_twin_sync",
            argNames: ["raw"],
          );

  @override
  Future<void> crateApiPseudoManualBenchmarkApiBenchmarkBlobInputTwinNormal(
      {required BenchmarkBlobTwinNormal blob}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_benchmark_blob_twin_normal(blob, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 225, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiBenchmarkBlobInputTwinNormalConstMeta,
      argValues: [blob],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiBenchmarkBlobInputTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_blob_input_twin_normal",
            argNames: ["blob"],
          );

  @override
  Future<void>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobInputTwinRustAsync(
          {required BenchmarkBlobTwinRustAsync blob}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_benchmark_blob_twin_rust_async(blob, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 226, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobInputTwinRustAsyncConstMeta,
      argValues: [blob],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobInputTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_blob_input_twin_rust_async",
            argNames: ["blob"],
          );

  @override
  void crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobInputTwinSync(
      {required BenchmarkBlobTwinSync blob}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_benchmark_blob_twin_sync(blob, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 227)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobInputTwinSyncConstMeta,
      argValues: [blob],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobInputTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_blob_input_twin_sync",
            argNames: ["blob"],
          );

  @override
  Future<String>
      crateApiPseudoManualBenchmarkApiBenchmarkBlobOutputJsonTwinNormal(
          {required int size}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(size, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 228, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiBenchmarkBlobOutputJsonTwinNormalConstMeta,
      argValues: [size],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiBenchmarkBlobOutputJsonTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_blob_output_json_twin_normal",
            argNames: ["size"],
          );

  @override
  Future<String>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobOutputJsonTwinRustAsync(
          {required int size}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(size, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 229, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobOutputJsonTwinRustAsyncConstMeta,
      argValues: [size],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobOutputJsonTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_blob_output_json_twin_rust_async",
            argNames: ["size"],
          );

  @override
  String
      crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobOutputJsonTwinSync(
          {required int size}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(size, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 230)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobOutputJsonTwinSyncConstMeta,
      argValues: [size],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobOutputJsonTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_blob_output_json_twin_sync",
            argNames: ["size"],
          );

  @override
  Future<Uint8List>
      crateApiPseudoManualBenchmarkApiBenchmarkBlobOutputProtobufTwinNormal(
          {required int size}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(size, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 231, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiBenchmarkBlobOutputProtobufTwinNormalConstMeta,
      argValues: [size],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiBenchmarkBlobOutputProtobufTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_blob_output_protobuf_twin_normal",
            argNames: ["size"],
          );

  @override
  Future<Uint8List>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobOutputProtobufTwinRustAsync(
          {required int size}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(size, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 232, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobOutputProtobufTwinRustAsyncConstMeta,
      argValues: [size],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobOutputProtobufTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_blob_output_protobuf_twin_rust_async",
            argNames: ["size"],
          );

  @override
  Uint8List
      crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobOutputProtobufTwinSync(
          {required int size}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(size, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 233)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobOutputProtobufTwinSyncConstMeta,
      argValues: [size],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobOutputProtobufTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_blob_output_protobuf_twin_sync",
            argNames: ["size"],
          );

  @override
  Future<BenchmarkBlobTwinNormal>
      crateApiPseudoManualBenchmarkApiBenchmarkBlobOutputTwinNormal(
          {required int size}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(size, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 234, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_benchmark_blob_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiBenchmarkBlobOutputTwinNormalConstMeta,
      argValues: [size],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiBenchmarkBlobOutputTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_blob_output_twin_normal",
            argNames: ["size"],
          );

  @override
  Future<BenchmarkBlobTwinRustAsync>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobOutputTwinRustAsync(
          {required int size}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(size, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 235, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_benchmark_blob_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobOutputTwinRustAsyncConstMeta,
      argValues: [size],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobOutputTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_blob_output_twin_rust_async",
            argNames: ["size"],
          );

  @override
  BenchmarkBlobTwinSync
      crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobOutputTwinSync(
          {required int size}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(size, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 236)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_benchmark_blob_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobOutputTwinSyncConstMeta,
      argValues: [size],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobOutputTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_blob_output_twin_sync",
            argNames: ["size"],
          );

  @override
  Future<int> crateApiPseudoManualBenchmarkApiBenchmarkInputBytesTwinNormal(
      {required List<int> bytes}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(bytes, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 237, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiBenchmarkInputBytesTwinNormalConstMeta,
      argValues: [bytes],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiBenchmarkInputBytesTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_input_bytes_twin_normal",
            argNames: ["bytes"],
          );

  @override
  Future<int>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkInputBytesTwinRustAsync(
          {required List<int> bytes}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(bytes, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 238, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkInputBytesTwinRustAsyncConstMeta,
      argValues: [bytes],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkInputBytesTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_input_bytes_twin_rust_async",
            argNames: ["bytes"],
          );

  @override
  int crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkInputBytesTwinSync(
      {required List<int> bytes}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(bytes, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 239)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkInputBytesTwinSyncConstMeta,
      argValues: [bytes],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkInputBytesTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_input_bytes_twin_sync",
            argNames: ["bytes"],
          );

  @override
  Future<Uint8List>
      crateApiPseudoManualBenchmarkApiBenchmarkOutputBytesTwinNormal(
          {required int size}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(size, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 240, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiBenchmarkOutputBytesTwinNormalConstMeta,
      argValues: [size],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiBenchmarkOutputBytesTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_output_bytes_twin_normal",
            argNames: ["size"],
          );

  @override
  Future<Uint8List>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkOutputBytesTwinRustAsync(
          {required int size}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(size, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 241, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkOutputBytesTwinRustAsyncConstMeta,
      argValues: [size],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkOutputBytesTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_output_bytes_twin_rust_async",
            argNames: ["size"],
          );

  @override
  Uint8List
      crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkOutputBytesTwinSync(
          {required int size}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(size, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 242)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkOutputBytesTwinSyncConstMeta,
      argValues: [size],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkOutputBytesTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_output_bytes_twin_sync",
            argNames: ["size"],
          );

  @override
  void crateApiBenchmarkMiscBenchmarkVoidSemiSerialize() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 243)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBenchmarkMiscBenchmarkVoidSemiSerializeConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBenchmarkMiscBenchmarkVoidSemiSerializeConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_void_semi_serialize",
        argNames: [],
      );

  @override
  Future<void> crateApiPseudoManualBenchmarkApiBenchmarkVoidTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 244, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiBenchmarkVoidTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiBenchmarkVoidTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_void_twin_normal",
            argNames: [],
          );

  @override
  Future<void>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkVoidTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 245, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkVoidTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkVoidTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_void_twin_rust_async",
            argNames: [],
          );

  @override
  void crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkVoidTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 246)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkVoidTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkVoidTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_void_twin_sync",
            argNames: [],
          );

  @override
  Future<int> crateApiOwnershipBorrowI32TwinNormal({required int arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 247, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOwnershipBorrowI32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOwnershipBorrowI32TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "borrow_i32_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<int> crateApiPseudoManualOwnershipTwinRustAsyncBorrowI32TwinRustAsync(
      {required int arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 248, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOwnershipTwinRustAsyncBorrowI32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOwnershipTwinRustAsyncBorrowI32TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "borrow_i32_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  int crateApiPseudoManualOwnershipTwinSyncBorrowI32TwinSync(
      {required int arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 249)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOwnershipTwinSyncBorrowI32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOwnershipTwinSyncBorrowI32TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "borrow_i32_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<List<String>> crateApiOwnershipBorrowSliceStringTwinNormal(
      {required List<String> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 250, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOwnershipBorrowSliceStringTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOwnershipBorrowSliceStringTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "borrow_slice_string_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<List<String>>
      crateApiPseudoManualOwnershipTwinRustAsyncBorrowSliceStringTwinRustAsync(
          {required List<String> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 251, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOwnershipTwinRustAsyncBorrowSliceStringTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOwnershipTwinRustAsyncBorrowSliceStringTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "borrow_slice_string_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  List<String> crateApiPseudoManualOwnershipTwinSyncBorrowSliceStringTwinSync(
      {required List<String> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_String(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 252)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOwnershipTwinSyncBorrowSliceStringTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOwnershipTwinSyncBorrowSliceStringTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "borrow_slice_string_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<Uint8List> crateApiOwnershipBorrowSliceU8TwinNormal(
      {required List<int> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 253, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOwnershipBorrowSliceU8TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOwnershipBorrowSliceU8TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "borrow_slice_u8_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Uint8List>
      crateApiPseudoManualOwnershipTwinRustAsyncBorrowSliceU8TwinRustAsync(
          {required List<int> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 254, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOwnershipTwinRustAsyncBorrowSliceU8TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOwnershipTwinRustAsyncBorrowSliceU8TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "borrow_slice_u8_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Uint8List crateApiPseudoManualOwnershipTwinSyncBorrowSliceU8TwinSync(
      {required List<int> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 255)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOwnershipTwinSyncBorrowSliceU8TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOwnershipTwinSyncBorrowSliceU8TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "borrow_slice_u8_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<String> crateApiOwnershipBorrowStrTwinNormal({required String arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 256, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOwnershipBorrowStrTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOwnershipBorrowStrTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "borrow_str_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<String>
      crateApiPseudoManualOwnershipTwinRustAsyncBorrowStrTwinRustAsync(
          {required String arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 257, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOwnershipTwinRustAsyncBorrowStrTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOwnershipTwinRustAsyncBorrowStrTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "borrow_str_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  String crateApiPseudoManualOwnershipTwinSyncBorrowStrTwinSync(
      {required String arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 258)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOwnershipTwinSyncBorrowStrTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOwnershipTwinSyncBorrowStrTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "borrow_str_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<String> crateApiOwnershipBorrowStringTwinNormal(
      {required String arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 259, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOwnershipBorrowStringTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOwnershipBorrowStringTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "borrow_string_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<String>
      crateApiPseudoManualOwnershipTwinRustAsyncBorrowStringTwinRustAsync(
          {required String arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 260, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOwnershipTwinRustAsyncBorrowStringTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOwnershipTwinRustAsyncBorrowStringTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "borrow_string_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  String crateApiPseudoManualOwnershipTwinSyncBorrowStringTwinSync(
      {required String arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 261)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOwnershipTwinSyncBorrowStringTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOwnershipTwinSyncBorrowStringTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "borrow_string_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<SimpleStructForBorrowTwinNormal>
      crateApiOwnershipBorrowStructTwinNormal(
          {required SimpleStructForBorrowTwinNormal arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_simple_struct_for_borrow_twin_normal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 262, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_simple_struct_for_borrow_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOwnershipBorrowStructTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOwnershipBorrowStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "borrow_struct_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<SimpleStructForBorrowTwinRustAsync>
      crateApiPseudoManualOwnershipTwinRustAsyncBorrowStructTwinRustAsync(
          {required SimpleStructForBorrowTwinRustAsync arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_simple_struct_for_borrow_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 263, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_simple_struct_for_borrow_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOwnershipTwinRustAsyncBorrowStructTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOwnershipTwinRustAsyncBorrowStructTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "borrow_struct_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  SimpleStructForBorrowTwinSync
      crateApiPseudoManualOwnershipTwinSyncBorrowStructTwinSync(
          {required SimpleStructForBorrowTwinSync arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_simple_struct_for_borrow_twin_sync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 264)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_simple_struct_for_borrow_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOwnershipTwinSyncBorrowStructTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOwnershipTwinSyncBorrowStructTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "borrow_struct_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<BlobTwinNormal> crateApiArrayBoxedBlobTwinNormal(
      {required U8Array1600 blob}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_u_8_array_1600(blob, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 265, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_blob_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiArrayBoxedBlobTwinNormalConstMeta,
      argValues: [blob],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiArrayBoxedBlobTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "boxed_blob_twin_normal",
        argNames: ["blob"],
      );

  @override
  Future<BlobTwinRustAsync>
      crateApiPseudoManualArrayTwinRustAsyncBoxedBlobTwinRustAsync(
          {required U8Array1600 blob}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_u_8_array_1600(blob, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 266, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_blob_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualArrayTwinRustAsyncBoxedBlobTwinRustAsyncConstMeta,
      argValues: [blob],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualArrayTwinRustAsyncBoxedBlobTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "boxed_blob_twin_rust_async",
            argNames: ["blob"],
          );

  @override
  BlobTwinSync crateApiPseudoManualArrayTwinSyncBoxedBlobTwinSync(
      {required U8Array1600 blob}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_u_8_array_1600(blob, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 267)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_blob_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPseudoManualArrayTwinSyncBoxedBlobTwinSyncConstMeta,
      argValues: [blob],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualArrayTwinSyncBoxedBlobTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "boxed_blob_twin_sync",
            argNames: ["blob"],
          );

  @override
  Future<NewSimpleStruct>
      crateApiExternalTypeInCrateCallNewModuleSystemTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 268, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_new_simple_struct,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiExternalTypeInCrateCallNewModuleSystemTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiExternalTypeInCrateCallNewModuleSystemTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "call_new_module_system_twin_normal",
            argNames: [],
          );

  @override
  Future<NewSimpleStruct>
      crateApiPseudoManualExternalTypeInCrateTwinRustAsyncCallNewModuleSystemTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 269, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_new_simple_struct,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualExternalTypeInCrateTwinRustAsyncCallNewModuleSystemTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExternalTypeInCrateTwinRustAsyncCallNewModuleSystemTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "call_new_module_system_twin_rust_async",
            argNames: [],
          );

  @override
  NewSimpleStruct
      crateApiPseudoManualExternalTypeInCrateTwinSyncCallNewModuleSystemTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 270)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_new_simple_struct,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualExternalTypeInCrateTwinSyncCallNewModuleSystemTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExternalTypeInCrateTwinSyncCallNewModuleSystemTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "call_new_module_system_twin_sync",
            argNames: [],
          );

  @override
  Future<OldSimpleStruct>
      crateApiExternalTypeInCrateCallOldModuleSystemTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 271, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_old_simple_struct,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiExternalTypeInCrateCallOldModuleSystemTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiExternalTypeInCrateCallOldModuleSystemTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "call_old_module_system_twin_normal",
            argNames: [],
          );

  @override
  Future<OldSimpleStruct>
      crateApiPseudoManualExternalTypeInCrateTwinRustAsyncCallOldModuleSystemTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 272, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_old_simple_struct,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualExternalTypeInCrateTwinRustAsyncCallOldModuleSystemTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExternalTypeInCrateTwinRustAsyncCallOldModuleSystemTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "call_old_module_system_twin_rust_async",
            argNames: [],
          );

  @override
  OldSimpleStruct
      crateApiPseudoManualExternalTypeInCrateTwinSyncCallOldModuleSystemTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 273)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_old_simple_struct,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualExternalTypeInCrateTwinSyncCallOldModuleSystemTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExternalTypeInCrateTwinSyncCallOldModuleSystemTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "call_old_module_system_twin_sync",
            argNames: [],
          );

  @override
  Future<int> crateApiCastedPrimitiveCastedPrimitiveI64TwinNormal(
      {required int arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_CastedPrimitive_i_64(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 274, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_CastedPrimitive_i_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiCastedPrimitiveCastedPrimitiveI64TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiCastedPrimitiveCastedPrimitiveI64TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "casted_primitive_i64_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<int> crateApiCastedPrimitiveCastedPrimitiveIsizeTwinNormal(
      {required int arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_CastedPrimitive_isize(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 275, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_CastedPrimitive_isize,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiCastedPrimitiveCastedPrimitiveIsizeTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiCastedPrimitiveCastedPrimitiveIsizeTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "casted_primitive_isize_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<void> crateApiCastedPrimitiveCastedPrimitiveMultiArgTwinNormal(
      {required int a, required int b, required int c, required BigInt d}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(a, serializer);
        sse_encode_CastedPrimitive_i_64(b, serializer);
        sse_encode_CastedPrimitive_usize(c, serializer);
        sse_encode_I128(d, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 276, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiCastedPrimitiveCastedPrimitiveMultiArgTwinNormalConstMeta,
      argValues: [a, b, c, d],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiCastedPrimitiveCastedPrimitiveMultiArgTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "casted_primitive_multi_arg_twin_normal",
            argNames: ["a", "b", "c", "d"],
          );

  @override
  Future<int> crateApiCastedPrimitiveCastedPrimitiveU64TwinNormal(
      {required int arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_CastedPrimitive_u_64(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 277, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_CastedPrimitive_u_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiCastedPrimitiveCastedPrimitiveU64TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiCastedPrimitiveCastedPrimitiveU64TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "casted_primitive_u64_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<int> crateApiCastedPrimitiveCastedPrimitiveUsizeTwinNormal(
      {required int arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_CastedPrimitive_usize(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 278, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_CastedPrimitive_usize,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiCastedPrimitiveCastedPrimitiveUsizeTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiCastedPrimitiveCastedPrimitiveUsizeTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "casted_primitive_usize_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<bool> crateApiCustomizationCheckInitDone() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 279, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiCustomizationCheckInitDoneConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCustomizationCheckInitDoneConstMeta =>
      const TaskConstMeta(
        debugName: "check_init_done",
        argNames: [],
      );

  @override
  Future<List<Object>> crateApiDartOpaqueCloneDartOpaqueTwinNormal(
      {required Object opaque}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 280, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartOpaqueCloneDartOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartOpaqueCloneDartOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "clone_dart_opaque_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<List<Object>>
      crateApiPseudoManualDartOpaqueTwinRustAsyncCloneDartOpaqueTwinRustAsync(
          {required Object opaque}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 281, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinRustAsyncCloneDartOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinRustAsyncCloneDartOpaqueTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "clone_dart_opaque_twin_rust_async",
            argNames: ["opaque"],
          );

  @override
  List<Object> crateApiPseudoManualDartOpaqueTwinSyncCloneDartOpaqueTwinSync(
      {required Object opaque}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 282)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinSyncCloneDartOpaqueTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinSyncCloneDartOpaqueTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "clone_dart_opaque_twin_sync",
            argNames: ["opaque"],
          );

  @override
  Future<void> crateApiEventListenerCloseEventListenerTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 283, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEventListenerCloseEventListenerTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiEventListenerCloseEventListenerTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "close_event_listener_twin_normal",
            argNames: [],
          );

  @override
  Future<void>
      crateApiPseudoManualEventListenerTwinRustAsyncCloseEventListenerTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 284, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualEventListenerTwinRustAsyncCloseEventListenerTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualEventListenerTwinRustAsyncCloseEventListenerTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "close_event_listener_twin_rust_async",
            argNames: [],
          );

  @override
  Future<String>
      crateApiMethodConcatenateWithTwinNormalConcatenateStaticTwinNormal(
          {required String a, required String b}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(a, serializer);
        sse_encode_String(b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 285, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMethodConcatenateWithTwinNormalConcatenateStaticTwinNormalConstMeta,
      argValues: [a, b],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMethodConcatenateWithTwinNormalConcatenateStaticTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "concatenate_with_twin_normal_concatenate_static_twin_normal",
            argNames: ["a", "b"],
          );

  @override
  Future<String> crateApiMethodConcatenateWithTwinNormalConcatenateTwinNormal(
      {required ConcatenateWithTwinNormal that, required String b}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_concatenate_with_twin_normal(that, serializer);
        sse_encode_String(b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 286, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMethodConcatenateWithTwinNormalConcatenateTwinNormalConstMeta,
      argValues: [that, b],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMethodConcatenateWithTwinNormalConcatenateTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "concatenate_with_twin_normal_concatenate_twin_normal",
            argNames: ["that", "b"],
          );

  @override
  Stream<int>
      crateApiMethodConcatenateWithTwinNormalHandleSomeStaticStreamSinkSingleArgTwinNormal() {
    final sink = RustStreamSink<int>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_u_32_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 287, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMethodConcatenateWithTwinNormalHandleSomeStaticStreamSinkSingleArgTwinNormalConstMeta,
      argValues: [sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiMethodConcatenateWithTwinNormalHandleSomeStaticStreamSinkSingleArgTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "concatenate_with_twin_normal_handle_some_static_stream_sink_single_arg_twin_normal",
            argNames: ["sink"],
          );

  @override
  Stream<Log2TwinNormal>
      crateApiMethodConcatenateWithTwinNormalHandleSomeStaticStreamSinkTwinNormal(
          {required int key, required int max}) {
    final sink = RustStreamSink<Log2TwinNormal>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(key, serializer);
        sse_encode_u_32(max, serializer);
        sse_encode_StreamSink_log_2_twin_normal_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 288, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMethodConcatenateWithTwinNormalHandleSomeStaticStreamSinkTwinNormalConstMeta,
      argValues: [key, max, sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiMethodConcatenateWithTwinNormalHandleSomeStaticStreamSinkTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "concatenate_with_twin_normal_handle_some_static_stream_sink_twin_normal",
            argNames: ["key", "max", "sink"],
          );

  @override
  Stream<int>
      crateApiMethodConcatenateWithTwinNormalHandleSomeStreamSinkAt1TwinNormal(
          {required ConcatenateWithTwinNormal that}) {
    final sink = RustStreamSink<int>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_concatenate_with_twin_normal(that, serializer);
        sse_encode_StreamSink_u_32_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 289, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMethodConcatenateWithTwinNormalHandleSomeStreamSinkAt1TwinNormalConstMeta,
      argValues: [that, sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiMethodConcatenateWithTwinNormalHandleSomeStreamSinkAt1TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "concatenate_with_twin_normal_handle_some_stream_sink_at_1_twin_normal",
            argNames: ["that", "sink"],
          );

  @override
  Stream<Log2TwinNormal>
      crateApiMethodConcatenateWithTwinNormalHandleSomeStreamSinkTwinNormal(
          {required ConcatenateWithTwinNormal that,
          required int key,
          required int max}) {
    final sink = RustStreamSink<Log2TwinNormal>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_concatenate_with_twin_normal(that, serializer);
        sse_encode_u_32(key, serializer);
        sse_encode_u_32(max, serializer);
        sse_encode_StreamSink_log_2_twin_normal_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 290, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMethodConcatenateWithTwinNormalHandleSomeStreamSinkTwinNormalConstMeta,
      argValues: [that, key, max, sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiMethodConcatenateWithTwinNormalHandleSomeStreamSinkTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "concatenate_with_twin_normal_handle_some_stream_sink_twin_normal",
            argNames: ["that", "key", "max", "sink"],
          );

  @override
  Future<ConcatenateWithTwinNormal>
      crateApiMethodConcatenateWithTwinNormalNewTwinNormal(
          {required String a}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(a, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 291, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_concatenate_with_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMethodConcatenateWithTwinNormalNewTwinNormalConstMeta,
      argValues: [a],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMethodConcatenateWithTwinNormalNewTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "concatenate_with_twin_normal_new_twin_normal",
            argNames: ["a"],
          );

  @override
  Future<String> crateApiMethodConcatenateWithTwinNormalSimpleGetterTwinNormal(
      {required ConcatenateWithTwinNormal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_concatenate_with_twin_normal(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 292, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMethodConcatenateWithTwinNormalSimpleGetterTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMethodConcatenateWithTwinNormalSimpleGetterTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "concatenate_with_twin_normal_simple_getter_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<String>
      crateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncConcatenateStaticTwinRustAsync(
          {required String a, required String b}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(a, serializer);
        sse_encode_String(b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 293, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncConcatenateStaticTwinRustAsyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncConcatenateStaticTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "concatenate_with_twin_rust_async_concatenate_static_twin_rust_async",
            argNames: ["a", "b"],
          );

  @override
  Future<String>
      crateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncConcatenateTwinRustAsync(
          {required ConcatenateWithTwinRustAsync that, required String b}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_concatenate_with_twin_rust_async(
            that, serializer);
        sse_encode_String(b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 294, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncConcatenateTwinRustAsyncConstMeta,
      argValues: [that, b],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncConcatenateTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "concatenate_with_twin_rust_async_concatenate_twin_rust_async",
            argNames: ["that", "b"],
          );

  @override
  Stream<int>
      crateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncHandleSomeStaticStreamSinkSingleArgTwinRustAsync() {
    final sink = RustStreamSink<int>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_u_32_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 295, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncHandleSomeStaticStreamSinkSingleArgTwinRustAsyncConstMeta,
      argValues: [sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncHandleSomeStaticStreamSinkSingleArgTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "concatenate_with_twin_rust_async_handle_some_static_stream_sink_single_arg_twin_rust_async",
            argNames: ["sink"],
          );

  @override
  Stream<Log2TwinRustAsync>
      crateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncHandleSomeStaticStreamSinkTwinRustAsync(
          {required int key, required int max}) {
    final sink = RustStreamSink<Log2TwinRustAsync>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(key, serializer);
        sse_encode_u_32(max, serializer);
        sse_encode_StreamSink_log_2_twin_rust_async_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 296, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncHandleSomeStaticStreamSinkTwinRustAsyncConstMeta,
      argValues: [key, max, sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncHandleSomeStaticStreamSinkTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "concatenate_with_twin_rust_async_handle_some_static_stream_sink_twin_rust_async",
            argNames: ["key", "max", "sink"],
          );

  @override
  Stream<int>
      crateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncHandleSomeStreamSinkAt1TwinRustAsync(
          {required ConcatenateWithTwinRustAsync that}) {
    final sink = RustStreamSink<int>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_concatenate_with_twin_rust_async(
            that, serializer);
        sse_encode_StreamSink_u_32_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 297, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncHandleSomeStreamSinkAt1TwinRustAsyncConstMeta,
      argValues: [that, sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncHandleSomeStreamSinkAt1TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "concatenate_with_twin_rust_async_handle_some_stream_sink_at_1_twin_rust_async",
            argNames: ["that", "sink"],
          );

  @override
  Stream<Log2TwinRustAsync>
      crateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncHandleSomeStreamSinkTwinRustAsync(
          {required ConcatenateWithTwinRustAsync that,
          required int key,
          required int max}) {
    final sink = RustStreamSink<Log2TwinRustAsync>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_concatenate_with_twin_rust_async(
            that, serializer);
        sse_encode_u_32(key, serializer);
        sse_encode_u_32(max, serializer);
        sse_encode_StreamSink_log_2_twin_rust_async_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 298, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncHandleSomeStreamSinkTwinRustAsyncConstMeta,
      argValues: [that, key, max, sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncHandleSomeStreamSinkTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "concatenate_with_twin_rust_async_handle_some_stream_sink_twin_rust_async",
            argNames: ["that", "key", "max", "sink"],
          );

  @override
  Future<ConcatenateWithTwinRustAsync>
      crateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncNewTwinRustAsync(
          {required String a}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(a, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 299, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_concatenate_with_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncNewTwinRustAsyncConstMeta,
      argValues: [a],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncNewTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "concatenate_with_twin_rust_async_new_twin_rust_async",
            argNames: ["a"],
          );

  @override
  Future<String>
      crateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncSimpleGetterTwinRustAsync(
          {required ConcatenateWithTwinRustAsync that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_concatenate_with_twin_rust_async(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 300, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncSimpleGetterTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncSimpleGetterTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "concatenate_with_twin_rust_async_simple_getter_twin_rust_async",
            argNames: ["that"],
          );

  @override
  String
      crateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncConcatenateStaticTwinSync(
          {required String a, required String b}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(a, serializer);
        sse_encode_String(b, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 301)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncConcatenateStaticTwinSyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncConcatenateStaticTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "concatenate_with_twin_sync_concatenate_static_twin_sync",
            argNames: ["a", "b"],
          );

  @override
  String
      crateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncConcatenateTwinSync(
          {required ConcatenateWithTwinSync that, required String b}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_concatenate_with_twin_sync(that, serializer);
        sse_encode_String(b, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 302)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncConcatenateTwinSyncConstMeta,
      argValues: [that, b],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncConcatenateTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "concatenate_with_twin_sync_concatenate_twin_sync",
            argNames: ["that", "b"],
          );

  @override
  Stream<int>
      crateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncHandleSomeStaticStreamSinkSingleArgTwinSync() {
    final sink = RustStreamSink<int>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_u_32_Sse(sink, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 303)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncHandleSomeStaticStreamSinkSingleArgTwinSyncConstMeta,
      argValues: [sink],
      apiImpl: this,
    ));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncHandleSomeStaticStreamSinkSingleArgTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "concatenate_with_twin_sync_handle_some_static_stream_sink_single_arg_twin_sync",
            argNames: ["sink"],
          );

  @override
  Stream<Log2TwinSync>
      crateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncHandleSomeStaticStreamSinkTwinSync(
          {required int key, required int max}) {
    final sink = RustStreamSink<Log2TwinSync>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(key, serializer);
        sse_encode_u_32(max, serializer);
        sse_encode_StreamSink_log_2_twin_sync_Sse(sink, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 304)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncHandleSomeStaticStreamSinkTwinSyncConstMeta,
      argValues: [key, max, sink],
      apiImpl: this,
    ));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncHandleSomeStaticStreamSinkTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "concatenate_with_twin_sync_handle_some_static_stream_sink_twin_sync",
            argNames: ["key", "max", "sink"],
          );

  @override
  Stream<int>
      crateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncHandleSomeStreamSinkAt1TwinSync(
          {required ConcatenateWithTwinSync that}) {
    final sink = RustStreamSink<int>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_concatenate_with_twin_sync(that, serializer);
        sse_encode_StreamSink_u_32_Sse(sink, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 305)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncHandleSomeStreamSinkAt1TwinSyncConstMeta,
      argValues: [that, sink],
      apiImpl: this,
    ));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncHandleSomeStreamSinkAt1TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "concatenate_with_twin_sync_handle_some_stream_sink_at_1_twin_sync",
            argNames: ["that", "sink"],
          );

  @override
  Stream<Log2TwinSync>
      crateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncHandleSomeStreamSinkTwinSync(
          {required ConcatenateWithTwinSync that,
          required int key,
          required int max}) {
    final sink = RustStreamSink<Log2TwinSync>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_concatenate_with_twin_sync(that, serializer);
        sse_encode_u_32(key, serializer);
        sse_encode_u_32(max, serializer);
        sse_encode_StreamSink_log_2_twin_sync_Sse(sink, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 306)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncHandleSomeStreamSinkTwinSyncConstMeta,
      argValues: [that, key, max, sink],
      apiImpl: this,
    ));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncHandleSomeStreamSinkTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "concatenate_with_twin_sync_handle_some_stream_sink_twin_sync",
            argNames: ["that", "key", "max", "sink"],
          );

  @override
  ConcatenateWithTwinSync
      crateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncNewTwinSync(
          {required String a}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(a, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 307)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_concatenate_with_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncNewTwinSyncConstMeta,
      argValues: [a],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncNewTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "concatenate_with_twin_sync_new_twin_sync",
            argNames: ["a"],
          );

  @override
  String
      crateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncSimpleGetterTwinSync(
          {required ConcatenateWithTwinSync that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_concatenate_with_twin_sync(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 308)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncSimpleGetterTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncSimpleGetterTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "concatenate_with_twin_sync_simple_getter_twin_sync",
            argNames: ["that"],
          );

  @override
  Future<ConstructorTranslatableStructTwinNormal>
      crateApiConstructorConstructorTranslatableStructTwinNormalNew() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 309, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_constructor_translatable_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiConstructorConstructorTranslatableStructTwinNormalNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiConstructorConstructorTranslatableStructTwinNormalNewConstMeta =>
          const TaskConstMeta(
            debugName: "constructor_translatable_struct_twin_normal_new",
            argNames: [],
          );

  @override
  ConstructorTranslatableSyncStructTwinNormal
      crateApiConstructorConstructorTranslatableSyncStructTwinNormalNew() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 310)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_constructor_translatable_sync_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiConstructorConstructorTranslatableSyncStructTwinNormalNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiConstructorConstructorTranslatableSyncStructTwinNormalNewConstMeta =>
          const TaskConstMeta(
            debugName: "constructor_translatable_sync_struct_twin_normal_new",
            argNames: [],
          );

  @override
  Future<EnumOpaqueTwinNormalArray5>
      crateApiRustOpaqueCreateArrayOpaqueEnumTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 311, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_opaque_twin_normal_array_5,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRustOpaqueCreateArrayOpaqueEnumTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustOpaqueCreateArrayOpaqueEnumTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "create_array_opaque_enum_twin_normal",
            argNames: [],
          );

  @override
  Future<EnumOpaqueTwinRustAsyncArray5>
      crateApiPseudoManualRustOpaqueTwinRustAsyncCreateArrayOpaqueEnumTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 312, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_opaque_twin_rust_async_array_5,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinRustAsyncCreateArrayOpaqueEnumTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinRustAsyncCreateArrayOpaqueEnumTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "create_array_opaque_enum_twin_rust_async",
            argNames: [],
          );

  @override
  EnumOpaqueTwinSyncArray5
      crateApiPseudoManualRustOpaqueTwinSyncCreateArrayOpaqueEnumTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 313)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_opaque_twin_sync_array_5,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinSyncCreateArrayOpaqueEnumTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinSyncCreateArrayOpaqueEnumTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "create_array_opaque_enum_twin_sync",
            argNames: [],
          );

  @override
  Future<EnumDartOpaqueTwinNormal>
      crateApiDartOpaqueCreateEnumDartOpaqueTwinNormal(
          {required Object opaque}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 314, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_dart_opaque_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartOpaqueCreateEnumDartOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiDartOpaqueCreateEnumDartOpaqueTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "create_enum_dart_opaque_twin_normal",
            argNames: ["opaque"],
          );

  @override
  Future<EnumDartOpaqueTwinRustAsync>
      crateApiPseudoManualDartOpaqueTwinRustAsyncCreateEnumDartOpaqueTwinRustAsync(
          {required Object opaque}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 315, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_dart_opaque_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinRustAsyncCreateEnumDartOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinRustAsyncCreateEnumDartOpaqueTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "create_enum_dart_opaque_twin_rust_async",
            argNames: ["opaque"],
          );

  @override
  EnumDartOpaqueTwinSync
      crateApiPseudoManualDartOpaqueTwinSyncCreateEnumDartOpaqueTwinSync(
          {required Object opaque}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 316)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_dart_opaque_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinSyncCreateEnumDartOpaqueTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinSyncCreateEnumDartOpaqueTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "create_enum_dart_opaque_twin_sync",
            argNames: ["opaque"],
          );

  @override
  void crateApiEventListenerCreateEventSyncTwinNormal(
      {required String address, required String payload}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(address, serializer);
        sse_encode_String(payload, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 317)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEventListenerCreateEventSyncTwinNormalConstMeta,
      argValues: [address, payload],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiEventListenerCreateEventSyncTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "create_event_sync_twin_normal",
        argNames: ["address", "payload"],
      );

  @override
  Future<void> crateApiEventListenerCreateEventTwinNormal(
      {required String address, required String payload}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(address, serializer);
        sse_encode_String(payload, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 318, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEventListenerCreateEventTwinNormalConstMeta,
      argValues: [address, payload],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiEventListenerCreateEventTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "create_event_twin_normal",
        argNames: ["address", "payload"],
      );

  @override
  Future<void>
      crateApiPseudoManualEventListenerTwinRustAsyncCreateEventTwinRustAsync(
          {required String address, required String payload}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(address, serializer);
        sse_encode_String(payload, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 319, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualEventListenerTwinRustAsyncCreateEventTwinRustAsyncConstMeta,
      argValues: [address, payload],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualEventListenerTwinRustAsyncCreateEventTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "create_event_twin_rust_async",
            argNames: ["address", "payload"],
          );

  @override
  Future<DartOpaqueNestedTwinNormal>
      crateApiDartOpaqueCreateNestedDartOpaqueTwinNormal(
          {required Object opaque1, required Object opaque2}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque1, serializer);
        sse_encode_DartOpaque(opaque2, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 320, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_dart_opaque_nested_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartOpaqueCreateNestedDartOpaqueTwinNormalConstMeta,
      argValues: [opaque1, opaque2],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiDartOpaqueCreateNestedDartOpaqueTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "create_nested_dart_opaque_twin_normal",
            argNames: ["opaque1", "opaque2"],
          );

  @override
  Future<DartOpaqueNestedTwinRustAsync>
      crateApiPseudoManualDartOpaqueTwinRustAsyncCreateNestedDartOpaqueTwinRustAsync(
          {required Object opaque1, required Object opaque2}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque1, serializer);
        sse_encode_DartOpaque(opaque2, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 321, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_dart_opaque_nested_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinRustAsyncCreateNestedDartOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque1, opaque2],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinRustAsyncCreateNestedDartOpaqueTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "create_nested_dart_opaque_twin_rust_async",
            argNames: ["opaque1", "opaque2"],
          );

  @override
  DartOpaqueNestedTwinSync
      crateApiPseudoManualDartOpaqueTwinSyncCreateNestedDartOpaqueTwinSync(
          {required Object opaque1, required Object opaque2}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque1, serializer);
        sse_encode_DartOpaque(opaque2, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 322)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_dart_opaque_nested_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinSyncCreateNestedDartOpaqueTwinSyncConstMeta,
      argValues: [opaque1, opaque2],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinSyncCreateNestedDartOpaqueTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "create_nested_dart_opaque_twin_sync",
            argNames: ["opaque1", "opaque2"],
          );

  @override
  Future<OpaqueNestedTwinNormal>
      crateApiRustOpaqueCreateNestedOpaqueTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 323, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opaque_nested_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRustOpaqueCreateNestedOpaqueTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRustOpaqueCreateNestedOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "create_nested_opaque_twin_normal",
        argNames: [],
      );

  @override
  Future<OpaqueNestedTwinRustAsync>
      crateApiPseudoManualRustOpaqueTwinRustAsyncCreateNestedOpaqueTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 324, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opaque_nested_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinRustAsyncCreateNestedOpaqueTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinRustAsyncCreateNestedOpaqueTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "create_nested_opaque_twin_rust_async",
            argNames: [],
          );

  @override
  OpaqueNestedTwinSync
      crateApiPseudoManualRustOpaqueTwinSyncCreateNestedOpaqueTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 325)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opaque_nested_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinSyncCreateNestedOpaqueTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinSyncCreateNestedOpaqueTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "create_nested_opaque_twin_sync",
            argNames: [],
          );

  @override
  Future<HideDataTwinNormal> crateApiRustOpaqueCreateOpaqueTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 326, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_HideDataTwinNormal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRustOpaqueCreateOpaqueTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRustOpaqueCreateOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "create_opaque_twin_normal",
        argNames: [],
      );

  @override
  Future<HideDataTwinRustAsync>
      crateApiPseudoManualRustOpaqueTwinRustAsyncCreateOpaqueTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 327, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_HideDataTwinRustAsync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinRustAsyncCreateOpaqueTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinRustAsyncCreateOpaqueTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "create_opaque_twin_rust_async",
            argNames: [],
          );

  @override
  HideDataTwinSync
      crateApiPseudoManualRustOpaqueTwinSyncCreateOpaqueTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 328)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_HideDataTwinSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinSyncCreateOpaqueTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinSyncCreateOpaqueTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "create_opaque_twin_sync",
            argNames: [],
          );

  @override
  Future<HideDataTwinNormal?> crateApiRustOpaqueCreateOptionOpaqueTwinNormal(
      {HideDataTwinNormal? opaque}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_RustOpaque_HideDataTwinNormal(
            opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 329, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_RustOpaque_HideDataTwinNormal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRustOpaqueCreateOptionOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRustOpaqueCreateOptionOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "create_option_opaque_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<HideDataTwinRustAsync?>
      crateApiPseudoManualRustOpaqueTwinRustAsyncCreateOptionOpaqueTwinRustAsync(
          {HideDataTwinRustAsync? opaque}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_RustOpaque_HideDataTwinRustAsync(
            opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 330, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_RustOpaque_HideDataTwinRustAsync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinRustAsyncCreateOptionOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinRustAsyncCreateOptionOpaqueTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "create_option_opaque_twin_rust_async",
            argNames: ["opaque"],
          );

  @override
  HideDataTwinSync?
      crateApiPseudoManualRustOpaqueTwinSyncCreateOptionOpaqueTwinSync(
          {HideDataTwinSync? opaque}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_RustOpaque_HideDataTwinSync(
            opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 331)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_RustOpaque_HideDataTwinSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinSyncCreateOptionOpaqueTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinSyncCreateOptionOpaqueTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "create_option_opaque_twin_sync",
            argNames: ["opaque"],
          );

  @override
  Future<void> crateApiExceptionCustomEnumErrorPanicTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 332, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_enum_error_twin_normal,
      ),
      constMeta: kCrateApiExceptionCustomEnumErrorPanicTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiExceptionCustomEnumErrorPanicTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "custom_enum_error_panic_twin_normal",
        argNames: [],
      );

  @override
  Future<void>
      crateApiPseudoManualExceptionTwinRustAsyncCustomEnumErrorPanicTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 333, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_enum_error_twin_rust_async,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncCustomEnumErrorPanicTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncCustomEnumErrorPanicTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "custom_enum_error_panic_twin_rust_async",
            argNames: [],
          );

  @override
  void crateApiPseudoManualExceptionTwinSyncCustomEnumErrorPanicTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 334)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_enum_error_twin_sync,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncCustomEnumErrorPanicTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncCustomEnumErrorPanicTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "custom_enum_error_panic_twin_sync",
            argNames: [],
          );

  @override
  Future<int> crateApiExceptionCustomEnumErrorReturnErrorTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 335, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_enum_error_twin_normal,
      ),
      constMeta:
          kCrateApiExceptionCustomEnumErrorReturnErrorTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiExceptionCustomEnumErrorReturnErrorTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "custom_enum_error_return_error_twin_normal",
            argNames: [],
          );

  @override
  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncCustomEnumErrorReturnErrorTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 336, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_enum_error_twin_rust_async,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncCustomEnumErrorReturnErrorTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncCustomEnumErrorReturnErrorTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "custom_enum_error_return_error_twin_rust_async",
            argNames: [],
          );

  @override
  int crateApiPseudoManualExceptionTwinSyncCustomEnumErrorReturnErrorTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 337)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_enum_error_twin_sync,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncCustomEnumErrorReturnErrorTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncCustomEnumErrorReturnErrorTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "custom_enum_error_return_error_twin_sync",
            argNames: [],
          );

  @override
  Future<int> crateApiExceptionCustomEnumErrorReturnOkTwinNormal(
      {required int arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 338, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_enum_error_twin_normal,
      ),
      constMeta: kCrateApiExceptionCustomEnumErrorReturnOkTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiExceptionCustomEnumErrorReturnOkTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "custom_enum_error_return_ok_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncCustomEnumErrorReturnOkTwinRustAsync(
          {required int arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 339, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_enum_error_twin_rust_async,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncCustomEnumErrorReturnOkTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncCustomEnumErrorReturnOkTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "custom_enum_error_return_ok_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  int crateApiPseudoManualExceptionTwinSyncCustomEnumErrorReturnOkTwinSync(
      {required int arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 340)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_enum_error_twin_sync,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncCustomEnumErrorReturnOkTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncCustomEnumErrorReturnOkTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "custom_enum_error_return_ok_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<void> crateApiExceptionCustomNestedErrorReturnErrorTwinNormal(
      {required CustomNestedErrorOuterTwinNormal arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_custom_nested_error_outer_twin_normal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 341, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_nested_error_outer_twin_normal,
      ),
      constMeta:
          kCrateApiExceptionCustomNestedErrorReturnErrorTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiExceptionCustomNestedErrorReturnErrorTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "custom_nested_error_return_error_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<void>
      crateApiPseudoManualExceptionTwinRustAsyncCustomNestedErrorReturnErrorTwinRustAsync(
          {required CustomNestedErrorOuterTwinRustAsync arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_custom_nested_error_outer_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 342, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_nested_error_outer_twin_rust_async,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncCustomNestedErrorReturnErrorTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncCustomNestedErrorReturnErrorTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "custom_nested_error_return_error_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  void
      crateApiPseudoManualExceptionTwinSyncCustomNestedErrorReturnErrorTwinSync(
          {required CustomNestedErrorOuterTwinSync arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_custom_nested_error_outer_twin_sync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 343)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_nested_error_outer_twin_sync,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncCustomNestedErrorReturnErrorTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncCustomNestedErrorReturnErrorTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "custom_nested_error_return_error_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<void> crateApiExceptionCustomStructErrorReturnErrorTwinNormal(
      {required CustomStructErrorTwinNormal arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_custom_struct_error_twin_normal(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 344, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_struct_error_twin_normal,
      ),
      constMeta:
          kCrateApiExceptionCustomStructErrorReturnErrorTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiExceptionCustomStructErrorReturnErrorTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "custom_struct_error_return_error_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<void>
      crateApiPseudoManualExceptionTwinRustAsyncCustomStructErrorReturnErrorTwinRustAsync(
          {required CustomStructErrorTwinRustAsync arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_custom_struct_error_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 345, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_struct_error_twin_rust_async,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncCustomStructErrorReturnErrorTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncCustomStructErrorReturnErrorTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "custom_struct_error_return_error_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  void
      crateApiPseudoManualExceptionTwinSyncCustomStructErrorReturnErrorTwinSync(
          {required CustomStructErrorTwinSync arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_custom_struct_error_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 346)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_struct_error_twin_sync,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncCustomStructErrorReturnErrorTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncCustomStructErrorReturnErrorTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "custom_struct_error_return_error_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<CustomStructTwinNormal>
      crateApiExceptionCustomStructTwinNormalNewTwinNormal(
          {required String message}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(message, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 347, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_custom_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiExceptionCustomStructTwinNormalNewTwinNormalConstMeta,
      argValues: [message],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiExceptionCustomStructTwinNormalNewTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "custom_struct_twin_normal_new_twin_normal",
            argNames: ["message"],
          );

  @override
  Future<void>
      crateApiExceptionCustomStructTwinNormalNonstaticReturnCustomStructErrorTwinNormal(
          {required CustomStructTwinNormal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_custom_struct_twin_normal(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 348, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_normal,
      ),
      constMeta:
          kCrateApiExceptionCustomStructTwinNormalNonstaticReturnCustomStructErrorTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiExceptionCustomStructTwinNormalNonstaticReturnCustomStructErrorTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "custom_struct_twin_normal_nonstatic_return_custom_struct_error_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<int>
      crateApiExceptionCustomStructTwinNormalNonstaticReturnCustomStructOkTwinNormal(
          {required CustomStructTwinNormal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_custom_struct_twin_normal(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 349, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_normal,
      ),
      constMeta:
          kCrateApiExceptionCustomStructTwinNormalNonstaticReturnCustomStructOkTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiExceptionCustomStructTwinNormalNonstaticReturnCustomStructOkTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "custom_struct_twin_normal_nonstatic_return_custom_struct_ok_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<void>
      crateApiExceptionCustomStructTwinNormalStaticReturnCustomStructErrorTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 350, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_normal,
      ),
      constMeta:
          kCrateApiExceptionCustomStructTwinNormalStaticReturnCustomStructErrorTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiExceptionCustomStructTwinNormalStaticReturnCustomStructErrorTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "custom_struct_twin_normal_static_return_custom_struct_error_twin_normal",
            argNames: [],
          );

  @override
  Future<int>
      crateApiExceptionCustomStructTwinNormalStaticReturnCustomStructOkTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 351, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_normal,
      ),
      constMeta:
          kCrateApiExceptionCustomStructTwinNormalStaticReturnCustomStructOkTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiExceptionCustomStructTwinNormalStaticReturnCustomStructOkTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "custom_struct_twin_normal_static_return_custom_struct_ok_twin_normal",
            argNames: [],
          );

  @override
  Future<CustomStructTwinRustAsync>
      crateApiPseudoManualExceptionTwinRustAsyncCustomStructTwinRustAsyncNewTwinRustAsync(
          {required String message}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(message, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 352, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_custom_struct_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncCustomStructTwinRustAsyncNewTwinRustAsyncConstMeta,
      argValues: [message],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncCustomStructTwinRustAsyncNewTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "custom_struct_twin_rust_async_new_twin_rust_async",
            argNames: ["message"],
          );

  @override
  Future<void>
      crateApiPseudoManualExceptionTwinRustAsyncCustomStructTwinRustAsyncNonstaticReturnCustomStructErrorTwinRustAsync(
          {required CustomStructTwinRustAsync that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_custom_struct_twin_rust_async(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 353, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_rust_async,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncCustomStructTwinRustAsyncNonstaticReturnCustomStructErrorTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncCustomStructTwinRustAsyncNonstaticReturnCustomStructErrorTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "custom_struct_twin_rust_async_nonstatic_return_custom_struct_error_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncCustomStructTwinRustAsyncNonstaticReturnCustomStructOkTwinRustAsync(
          {required CustomStructTwinRustAsync that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_custom_struct_twin_rust_async(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 354, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_rust_async,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncCustomStructTwinRustAsyncNonstaticReturnCustomStructOkTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncCustomStructTwinRustAsyncNonstaticReturnCustomStructOkTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "custom_struct_twin_rust_async_nonstatic_return_custom_struct_ok_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Future<void>
      crateApiPseudoManualExceptionTwinRustAsyncCustomStructTwinRustAsyncStaticReturnCustomStructErrorTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 355, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_rust_async,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncCustomStructTwinRustAsyncStaticReturnCustomStructErrorTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncCustomStructTwinRustAsyncStaticReturnCustomStructErrorTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "custom_struct_twin_rust_async_static_return_custom_struct_error_twin_rust_async",
            argNames: [],
          );

  @override
  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncCustomStructTwinRustAsyncStaticReturnCustomStructOkTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 356, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_rust_async,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncCustomStructTwinRustAsyncStaticReturnCustomStructOkTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncCustomStructTwinRustAsyncStaticReturnCustomStructOkTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "custom_struct_twin_rust_async_static_return_custom_struct_ok_twin_rust_async",
            argNames: [],
          );

  @override
  CustomStructTwinSync
      crateApiPseudoManualExceptionTwinSyncCustomStructTwinSyncNewTwinSync(
          {required String message}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(message, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 357)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_custom_struct_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncCustomStructTwinSyncNewTwinSyncConstMeta,
      argValues: [message],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncCustomStructTwinSyncNewTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "custom_struct_twin_sync_new_twin_sync",
            argNames: ["message"],
          );

  @override
  void
      crateApiPseudoManualExceptionTwinSyncCustomStructTwinSyncNonstaticReturnCustomStructErrorTwinSync(
          {required CustomStructTwinSync that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_custom_struct_twin_sync(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 358)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_sync,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncCustomStructTwinSyncNonstaticReturnCustomStructErrorTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncCustomStructTwinSyncNonstaticReturnCustomStructErrorTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "custom_struct_twin_sync_nonstatic_return_custom_struct_error_twin_sync",
            argNames: ["that"],
          );

  @override
  int crateApiPseudoManualExceptionTwinSyncCustomStructTwinSyncNonstaticReturnCustomStructOkTwinSync(
      {required CustomStructTwinSync that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_custom_struct_twin_sync(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 359)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_sync,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncCustomStructTwinSyncNonstaticReturnCustomStructOkTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncCustomStructTwinSyncNonstaticReturnCustomStructOkTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "custom_struct_twin_sync_nonstatic_return_custom_struct_ok_twin_sync",
            argNames: ["that"],
          );

  @override
  void
      crateApiPseudoManualExceptionTwinSyncCustomStructTwinSyncStaticReturnCustomStructErrorTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 360)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_sync,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncCustomStructTwinSyncStaticReturnCustomStructErrorTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncCustomStructTwinSyncStaticReturnCustomStructErrorTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "custom_struct_twin_sync_static_return_custom_struct_error_twin_sync",
            argNames: [],
          );

  @override
  int crateApiPseudoManualExceptionTwinSyncCustomStructTwinSyncStaticReturnCustomStructOkTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 361)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_sync,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncCustomStructTwinSyncStaticReturnCustomStructOkTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncCustomStructTwinSyncStaticReturnCustomStructOkTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "custom_struct_twin_sync_static_return_custom_struct_ok_twin_sync",
            argNames: [],
          );

  @override
  Future<DateTime> crateApiChronoTypeDatetimeLocalTwinNormal(
      {required DateTime d}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Chrono_Local(d, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 362, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Chrono_Local,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiChronoTypeDatetimeLocalTwinNormalConstMeta,
      argValues: [d],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiChronoTypeDatetimeLocalTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "datetime_local_twin_normal",
        argNames: ["d"],
      );

  @override
  Future<DateTime>
      crateApiPseudoManualChronoTypeTwinRustAsyncDatetimeLocalTwinRustAsync(
          {required DateTime d}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Chrono_Local(d, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 363, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Chrono_Local,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualChronoTypeTwinRustAsyncDatetimeLocalTwinRustAsyncConstMeta,
      argValues: [d],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualChronoTypeTwinRustAsyncDatetimeLocalTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "datetime_local_twin_rust_async",
            argNames: ["d"],
          );

  @override
  DateTime crateApiPseudoManualChronoTypeTwinSyncDatetimeLocalTwinSync(
      {required DateTime d}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Chrono_Local(d, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 364)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Chrono_Local,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualChronoTypeTwinSyncDatetimeLocalTwinSyncConstMeta,
      argValues: [d],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualChronoTypeTwinSyncDatetimeLocalTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "datetime_local_twin_sync",
            argNames: ["d"],
          );

  @override
  Future<DateTime> crateApiChronoTypeDatetimeUtcTwinNormal(
      {required DateTime d}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Chrono_Utc(d, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 365, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Chrono_Utc,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiChronoTypeDatetimeUtcTwinNormalConstMeta,
      argValues: [d],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiChronoTypeDatetimeUtcTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "datetime_utc_twin_normal",
        argNames: ["d"],
      );

  @override
  Future<DateTime>
      crateApiPseudoManualChronoTypeTwinRustAsyncDatetimeUtcTwinRustAsync(
          {required DateTime d}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Chrono_Utc(d, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 366, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Chrono_Utc,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualChronoTypeTwinRustAsyncDatetimeUtcTwinRustAsyncConstMeta,
      argValues: [d],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualChronoTypeTwinRustAsyncDatetimeUtcTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "datetime_utc_twin_rust_async",
            argNames: ["d"],
          );

  @override
  DateTime crateApiPseudoManualChronoTypeTwinSyncDatetimeUtcTwinSync(
      {required DateTime d}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Chrono_Utc(d, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 367)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Chrono_Utc,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualChronoTypeTwinSyncDatetimeUtcTwinSyncConstMeta,
      argValues: [d],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualChronoTypeTwinSyncDatetimeUtcTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "datetime_utc_twin_sync",
            argNames: ["d"],
          );

  @override
  Future<void> crateApiDartOpaqueDropStaticDartOpaqueTwinNormal(
      {required int id}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 368, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartOpaqueDropStaticDartOpaqueTwinNormalConstMeta,
      argValues: [id],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiDartOpaqueDropStaticDartOpaqueTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "drop_static_dart_opaque_twin_normal",
            argNames: ["id"],
          );

  @override
  Future<void>
      crateApiPseudoManualDartOpaqueTwinRustAsyncDropStaticDartOpaqueTwinRustAsync(
          {required int id}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 369, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinRustAsyncDropStaticDartOpaqueTwinRustAsyncConstMeta,
      argValues: [id],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinRustAsyncDropStaticDartOpaqueTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "drop_static_dart_opaque_twin_rust_async",
            argNames: ["id"],
          );

  @override
  void crateApiPseudoManualDartOpaqueTwinSyncDropStaticDartOpaqueTwinSync(
      {required int id}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(id, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 370)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinSyncDropStaticDartOpaqueTwinSyncConstMeta,
      argValues: [id],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinSyncDropStaticDartOpaqueTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "drop_static_dart_opaque_twin_sync",
            argNames: ["id"],
          );

  @override
  Future<Duration> crateApiChronoTypeDurationTwinNormal({required Duration d}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Chrono_Duration(d, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 371, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Chrono_Duration,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiChronoTypeDurationTwinNormalConstMeta,
      argValues: [d],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiChronoTypeDurationTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "duration_twin_normal",
        argNames: ["d"],
      );

  @override
  Future<Duration>
      crateApiPseudoManualChronoTypeTwinRustAsyncDurationTwinRustAsync(
          {required Duration d}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Chrono_Duration(d, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 372, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Chrono_Duration,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualChronoTypeTwinRustAsyncDurationTwinRustAsyncConstMeta,
      argValues: [d],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualChronoTypeTwinRustAsyncDurationTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "duration_twin_rust_async",
            argNames: ["d"],
          );

  @override
  Duration crateApiPseudoManualChronoTypeTwinSyncDurationTwinSync(
      {required Duration d}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Chrono_Duration(d, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 373)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Chrono_Duration,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualChronoTypeTwinSyncDurationTwinSyncConstMeta,
      argValues: [d],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualChronoTypeTwinSyncDurationTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "duration_twin_sync",
            argNames: ["d"],
          );

  @override
  Future<ElementTwinNormal> crateApiOptionalElementTwinNormalDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 374, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_element_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOptionalElementTwinNormalDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOptionalElementTwinNormalDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "element_twin_normal_default",
        argNames: [],
      );

  @override
  Future<ElementTwinRustAsync>
      crateApiPseudoManualOptionalTwinRustAsyncElementTwinRustAsyncDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 375, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_element_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOptionalTwinRustAsyncElementTwinRustAsyncDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOptionalTwinRustAsyncElementTwinRustAsyncDefaultConstMeta =>
          const TaskConstMeta(
            debugName: "element_twin_rust_async_default",
            argNames: [],
          );

  @override
  Future<ElementTwinSync>
      crateApiPseudoManualOptionalTwinSyncElementTwinSyncDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 376, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_element_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOptionalTwinSyncElementTwinSyncDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOptionalTwinSyncElementTwinSyncDefaultConstMeta =>
          const TaskConstMeta(
            debugName: "element_twin_sync_default",
            argNames: [],
          );

  @override
  Future<EmptyTwinNormal> crateApiMiscTypeEmptyStructTwinNormal(
      {required EmptyTwinNormal empty}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_empty_twin_normal(empty, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 377, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_empty_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMiscTypeEmptyStructTwinNormalConstMeta,
      argValues: [empty],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMiscTypeEmptyStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "empty_struct_twin_normal",
        argNames: ["empty"],
      );

  @override
  Future<EmptyTwinRustAsync>
      crateApiPseudoManualMiscTypeTwinRustAsyncEmptyStructTwinRustAsync(
          {required EmptyTwinRustAsync empty}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_empty_twin_rust_async(empty, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 378, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_empty_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscTypeTwinRustAsyncEmptyStructTwinRustAsyncConstMeta,
      argValues: [empty],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscTypeTwinRustAsyncEmptyStructTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "empty_struct_twin_rust_async",
            argNames: ["empty"],
          );

  @override
  EmptyTwinSync crateApiPseudoManualMiscTypeTwinSyncEmptyStructTwinSync(
      {required EmptyTwinSync empty}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_empty_twin_sync(empty, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 379)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_empty_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscTypeTwinSyncEmptyStructTwinSyncConstMeta,
      argValues: [empty],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscTypeTwinSyncEmptyStructTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "empty_struct_twin_sync",
            argNames: ["empty"],
          );

  @override
  Future<String> crateApiEventListenerEventTwinNormalAsStringTwinNormal(
      {required EventTwinNormal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_event_twin_normal(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 380, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiEventListenerEventTwinNormalAsStringTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiEventListenerEventTwinNormalAsStringTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "event_twin_normal_as_string_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<String>
      crateApiPseudoManualEventListenerTwinRustAsyncEventTwinRustAsyncAsStringTwinRustAsync(
          {required EventTwinRustAsync that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_event_twin_rust_async(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 381, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualEventListenerTwinRustAsyncEventTwinRustAsyncAsStringTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualEventListenerTwinRustAsyncEventTwinRustAsyncAsStringTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "event_twin_rust_async_as_string_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Future<List<BasicGeneralEnumTwinNormal>>
      crateApiPseudoManualBasicListExampleBasicListTypeBasicGeneralEnumTwinNormalTwinNormal(
          {required List<BasicGeneralEnumTwinNormal> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_basic_general_enum_twin_normal(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 382, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_basic_general_enum_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListExampleBasicListTypeBasicGeneralEnumTwinNormalTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListExampleBasicListTypeBasicGeneralEnumTwinNormalTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_list_type_basic_general_enum_twin_normal_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<List<BasicGeneralEnumTwinRustAsync>>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeBasicGeneralEnumTwinRustAsyncTwinRustAsync(
          {required List<BasicGeneralEnumTwinRustAsync> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_basic_general_enum_twin_rust_async(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 383, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_basic_general_enum_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeBasicGeneralEnumTwinRustAsyncTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeBasicGeneralEnumTwinRustAsyncTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_list_type_basic_general_enum_twin_rust_async_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  List<BasicGeneralEnumTwinSync>
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeBasicGeneralEnumTwinSyncTwinSync(
          {required List<BasicGeneralEnumTwinSync> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_basic_general_enum_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 384)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_basic_general_enum_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeBasicGeneralEnumTwinSyncTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeBasicGeneralEnumTwinSyncTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_list_type_basic_general_enum_twin_sync_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<List<BasicPrimitiveEnumTwinNormal>>
      crateApiPseudoManualBasicListExampleBasicListTypeBasicPrimitiveEnumTwinNormalTwinNormal(
          {required List<BasicPrimitiveEnumTwinNormal> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_basic_primitive_enum_twin_normal(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 385, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_basic_primitive_enum_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListExampleBasicListTypeBasicPrimitiveEnumTwinNormalTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListExampleBasicListTypeBasicPrimitiveEnumTwinNormalTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_list_type_basic_primitive_enum_twin_normal_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<List<BasicPrimitiveEnumTwinRustAsync>>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsync(
          {required List<BasicPrimitiveEnumTwinRustAsync> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_basic_primitive_enum_twin_rust_async(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 386, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_basic_primitive_enum_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_list_type_basic_primitive_enum_twin_rust_async_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  List<BasicPrimitiveEnumTwinSync>
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeBasicPrimitiveEnumTwinSyncTwinSync(
          {required List<BasicPrimitiveEnumTwinSync> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_basic_primitive_enum_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 387)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_basic_primitive_enum_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeBasicPrimitiveEnumTwinSyncTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeBasicPrimitiveEnumTwinSyncTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_list_type_basic_primitive_enum_twin_sync_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<List<BasicStructTwinNormal>>
      crateApiPseudoManualBasicListExampleBasicListTypeBasicStructTwinNormalTwinNormal(
          {required List<BasicStructTwinNormal> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_basic_struct_twin_normal(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 388, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_basic_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListExampleBasicListTypeBasicStructTwinNormalTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListExampleBasicListTypeBasicStructTwinNormalTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_list_type_basic_struct_twin_normal_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<List<BasicStructTwinRustAsync>>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeBasicStructTwinRustAsyncTwinRustAsync(
          {required List<BasicStructTwinRustAsync> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_basic_struct_twin_rust_async(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 389, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_basic_struct_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeBasicStructTwinRustAsyncTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeBasicStructTwinRustAsyncTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_list_type_basic_struct_twin_rust_async_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  List<BasicStructTwinSync>
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeBasicStructTwinSyncTwinSync(
          {required List<BasicStructTwinSync> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_basic_struct_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 390)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_basic_struct_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeBasicStructTwinSyncTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeBasicStructTwinSyncTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_list_type_basic_struct_twin_sync_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<List<bool>>
      crateApiPseudoManualBasicListExampleBasicListTypeBoolTwinNormal(
          {required List<bool> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_bool(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 391, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListExampleBasicListTypeBoolTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListExampleBasicListTypeBoolTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_bool_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<List<bool>>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeBoolTwinRustAsync(
          {required List<bool> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_bool(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 392, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeBoolTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeBoolTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_bool_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  List<bool>
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeBoolTwinSync(
          {required List<bool> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_bool(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 393)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeBoolTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeBoolTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_bool_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<List<Uint8List>>
      crateApiPseudoManualBasicListExampleBasicListTypeBytesTwinNormal(
          {required List<Uint8List> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_list_prim_u_8_strict(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 394, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListExampleBasicListTypeBytesTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListExampleBasicListTypeBytesTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_bytes_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<List<Uint8List>>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeBytesTwinRustAsync(
          {required List<Uint8List> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_list_prim_u_8_strict(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 395, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeBytesTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeBytesTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_bytes_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  List<Uint8List>
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeBytesTwinSync(
          {required List<Uint8List> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_list_prim_u_8_strict(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 396)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeBytesTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeBytesTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_bytes_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<Float32List>
      crateApiPseudoManualBasicListExampleBasicListTypeF32TwinNormal(
          {required List<double> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_f_32_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 397, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_f_32_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListExampleBasicListTypeF32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListExampleBasicListTypeF32TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_f32_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Float32List>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeF32TwinRustAsync(
          {required List<double> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_f_32_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 398, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_f_32_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeF32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeF32TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_f32_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Float32List
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeF32TwinSync(
          {required List<double> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_f_32_loose(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 399)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_f_32_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeF32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeF32TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_f32_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<Float64List>
      crateApiPseudoManualBasicListExampleBasicListTypeF64TwinNormal(
          {required List<double> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_f_64_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 400, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_f_64_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListExampleBasicListTypeF64TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListExampleBasicListTypeF64TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_f64_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Float64List>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeF64TwinRustAsync(
          {required List<double> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_f_64_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 401, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_f_64_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeF64TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeF64TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_f64_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Float64List
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeF64TwinSync(
          {required List<double> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_f_64_loose(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 402)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_f_64_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeF64TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeF64TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_f64_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<Int16List>
      crateApiPseudoManualBasicListExampleBasicListTypeI16TwinNormal(
          {required List<int> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_i_16_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 403, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_i_16_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListExampleBasicListTypeI16TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListExampleBasicListTypeI16TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_i16_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Int16List>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeI16TwinRustAsync(
          {required List<int> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_i_16_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 404, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_i_16_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeI16TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeI16TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_i16_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Int16List
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeI16TwinSync(
          {required List<int> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_i_16_loose(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 405)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_i_16_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeI16TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeI16TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_i16_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<Int32List>
      crateApiPseudoManualBasicListExampleBasicListTypeI32TwinNormal(
          {required List<int> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_i_32_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 406, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_i_32_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListExampleBasicListTypeI32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListExampleBasicListTypeI32TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_i32_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Int32List>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeI32TwinRustAsync(
          {required List<int> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_i_32_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 407, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_i_32_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeI32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeI32TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_i32_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Int32List
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeI32TwinSync(
          {required List<int> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_i_32_loose(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 408)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_i_32_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeI32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeI32TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_i32_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<Int64List>
      crateApiPseudoManualBasicListExampleBasicListTypeI64TwinNormal(
          {required Int64List arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_i_64_strict(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 409, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_i_64_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListExampleBasicListTypeI64TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListExampleBasicListTypeI64TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_i64_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Int64List>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeI64TwinRustAsync(
          {required Int64List arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_i_64_strict(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 410, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_i_64_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeI64TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeI64TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_i64_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Int64List
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeI64TwinSync(
          {required Int64List arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_i_64_strict(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 411)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_i_64_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeI64TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeI64TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_i64_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<Int8List>
      crateApiPseudoManualBasicListExampleBasicListTypeI8TwinNormal(
          {required List<int> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_i_8_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 412, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_i_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListExampleBasicListTypeI8TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListExampleBasicListTypeI8TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_i8_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Int8List>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeI8TwinRustAsync(
          {required List<int> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_i_8_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 413, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_i_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeI8TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeI8TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_i8_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Int8List crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeI8TwinSync(
      {required List<int> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_i_8_loose(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 414)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_i_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeI8TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeI8TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_i8_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<List<String>>
      crateApiPseudoManualBasicListExampleBasicListTypeStringTwinNormal(
          {required List<String> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 415, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListExampleBasicListTypeStringTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListExampleBasicListTypeStringTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_string_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<List<String>>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeStringTwinRustAsync(
          {required List<String> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 416, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeStringTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeStringTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_string_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  List<String>
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeStringTwinSync(
          {required List<String> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_String(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 417)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeStringTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeStringTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_string_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<Uint16List>
      crateApiPseudoManualBasicListExampleBasicListTypeU16TwinNormal(
          {required List<int> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_16_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 418, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_16_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListExampleBasicListTypeU16TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListExampleBasicListTypeU16TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_u16_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Uint16List>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeU16TwinRustAsync(
          {required List<int> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_16_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 419, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_16_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeU16TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeU16TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_u16_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Uint16List
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeU16TwinSync(
          {required List<int> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_16_loose(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 420)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_16_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeU16TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeU16TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_u16_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<Uint32List>
      crateApiPseudoManualBasicListExampleBasicListTypeU32TwinNormal(
          {required List<int> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_32_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 421, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_32_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListExampleBasicListTypeU32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListExampleBasicListTypeU32TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_u32_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Uint32List>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeU32TwinRustAsync(
          {required List<int> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_32_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 422, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_32_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeU32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeU32TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_u32_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Uint32List
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeU32TwinSync(
          {required List<int> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_32_loose(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 423)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_32_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeU32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeU32TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_u32_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<Uint64List>
      crateApiPseudoManualBasicListExampleBasicListTypeU64TwinNormal(
          {required Uint64List arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_64_strict(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 424, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_64_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListExampleBasicListTypeU64TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListExampleBasicListTypeU64TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_u64_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Uint64List>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeU64TwinRustAsync(
          {required Uint64List arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_64_strict(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 425, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_64_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeU64TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeU64TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_u64_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Uint64List
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeU64TwinSync(
          {required Uint64List arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_64_strict(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 426)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_64_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeU64TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeU64TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_u64_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<Uint8List>
      crateApiPseudoManualBasicListExampleBasicListTypeU8TwinNormal(
          {required List<int> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 427, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListExampleBasicListTypeU8TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListExampleBasicListTypeU8TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_u8_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Uint8List>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeU8TwinRustAsync(
          {required List<int> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 428, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeU8TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeU8TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_u8_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Uint8List crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeU8TwinSync(
      {required List<int> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 429)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeU8TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeU8TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_u8_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, BasicGeneralEnumTwinNormal>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeBasicGeneralEnumTwinNormalTwinNormal(
          {required Map<int, BasicGeneralEnumTwinNormal> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_basic_general_enum_twin_normal_None(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 430, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Map_i_32_basic_general_enum_twin_normal_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapExampleBasicMapTypeBasicGeneralEnumTwinNormalTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapExampleBasicMapTypeBasicGeneralEnumTwinNormalTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_map_type_basic_general_enum_twin_normal_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, BasicGeneralEnumTwinRustAsync>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeBasicGeneralEnumTwinRustAsyncTwinRustAsync(
          {required Map<int, BasicGeneralEnumTwinRustAsync> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_basic_general_enum_twin_rust_async_None(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 431, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Map_i_32_basic_general_enum_twin_rust_async_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeBasicGeneralEnumTwinRustAsyncTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeBasicGeneralEnumTwinRustAsyncTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_map_type_basic_general_enum_twin_rust_async_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Map<int, BasicGeneralEnumTwinSync>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeBasicGeneralEnumTwinSyncTwinSync(
          {required Map<int, BasicGeneralEnumTwinSync> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_basic_general_enum_twin_sync_None(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 432)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Map_i_32_basic_general_enum_twin_sync_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeBasicGeneralEnumTwinSyncTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeBasicGeneralEnumTwinSyncTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_map_type_basic_general_enum_twin_sync_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, BasicPrimitiveEnumTwinNormal>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeBasicPrimitiveEnumTwinNormalTwinNormal(
          {required Map<int, BasicPrimitiveEnumTwinNormal> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_basic_primitive_enum_twin_normal_None(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 433, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Map_i_32_basic_primitive_enum_twin_normal_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapExampleBasicMapTypeBasicPrimitiveEnumTwinNormalTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapExampleBasicMapTypeBasicPrimitiveEnumTwinNormalTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_map_type_basic_primitive_enum_twin_normal_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, BasicPrimitiveEnumTwinRustAsync>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsync(
          {required Map<int, BasicPrimitiveEnumTwinRustAsync> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_basic_primitive_enum_twin_rust_async_None(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 434, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Map_i_32_basic_primitive_enum_twin_rust_async_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_map_type_basic_primitive_enum_twin_rust_async_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Map<int, BasicPrimitiveEnumTwinSync>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeBasicPrimitiveEnumTwinSyncTwinSync(
          {required Map<int, BasicPrimitiveEnumTwinSync> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_basic_primitive_enum_twin_sync_None(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 435)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Map_i_32_basic_primitive_enum_twin_sync_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeBasicPrimitiveEnumTwinSyncTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeBasicPrimitiveEnumTwinSyncTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_map_type_basic_primitive_enum_twin_sync_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, BasicStructTwinNormal>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeBasicStructTwinNormalTwinNormal(
          {required Map<int, BasicStructTwinNormal> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_basic_struct_twin_normal_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 436, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_basic_struct_twin_normal_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapExampleBasicMapTypeBasicStructTwinNormalTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapExampleBasicMapTypeBasicStructTwinNormalTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_map_type_basic_struct_twin_normal_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, BasicStructTwinRustAsync>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeBasicStructTwinRustAsyncTwinRustAsync(
          {required Map<int, BasicStructTwinRustAsync> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_basic_struct_twin_rust_async_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 437, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Map_i_32_basic_struct_twin_rust_async_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeBasicStructTwinRustAsyncTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeBasicStructTwinRustAsyncTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_map_type_basic_struct_twin_rust_async_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Map<int, BasicStructTwinSync>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeBasicStructTwinSyncTwinSync(
          {required Map<int, BasicStructTwinSync> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_basic_struct_twin_sync_None(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 438)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_basic_struct_twin_sync_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeBasicStructTwinSyncTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeBasicStructTwinSyncTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_map_type_basic_struct_twin_sync_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, bool>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeBoolTwinNormal(
          {required Map<int, bool> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_bool_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 439, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_bool_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapExampleBasicMapTypeBoolTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapExampleBasicMapTypeBoolTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_bool_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, bool>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeBoolTwinRustAsync(
          {required Map<int, bool> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_bool_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 440, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_bool_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeBoolTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeBoolTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_bool_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Map<int, bool>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeBoolTwinSync(
          {required Map<int, bool> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_bool_None(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 441)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_bool_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeBoolTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeBoolTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_bool_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, Uint8List>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeBytesTwinNormal(
          {required Map<int, Uint8List> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_list_prim_u_8_strict_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 442, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_list_prim_u_8_strict_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapExampleBasicMapTypeBytesTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapExampleBasicMapTypeBytesTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_bytes_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, Uint8List>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeBytesTwinRustAsync(
          {required Map<int, Uint8List> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_list_prim_u_8_strict_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 443, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_list_prim_u_8_strict_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeBytesTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeBytesTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_bytes_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Map<int, Uint8List>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeBytesTwinSync(
          {required Map<int, Uint8List> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_list_prim_u_8_strict_None(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 444)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_list_prim_u_8_strict_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeBytesTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeBytesTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_bytes_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, double>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeF32TwinNormal(
          {required Map<int, double> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_f_32_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 445, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_f_32_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapExampleBasicMapTypeF32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapExampleBasicMapTypeF32TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_f32_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, double>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeF32TwinRustAsync(
          {required Map<int, double> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_f_32_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 446, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_f_32_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeF32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeF32TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_f32_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Map<int, double>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeF32TwinSync(
          {required Map<int, double> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_f_32_None(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 447)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_f_32_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeF32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeF32TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_f32_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, double>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeF64TwinNormal(
          {required Map<int, double> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_f_64_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 448, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_f_64_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapExampleBasicMapTypeF64TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapExampleBasicMapTypeF64TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_f64_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, double>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeF64TwinRustAsync(
          {required Map<int, double> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_f_64_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 449, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_f_64_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeF64TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeF64TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_f64_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Map<int, double>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeF64TwinSync(
          {required Map<int, double> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_f_64_None(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 450)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_f_64_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeF64TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeF64TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_f64_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, BigInt>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeI128TwinNormal(
          {required Map<int, BigInt> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_I128_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 451, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_I128_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapExampleBasicMapTypeI128TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapExampleBasicMapTypeI128TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_i128_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, BigInt>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeI128TwinRustAsync(
          {required Map<int, BigInt> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_I128_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 452, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_I128_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeI128TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeI128TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_i128_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Map<int, BigInt>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeI128TwinSync(
          {required Map<int, BigInt> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_I128_None(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 453)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_I128_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeI128TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeI128TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_i128_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, int>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeI16TwinNormal(
          {required Map<int, int> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_i_16_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 454, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_i_16_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapExampleBasicMapTypeI16TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapExampleBasicMapTypeI16TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_i16_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, int>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeI16TwinRustAsync(
          {required Map<int, int> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_i_16_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 455, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_i_16_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeI16TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeI16TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_i16_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Map<int, int>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeI16TwinSync(
          {required Map<int, int> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_i_16_None(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 456)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_i_16_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeI16TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeI16TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_i16_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, int>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeI32TwinNormal(
          {required Map<int, int> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_i_32_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 457, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_i_32_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapExampleBasicMapTypeI32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapExampleBasicMapTypeI32TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_i32_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, int>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeI32TwinRustAsync(
          {required Map<int, int> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_i_32_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 458, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_i_32_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeI32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeI32TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_i32_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Map<int, int>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeI32TwinSync(
          {required Map<int, int> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_i_32_None(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 459)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_i_32_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeI32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeI32TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_i32_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, PlatformInt64>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeI64TwinNormal(
          {required Map<int, PlatformInt64> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_i_64_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 460, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_i_64_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapExampleBasicMapTypeI64TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapExampleBasicMapTypeI64TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_i64_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, PlatformInt64>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeI64TwinRustAsync(
          {required Map<int, PlatformInt64> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_i_64_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 461, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_i_64_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeI64TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeI64TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_i64_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Map<int, PlatformInt64>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeI64TwinSync(
          {required Map<int, PlatformInt64> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_i_64_None(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 462)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_i_64_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeI64TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeI64TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_i64_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, int>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeI8TwinNormal(
          {required Map<int, int> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_i_8_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 463, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_i_8_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapExampleBasicMapTypeI8TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapExampleBasicMapTypeI8TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_i8_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, int>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeI8TwinRustAsync(
          {required Map<int, int> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_i_8_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 464, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_i_8_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeI8TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeI8TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_i8_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Map<int, int>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeI8TwinSync(
          {required Map<int, int> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_i_8_None(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 465)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_i_8_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeI8TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeI8TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_i8_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, PlatformInt64>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeIsizeTwinNormal(
          {required Map<int, PlatformInt64> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_isize_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 466, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_isize_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapExampleBasicMapTypeIsizeTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapExampleBasicMapTypeIsizeTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_isize_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, PlatformInt64>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeIsizeTwinRustAsync(
          {required Map<int, PlatformInt64> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_isize_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 467, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_isize_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeIsizeTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeIsizeTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_isize_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Map<int, PlatformInt64>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeIsizeTwinSync(
          {required Map<int, PlatformInt64> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_isize_None(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 468)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_isize_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeIsizeTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeIsizeTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_isize_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, String>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeStringTwinNormal(
          {required Map<int, String> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_String_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 469, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_String_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapExampleBasicMapTypeStringTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapExampleBasicMapTypeStringTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_string_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, String>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeStringTwinRustAsync(
          {required Map<int, String> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_String_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 470, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_String_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeStringTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeStringTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_string_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Map<int, String>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeStringTwinSync(
          {required Map<int, String> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_String_None(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 471)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_String_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeStringTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeStringTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_string_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, BigInt>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeU128TwinNormal(
          {required Map<int, BigInt> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_U128_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 472, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_U128_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapExampleBasicMapTypeU128TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapExampleBasicMapTypeU128TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_u128_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, BigInt>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeU128TwinRustAsync(
          {required Map<int, BigInt> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_U128_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 473, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_U128_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeU128TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeU128TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_u128_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Map<int, BigInt>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeU128TwinSync(
          {required Map<int, BigInt> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_U128_None(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 474)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_U128_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeU128TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeU128TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_u128_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, int>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeU16TwinNormal(
          {required Map<int, int> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_u_16_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 475, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_u_16_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapExampleBasicMapTypeU16TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapExampleBasicMapTypeU16TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_u16_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, int>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeU16TwinRustAsync(
          {required Map<int, int> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_u_16_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 476, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_u_16_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeU16TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeU16TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_u16_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Map<int, int>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeU16TwinSync(
          {required Map<int, int> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_u_16_None(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 477)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_u_16_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeU16TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeU16TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_u16_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, int>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeU32TwinNormal(
          {required Map<int, int> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_u_32_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 478, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_u_32_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapExampleBasicMapTypeU32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapExampleBasicMapTypeU32TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_u32_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, int>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeU32TwinRustAsync(
          {required Map<int, int> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_u_32_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 479, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_u_32_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeU32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeU32TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_u32_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Map<int, int>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeU32TwinSync(
          {required Map<int, int> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_u_32_None(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 480)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_u_32_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeU32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeU32TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_u32_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, BigInt>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeU64TwinNormal(
          {required Map<int, BigInt> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_u_64_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 481, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_u_64_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapExampleBasicMapTypeU64TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapExampleBasicMapTypeU64TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_u64_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, BigInt>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeU64TwinRustAsync(
          {required Map<int, BigInt> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_u_64_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 482, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_u_64_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeU64TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeU64TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_u64_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Map<int, BigInt>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeU64TwinSync(
          {required Map<int, BigInt> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_u_64_None(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 483)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_u_64_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeU64TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeU64TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_u64_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, int>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeU8TwinNormal(
          {required Map<int, int> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_u_8_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 484, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_u_8_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapExampleBasicMapTypeU8TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapExampleBasicMapTypeU8TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_u8_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, int>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeU8TwinRustAsync(
          {required Map<int, int> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_u_8_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 485, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_u_8_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeU8TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeU8TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_u8_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Map<int, int>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeU8TwinSync(
          {required Map<int, int> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_u_8_None(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 486)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_u_8_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeU8TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeU8TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_u8_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, BigInt>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeUsizeTwinNormal(
          {required Map<int, BigInt> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_usize_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 487, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_usize_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapExampleBasicMapTypeUsizeTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapExampleBasicMapTypeUsizeTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_usize_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, BigInt>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeUsizeTwinRustAsync(
          {required Map<int, BigInt> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_usize_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 488, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_usize_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeUsizeTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeUsizeTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_usize_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Map<int, BigInt>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeUsizeTwinSync(
          {required Map<int, BigInt> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_usize_None(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 489)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_usize_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeUsizeTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeUsizeTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_usize_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<BasicGeneralEnumTwinNormal?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeBasicGeneralEnumTwinNormalTwinNormal(
          {BasicGeneralEnumTwinNormal? arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_basic_general_enum_twin_normal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 490, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_basic_general_enum_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeBasicGeneralEnumTwinNormalTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeBasicGeneralEnumTwinNormalTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_optional_type_basic_general_enum_twin_normal_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<BasicGeneralEnumTwinRustAsync?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeBasicGeneralEnumTwinRustAsyncTwinRustAsync(
          {BasicGeneralEnumTwinRustAsync? arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_basic_general_enum_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 491, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_basic_general_enum_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeBasicGeneralEnumTwinRustAsyncTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeBasicGeneralEnumTwinRustAsyncTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_optional_type_basic_general_enum_twin_rust_async_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  BasicGeneralEnumTwinSync?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeBasicGeneralEnumTwinSyncTwinSync(
          {BasicGeneralEnumTwinSync? arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_basic_general_enum_twin_sync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 492)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_basic_general_enum_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeBasicGeneralEnumTwinSyncTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeBasicGeneralEnumTwinSyncTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_optional_type_basic_general_enum_twin_sync_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<BasicPrimitiveEnumTwinNormal?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeBasicPrimitiveEnumTwinNormalTwinNormal(
          {BasicPrimitiveEnumTwinNormal? arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_basic_primitive_enum_twin_normal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 493, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_basic_primitive_enum_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeBasicPrimitiveEnumTwinNormalTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeBasicPrimitiveEnumTwinNormalTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_optional_type_basic_primitive_enum_twin_normal_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<BasicPrimitiveEnumTwinRustAsync?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsync(
          {BasicPrimitiveEnumTwinRustAsync? arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_basic_primitive_enum_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 494, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_basic_primitive_enum_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_optional_type_basic_primitive_enum_twin_rust_async_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  BasicPrimitiveEnumTwinSync?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeBasicPrimitiveEnumTwinSyncTwinSync(
          {BasicPrimitiveEnumTwinSync? arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_basic_primitive_enum_twin_sync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 495)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_basic_primitive_enum_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeBasicPrimitiveEnumTwinSyncTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeBasicPrimitiveEnumTwinSyncTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_optional_type_basic_primitive_enum_twin_sync_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<BasicStructTwinNormal?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeBasicStructTwinNormalTwinNormal(
          {BasicStructTwinNormal? arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_basic_struct_twin_normal(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 496, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_basic_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeBasicStructTwinNormalTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeBasicStructTwinNormalTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_optional_type_basic_struct_twin_normal_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<BasicStructTwinRustAsync?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeBasicStructTwinRustAsyncTwinRustAsync(
          {BasicStructTwinRustAsync? arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_basic_struct_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 497, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_basic_struct_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeBasicStructTwinRustAsyncTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeBasicStructTwinRustAsyncTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_optional_type_basic_struct_twin_rust_async_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  BasicStructTwinSync?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeBasicStructTwinSyncTwinSync(
          {BasicStructTwinSync? arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_basic_struct_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 498)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_basic_struct_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeBasicStructTwinSyncTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeBasicStructTwinSyncTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_optional_type_basic_struct_twin_sync_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<bool?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeBoolTwinNormal(
          {bool? arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_bool(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 499, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeBoolTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeBoolTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_bool_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<bool?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeBoolTwinRustAsync(
          {bool? arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_bool(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 500, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeBoolTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeBoolTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_bool_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  bool?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeBoolTwinSync(
          {bool? arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_bool(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 501)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeBoolTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeBoolTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_bool_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<Uint8List?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeBytesTwinNormal(
          {Uint8List? arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_list_prim_u_8_strict(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 502, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeBytesTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeBytesTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_bytes_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Uint8List?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeBytesTwinRustAsync(
          {Uint8List? arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_list_prim_u_8_strict(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 503, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeBytesTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeBytesTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_bytes_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Uint8List?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeBytesTwinSync(
          {Uint8List? arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_list_prim_u_8_strict(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 504)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeBytesTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeBytesTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_bytes_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<double?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeF32TwinNormal(
          {double? arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_f_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 505, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_f_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeF32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeF32TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_f32_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<double?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeF32TwinRustAsync(
          {double? arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_f_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 506, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_f_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeF32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeF32TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_f32_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  double?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeF32TwinSync(
          {double? arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_f_32(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 507)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_f_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeF32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeF32TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_f32_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<double?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeF64TwinNormal(
          {double? arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_f_64(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 508, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_f_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeF64TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeF64TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_f64_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<double?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeF64TwinRustAsync(
          {double? arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_f_64(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 509, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_f_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeF64TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeF64TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_f64_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  double?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeF64TwinSync(
          {double? arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_f_64(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 510)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_f_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeF64TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeF64TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_f64_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<BigInt?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeI128TwinNormal(
          {BigInt? arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_I128(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 511, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_I128,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeI128TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeI128TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_i128_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<BigInt?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeI128TwinRustAsync(
          {BigInt? arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_I128(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 512, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_I128,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeI128TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeI128TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_i128_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  BigInt?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeI128TwinSync(
          {BigInt? arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_I128(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 513)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_I128,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeI128TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeI128TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_i128_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<int?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeI16TwinNormal(
          {int? arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_i_16(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 514, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_16,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeI16TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeI16TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_i16_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<int?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeI16TwinRustAsync(
          {int? arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_i_16(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 515, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_16,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeI16TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeI16TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_i16_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  int?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeI16TwinSync(
          {int? arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_i_16(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 516)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_16,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeI16TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeI16TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_i16_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<int?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeI32TwinNormal(
          {int? arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_i_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 517, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeI32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeI32TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_i32_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<int?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeI32TwinRustAsync(
          {int? arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_i_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 518, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeI32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeI32TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_i32_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  int?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeI32TwinSync(
          {int? arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_i_32(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 519)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeI32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeI32TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_i32_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<PlatformInt64?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeI64TwinNormal(
          {PlatformInt64? arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_i_64(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 520, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeI64TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeI64TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_i64_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<PlatformInt64?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeI64TwinRustAsync(
          {PlatformInt64? arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_i_64(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 521, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeI64TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeI64TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_i64_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  PlatformInt64?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeI64TwinSync(
          {PlatformInt64? arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_i_64(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 522)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeI64TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeI64TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_i64_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<int?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeI8TwinNormal(
          {int? arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_i_8(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 523, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_8,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeI8TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeI8TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_i8_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<int?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeI8TwinRustAsync(
          {int? arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_i_8(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 524, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_8,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeI8TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeI8TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_i8_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  int?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeI8TwinSync(
          {int? arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_i_8(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 525)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_8,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeI8TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeI8TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_i8_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<PlatformInt64?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeIsizeTwinNormal(
          {PlatformInt64? arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_isize(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 526, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_isize,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeIsizeTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeIsizeTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_isize_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<PlatformInt64?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeIsizeTwinRustAsync(
          {PlatformInt64? arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_isize(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 527, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_isize,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeIsizeTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeIsizeTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_isize_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  PlatformInt64?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeIsizeTwinSync(
          {PlatformInt64? arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_isize(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 528)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_isize,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeIsizeTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeIsizeTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_isize_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<String?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeStringTwinNormal(
          {String? arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 529, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeStringTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeStringTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_string_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<String?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeStringTwinRustAsync(
          {String? arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 530, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeStringTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeStringTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_string_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  String?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeStringTwinSync(
          {String? arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_String(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 531)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeStringTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeStringTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_string_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<BigInt?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeU128TwinNormal(
          {BigInt? arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_U128(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 532, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_U128,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeU128TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeU128TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_u128_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<BigInt?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeU128TwinRustAsync(
          {BigInt? arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_U128(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 533, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_U128,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeU128TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeU128TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_u128_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  BigInt?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeU128TwinSync(
          {BigInt? arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_U128(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 534)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_U128,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeU128TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeU128TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_u128_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<int?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeU16TwinNormal(
          {int? arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_u_16(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 535, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_16,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeU16TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeU16TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_u16_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<int?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeU16TwinRustAsync(
          {int? arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_u_16(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 536, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_16,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeU16TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeU16TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_u16_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  int?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeU16TwinSync(
          {int? arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_u_16(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 537)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_16,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeU16TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeU16TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_u16_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<int?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeU32TwinNormal(
          {int? arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_u_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 538, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeU32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeU32TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_u32_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<int?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeU32TwinRustAsync(
          {int? arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_u_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 539, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeU32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeU32TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_u32_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  int?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeU32TwinSync(
          {int? arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_u_32(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 540)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeU32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeU32TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_u32_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<BigInt?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeU64TwinNormal(
          {BigInt? arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_u_64(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 541, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeU64TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeU64TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_u64_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<BigInt?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeU64TwinRustAsync(
          {BigInt? arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_u_64(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 542, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeU64TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeU64TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_u64_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  BigInt?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeU64TwinSync(
          {BigInt? arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_u_64(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 543)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeU64TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeU64TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_u64_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<int?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeU8TwinNormal(
          {int? arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_u_8(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 544, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_8,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeU8TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeU8TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_u8_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<int?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeU8TwinRustAsync(
          {int? arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_u_8(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 545, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_8,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeU8TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeU8TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_u8_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  int?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeU8TwinSync(
          {int? arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_u_8(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 546)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_8,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeU8TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeU8TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_u8_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<BigInt?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeUsizeTwinNormal(
          {BigInt? arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_usize(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 547, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_usize,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeUsizeTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeUsizeTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_usize_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<BigInt?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeUsizeTwinRustAsync(
          {BigInt? arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_usize(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 548, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_usize,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeUsizeTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeUsizeTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_usize_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  BigInt?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeUsizeTwinSync(
          {BigInt? arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_usize(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 549)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_usize,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeUsizeTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeUsizeTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_usize_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<BasicGeneralEnumTwinNormal>
      crateApiPseudoManualBasicExampleBasicTypeBasicGeneralEnumTwinNormalTwinNormal(
          {required BasicGeneralEnumTwinNormal arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_basic_general_enum_twin_normal(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 550, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_basic_general_enum_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicExampleBasicTypeBasicGeneralEnumTwinNormalTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicExampleBasicTypeBasicGeneralEnumTwinNormalTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_type_basic_general_enum_twin_normal_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<BasicGeneralEnumTwinRustAsync>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeBasicGeneralEnumTwinRustAsyncTwinRustAsync(
          {required BasicGeneralEnumTwinRustAsync arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_basic_general_enum_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 551, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_basic_general_enum_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeBasicGeneralEnumTwinRustAsyncTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeBasicGeneralEnumTwinRustAsyncTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_type_basic_general_enum_twin_rust_async_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  BasicGeneralEnumTwinSync
      crateApiPseudoManualBasicTwinSyncExampleBasicTypeBasicGeneralEnumTwinSyncTwinSync(
          {required BasicGeneralEnumTwinSync arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_basic_general_enum_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 552)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_basic_general_enum_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeBasicGeneralEnumTwinSyncTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeBasicGeneralEnumTwinSyncTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_type_basic_general_enum_twin_sync_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<BasicPrimitiveEnumTwinNormal>
      crateApiPseudoManualBasicExampleBasicTypeBasicPrimitiveEnumTwinNormalTwinNormal(
          {required BasicPrimitiveEnumTwinNormal arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_basic_primitive_enum_twin_normal(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 553, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_basic_primitive_enum_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicExampleBasicTypeBasicPrimitiveEnumTwinNormalTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicExampleBasicTypeBasicPrimitiveEnumTwinNormalTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_type_basic_primitive_enum_twin_normal_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<BasicPrimitiveEnumTwinRustAsync>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsync(
          {required BasicPrimitiveEnumTwinRustAsync arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_basic_primitive_enum_twin_rust_async(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 554, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_basic_primitive_enum_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_type_basic_primitive_enum_twin_rust_async_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  BasicPrimitiveEnumTwinSync
      crateApiPseudoManualBasicTwinSyncExampleBasicTypeBasicPrimitiveEnumTwinSyncTwinSync(
          {required BasicPrimitiveEnumTwinSync arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_basic_primitive_enum_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 555)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_basic_primitive_enum_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeBasicPrimitiveEnumTwinSyncTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeBasicPrimitiveEnumTwinSyncTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_type_basic_primitive_enum_twin_sync_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<BasicStructTwinNormal>
      crateApiPseudoManualBasicExampleBasicTypeBasicStructTwinNormalTwinNormal(
          {required BasicStructTwinNormal arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_basic_struct_twin_normal(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 556, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_basic_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicExampleBasicTypeBasicStructTwinNormalTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicExampleBasicTypeBasicStructTwinNormalTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_type_basic_struct_twin_normal_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<BasicStructTwinRustAsync>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeBasicStructTwinRustAsyncTwinRustAsync(
          {required BasicStructTwinRustAsync arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_basic_struct_twin_rust_async(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 557, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_basic_struct_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeBasicStructTwinRustAsyncTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeBasicStructTwinRustAsyncTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_type_basic_struct_twin_rust_async_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  BasicStructTwinSync
      crateApiPseudoManualBasicTwinSyncExampleBasicTypeBasicStructTwinSyncTwinSync(
          {required BasicStructTwinSync arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_basic_struct_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 558)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_basic_struct_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeBasicStructTwinSyncTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeBasicStructTwinSyncTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_basic_struct_twin_sync_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<bool> crateApiPseudoManualBasicExampleBasicTypeBoolTwinNormal(
      {required bool arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_bool(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 559, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicExampleBasicTypeBoolTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicExampleBasicTypeBoolTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_bool_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<bool>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeBoolTwinRustAsync(
          {required bool arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_bool(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 560, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeBoolTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeBoolTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_bool_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  bool crateApiPseudoManualBasicTwinSyncExampleBasicTypeBoolTwinSync(
      {required bool arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_bool(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 561)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeBoolTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeBoolTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_bool_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<Uint8List> crateApiPseudoManualBasicExampleBasicTypeBytesTwinNormal(
      {required List<int> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 562, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicExampleBasicTypeBytesTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicExampleBasicTypeBytesTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_bytes_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Uint8List>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeBytesTwinRustAsync(
          {required List<int> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 563, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeBytesTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeBytesTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_bytes_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Uint8List crateApiPseudoManualBasicTwinSyncExampleBasicTypeBytesTwinSync(
      {required List<int> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 564)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeBytesTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeBytesTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_bytes_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<double> crateApiPseudoManualBasicExampleBasicTypeF32TwinNormal(
      {required double arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 565, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicExampleBasicTypeF32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicExampleBasicTypeF32TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_f32_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<double>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeF32TwinRustAsync(
          {required double arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 566, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeF32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeF32TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_f32_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  double crateApiPseudoManualBasicTwinSyncExampleBasicTypeF32TwinSync(
      {required double arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_32(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 567)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeF32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeF32TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_f32_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<double> crateApiPseudoManualBasicExampleBasicTypeF64TwinNormal(
      {required double arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_64(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 568, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicExampleBasicTypeF64TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicExampleBasicTypeF64TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_f64_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<double>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeF64TwinRustAsync(
          {required double arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_64(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 569, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeF64TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeF64TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_f64_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  double crateApiPseudoManualBasicTwinSyncExampleBasicTypeF64TwinSync(
      {required double arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_64(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 570)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeF64TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeF64TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_f64_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<BigInt> crateApiPseudoManualBasicExampleBasicTypeI128TwinNormal(
      {required BigInt arg, required String expect}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_I128(arg, serializer);
        sse_encode_String(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 571, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_I128,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicExampleBasicTypeI128TwinNormalConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicExampleBasicTypeI128TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_i128_twin_normal",
            argNames: ["arg", "expect"],
          );

  @override
  Future<BigInt>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeI128TwinRustAsync(
          {required BigInt arg, required String expect}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_I128(arg, serializer);
        sse_encode_String(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 572, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_I128,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeI128TwinRustAsyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeI128TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_i128_twin_rust_async",
            argNames: ["arg", "expect"],
          );

  @override
  BigInt crateApiPseudoManualBasicTwinSyncExampleBasicTypeI128TwinSync(
      {required BigInt arg, required String expect}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_I128(arg, serializer);
        sse_encode_String(expect, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 573)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_I128,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeI128TwinSyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeI128TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_i128_twin_sync",
            argNames: ["arg", "expect"],
          );

  @override
  Future<int> crateApiPseudoManualBasicExampleBasicTypeI16TwinNormal(
      {required int arg, required String expect}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_16(arg, serializer);
        sse_encode_String(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 574, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_16,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicExampleBasicTypeI16TwinNormalConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicExampleBasicTypeI16TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_i16_twin_normal",
            argNames: ["arg", "expect"],
          );

  @override
  Future<int>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeI16TwinRustAsync(
          {required int arg, required String expect}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_16(arg, serializer);
        sse_encode_String(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 575, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_16,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeI16TwinRustAsyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeI16TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_i16_twin_rust_async",
            argNames: ["arg", "expect"],
          );

  @override
  int crateApiPseudoManualBasicTwinSyncExampleBasicTypeI16TwinSync(
      {required int arg, required String expect}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_16(arg, serializer);
        sse_encode_String(expect, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 576)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_16,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeI16TwinSyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeI16TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_i16_twin_sync",
            argNames: ["arg", "expect"],
          );

  @override
  Future<int> crateApiPseudoManualBasicExampleBasicTypeI32TwinNormal(
      {required int arg, required String expect}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(arg, serializer);
        sse_encode_String(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 577, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicExampleBasicTypeI32TwinNormalConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicExampleBasicTypeI32TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_i32_twin_normal",
            argNames: ["arg", "expect"],
          );

  @override
  Future<int>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeI32TwinRustAsync(
          {required int arg, required String expect}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(arg, serializer);
        sse_encode_String(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 578, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeI32TwinRustAsyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeI32TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_i32_twin_rust_async",
            argNames: ["arg", "expect"],
          );

  @override
  int crateApiPseudoManualBasicTwinSyncExampleBasicTypeI32TwinSync(
      {required int arg, required String expect}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(arg, serializer);
        sse_encode_String(expect, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 579)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeI32TwinSyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeI32TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_i32_twin_sync",
            argNames: ["arg", "expect"],
          );

  @override
  Future<PlatformInt64> crateApiPseudoManualBasicExampleBasicTypeI64TwinNormal(
      {required PlatformInt64 arg, required String expect}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_64(arg, serializer);
        sse_encode_String(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 580, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicExampleBasicTypeI64TwinNormalConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicExampleBasicTypeI64TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_i64_twin_normal",
            argNames: ["arg", "expect"],
          );

  @override
  Future<PlatformInt64>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeI64TwinRustAsync(
          {required PlatformInt64 arg, required String expect}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_64(arg, serializer);
        sse_encode_String(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 581, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeI64TwinRustAsyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeI64TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_i64_twin_rust_async",
            argNames: ["arg", "expect"],
          );

  @override
  PlatformInt64 crateApiPseudoManualBasicTwinSyncExampleBasicTypeI64TwinSync(
      {required PlatformInt64 arg, required String expect}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_64(arg, serializer);
        sse_encode_String(expect, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 582)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeI64TwinSyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeI64TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_i64_twin_sync",
            argNames: ["arg", "expect"],
          );

  @override
  Future<int> crateApiPseudoManualBasicExampleBasicTypeI8TwinNormal(
      {required int arg, required String expect}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_8(arg, serializer);
        sse_encode_String(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 583, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_8,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicExampleBasicTypeI8TwinNormalConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicExampleBasicTypeI8TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_i8_twin_normal",
            argNames: ["arg", "expect"],
          );

  @override
  Future<int>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeI8TwinRustAsync(
          {required int arg, required String expect}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_8(arg, serializer);
        sse_encode_String(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 584, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_8,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeI8TwinRustAsyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeI8TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_i8_twin_rust_async",
            argNames: ["arg", "expect"],
          );

  @override
  int crateApiPseudoManualBasicTwinSyncExampleBasicTypeI8TwinSync(
      {required int arg, required String expect}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_8(arg, serializer);
        sse_encode_String(expect, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 585)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_8,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeI8TwinSyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeI8TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_i8_twin_sync",
            argNames: ["arg", "expect"],
          );

  @override
  Future<PlatformInt64>
      crateApiPseudoManualBasicExampleBasicTypeIsizeTwinNormal(
          {required PlatformInt64 arg, required String expect}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_isize(arg, serializer);
        sse_encode_String(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 586, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_isize,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicExampleBasicTypeIsizeTwinNormalConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicExampleBasicTypeIsizeTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_isize_twin_normal",
            argNames: ["arg", "expect"],
          );

  @override
  Future<PlatformInt64>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeIsizeTwinRustAsync(
          {required PlatformInt64 arg, required String expect}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_isize(arg, serializer);
        sse_encode_String(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 587, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_isize,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeIsizeTwinRustAsyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeIsizeTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_isize_twin_rust_async",
            argNames: ["arg", "expect"],
          );

  @override
  PlatformInt64 crateApiPseudoManualBasicTwinSyncExampleBasicTypeIsizeTwinSync(
      {required PlatformInt64 arg, required String expect}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_isize(arg, serializer);
        sse_encode_String(expect, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 588)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_isize,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeIsizeTwinSyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeIsizeTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_isize_twin_sync",
            argNames: ["arg", "expect"],
          );

  @override
  Future<String> crateApiPseudoManualBasicExampleBasicTypeStringTwinNormal(
      {required String arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 589, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicExampleBasicTypeStringTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicExampleBasicTypeStringTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_string_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<String>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeStringTwinRustAsync(
          {required String arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 590, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeStringTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeStringTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_string_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  String crateApiPseudoManualBasicTwinSyncExampleBasicTypeStringTwinSync(
      {required String arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 591)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeStringTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeStringTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_string_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<BigInt> crateApiPseudoManualBasicExampleBasicTypeU128TwinNormal(
      {required BigInt arg, required String expect}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_U128(arg, serializer);
        sse_encode_String(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 592, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_U128,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicExampleBasicTypeU128TwinNormalConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicExampleBasicTypeU128TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_u128_twin_normal",
            argNames: ["arg", "expect"],
          );

  @override
  Future<BigInt>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeU128TwinRustAsync(
          {required BigInt arg, required String expect}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_U128(arg, serializer);
        sse_encode_String(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 593, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_U128,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeU128TwinRustAsyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeU128TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_u128_twin_rust_async",
            argNames: ["arg", "expect"],
          );

  @override
  BigInt crateApiPseudoManualBasicTwinSyncExampleBasicTypeU128TwinSync(
      {required BigInt arg, required String expect}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_U128(arg, serializer);
        sse_encode_String(expect, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 594)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_U128,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeU128TwinSyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeU128TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_u128_twin_sync",
            argNames: ["arg", "expect"],
          );

  @override
  Future<int> crateApiPseudoManualBasicExampleBasicTypeU16TwinNormal(
      {required int arg, required String expect}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_16(arg, serializer);
        sse_encode_String(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 595, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_16,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicExampleBasicTypeU16TwinNormalConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicExampleBasicTypeU16TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_u16_twin_normal",
            argNames: ["arg", "expect"],
          );

  @override
  Future<int>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeU16TwinRustAsync(
          {required int arg, required String expect}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_16(arg, serializer);
        sse_encode_String(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 596, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_16,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeU16TwinRustAsyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeU16TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_u16_twin_rust_async",
            argNames: ["arg", "expect"],
          );

  @override
  int crateApiPseudoManualBasicTwinSyncExampleBasicTypeU16TwinSync(
      {required int arg, required String expect}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_16(arg, serializer);
        sse_encode_String(expect, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 597)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_16,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeU16TwinSyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeU16TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_u16_twin_sync",
            argNames: ["arg", "expect"],
          );

  @override
  Future<int> crateApiPseudoManualBasicExampleBasicTypeU32TwinNormal(
      {required int arg, required String expect}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(arg, serializer);
        sse_encode_String(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 598, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicExampleBasicTypeU32TwinNormalConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicExampleBasicTypeU32TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_u32_twin_normal",
            argNames: ["arg", "expect"],
          );

  @override
  Future<int>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeU32TwinRustAsync(
          {required int arg, required String expect}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(arg, serializer);
        sse_encode_String(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 599, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeU32TwinRustAsyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeU32TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_u32_twin_rust_async",
            argNames: ["arg", "expect"],
          );

  @override
  int crateApiPseudoManualBasicTwinSyncExampleBasicTypeU32TwinSync(
      {required int arg, required String expect}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(arg, serializer);
        sse_encode_String(expect, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 600)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeU32TwinSyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeU32TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_u32_twin_sync",
            argNames: ["arg", "expect"],
          );

  @override
  Future<BigInt> crateApiPseudoManualBasicExampleBasicTypeU64TwinNormal(
      {required BigInt arg, required String expect}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(arg, serializer);
        sse_encode_String(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 601, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicExampleBasicTypeU64TwinNormalConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicExampleBasicTypeU64TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_u64_twin_normal",
            argNames: ["arg", "expect"],
          );

  @override
  Future<BigInt>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeU64TwinRustAsync(
          {required BigInt arg, required String expect}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(arg, serializer);
        sse_encode_String(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 602, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeU64TwinRustAsyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeU64TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_u64_twin_rust_async",
            argNames: ["arg", "expect"],
          );

  @override
  BigInt crateApiPseudoManualBasicTwinSyncExampleBasicTypeU64TwinSync(
      {required BigInt arg, required String expect}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(arg, serializer);
        sse_encode_String(expect, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 603)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeU64TwinSyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeU64TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_u64_twin_sync",
            argNames: ["arg", "expect"],
          );

  @override
  Future<int> crateApiPseudoManualBasicExampleBasicTypeU8TwinNormal(
      {required int arg, required String expect}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8(arg, serializer);
        sse_encode_String(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 604, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicExampleBasicTypeU8TwinNormalConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicExampleBasicTypeU8TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_u8_twin_normal",
            argNames: ["arg", "expect"],
          );

  @override
  Future<int>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeU8TwinRustAsync(
          {required int arg, required String expect}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8(arg, serializer);
        sse_encode_String(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 605, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeU8TwinRustAsyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeU8TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_u8_twin_rust_async",
            argNames: ["arg", "expect"],
          );

  @override
  int crateApiPseudoManualBasicTwinSyncExampleBasicTypeU8TwinSync(
      {required int arg, required String expect}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8(arg, serializer);
        sse_encode_String(expect, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 606)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeU8TwinSyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeU8TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_u8_twin_sync",
            argNames: ["arg", "expect"],
          );

  @override
  Future<BigInt> crateApiPseudoManualBasicExampleBasicTypeUsizeTwinNormal(
      {required BigInt arg, required String expect}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(arg, serializer);
        sse_encode_String(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 607, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_usize,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicExampleBasicTypeUsizeTwinNormalConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicExampleBasicTypeUsizeTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_usize_twin_normal",
            argNames: ["arg", "expect"],
          );

  @override
  Future<BigInt>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeUsizeTwinRustAsync(
          {required BigInt arg, required String expect}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(arg, serializer);
        sse_encode_String(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 608, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_usize,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeUsizeTwinRustAsyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeUsizeTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_usize_twin_rust_async",
            argNames: ["arg", "expect"],
          );

  @override
  BigInt crateApiPseudoManualBasicTwinSyncExampleBasicTypeUsizeTwinSync(
      {required BigInt arg, required String expect}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(arg, serializer);
        sse_encode_String(expect, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 609)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_usize,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeUsizeTwinSyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeUsizeTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_usize_twin_sync",
            argNames: ["arg", "expect"],
          );

  @override
  Future<String> crateApiMiscNoTwinExampleAFeatureGatedFunction() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 610, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMiscNoTwinExampleAFeatureGatedFunctionConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMiscNoTwinExampleAFeatureGatedFunctionConstMeta =>
      const TaskConstMeta(
        debugName: "feature_gated_function",
        argNames: [],
      );

  @override
  Future<int?> crateApiMirrorFirstNumberTwinNormal({required Numbers nums}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_numbers(nums, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 611, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMirrorFirstNumberTwinNormalConstMeta,
      argValues: [nums],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMirrorFirstNumberTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "first_number_twin_normal",
        argNames: ["nums"],
      );

  @override
  Future<int?> crateApiPseudoManualMirrorTwinRustAsyncFirstNumberTwinRustAsync(
      {required Numbers nums}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_numbers(nums, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 612, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncFirstNumberTwinRustAsyncConstMeta,
      argValues: [nums],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncFirstNumberTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "first_number_twin_rust_async",
            argNames: ["nums"],
          );

  @override
  int? crateApiPseudoManualMirrorTwinSyncFirstNumberTwinSync(
      {required Numbers nums}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_numbers(nums, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 613)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncFirstNumberTwinSyncConstMeta,
      argValues: [nums],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncFirstNumberTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "first_number_twin_sync",
            argNames: ["nums"],
          );

  @override
  Future<int?> crateApiMirrorFirstSequenceTwinNormal(
      {required Sequences seqs}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_sequences(seqs, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 614, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMirrorFirstSequenceTwinNormalConstMeta,
      argValues: [seqs],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMirrorFirstSequenceTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "first_sequence_twin_normal",
        argNames: ["seqs"],
      );

  @override
  Future<int?>
      crateApiPseudoManualMirrorTwinRustAsyncFirstSequenceTwinRustAsync(
          {required Sequences seqs}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_sequences(seqs, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 615, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncFirstSequenceTwinRustAsyncConstMeta,
      argValues: [seqs],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncFirstSequenceTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "first_sequence_twin_rust_async",
            argNames: ["seqs"],
          );

  @override
  int? crateApiPseudoManualMirrorTwinSyncFirstSequenceTwinSync(
      {required Sequences seqs}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_sequences(seqs, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 616)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncFirstSequenceTwinSyncConstMeta,
      argValues: [seqs],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncFirstSequenceTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "first_sequence_twin_sync",
            argNames: ["seqs"],
          );

  @override
  Future<void> crateApiMiscNoTwinExampleAFor({required String type}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(type, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 617, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMiscNoTwinExampleAForConstMeta,
      argValues: [type],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMiscNoTwinExampleAForConstMeta =>
      const TaskConstMeta(
        debugName: "r#for",
        argNames: ["type"],
      );

  @override
  Future<FrbOpaqueReturnTwinNormal>
      crateApiRustOpaqueFrbGeneratorTestTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 618, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_FrbOpaqueReturnTwinNormal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRustOpaqueFrbGeneratorTestTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRustOpaqueFrbGeneratorTestTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "frb_generator_test_twin_normal",
        argNames: [],
      );

  @override
  Future<FrbOpaqueReturnTwinRustAsync>
      crateApiPseudoManualRustOpaqueTwinRustAsyncFrbGeneratorTestTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 619, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_FrbOpaqueReturnTwinRustAsync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinRustAsyncFrbGeneratorTestTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinRustAsyncFrbGeneratorTestTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "frb_generator_test_twin_rust_async",
            argNames: [],
          );

  @override
  FrbOpaqueReturnTwinSync
      crateApiPseudoManualRustOpaqueTwinSyncFrbGeneratorTestTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 620)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_FrbOpaqueReturnTwinSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinSyncFrbGeneratorTestTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinSyncFrbGeneratorTestTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "frb_generator_test_twin_sync",
            argNames: [],
          );

  @override
  FrbOpaqueSyncReturnTwinNormal
      crateApiRustOpaqueSyncFrbSyncGeneratorTestTwinNormal() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 623)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_FrbOpaqueSyncReturnTwinNormal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRustOpaqueSyncFrbSyncGeneratorTestTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustOpaqueSyncFrbSyncGeneratorTestTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "frb_sync_generator_test_twin_normal",
            argNames: [],
          );

  @override
  Future<int> crateApiDynTraitFuncArgDynTraitTwinNormal(
      {required SimpleTraitForDynTwinNormal arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DynTrait_SimpleTraitForDynTwinNormal(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 624, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDynTraitFuncArgDynTraitTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDynTraitFuncArgDynTraitTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_arg_dyn_trait_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<int> crateApiAsyncMiscFuncAsyncSimpleAddTwinNormal(
      {required int a, required int b}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(a, serializer);
        sse_encode_i_32(b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 625, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAsyncMiscFuncAsyncSimpleAddTwinNormalConstMeta,
      argValues: [a, b],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAsyncMiscFuncAsyncSimpleAddTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_async_simple_add_twin_normal",
        argNames: ["a", "b"],
      );

  @override
  Future<void> crateApiAsyncMiscFuncAsyncVoidTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 626, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAsyncMiscFuncAsyncVoidTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAsyncMiscFuncAsyncVoidTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_async_void_twin_normal",
        argNames: [],
      );

  @override
  Future<EnumSimpleTwinNormal> crateApiEnumerationFuncEnumSimpleTwinNormal(
      {required EnumSimpleTwinNormal arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_enum_simple_twin_normal(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 627, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_simple_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEnumerationFuncEnumSimpleTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiEnumerationFuncEnumSimpleTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_enum_simple_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<EnumSimpleTwinRustAsync>
      crateApiPseudoManualEnumerationTwinRustAsyncFuncEnumSimpleTwinRustAsync(
          {required EnumSimpleTwinRustAsync arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_enum_simple_twin_rust_async(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 628, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_simple_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualEnumerationTwinRustAsyncFuncEnumSimpleTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualEnumerationTwinRustAsyncFuncEnumSimpleTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_enum_simple_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  EnumSimpleTwinSync
      crateApiPseudoManualEnumerationTwinSyncFuncEnumSimpleTwinSync(
          {required EnumSimpleTwinSync arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_enum_simple_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 629)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_simple_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualEnumerationTwinSyncFuncEnumSimpleTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualEnumerationTwinSyncFuncEnumSimpleTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_enum_simple_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<EnumWithDiscriminantTwinNormal>
      crateApiEnumerationFuncEnumWithDiscriminantTwinNormal(
          {required EnumWithDiscriminantTwinNormal arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_enum_with_discriminant_twin_normal(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 630, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_with_discriminant_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiEnumerationFuncEnumWithDiscriminantTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiEnumerationFuncEnumWithDiscriminantTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "func_enum_with_discriminant_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<EnumWithDiscriminantTwinRustAsync>
      crateApiPseudoManualEnumerationTwinRustAsyncFuncEnumWithDiscriminantTwinRustAsync(
          {required EnumWithDiscriminantTwinRustAsync arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_enum_with_discriminant_twin_rust_async(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 631, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_with_discriminant_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualEnumerationTwinRustAsyncFuncEnumWithDiscriminantTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualEnumerationTwinRustAsyncFuncEnumWithDiscriminantTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_enum_with_discriminant_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  EnumWithDiscriminantTwinSync
      crateApiPseudoManualEnumerationTwinSyncFuncEnumWithDiscriminantTwinSync(
          {required EnumWithDiscriminantTwinSync arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_enum_with_discriminant_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 632)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_with_discriminant_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualEnumerationTwinSyncFuncEnumWithDiscriminantTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualEnumerationTwinSyncFuncEnumWithDiscriminantTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_enum_with_discriminant_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<EnumWithItemMixedTwinNormal>
      crateApiEnumerationFuncEnumWithItemMixedTwinNormal(
          {required EnumWithItemMixedTwinNormal arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_with_item_mixed_twin_normal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 633, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_with_item_mixed_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEnumerationFuncEnumWithItemMixedTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiEnumerationFuncEnumWithItemMixedTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "func_enum_with_item_mixed_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<EnumWithItemMixedTwinRustAsync>
      crateApiPseudoManualEnumerationTwinRustAsyncFuncEnumWithItemMixedTwinRustAsync(
          {required EnumWithItemMixedTwinRustAsync arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_with_item_mixed_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 634, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_with_item_mixed_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualEnumerationTwinRustAsyncFuncEnumWithItemMixedTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualEnumerationTwinRustAsyncFuncEnumWithItemMixedTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_enum_with_item_mixed_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  EnumWithItemMixedTwinSync
      crateApiPseudoManualEnumerationTwinSyncFuncEnumWithItemMixedTwinSync(
          {required EnumWithItemMixedTwinSync arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_with_item_mixed_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 635)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_with_item_mixed_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualEnumerationTwinSyncFuncEnumWithItemMixedTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualEnumerationTwinSyncFuncEnumWithItemMixedTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_enum_with_item_mixed_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<EnumWithItemStructTwinNormal>
      crateApiEnumerationFuncEnumWithItemStructTwinNormal(
          {required EnumWithItemStructTwinNormal arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_with_item_struct_twin_normal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 636, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_with_item_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEnumerationFuncEnumWithItemStructTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiEnumerationFuncEnumWithItemStructTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "func_enum_with_item_struct_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<EnumWithItemStructTwinRustAsync>
      crateApiPseudoManualEnumerationTwinRustAsyncFuncEnumWithItemStructTwinRustAsync(
          {required EnumWithItemStructTwinRustAsync arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_with_item_struct_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 637, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_with_item_struct_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualEnumerationTwinRustAsyncFuncEnumWithItemStructTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualEnumerationTwinRustAsyncFuncEnumWithItemStructTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_enum_with_item_struct_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  EnumWithItemStructTwinSync
      crateApiPseudoManualEnumerationTwinSyncFuncEnumWithItemStructTwinSync(
          {required EnumWithItemStructTwinSync arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_with_item_struct_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 638)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_with_item_struct_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualEnumerationTwinSyncFuncEnumWithItemStructTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualEnumerationTwinSyncFuncEnumWithItemStructTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_enum_with_item_struct_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<EnumWithItemTupleTwinNormal>
      crateApiEnumerationFuncEnumWithItemTupleTwinNormal(
          {required EnumWithItemTupleTwinNormal arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_with_item_tuple_twin_normal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 639, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_with_item_tuple_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEnumerationFuncEnumWithItemTupleTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiEnumerationFuncEnumWithItemTupleTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "func_enum_with_item_tuple_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<EnumWithItemTupleTwinRustAsync>
      crateApiPseudoManualEnumerationTwinRustAsyncFuncEnumWithItemTupleTwinRustAsync(
          {required EnumWithItemTupleTwinRustAsync arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_with_item_tuple_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 640, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_with_item_tuple_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualEnumerationTwinRustAsyncFuncEnumWithItemTupleTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualEnumerationTwinRustAsyncFuncEnumWithItemTupleTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_enum_with_item_tuple_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  EnumWithItemTupleTwinSync
      crateApiPseudoManualEnumerationTwinSyncFuncEnumWithItemTupleTwinSync(
          {required EnumWithItemTupleTwinSync arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_with_item_tuple_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 641)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_with_item_tuple_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualEnumerationTwinSyncFuncEnumWithItemTupleTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualEnumerationTwinSyncFuncEnumWithItemTupleTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_enum_with_item_tuple_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<StructWithDartKeywordFieldTwinNormal>
      crateApiStructureFuncForStructWithDartKeywordFieldTwinNormal(
          {required StructWithDartKeywordFieldTwinNormal arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_dart_keyword_field_twin_normal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 642, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_struct_with_dart_keyword_field_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiStructureFuncForStructWithDartKeywordFieldTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiStructureFuncForStructWithDartKeywordFieldTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "func_for_struct_with_dart_keyword_field_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<StructWithDartKeywordFieldTwinRustAsync>
      crateApiPseudoManualStructureTwinRustAsyncFuncForStructWithDartKeywordFieldTwinRustAsync(
          {required StructWithDartKeywordFieldTwinRustAsync arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_dart_keyword_field_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 643, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_struct_with_dart_keyword_field_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualStructureTwinRustAsyncFuncForStructWithDartKeywordFieldTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualStructureTwinRustAsyncFuncForStructWithDartKeywordFieldTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "func_for_struct_with_dart_keyword_field_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  StructWithDartKeywordFieldTwinSync
      crateApiPseudoManualStructureTwinSyncFuncForStructWithDartKeywordFieldTwinSync(
          {required StructWithDartKeywordFieldTwinSync arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_dart_keyword_field_twin_sync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 644)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_with_dart_keyword_field_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualStructureTwinSyncFuncForStructWithDartKeywordFieldTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualStructureTwinSyncFuncForStructWithDartKeywordFieldTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_for_struct_with_dart_keyword_field_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<StructWithFieldRenameTwinNormal>
      crateApiStructureFuncForStructWithFieldRenameTwinNormal(
          {required StructWithFieldRenameTwinNormal arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_field_rename_twin_normal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 645, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_with_field_rename_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiStructureFuncForStructWithFieldRenameTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiStructureFuncForStructWithFieldRenameTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "func_for_struct_with_field_rename_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<StructWithFieldRenameTwinRustAsync>
      crateApiPseudoManualStructureTwinRustAsyncFuncForStructWithFieldRenameTwinRustAsync(
          {required StructWithFieldRenameTwinRustAsync arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_field_rename_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 646, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_with_field_rename_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualStructureTwinRustAsyncFuncForStructWithFieldRenameTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualStructureTwinRustAsyncFuncForStructWithFieldRenameTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_for_struct_with_field_rename_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  StructWithFieldRenameTwinSync
      crateApiPseudoManualStructureTwinSyncFuncForStructWithFieldRenameTwinSync(
          {required StructWithFieldRenameTwinSync arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_field_rename_twin_sync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 647)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_with_field_rename_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualStructureTwinSyncFuncForStructWithFieldRenameTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualStructureTwinSyncFuncForStructWithFieldRenameTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_for_struct_with_field_rename_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, int>> crateApiMapAndSetFuncHashMapI32I32TwinNormal(
      {required Map<int, int> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_i_32_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 648, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_i_32_None,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMapAndSetFuncHashMapI32I32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMapAndSetFuncHashMapI32I32TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_hash_map_i32_i32_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Map<int, int>>
      crateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapI32I32TwinRustAsync(
          {required Map<int, int> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_i_32_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 649, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_i_32_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapI32I32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapI32I32TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_map_i32_i32_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Map<int, int> crateApiPseudoManualMapAndSetTwinSyncFuncHashMapI32I32TwinSync(
      {required Map<int, int> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_i_32_None(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 650)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_i_32_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMapAndSetTwinSyncFuncHashMapI32I32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMapAndSetTwinSyncFuncHashMapI32I32TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_map_i32_i32_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<Map<String, Uint8List>>
      crateApiMapAndSetFuncHashMapStringBytesTwinNormal(
          {required Map<String, Uint8List> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_list_prim_u_8_strict_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 651, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_list_prim_u_8_strict_None,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMapAndSetFuncHashMapStringBytesTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMapAndSetFuncHashMapStringBytesTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_map_string_bytes_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<String, Uint8List>>
      crateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapStringBytesTwinRustAsync(
          {required Map<String, Uint8List> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_list_prim_u_8_strict_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 652, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_list_prim_u_8_strict_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapStringBytesTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapStringBytesTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_map_string_bytes_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Map<String, Uint8List>
      crateApiPseudoManualMapAndSetTwinSyncFuncHashMapStringBytesTwinSync(
          {required Map<String, Uint8List> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_list_prim_u_8_strict_None(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 653)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_list_prim_u_8_strict_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMapAndSetTwinSyncFuncHashMapStringBytesTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMapAndSetTwinSyncFuncHashMapStringBytesTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_map_string_bytes_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<Map<String, KitchenSinkTwinNormal>>
      crateApiMapAndSetFuncHashMapStringComplexEnumTwinNormal(
          {required Map<String, KitchenSinkTwinNormal> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_kitchen_sink_twin_normal_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 654, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_kitchen_sink_twin_normal_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMapAndSetFuncHashMapStringComplexEnumTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMapAndSetFuncHashMapStringComplexEnumTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_map_string_complex_enum_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<String, KitchenSinkTwinRustAsync>>
      crateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapStringComplexEnumTwinRustAsync(
          {required Map<String, KitchenSinkTwinRustAsync> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_kitchen_sink_twin_rust_async_None(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 655, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Map_String_kitchen_sink_twin_rust_async_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapStringComplexEnumTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapStringComplexEnumTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_map_string_complex_enum_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Map<String, KitchenSinkTwinSync>
      crateApiPseudoManualMapAndSetTwinSyncFuncHashMapStringComplexEnumTwinSync(
          {required Map<String, KitchenSinkTwinSync> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_kitchen_sink_twin_sync_None(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 656)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_kitchen_sink_twin_sync_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMapAndSetTwinSyncFuncHashMapStringComplexEnumTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMapAndSetTwinSyncFuncHashMapStringComplexEnumTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_map_string_complex_enum_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<Map<String, EnumSimpleTwinNormal>>
      crateApiMapAndSetFuncHashMapStringSimpleEnumTwinNormal(
          {required Map<String, EnumSimpleTwinNormal> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_enum_simple_twin_normal_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 657, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_enum_simple_twin_normal_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMapAndSetFuncHashMapStringSimpleEnumTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMapAndSetFuncHashMapStringSimpleEnumTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_map_string_simple_enum_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<String, EnumSimpleTwinRustAsync>>
      crateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapStringSimpleEnumTwinRustAsync(
          {required Map<String, EnumSimpleTwinRustAsync> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_enum_simple_twin_rust_async_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 658, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Map_String_enum_simple_twin_rust_async_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapStringSimpleEnumTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapStringSimpleEnumTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_map_string_simple_enum_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Map<String, EnumSimpleTwinSync>
      crateApiPseudoManualMapAndSetTwinSyncFuncHashMapStringSimpleEnumTwinSync(
          {required Map<String, EnumSimpleTwinSync> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_enum_simple_twin_sync_None(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 659)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_enum_simple_twin_sync_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMapAndSetTwinSyncFuncHashMapStringSimpleEnumTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMapAndSetTwinSyncFuncHashMapStringSimpleEnumTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_map_string_simple_enum_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<Map<String, String>>
      crateApiMapAndSetFuncHashMapStringStringHasherTwinNormal(
          {required Map<String, String> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_String_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinNormal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 660, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Map_String_String_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinNormal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMapAndSetFuncHashMapStringStringHasherTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMapAndSetFuncHashMapStringStringHasherTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_map_string_string_hasher_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<String, String>>
      crateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapStringStringHasherTwinRustAsync(
          {required Map<String, String> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_String_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinRustAsync(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 661, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Map_String_String_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinRustAsync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapStringStringHasherTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapStringStringHasherTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_map_string_string_hasher_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Map<String, String>
      crateApiPseudoManualMapAndSetTwinSyncFuncHashMapStringStringHasherTwinSync(
          {required Map<String, String> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_String_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinSync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 662)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Map_String_String_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMapAndSetTwinSyncFuncHashMapStringStringHasherTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMapAndSetTwinSyncFuncHashMapStringStringHasherTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_map_string_string_hasher_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<Map<String, String>>
      crateApiMapAndSetFuncHashMapStringStringTwinNormal(
          {required Map<String, String> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_String_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 663, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_String_None,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMapAndSetFuncHashMapStringStringTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMapAndSetFuncHashMapStringStringTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_map_string_string_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<String, String>>
      crateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapStringStringTwinRustAsync(
          {required Map<String, String> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_String_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 664, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_String_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapStringStringTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapStringStringTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_map_string_string_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Map<String, String>
      crateApiPseudoManualMapAndSetTwinSyncFuncHashMapStringStringTwinSync(
          {required Map<String, String> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_String_None(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 665)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_String_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMapAndSetTwinSyncFuncHashMapStringStringTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMapAndSetTwinSyncFuncHashMapStringStringTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_map_string_string_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<Map<String, MySize>>
      crateApiMapAndSetFuncHashMapStringStructTwinNormal(
          {required Map<String, MySize> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_my_size_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 666, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_my_size_None,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMapAndSetFuncHashMapStringStructTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMapAndSetFuncHashMapStringStructTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_map_string_struct_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<String, MySize>>
      crateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapStringStructTwinRustAsync(
          {required Map<String, MySize> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_my_size_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 667, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_my_size_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapStringStructTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapStringStructTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_map_string_struct_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Map<String, MySize>
      crateApiPseudoManualMapAndSetTwinSyncFuncHashMapStringStructTwinSync(
          {required Map<String, MySize> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_my_size_None(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 668)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_my_size_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMapAndSetTwinSyncFuncHashMapStringStructTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMapAndSetTwinSyncFuncHashMapStringStructTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_map_string_struct_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<Set<int>> crateApiMapAndSetFuncHashSetI32TwinNormal(
      {required Set<int> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Set_i_32_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 669, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Set_i_32_None,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMapAndSetFuncHashSetI32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMapAndSetFuncHashSetI32TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_hash_set_i32_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Set<int>>
      crateApiPseudoManualMapAndSetTwinRustAsyncFuncHashSetI32TwinRustAsync(
          {required Set<int> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Set_i_32_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 670, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Set_i_32_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMapAndSetTwinRustAsyncFuncHashSetI32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMapAndSetTwinRustAsyncFuncHashSetI32TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_set_i32_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Set<int> crateApiPseudoManualMapAndSetTwinSyncFuncHashSetI32TwinSync(
      {required Set<int> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Set_i_32_None(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 671)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Set_i_32_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMapAndSetTwinSyncFuncHashSetI32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMapAndSetTwinSyncFuncHashSetI32TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_set_i32_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<Set<String>> crateApiMapAndSetFuncHashSetStringHasherTwinNormal(
      {required Set<String> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Set_String_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinNormal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 672, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Set_String_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinNormal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMapAndSetFuncHashSetStringHasherTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMapAndSetFuncHashSetStringHasherTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_set_string_hasher_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Set<String>>
      crateApiPseudoManualMapAndSetTwinRustAsyncFuncHashSetStringHasherTwinRustAsync(
          {required Set<String> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Set_String_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinRustAsync(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 673, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Set_String_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinRustAsync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMapAndSetTwinRustAsyncFuncHashSetStringHasherTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMapAndSetTwinRustAsyncFuncHashSetStringHasherTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_set_string_hasher_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Set<String>
      crateApiPseudoManualMapAndSetTwinSyncFuncHashSetStringHasherTwinSync(
          {required Set<String> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Set_String_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinSync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 674)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Set_String_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMapAndSetTwinSyncFuncHashSetStringHasherTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMapAndSetTwinSyncFuncHashSetStringHasherTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_set_string_hasher_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<Set<String>> crateApiMapAndSetFuncHashSetStringTwinNormal(
      {required Set<String> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Set_String_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 675, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Set_String_None,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMapAndSetFuncHashSetStringTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMapAndSetFuncHashSetStringTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_hash_set_string_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Set<String>>
      crateApiPseudoManualMapAndSetTwinRustAsyncFuncHashSetStringTwinRustAsync(
          {required Set<String> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Set_String_None(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 676, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Set_String_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMapAndSetTwinRustAsyncFuncHashSetStringTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMapAndSetTwinRustAsyncFuncHashSetStringTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_set_string_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Set<String> crateApiPseudoManualMapAndSetTwinSyncFuncHashSetStringTwinSync(
      {required Set<String> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Set_String_None(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 677)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Set_String_None,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMapAndSetTwinSyncFuncHashSetStringTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMapAndSetTwinSyncFuncHashSetStringTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_set_string_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<MacroStruct> crateApiInsideMacroFuncMacroStructTwinNormal(
      {required MacroStruct arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_macro_struct(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 678, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_macro_struct,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiInsideMacroFuncMacroStructTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInsideMacroFuncMacroStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_macro_struct_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<int> crateApiExceptionFuncReturnErrorTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 679, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiExceptionFuncReturnErrorTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiExceptionFuncReturnErrorTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_return_error_twin_normal",
        argNames: [],
      );

  @override
  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncFuncReturnErrorTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 680, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncFuncReturnErrorTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncFuncReturnErrorTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_return_error_twin_rust_async",
            argNames: [],
          );

  @override
  int crateApiPseudoManualExceptionTwinSyncFuncReturnErrorTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 681)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncFuncReturnErrorTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncFuncReturnErrorTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_return_error_twin_sync",
            argNames: [],
          );

  @override
  Future<void> crateApiMiscTypeFuncReturnUnitTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 682, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMiscTypeFuncReturnUnitTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMiscTypeFuncReturnUnitTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_return_unit_twin_normal",
        argNames: [],
      );

  @override
  Future<void>
      crateApiPseudoManualMiscTypeTwinRustAsyncFuncReturnUnitTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 683, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscTypeTwinRustAsyncFuncReturnUnitTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscTypeTwinRustAsyncFuncReturnUnitTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_return_unit_twin_rust_async",
            argNames: [],
          );

  @override
  void crateApiPseudoManualMiscTypeTwinSyncFuncReturnUnitTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 684)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscTypeTwinSyncFuncReturnUnitTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscTypeTwinSyncFuncReturnUnitTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_return_unit_twin_sync",
            argNames: [],
          );

  @override
  Stream<int> crateApiStreamFuncStreamAddValueAndErrorTwinNormal() {
    final sink = RustStreamSink<int>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_i_32_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 685, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStreamFuncStreamAddValueAndErrorTwinNormalConstMeta,
      argValues: [sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiStreamFuncStreamAddValueAndErrorTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "func_stream_add_value_and_error_twin_normal",
            argNames: ["sink"],
          );

  @override
  Stream<int>
      crateApiPseudoManualStreamTwinRustAsyncFuncStreamAddValueAndErrorTwinRustAsync() {
    final sink = RustStreamSink<int>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_i_32_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 686, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualStreamTwinRustAsyncFuncStreamAddValueAndErrorTwinRustAsyncConstMeta,
      argValues: [sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualStreamTwinRustAsyncFuncStreamAddValueAndErrorTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_stream_add_value_and_error_twin_rust_async",
            argNames: ["sink"],
          );

  @override
  Stream<String> crateApiStreamMiscFuncStreamRealisticTwinNormal(
      {required String arg}) {
    final sink = RustStreamSink<String>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_String_Sse(sink, serializer);
        sse_encode_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 687, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStreamMiscFuncStreamRealisticTwinNormalConstMeta,
      argValues: [sink, arg],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiStreamMiscFuncStreamRealisticTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_stream_realistic_twin_normal",
        argNames: ["sink", "arg"],
      );

  @override
  Future<Stream<String>> crateApiStreamFuncStreamReturnErrorTwinNormal() async {
    final sink = RustStreamSink<String>();
    await handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_String_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 688, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiStreamFuncStreamReturnErrorTwinNormalConstMeta,
      argValues: [sink],
      apiImpl: this,
    ));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiStreamFuncStreamReturnErrorTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_stream_return_error_twin_normal",
        argNames: ["sink"],
      );

  @override
  Future<Stream<String>>
      crateApiPseudoManualStreamTwinRustAsyncFuncStreamReturnErrorTwinRustAsync() async {
    final sink = RustStreamSink<String>();
    await handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_String_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 689, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualStreamTwinRustAsyncFuncStreamReturnErrorTwinRustAsyncConstMeta,
      argValues: [sink],
      apiImpl: this,
    ));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualStreamTwinRustAsyncFuncStreamReturnErrorTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_stream_return_error_twin_rust_async",
            argNames: ["sink"],
          );

  @override
  Future<Stream<String>> crateApiStreamFuncStreamReturnPanicTwinNormal() async {
    final sink = RustStreamSink<String>();
    await handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_String_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 690, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiStreamFuncStreamReturnPanicTwinNormalConstMeta,
      argValues: [sink],
      apiImpl: this,
    ));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiStreamFuncStreamReturnPanicTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_stream_return_panic_twin_normal",
        argNames: ["sink"],
      );

  @override
  Future<Stream<String>>
      crateApiPseudoManualStreamTwinRustAsyncFuncStreamReturnPanicTwinRustAsync() async {
    final sink = RustStreamSink<String>();
    await handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_String_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 691, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualStreamTwinRustAsyncFuncStreamReturnPanicTwinRustAsyncConstMeta,
      argValues: [sink],
      apiImpl: this,
    ));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualStreamTwinRustAsyncFuncStreamReturnPanicTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_stream_return_panic_twin_rust_async",
            argNames: ["sink"],
          );

  @override
  Stream<int> crateApiStreamFuncStreamSinkArgPositionTwinNormal(
      {required int a, required int b}) {
    final c = RustStreamSink<int>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(a, serializer);
        sse_encode_u_32(b, serializer);
        sse_encode_StreamSink_u_32_Sse(c, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 692, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStreamFuncStreamSinkArgPositionTwinNormalConstMeta,
      argValues: [a, b, c],
      apiImpl: this,
    )));
    return c.stream;
  }

  TaskConstMeta
      get kCrateApiStreamFuncStreamSinkArgPositionTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "func_stream_sink_arg_position_twin_normal",
            argNames: ["a", "b", "c"],
          );

  @override
  Stream<int>
      crateApiPseudoManualStreamTwinRustAsyncFuncStreamSinkArgPositionTwinRustAsync(
          {required int a, required int b}) {
    final c = RustStreamSink<int>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(a, serializer);
        sse_encode_u_32(b, serializer);
        sse_encode_StreamSink_u_32_Sse(c, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 693, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualStreamTwinRustAsyncFuncStreamSinkArgPositionTwinRustAsyncConstMeta,
      argValues: [a, b, c],
      apiImpl: this,
    )));
    return c.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualStreamTwinRustAsyncFuncStreamSinkArgPositionTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_stream_sink_arg_position_twin_rust_async",
            argNames: ["a", "b", "c"],
          );

  @override
  Future<StructWithOneFieldTwinNormal>
      crateApiStructureFuncStructWithOneFieldTwinNormal(
          {required StructWithOneFieldTwinNormal arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_one_field_twin_normal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 694, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_with_one_field_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructureFuncStructWithOneFieldTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiStructureFuncStructWithOneFieldTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "func_struct_with_one_field_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<StructWithOneFieldTwinRustAsync>
      crateApiPseudoManualStructureTwinRustAsyncFuncStructWithOneFieldTwinRustAsync(
          {required StructWithOneFieldTwinRustAsync arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_one_field_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 695, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_with_one_field_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualStructureTwinRustAsyncFuncStructWithOneFieldTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualStructureTwinRustAsyncFuncStructWithOneFieldTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_struct_with_one_field_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  StructWithOneFieldTwinSync
      crateApiPseudoManualStructureTwinSyncFuncStructWithOneFieldTwinSync(
          {required StructWithOneFieldTwinSync arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_one_field_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 696)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_with_one_field_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualStructureTwinSyncFuncStructWithOneFieldTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualStructureTwinSyncFuncStructWithOneFieldTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_struct_with_one_field_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<StructWithTwoFieldTwinNormal>
      crateApiStructureFuncStructWithTwoFieldTwinNormal(
          {required StructWithTwoFieldTwinNormal arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_two_field_twin_normal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 697, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_with_two_field_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructureFuncStructWithTwoFieldTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiStructureFuncStructWithTwoFieldTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "func_struct_with_two_field_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<StructWithTwoFieldTwinRustAsync>
      crateApiPseudoManualStructureTwinRustAsyncFuncStructWithTwoFieldTwinRustAsync(
          {required StructWithTwoFieldTwinRustAsync arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_two_field_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 698, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_with_two_field_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualStructureTwinRustAsyncFuncStructWithTwoFieldTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualStructureTwinRustAsyncFuncStructWithTwoFieldTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_struct_with_two_field_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  StructWithTwoFieldTwinSync
      crateApiPseudoManualStructureTwinSyncFuncStructWithTwoFieldTwinSync(
          {required StructWithTwoFieldTwinSync arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_two_field_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 699)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_with_two_field_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualStructureTwinSyncFuncStructWithTwoFieldTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualStructureTwinSyncFuncStructWithTwoFieldTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_struct_with_two_field_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<StructWithZeroFieldTwinNormal>
      crateApiStructureFuncStructWithZeroFieldTwinNormal(
          {required StructWithZeroFieldTwinNormal arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_zero_field_twin_normal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 700, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_with_zero_field_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructureFuncStructWithZeroFieldTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiStructureFuncStructWithZeroFieldTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "func_struct_with_zero_field_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<StructWithZeroFieldTwinRustAsync>
      crateApiPseudoManualStructureTwinRustAsyncFuncStructWithZeroFieldTwinRustAsync(
          {required StructWithZeroFieldTwinRustAsync arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_zero_field_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 701, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_with_zero_field_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualStructureTwinRustAsyncFuncStructWithZeroFieldTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualStructureTwinRustAsyncFuncStructWithZeroFieldTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_struct_with_zero_field_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  StructWithZeroFieldTwinSync
      crateApiPseudoManualStructureTwinSyncFuncStructWithZeroFieldTwinSync(
          {required StructWithZeroFieldTwinSync arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_zero_field_twin_sync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 702)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_with_zero_field_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualStructureTwinSyncFuncStructWithZeroFieldTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualStructureTwinSyncFuncStructWithZeroFieldTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_struct_with_zero_field_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<TestIdTwinNormal> crateApiArrayFuncTestIdTwinNormal(
      {required TestIdTwinNormal id}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_test_id_twin_normal(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 703, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_test_id_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiArrayFuncTestIdTwinNormalConstMeta,
      argValues: [id],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiArrayFuncTestIdTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_test_id_twin_normal",
        argNames: ["id"],
      );

  @override
  Future<TestIdTwinRustAsync>
      crateApiPseudoManualArrayTwinRustAsyncFuncTestIdTwinRustAsync(
          {required TestIdTwinRustAsync id}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_test_id_twin_rust_async(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 704, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_test_id_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualArrayTwinRustAsyncFuncTestIdTwinRustAsyncConstMeta,
      argValues: [id],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualArrayTwinRustAsyncFuncTestIdTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_test_id_twin_rust_async",
            argNames: ["id"],
          );

  @override
  TestIdTwinSync crateApiPseudoManualArrayTwinSyncFuncTestIdTwinSync(
      {required TestIdTwinSync id}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_test_id_twin_sync(id, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 705)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_test_id_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPseudoManualArrayTwinSyncFuncTestIdTwinSyncConstMeta,
      argValues: [id],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualArrayTwinSyncFuncTestIdTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_test_id_twin_sync",
            argNames: ["id"],
          );

  @override
  Future<TupleStructWithOneFieldTwinNormal>
      crateApiStructureFuncTupleStructWithOneFieldTwinNormal(
          {required TupleStructWithOneFieldTwinNormal arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_tuple_struct_with_one_field_twin_normal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 706, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_tuple_struct_with_one_field_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiStructureFuncTupleStructWithOneFieldTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiStructureFuncTupleStructWithOneFieldTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "func_tuple_struct_with_one_field_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<TupleStructWithOneFieldTwinRustAsync>
      crateApiPseudoManualStructureTwinRustAsyncFuncTupleStructWithOneFieldTwinRustAsync(
          {required TupleStructWithOneFieldTwinRustAsync arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_tuple_struct_with_one_field_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 707, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_tuple_struct_with_one_field_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualStructureTwinRustAsyncFuncTupleStructWithOneFieldTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualStructureTwinRustAsyncFuncTupleStructWithOneFieldTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_tuple_struct_with_one_field_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  TupleStructWithOneFieldTwinSync
      crateApiPseudoManualStructureTwinSyncFuncTupleStructWithOneFieldTwinSync(
          {required TupleStructWithOneFieldTwinSync arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_tuple_struct_with_one_field_twin_sync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 708)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_tuple_struct_with_one_field_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualStructureTwinSyncFuncTupleStructWithOneFieldTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualStructureTwinSyncFuncTupleStructWithOneFieldTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_tuple_struct_with_one_field_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<TupleStructWithTwoFieldTwinNormal>
      crateApiStructureFuncTupleStructWithTwoFieldTwinNormal(
          {required TupleStructWithTwoFieldTwinNormal arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_tuple_struct_with_two_field_twin_normal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 709, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_tuple_struct_with_two_field_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiStructureFuncTupleStructWithTwoFieldTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiStructureFuncTupleStructWithTwoFieldTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "func_tuple_struct_with_two_field_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<TupleStructWithTwoFieldTwinRustAsync>
      crateApiPseudoManualStructureTwinRustAsyncFuncTupleStructWithTwoFieldTwinRustAsync(
          {required TupleStructWithTwoFieldTwinRustAsync arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_tuple_struct_with_two_field_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 710, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_tuple_struct_with_two_field_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualStructureTwinRustAsyncFuncTupleStructWithTwoFieldTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualStructureTwinRustAsyncFuncTupleStructWithTwoFieldTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_tuple_struct_with_two_field_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  TupleStructWithTwoFieldTwinSync
      crateApiPseudoManualStructureTwinSyncFuncTupleStructWithTwoFieldTwinSync(
          {required TupleStructWithTwoFieldTwinSync arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_tuple_struct_with_two_field_twin_sync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 711)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_tuple_struct_with_two_field_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualStructureTwinSyncFuncTupleStructWithTwoFieldTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualStructureTwinSyncFuncTupleStructWithTwoFieldTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_tuple_struct_with_two_field_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<int> crateApiExceptionFuncTypeFalliblePanicTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 712, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiExceptionFuncTypeFalliblePanicTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiExceptionFuncTypeFalliblePanicTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "func_type_fallible_panic_twin_normal",
            argNames: [],
          );

  @override
  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncFuncTypeFalliblePanicTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 713, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncFuncTypeFalliblePanicTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncFuncTypeFalliblePanicTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_type_fallible_panic_twin_rust_async",
            argNames: [],
          );

  @override
  int crateApiPseudoManualExceptionTwinSyncFuncTypeFalliblePanicTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 714)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncFuncTypeFalliblePanicTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncFuncTypeFalliblePanicTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_type_fallible_panic_twin_sync",
            argNames: [],
          );

  @override
  Future<int> crateApiExceptionFuncTypeInfalliblePanicTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 715, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiExceptionFuncTypeInfalliblePanicTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiExceptionFuncTypeInfalliblePanicTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "func_type_infallible_panic_twin_normal",
            argNames: [],
          );

  @override
  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncFuncTypeInfalliblePanicTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 716, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncFuncTypeInfalliblePanicTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncFuncTypeInfalliblePanicTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_type_infallible_panic_twin_rust_async",
            argNames: [],
          );

  @override
  int crateApiPseudoManualExceptionTwinSyncFuncTypeInfalliblePanicTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 717)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncFuncTypeInfalliblePanicTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncFuncTypeInfalliblePanicTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_type_infallible_panic_twin_sync",
            argNames: [],
          );

  @override
  Future<InternetAddress> crateApiCustomSerDesFuncUsingIpv4Addr(
      {required InternetAddress arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIpv4Addr(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 718, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIpv4Addr,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiCustomSerDesFuncUsingIpv4AddrConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCustomSerDesFuncUsingIpv4AddrConstMeta =>
      const TaskConstMeta(
        debugName: "func_using_ipv4_addr",
        argNames: ["arg"],
      );

  @override
  Future<NonOpaqueStructContainingIpv4Addr>
      crateApiCustomSerDesFuncUsingNonOpaqueStructContainingIpv4Addr(
          {required NonOpaqueStructContainingIpv4Addr arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_non_opaque_struct_containing_ipv_4_addr(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 719, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_non_opaque_struct_containing_ipv_4_addr,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiCustomSerDesFuncUsingNonOpaqueStructContainingIpv4AddrConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiCustomSerDesFuncUsingNonOpaqueStructContainingIpv4AddrConstMeta =>
          const TaskConstMeta(
            debugName: "func_using_non_opaque_struct_containing_ipv4_addr",
            argNames: ["arg"],
          );

  @override
  Future<void> crateApiFunctionAtApiModRs() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 720, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiFunctionAtApiModRsConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiFunctionAtApiModRsConstMeta => const TaskConstMeta(
        debugName: "function_at_api_mod_rs",
        argNames: [],
      );

  @override
  Future<StructWithCastedPrimitiveTwinNormal>
      crateApiCastedPrimitiveFunctionForStructWithCastedPrimitiveTwinNormal(
          {required StructWithCastedPrimitiveTwinNormal arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_casted_primitive_twin_normal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 721, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_with_casted_primitive_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiCastedPrimitiveFunctionForStructWithCastedPrimitiveTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiCastedPrimitiveFunctionForStructWithCastedPrimitiveTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "function_for_struct_with_casted_primitive_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<int> crateApiCustomSerDesFunctionUsingTypeWithCustomSerializer(
      {required int arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageWithCustomSerializerTwinNormal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 722, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageWithCustomSerializerTwinNormal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiCustomSerDesFunctionUsingTypeWithCustomSerializerConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiCustomSerDesFunctionUsingTypeWithCustomSerializerConstMeta =>
          const TaskConstMeta(
            debugName: "function_using_type_with_custom_serializer",
            argNames: ["arg"],
          );

  @override
  Future<void> crateApiMiscNoTwinExampleAFunctionWithArgTypeNameOverride(
      {required BoxAnyMyDartTypeRename a}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynAnySendSyncstatic(
            a, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 723, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleAFunctionWithArgTypeNameOverrideConstMeta,
      argValues: [a],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleAFunctionWithArgTypeNameOverrideConstMeta =>
          const TaskConstMeta(
            debugName: "function_with_arg_type_name_override",
            argNames: ["a"],
          );

  @override
  Future<void> crateApiCommentFunctionWithCommentsSlashStarStarTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 724, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiCommentFunctionWithCommentsSlashStarStarTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiCommentFunctionWithCommentsSlashStarStarTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "function_with_comments_slash_star_star_twin_normal",
            argNames: [],
          );

  @override
  Future<void>
      crateApiPseudoManualCommentTwinRustAsyncFunctionWithCommentsSlashStarStarTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 725, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualCommentTwinRustAsyncFunctionWithCommentsSlashStarStarTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualCommentTwinRustAsyncFunctionWithCommentsSlashStarStarTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "function_with_comments_slash_star_star_twin_rust_async",
            argNames: [],
          );

  @override
  void
      crateApiPseudoManualCommentTwinSyncFunctionWithCommentsSlashStarStarTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 726)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualCommentTwinSyncFunctionWithCommentsSlashStarStarTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualCommentTwinSyncFunctionWithCommentsSlashStarStarTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "function_with_comments_slash_star_star_twin_sync",
            argNames: [],
          );

  @override
  Future<void>
      crateApiCommentFunctionWithCommentsTripleSlashMultiLineTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 727, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiCommentFunctionWithCommentsTripleSlashMultiLineTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiCommentFunctionWithCommentsTripleSlashMultiLineTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "function_with_comments_triple_slash_multi_line_twin_normal",
            argNames: [],
          );

  @override
  Future<void>
      crateApiPseudoManualCommentTwinRustAsyncFunctionWithCommentsTripleSlashMultiLineTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 728, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualCommentTwinRustAsyncFunctionWithCommentsTripleSlashMultiLineTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualCommentTwinRustAsyncFunctionWithCommentsTripleSlashMultiLineTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "function_with_comments_triple_slash_multi_line_twin_rust_async",
            argNames: [],
          );

  @override
  void
      crateApiPseudoManualCommentTwinSyncFunctionWithCommentsTripleSlashMultiLineTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 729)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualCommentTwinSyncFunctionWithCommentsTripleSlashMultiLineTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualCommentTwinSyncFunctionWithCommentsTripleSlashMultiLineTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "function_with_comments_triple_slash_multi_line_twin_sync",
            argNames: [],
          );

  @override
  Future<void>
      crateApiCommentFunctionWithCommentsTripleSlashSingleLineTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 730, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiCommentFunctionWithCommentsTripleSlashSingleLineTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiCommentFunctionWithCommentsTripleSlashSingleLineTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "function_with_comments_triple_slash_single_line_twin_normal",
            argNames: [],
          );

  @override
  Future<void>
      crateApiPseudoManualCommentTwinRustAsyncFunctionWithCommentsTripleSlashSingleLineTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 731, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualCommentTwinRustAsyncFunctionWithCommentsTripleSlashSingleLineTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualCommentTwinRustAsyncFunctionWithCommentsTripleSlashSingleLineTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "function_with_comments_triple_slash_single_line_twin_rust_async",
            argNames: [],
          );

  @override
  void
      crateApiPseudoManualCommentTwinSyncFunctionWithCommentsTripleSlashSingleLineTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 732)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualCommentTwinSyncFunctionWithCommentsTripleSlashSingleLineTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualCommentTwinSyncFunctionWithCommentsTripleSlashSingleLineTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "function_with_comments_triple_slash_single_line_twin_sync",
            argNames: [],
          );

  @override
  Future<void> crateApiMiscNoTwinExampleAFunctionWithCustomNameTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 733, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleAFunctionWithCustomNameTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleAFunctionWithCustomNameTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "function_with_custom_name_twin_normal(dart_style=renamedFunction)",
            argNames: [],
          );

  @override
  Future<ApplicationSettings> crateApiMirrorGetAppSettingsTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 734, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_application_settings,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMirrorGetAppSettingsTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMirrorGetAppSettingsTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "get_app_settings_twin_normal",
        argNames: [],
      );

  @override
  Future<ApplicationSettings>
      crateApiPseudoManualMirrorTwinRustAsyncGetAppSettingsTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 735, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_application_settings,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncGetAppSettingsTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncGetAppSettingsTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "get_app_settings_twin_rust_async",
            argNames: [],
          );

  @override
  ApplicationSettings
      crateApiPseudoManualMirrorTwinSyncGetAppSettingsTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 736)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_application_settings,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncGetAppSettingsTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncGetAppSettingsTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "get_app_settings_twin_sync",
            argNames: [],
          );

  @override
  Future<U8Array5> crateApiArrayGetArrayTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 737, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8_array_5,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiArrayGetArrayTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiArrayGetArrayTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "get_array_twin_normal",
        argNames: [],
      );

  @override
  Future<U8Array5>
      crateApiPseudoManualArrayTwinRustAsyncGetArrayTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 738, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8_array_5,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualArrayTwinRustAsyncGetArrayTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualArrayTwinRustAsyncGetArrayTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "get_array_twin_rust_async",
            argNames: [],
          );

  @override
  U8Array5 crateApiPseudoManualArrayTwinSyncGetArrayTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 739)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8_array_5,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPseudoManualArrayTwinSyncGetArrayTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualArrayTwinSyncGetArrayTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "get_array_twin_sync",
            argNames: [],
          );

  @override
  Future<PointTwinNormalArray2> crateApiArrayGetComplexArrayTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 740, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_point_twin_normal_array_2,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiArrayGetComplexArrayTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiArrayGetComplexArrayTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "get_complex_array_twin_normal",
        argNames: [],
      );

  @override
  Future<PointTwinRustAsyncArray2>
      crateApiPseudoManualArrayTwinRustAsyncGetComplexArrayTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 741, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_point_twin_rust_async_array_2,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualArrayTwinRustAsyncGetComplexArrayTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualArrayTwinRustAsyncGetComplexArrayTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "get_complex_array_twin_rust_async",
            argNames: [],
          );

  @override
  PointTwinSyncArray2
      crateApiPseudoManualArrayTwinSyncGetComplexArrayTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 742)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_point_twin_sync_array_2,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualArrayTwinSyncGetComplexArrayTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualArrayTwinSyncGetComplexArrayTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "get_complex_array_twin_sync",
            argNames: [],
          );

  @override
  Future<void> crateApiDartOpaqueGetEnumDartOpaqueTwinNormal(
      {required EnumDartOpaqueTwinNormal opaque}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_dart_opaque_twin_normal(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 743, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartOpaqueGetEnumDartOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartOpaqueGetEnumDartOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "get_enum_dart_opaque_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<void>
      crateApiPseudoManualDartOpaqueTwinRustAsyncGetEnumDartOpaqueTwinRustAsync(
          {required EnumDartOpaqueTwinRustAsync opaque}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_dart_opaque_twin_rust_async(
            opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 744, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinRustAsyncGetEnumDartOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinRustAsyncGetEnumDartOpaqueTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "get_enum_dart_opaque_twin_rust_async",
            argNames: ["opaque"],
          );

  @override
  void crateApiPseudoManualDartOpaqueTwinSyncGetEnumDartOpaqueTwinSync(
      {required EnumDartOpaqueTwinSync opaque}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_dart_opaque_twin_sync(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 745)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinSyncGetEnumDartOpaqueTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinSyncGetEnumDartOpaqueTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "get_enum_dart_opaque_twin_sync",
            argNames: ["opaque"],
          );

  @override
  Future<ApplicationSettings> crateApiMirrorGetFallibleAppSettingsTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 746, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_application_settings,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiMirrorGetFallibleAppSettingsTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMirrorGetFallibleAppSettingsTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "get_fallible_app_settings_twin_normal",
        argNames: [],
      );

  @override
  Future<ApplicationSettings>
      crateApiPseudoManualMirrorTwinRustAsyncGetFallibleAppSettingsTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 747, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_application_settings,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncGetFallibleAppSettingsTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncGetFallibleAppSettingsTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "get_fallible_app_settings_twin_rust_async",
            argNames: [],
          );

  @override
  ApplicationSettings
      crateApiPseudoManualMirrorTwinSyncGetFallibleAppSettingsTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 748)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_application_settings,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncGetFallibleAppSettingsTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncGetFallibleAppSettingsTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "get_fallible_app_settings_twin_sync",
            argNames: [],
          );

  @override
  Future<ApplicationMessage> crateApiMirrorGetMessageTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 749, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_application_message,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMirrorGetMessageTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMirrorGetMessageTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "get_message_twin_normal",
        argNames: [],
      );

  @override
  Future<ApplicationMessage>
      crateApiPseudoManualMirrorTwinRustAsyncGetMessageTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 750, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_application_message,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncGetMessageTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncGetMessageTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "get_message_twin_rust_async",
            argNames: [],
          );

  @override
  ApplicationMessage crateApiPseudoManualMirrorTwinSyncGetMessageTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 751)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_application_message,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPseudoManualMirrorTwinSyncGetMessageTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncGetMessageTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "get_message_twin_sync",
            argNames: [],
          );

  @override
  Future<void> crateApiDartOpaqueGetNestedDartOpaqueTwinNormal(
      {required DartOpaqueNestedTwinNormal opaque}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_dart_opaque_nested_twin_normal(
            opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 752, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartOpaqueGetNestedDartOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartOpaqueGetNestedDartOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "get_nested_dart_opaque_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<void>
      crateApiPseudoManualDartOpaqueTwinRustAsyncGetNestedDartOpaqueTwinRustAsync(
          {required DartOpaqueNestedTwinRustAsync opaque}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_dart_opaque_nested_twin_rust_async(
            opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 753, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinRustAsyncGetNestedDartOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinRustAsyncGetNestedDartOpaqueTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "get_nested_dart_opaque_twin_rust_async",
            argNames: ["opaque"],
          );

  @override
  void crateApiPseudoManualDartOpaqueTwinSyncGetNestedDartOpaqueTwinSync(
      {required DartOpaqueNestedTwinSync opaque}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_dart_opaque_nested_twin_sync(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 754)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinSyncGetNestedDartOpaqueTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinSyncGetNestedDartOpaqueTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "get_nested_dart_opaque_twin_sync",
            argNames: ["opaque"],
          );

  @override
  Future<SumWithTwinNormalArray3> crateApiMethodGetSumArrayTwinNormal(
      {required int a, required int b, required int c}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(a, serializer);
        sse_encode_u_32(b, serializer);
        sse_encode_u_32(c, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 755, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_sum_with_twin_normal_array_3,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMethodGetSumArrayTwinNormalConstMeta,
      argValues: [a, b, c],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMethodGetSumArrayTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "get_sum_array_twin_normal",
        argNames: ["a", "b", "c"],
      );

  @override
  Future<SumWithTwinRustAsyncArray3>
      crateApiPseudoManualMethodTwinRustAsyncGetSumArrayTwinRustAsync(
          {required int a, required int b, required int c}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(a, serializer);
        sse_encode_u_32(b, serializer);
        sse_encode_u_32(c, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 756, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_sum_with_twin_rust_async_array_3,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinRustAsyncGetSumArrayTwinRustAsyncConstMeta,
      argValues: [a, b, c],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinRustAsyncGetSumArrayTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "get_sum_array_twin_rust_async",
            argNames: ["a", "b", "c"],
          );

  @override
  SumWithTwinSyncArray3 crateApiPseudoManualMethodTwinSyncGetSumArrayTwinSync(
      {required int a, required int b, required int c}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(a, serializer);
        sse_encode_u_32(b, serializer);
        sse_encode_u_32(c, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 757)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_sum_with_twin_sync_array_3,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinSyncGetSumArrayTwinSyncConstMeta,
      argValues: [a, b, c],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinSyncGetSumArrayTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "get_sum_array_twin_sync",
            argNames: ["a", "b", "c"],
          );

  @override
  Future<SumWithTwinNormal> crateApiMethodGetSumStructTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 758, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_sum_with_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMethodGetSumStructTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMethodGetSumStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "get_sum_struct_twin_normal",
        argNames: [],
      );

  @override
  Future<SumWithTwinRustAsync>
      crateApiPseudoManualMethodTwinRustAsyncGetSumStructTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 759, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_sum_with_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinRustAsyncGetSumStructTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinRustAsyncGetSumStructTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "get_sum_struct_twin_rust_async",
            argNames: [],
          );

  @override
  SumWithTwinSync crateApiPseudoManualMethodTwinSyncGetSumStructTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 760)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_sum_with_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinSyncGetSumStructTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinSyncGetSumStructTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "get_sum_struct_twin_sync",
            argNames: [],
          );

  @override
  Future<BigBuffersTwinNormal> crateApiMiscExampleHandleBigBuffersTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 761, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_big_buffers_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMiscExampleHandleBigBuffersTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMiscExampleHandleBigBuffersTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_big_buffers_twin_normal",
        argNames: [],
      );

  @override
  Future<BigBuffersTwinRustAsync>
      crateApiPseudoManualMiscExampleTwinRustAsyncHandleBigBuffersTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 762, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_big_buffers_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscExampleTwinRustAsyncHandleBigBuffersTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscExampleTwinRustAsyncHandleBigBuffersTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_big_buffers_twin_rust_async",
            argNames: [],
          );

  @override
  BigBuffersTwinSync
      crateApiPseudoManualMiscExampleTwinSyncHandleBigBuffersTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 763)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_big_buffers_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscExampleTwinSyncHandleBigBuffersTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscExampleTwinSyncHandleBigBuffersTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_big_buffers_twin_sync",
            argNames: [],
          );

  @override
  Future<String> crateApiMiscExampleHandleCharTwinNormal(
      {required String arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Char(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 764, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Char,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMiscExampleHandleCharTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMiscExampleHandleCharTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_char_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<String>
      crateApiPseudoManualMiscExampleTwinRustAsyncHandleCharTwinRustAsync(
          {required String arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Char(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 765, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Char,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscExampleTwinRustAsyncHandleCharTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscExampleTwinRustAsyncHandleCharTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_char_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  String crateApiPseudoManualMiscExampleTwinSyncHandleCharTwinSync(
      {required String arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Char(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 766)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Char,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscExampleTwinSyncHandleCharTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscExampleTwinSyncHandleCharTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_char_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<MyTreeNodeTwinNormal> crateApiMiscExampleHandleComplexStructTwinNormal(
      {required MyTreeNodeTwinNormal s}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_tree_node_twin_normal(s, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 767, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_my_tree_node_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMiscExampleHandleComplexStructTwinNormalConstMeta,
      argValues: [s],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscExampleHandleComplexStructTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "handle_complex_struct_twin_normal",
            argNames: ["s"],
          );

  @override
  Future<MyTreeNodeTwinRustAsync>
      crateApiPseudoManualMiscExampleTwinRustAsyncHandleComplexStructTwinRustAsync(
          {required MyTreeNodeTwinRustAsync s}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_tree_node_twin_rust_async(s, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 768, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_my_tree_node_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscExampleTwinRustAsyncHandleComplexStructTwinRustAsyncConstMeta,
      argValues: [s],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscExampleTwinRustAsyncHandleComplexStructTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_complex_struct_twin_rust_async",
            argNames: ["s"],
          );

  @override
  MyTreeNodeTwinSync
      crateApiPseudoManualMiscExampleTwinSyncHandleComplexStructTwinSync(
          {required MyTreeNodeTwinSync s}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_tree_node_twin_sync(s, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 769)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_my_tree_node_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscExampleTwinSyncHandleComplexStructTwinSyncConstMeta,
      argValues: [s],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscExampleTwinSyncHandleComplexStructTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_complex_struct_twin_sync",
            argNames: ["s"],
          );

  @override
  Future<void> crateApiAttributeHandleCustomizedStructTwinNormal(
      {required CustomizedTwinNormal val}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_customized_twin_normal(val, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 770, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAttributeHandleCustomizedStructTwinNormalConstMeta,
      argValues: [val],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiAttributeHandleCustomizedStructTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "handle_customized_struct_twin_normal",
            argNames: ["val"],
          );

  @override
  Future<void>
      crateApiPseudoManualAttributeTwinRustAsyncHandleCustomizedStructTwinRustAsync(
          {required CustomizedTwinRustAsync val}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_customized_twin_rust_async(val, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 771, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualAttributeTwinRustAsyncHandleCustomizedStructTwinRustAsyncConstMeta,
      argValues: [val],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualAttributeTwinRustAsyncHandleCustomizedStructTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_customized_struct_twin_rust_async",
            argNames: ["val"],
          );

  @override
  void crateApiPseudoManualAttributeTwinSyncHandleCustomizedStructTwinSync(
      {required CustomizedTwinSync val}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_customized_twin_sync(val, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 772)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualAttributeTwinSyncHandleCustomizedStructTwinSyncConstMeta,
      argValues: [val],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualAttributeTwinSyncHandleCustomizedStructTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_customized_struct_twin_sync",
            argNames: ["val"],
          );

  @override
  Future<List<DateTime>> crateApiChronoTypeHandleDurationsTwinNormal(
      {required List<Duration> durations, required DateTime since}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_Chrono_Duration(durations, serializer);
        sse_encode_Chrono_Local(since, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 773, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_Chrono_Local,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiChronoTypeHandleDurationsTwinNormalConstMeta,
      argValues: [durations, since],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiChronoTypeHandleDurationsTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_durations_twin_normal",
        argNames: ["durations", "since"],
      );

  @override
  Future<List<DateTime>>
      crateApiPseudoManualChronoTypeTwinRustAsyncHandleDurationsTwinRustAsync(
          {required List<Duration> durations, required DateTime since}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_Chrono_Duration(durations, serializer);
        sse_encode_Chrono_Local(since, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 774, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_Chrono_Local,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualChronoTypeTwinRustAsyncHandleDurationsTwinRustAsyncConstMeta,
      argValues: [durations, since],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualChronoTypeTwinRustAsyncHandleDurationsTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_durations_twin_rust_async",
            argNames: ["durations", "since"],
          );

  @override
  List<DateTime> crateApiPseudoManualChronoTypeTwinSyncHandleDurationsTwinSync(
      {required List<Duration> durations, required DateTime since}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_Chrono_Duration(durations, serializer);
        sse_encode_Chrono_Local(since, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 775)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_Chrono_Local,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualChronoTypeTwinSyncHandleDurationsTwinSyncConstMeta,
      argValues: [durations, since],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualChronoTypeTwinSyncHandleDurationsTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_durations_twin_sync",
            argNames: ["durations", "since"],
          );

  @override
  Future<WeekdaysTwinNormal> crateApiEnumerationHandleEnumParameterTwinNormal(
      {required WeekdaysTwinNormal weekday}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_weekdays_twin_normal(weekday, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 776, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_weekdays_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEnumerationHandleEnumParameterTwinNormalConstMeta,
      argValues: [weekday],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiEnumerationHandleEnumParameterTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "handle_enum_parameter_twin_normal",
            argNames: ["weekday"],
          );

  @override
  Future<WeekdaysTwinRustAsync>
      crateApiPseudoManualEnumerationTwinRustAsyncHandleEnumParameterTwinRustAsync(
          {required WeekdaysTwinRustAsync weekday}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_weekdays_twin_rust_async(weekday, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 777, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_weekdays_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualEnumerationTwinRustAsyncHandleEnumParameterTwinRustAsyncConstMeta,
      argValues: [weekday],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualEnumerationTwinRustAsyncHandleEnumParameterTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_enum_parameter_twin_rust_async",
            argNames: ["weekday"],
          );

  @override
  WeekdaysTwinSync
      crateApiPseudoManualEnumerationTwinSyncHandleEnumParameterTwinSync(
          {required WeekdaysTwinSync weekday}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_weekdays_twin_sync(weekday, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 778)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_weekdays_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualEnumerationTwinSyncHandleEnumParameterTwinSyncConstMeta,
      argValues: [weekday],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualEnumerationTwinSyncHandleEnumParameterTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_enum_parameter_twin_sync",
            argNames: ["weekday"],
          );

  @override
  Future<KitchenSinkTwinNormal> crateApiEnumerationHandleEnumStructTwinNormal(
      {required KitchenSinkTwinNormal val}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_kitchen_sink_twin_normal(val, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 779, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_kitchen_sink_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEnumerationHandleEnumStructTwinNormalConstMeta,
      argValues: [val],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiEnumerationHandleEnumStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_enum_struct_twin_normal",
        argNames: ["val"],
      );

  @override
  Future<KitchenSinkTwinRustAsync>
      crateApiPseudoManualEnumerationTwinRustAsyncHandleEnumStructTwinRustAsync(
          {required KitchenSinkTwinRustAsync val}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_kitchen_sink_twin_rust_async(val, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 780, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_kitchen_sink_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualEnumerationTwinRustAsyncHandleEnumStructTwinRustAsyncConstMeta,
      argValues: [val],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualEnumerationTwinRustAsyncHandleEnumStructTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_enum_struct_twin_rust_async",
            argNames: ["val"],
          );

  @override
  KitchenSinkTwinSync
      crateApiPseudoManualEnumerationTwinSyncHandleEnumStructTwinSync(
          {required KitchenSinkTwinSync val}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_kitchen_sink_twin_sync(val, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 781)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_kitchen_sink_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualEnumerationTwinSyncHandleEnumStructTwinSyncConstMeta,
      argValues: [val],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualEnumerationTwinSyncHandleEnumStructTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_enum_struct_twin_sync",
            argNames: ["val"],
          );

  @override
  Future<double> crateApiOptionalHandleIncrementBoxedOptionalTwinNormal(
      {double? opt}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_f_64(opt, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 782, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiOptionalHandleIncrementBoxedOptionalTwinNormalConstMeta,
      argValues: [opt],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiOptionalHandleIncrementBoxedOptionalTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "handle_increment_boxed_optional_twin_normal",
            argNames: ["opt"],
          );

  @override
  Future<double>
      crateApiPseudoManualOptionalTwinRustAsyncHandleIncrementBoxedOptionalTwinRustAsync(
          {double? opt}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_f_64(opt, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 783, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOptionalTwinRustAsyncHandleIncrementBoxedOptionalTwinRustAsyncConstMeta,
      argValues: [opt],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOptionalTwinRustAsyncHandleIncrementBoxedOptionalTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_increment_boxed_optional_twin_rust_async",
            argNames: ["opt"],
          );

  @override
  double
      crateApiPseudoManualOptionalTwinSyncHandleIncrementBoxedOptionalTwinSync(
          {double? opt}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_f_64(opt, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 784)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOptionalTwinSyncHandleIncrementBoxedOptionalTwinSyncConstMeta,
      argValues: [opt],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOptionalTwinSyncHandleIncrementBoxedOptionalTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_increment_boxed_optional_twin_sync",
            argNames: ["opt"],
          );

  @override
  Future<List<MySize>> crateApiMiscTypeHandleListOfStructTwinNormal(
      {required List<MySize> l}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_my_size(l, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 785, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_my_size,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMiscTypeHandleListOfStructTwinNormalConstMeta,
      argValues: [l],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMiscTypeHandleListOfStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_list_of_struct_twin_normal",
        argNames: ["l"],
      );

  @override
  Future<List<MySize>>
      crateApiPseudoManualMiscTypeTwinRustAsyncHandleListOfStructTwinRustAsync(
          {required List<MySize> l}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_my_size(l, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 786, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_my_size,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscTypeTwinRustAsyncHandleListOfStructTwinRustAsyncConstMeta,
      argValues: [l],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscTypeTwinRustAsyncHandleListOfStructTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_list_of_struct_twin_rust_async",
            argNames: ["l"],
          );

  @override
  List<MySize> crateApiPseudoManualMiscTypeTwinSyncHandleListOfStructTwinSync(
      {required List<MySize> l}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_my_size(l, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 787)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_my_size,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscTypeTwinSyncHandleListOfStructTwinSyncConstMeta,
      argValues: [l],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscTypeTwinSyncHandleListOfStructTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_list_of_struct_twin_sync",
            argNames: ["l"],
          );

  @override
  Future<MyNestedStructTwinNormal>
      crateApiMiscExampleHandleNestedStructTwinNormal(
          {required MyNestedStructTwinNormal s}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_nested_struct_twin_normal(s, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 788, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_my_nested_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMiscExampleHandleNestedStructTwinNormalConstMeta,
      argValues: [s],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMiscExampleHandleNestedStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_nested_struct_twin_normal",
        argNames: ["s"],
      );

  @override
  Future<MyNestedStructTwinRustAsync>
      crateApiPseudoManualMiscExampleTwinRustAsyncHandleNestedStructTwinRustAsync(
          {required MyNestedStructTwinRustAsync s}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_nested_struct_twin_rust_async(s, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 789, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_my_nested_struct_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscExampleTwinRustAsyncHandleNestedStructTwinRustAsyncConstMeta,
      argValues: [s],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscExampleTwinRustAsyncHandleNestedStructTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_nested_struct_twin_rust_async",
            argNames: ["s"],
          );

  @override
  MyNestedStructTwinSync
      crateApiPseudoManualMiscExampleTwinSyncHandleNestedStructTwinSync(
          {required MyNestedStructTwinSync s}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_nested_struct_twin_sync(s, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 790)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_my_nested_struct_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscExampleTwinSyncHandleNestedStructTwinSyncConstMeta,
      argValues: [s],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscExampleTwinSyncHandleNestedStructTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_nested_struct_twin_sync",
            argNames: ["s"],
          );

  @override
  Future<FeatureUuidTwinNormal> crateApiUuidTypeHandleNestedUuidsTwinNormal(
      {required FeatureUuidTwinNormal ids}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_feature_uuid_twin_normal(ids, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 791, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_feature_uuid_twin_normal,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiUuidTypeHandleNestedUuidsTwinNormalConstMeta,
      argValues: [ids],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUuidTypeHandleNestedUuidsTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_nested_uuids_twin_normal",
        argNames: ["ids"],
      );

  @override
  Future<FeatureUuidTwinRustAsync>
      crateApiPseudoManualUuidTypeTwinRustAsyncHandleNestedUuidsTwinRustAsync(
          {required FeatureUuidTwinRustAsync ids}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_feature_uuid_twin_rust_async(ids, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 792, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_feature_uuid_twin_rust_async,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualUuidTypeTwinRustAsyncHandleNestedUuidsTwinRustAsyncConstMeta,
      argValues: [ids],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualUuidTypeTwinRustAsyncHandleNestedUuidsTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_nested_uuids_twin_rust_async",
            argNames: ["ids"],
          );

  @override
  FeatureUuidTwinSync
      crateApiPseudoManualUuidTypeTwinSyncHandleNestedUuidsTwinSync(
          {required FeatureUuidTwinSync ids}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_feature_uuid_twin_sync(ids, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 793)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_feature_uuid_twin_sync,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualUuidTypeTwinSyncHandleNestedUuidsTwinSyncConstMeta,
      argValues: [ids],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualUuidTypeTwinSyncHandleNestedUuidsTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_nested_uuids_twin_sync",
            argNames: ["ids"],
          );

  @override
  Future<NewTypeIntTwinNormal> crateApiNewtypePatternHandleNewtypeTwinNormal(
      {required NewTypeIntTwinNormal arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_new_type_int_twin_normal(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 794, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_new_type_int_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiNewtypePatternHandleNewtypeTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiNewtypePatternHandleNewtypeTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_newtype_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<NewTypeIntTwinRustAsync>
      crateApiPseudoManualNewtypePatternTwinRustAsyncHandleNewtypeTwinRustAsync(
          {required NewTypeIntTwinRustAsync arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_new_type_int_twin_rust_async(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 795, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_new_type_int_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualNewtypePatternTwinRustAsyncHandleNewtypeTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualNewtypePatternTwinRustAsyncHandleNewtypeTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_newtype_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  NewTypeIntTwinSync
      crateApiPseudoManualNewtypePatternTwinSyncHandleNewtypeTwinSync(
          {required NewTypeIntTwinSync arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_new_type_int_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 796)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_new_type_int_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualNewtypePatternTwinSyncHandleNewtypeTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualNewtypePatternTwinSyncHandleNewtypeTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_newtype_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<String> crateApiOptionalHandleOptionBoxArgumentsTwinNormal(
      {int? i8Box,
      int? u8Box,
      int? i32Box,
      PlatformInt64? i64Box,
      double? f64Box,
      bool? boolbox,
      ExoticOptionalsTwinNormal? structbox}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_i_8(i8Box, serializer);
        sse_encode_opt_box_u_8(u8Box, serializer);
        sse_encode_opt_box_i_32(i32Box, serializer);
        sse_encode_opt_box_i_64(i64Box, serializer);
        sse_encode_opt_box_f_64(f64Box, serializer);
        sse_encode_opt_box_bool(boolbox, serializer);
        sse_encode_opt_box_exotic_optionals_twin_normal(structbox, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 797, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOptionalHandleOptionBoxArgumentsTwinNormalConstMeta,
      argValues: [i8Box, u8Box, i32Box, i64Box, f64Box, boolbox, structbox],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiOptionalHandleOptionBoxArgumentsTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "handle_option_box_arguments_twin_normal",
            argNames: [
              "i8Box",
              "u8Box",
              "i32Box",
              "i64Box",
              "f64Box",
              "boolbox",
              "structbox"
            ],
          );

  @override
  Future<String>
      crateApiPseudoManualOptionalTwinRustAsyncHandleOptionBoxArgumentsTwinRustAsync(
          {int? i8Box,
          int? u8Box,
          int? i32Box,
          PlatformInt64? i64Box,
          double? f64Box,
          bool? boolbox,
          ExoticOptionalsTwinRustAsync? structbox}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_i_8(i8Box, serializer);
        sse_encode_opt_box_u_8(u8Box, serializer);
        sse_encode_opt_box_i_32(i32Box, serializer);
        sse_encode_opt_box_i_64(i64Box, serializer);
        sse_encode_opt_box_f_64(f64Box, serializer);
        sse_encode_opt_box_bool(boolbox, serializer);
        sse_encode_opt_box_exotic_optionals_twin_rust_async(
            structbox, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 798, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOptionalTwinRustAsyncHandleOptionBoxArgumentsTwinRustAsyncConstMeta,
      argValues: [i8Box, u8Box, i32Box, i64Box, f64Box, boolbox, structbox],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOptionalTwinRustAsyncHandleOptionBoxArgumentsTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_option_box_arguments_twin_rust_async",
            argNames: [
              "i8Box",
              "u8Box",
              "i32Box",
              "i64Box",
              "f64Box",
              "boolbox",
              "structbox"
            ],
          );

  @override
  String crateApiPseudoManualOptionalTwinSyncHandleOptionBoxArgumentsTwinSync(
      {int? i8Box,
      int? u8Box,
      int? i32Box,
      PlatformInt64? i64Box,
      double? f64Box,
      bool? boolbox,
      ExoticOptionalsTwinSync? structbox}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_i_8(i8Box, serializer);
        sse_encode_opt_box_u_8(u8Box, serializer);
        sse_encode_opt_box_i_32(i32Box, serializer);
        sse_encode_opt_box_i_64(i64Box, serializer);
        sse_encode_opt_box_f_64(f64Box, serializer);
        sse_encode_opt_box_bool(boolbox, serializer);
        sse_encode_opt_box_exotic_optionals_twin_sync(structbox, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 799)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOptionalTwinSyncHandleOptionBoxArgumentsTwinSyncConstMeta,
      argValues: [i8Box, u8Box, i32Box, i64Box, f64Box, boolbox, structbox],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOptionalTwinSyncHandleOptionBoxArgumentsTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_option_box_arguments_twin_sync",
            argNames: [
              "i8Box",
              "u8Box",
              "i32Box",
              "i64Box",
              "f64Box",
              "boolbox",
              "structbox"
            ],
          );

  @override
  Future<ExoticOptionalsTwinNormal?>
      crateApiOptionalHandleOptionalIncrementTwinNormal(
          {ExoticOptionalsTwinNormal? opt}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_exotic_optionals_twin_normal(
            opt, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 800, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_exotic_optionals_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOptionalHandleOptionalIncrementTwinNormalConstMeta,
      argValues: [opt],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiOptionalHandleOptionalIncrementTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "handle_optional_increment_twin_normal",
            argNames: ["opt"],
          );

  @override
  Future<ExoticOptionalsTwinRustAsync?>
      crateApiPseudoManualOptionalTwinRustAsyncHandleOptionalIncrementTwinRustAsync(
          {ExoticOptionalsTwinRustAsync? opt}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_exotic_optionals_twin_rust_async(
            opt, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 801, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_exotic_optionals_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOptionalTwinRustAsyncHandleOptionalIncrementTwinRustAsyncConstMeta,
      argValues: [opt],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOptionalTwinRustAsyncHandleOptionalIncrementTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_optional_increment_twin_rust_async",
            argNames: ["opt"],
          );

  @override
  ExoticOptionalsTwinSync?
      crateApiPseudoManualOptionalTwinSyncHandleOptionalIncrementTwinSync(
          {ExoticOptionalsTwinSync? opt}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_exotic_optionals_twin_sync(opt, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 802)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_exotic_optionals_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOptionalTwinSyncHandleOptionalIncrementTwinSyncConstMeta,
      argValues: [opt],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOptionalTwinSyncHandleOptionalIncrementTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_optional_increment_twin_sync",
            argNames: ["opt"],
          );

  @override
  Future<double?> crateApiOptionalHandleOptionalReturnTwinNormal(
      {required double left, required double right}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_64(left, serializer);
        sse_encode_f_64(right, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 803, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_f_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOptionalHandleOptionalReturnTwinNormalConstMeta,
      argValues: [left, right],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOptionalHandleOptionalReturnTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_optional_return_twin_normal",
        argNames: ["left", "right"],
      );

  @override
  Future<double?>
      crateApiPseudoManualOptionalTwinRustAsyncHandleOptionalReturnTwinRustAsync(
          {required double left, required double right}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_64(left, serializer);
        sse_encode_f_64(right, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 804, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_f_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOptionalTwinRustAsyncHandleOptionalReturnTwinRustAsyncConstMeta,
      argValues: [left, right],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOptionalTwinRustAsyncHandleOptionalReturnTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_optional_return_twin_rust_async",
            argNames: ["left", "right"],
          );

  @override
  double? crateApiPseudoManualOptionalTwinSyncHandleOptionalReturnTwinSync(
      {required double left, required double right}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_64(left, serializer);
        sse_encode_f_64(right, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 805)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_f_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOptionalTwinSyncHandleOptionalReturnTwinSyncConstMeta,
      argValues: [left, right],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOptionalTwinSyncHandleOptionalReturnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_optional_return_twin_sync",
            argNames: ["left", "right"],
          );

  @override
  Future<ElementTwinNormal?> crateApiOptionalHandleOptionalStructTwinNormal(
      {String? document}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_String(document, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 806, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_element_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOptionalHandleOptionalStructTwinNormalConstMeta,
      argValues: [document],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOptionalHandleOptionalStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_optional_struct_twin_normal",
        argNames: ["document"],
      );

  @override
  Future<ElementTwinRustAsync?>
      crateApiPseudoManualOptionalTwinRustAsyncHandleOptionalStructTwinRustAsync(
          {String? document}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_String(document, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 807, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_element_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOptionalTwinRustAsyncHandleOptionalStructTwinRustAsyncConstMeta,
      argValues: [document],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOptionalTwinRustAsyncHandleOptionalStructTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_optional_struct_twin_rust_async",
            argNames: ["document"],
          );

  @override
  ElementTwinSync?
      crateApiPseudoManualOptionalTwinSyncHandleOptionalStructTwinSync(
          {String? document}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_String(document, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 808)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_element_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOptionalTwinSyncHandleOptionalStructTwinSyncConstMeta,
      argValues: [document],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOptionalTwinSyncHandleOptionalStructTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_optional_struct_twin_sync",
            argNames: ["document"],
          );

  @override
  Future<WeekdaysTwinNormal?> crateApiEnumerationHandleReturnEnumTwinNormal(
      {required String input}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(input, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 809, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_weekdays_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEnumerationHandleReturnEnumTwinNormalConstMeta,
      argValues: [input],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiEnumerationHandleReturnEnumTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_return_enum_twin_normal",
        argNames: ["input"],
      );

  @override
  Future<WeekdaysTwinRustAsync?>
      crateApiPseudoManualEnumerationTwinRustAsyncHandleReturnEnumTwinRustAsync(
          {required String input}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(input, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 810, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_weekdays_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualEnumerationTwinRustAsyncHandleReturnEnumTwinRustAsyncConstMeta,
      argValues: [input],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualEnumerationTwinRustAsyncHandleReturnEnumTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_return_enum_twin_rust_async",
            argNames: ["input"],
          );

  @override
  WeekdaysTwinSync?
      crateApiPseudoManualEnumerationTwinSyncHandleReturnEnumTwinSync(
          {required String input}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(input, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 811)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_weekdays_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualEnumerationTwinSyncHandleReturnEnumTwinSyncConstMeta,
      argValues: [input],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualEnumerationTwinSyncHandleReturnEnumTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_return_enum_twin_sync",
            argNames: ["input"],
          );

  @override
  Stream<MyStreamEntryTwinNormal>
      crateApiStreamHandleStreamOfStructTwinNormal() {
    final sink = RustStreamSink<MyStreamEntryTwinNormal>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_my_stream_entry_twin_normal_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 812, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStreamHandleStreamOfStructTwinNormalConstMeta,
      argValues: [sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiStreamHandleStreamOfStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_stream_of_struct_twin_normal",
        argNames: ["sink"],
      );

  @override
  Stream<MyStreamEntryTwinRustAsync>
      crateApiPseudoManualStreamTwinRustAsyncHandleStreamOfStructTwinRustAsync() {
    final sink = RustStreamSink<MyStreamEntryTwinRustAsync>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_my_stream_entry_twin_rust_async_Sse(
            sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 813, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualStreamTwinRustAsyncHandleStreamOfStructTwinRustAsyncConstMeta,
      argValues: [sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualStreamTwinRustAsyncHandleStreamOfStructTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_stream_of_struct_twin_rust_async",
            argNames: ["sink"],
          );

  @override
  Stream<LogTwinNormal> crateApiStreamHandleStreamSinkAt1TwinNormal(
      {required int key, required int max}) {
    final sink = RustStreamSink<LogTwinNormal>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(key, serializer);
        sse_encode_u_32(max, serializer);
        sse_encode_StreamSink_log_twin_normal_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 814, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStreamHandleStreamSinkAt1TwinNormalConstMeta,
      argValues: [key, max, sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiStreamHandleStreamSinkAt1TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_stream_sink_at_1_twin_normal",
        argNames: ["key", "max", "sink"],
      );

  @override
  Stream<LogTwinRustAsync>
      crateApiPseudoManualStreamTwinRustAsyncHandleStreamSinkAt1TwinRustAsync(
          {required int key, required int max}) {
    final sink = RustStreamSink<LogTwinRustAsync>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(key, serializer);
        sse_encode_u_32(max, serializer);
        sse_encode_StreamSink_log_twin_rust_async_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 815, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualStreamTwinRustAsyncHandleStreamSinkAt1TwinRustAsyncConstMeta,
      argValues: [key, max, sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualStreamTwinRustAsyncHandleStreamSinkAt1TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_stream_sink_at_1_twin_rust_async",
            argNames: ["key", "max", "sink"],
          );

  @override
  Stream<LogTwinNormal> crateApiStreamHandleStreamSinkAt2TwinNormal(
      {required int key, required int max}) {
    final sink = RustStreamSink<LogTwinNormal>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(key, serializer);
        sse_encode_StreamSink_log_twin_normal_Sse(sink, serializer);
        sse_encode_u_32(max, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 816, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStreamHandleStreamSinkAt2TwinNormalConstMeta,
      argValues: [key, sink, max],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiStreamHandleStreamSinkAt2TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_stream_sink_at_2_twin_normal",
        argNames: ["key", "sink", "max"],
      );

  @override
  Stream<LogTwinRustAsync>
      crateApiPseudoManualStreamTwinRustAsyncHandleStreamSinkAt2TwinRustAsync(
          {required int key, required int max}) {
    final sink = RustStreamSink<LogTwinRustAsync>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(key, serializer);
        sse_encode_StreamSink_log_twin_rust_async_Sse(sink, serializer);
        sse_encode_u_32(max, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 817, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualStreamTwinRustAsyncHandleStreamSinkAt2TwinRustAsyncConstMeta,
      argValues: [key, sink, max],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualStreamTwinRustAsyncHandleStreamSinkAt2TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_stream_sink_at_2_twin_rust_async",
            argNames: ["key", "sink", "max"],
          );

  @override
  Stream<LogTwinNormal> crateApiStreamHandleStreamSinkAt3TwinNormal(
      {required int key, required int max}) {
    final sink = RustStreamSink<LogTwinNormal>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_log_twin_normal_Sse(sink, serializer);
        sse_encode_u_32(key, serializer);
        sse_encode_u_32(max, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 818, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStreamHandleStreamSinkAt3TwinNormalConstMeta,
      argValues: [sink, key, max],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiStreamHandleStreamSinkAt3TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_stream_sink_at_3_twin_normal",
        argNames: ["sink", "key", "max"],
      );

  @override
  Stream<LogTwinRustAsync>
      crateApiPseudoManualStreamTwinRustAsyncHandleStreamSinkAt3TwinRustAsync(
          {required int key, required int max}) {
    final sink = RustStreamSink<LogTwinRustAsync>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_log_twin_rust_async_Sse(sink, serializer);
        sse_encode_u_32(key, serializer);
        sse_encode_u_32(max, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 819, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualStreamTwinRustAsyncHandleStreamSinkAt3TwinRustAsyncConstMeta,
      argValues: [sink, key, max],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualStreamTwinRustAsyncHandleStreamSinkAt3TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_stream_sink_at_3_twin_rust_async",
            argNames: ["sink", "key", "max"],
          );

  @override
  Future<List<String>> crateApiMiscTypeHandleStringListTwinNormal(
      {required List<String> names}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_String(names, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 820, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMiscTypeHandleStringListTwinNormalConstMeta,
      argValues: [names],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMiscTypeHandleStringListTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_string_list_twin_normal",
        argNames: ["names"],
      );

  @override
  Future<List<String>>
      crateApiPseudoManualMiscTypeTwinRustAsyncHandleStringListTwinRustAsync(
          {required List<String> names}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_String(names, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 821, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscTypeTwinRustAsyncHandleStringListTwinRustAsyncConstMeta,
      argValues: [names],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscTypeTwinRustAsyncHandleStringListTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_string_list_twin_rust_async",
            argNames: ["names"],
          );

  @override
  List<String> crateApiPseudoManualMiscTypeTwinSyncHandleStringListTwinSync(
      {required List<String> names}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_String(names, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 822)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscTypeTwinSyncHandleStringListTwinSyncConstMeta,
      argValues: [names],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscTypeTwinSyncHandleStringListTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_string_list_twin_sync",
            argNames: ["names"],
          );

  @override
  Future<String> crateApiMiscExampleHandleStringTwinNormal(
      {required String s}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(s, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 823, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMiscExampleHandleStringTwinNormalConstMeta,
      argValues: [s],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMiscExampleHandleStringTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_string_twin_normal",
        argNames: ["s"],
      );

  @override
  Future<String>
      crateApiPseudoManualMiscExampleTwinRustAsyncHandleStringTwinRustAsync(
          {required String s}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(s, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 824, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscExampleTwinRustAsyncHandleStringTwinRustAsyncConstMeta,
      argValues: [s],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscExampleTwinRustAsyncHandleStringTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_string_twin_rust_async",
            argNames: ["s"],
          );

  @override
  String crateApiPseudoManualMiscExampleTwinSyncHandleStringTwinSync(
      {required String s}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(s, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 825)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscExampleTwinSyncHandleStringTwinSyncConstMeta,
      argValues: [s],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscExampleTwinSyncHandleStringTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_string_twin_sync",
            argNames: ["s"],
          );

  @override
  Future<MySize> crateApiMiscExampleHandleStructTwinNormal(
      {required MySize arg, required MySize boxed}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_size(arg, serializer);
        sse_encode_box_my_size(boxed, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 826, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_my_size,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMiscExampleHandleStructTwinNormalConstMeta,
      argValues: [arg, boxed],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMiscExampleHandleStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_struct_twin_normal",
        argNames: ["arg", "boxed"],
      );

  @override
  Future<MySize>
      crateApiPseudoManualMiscExampleTwinRustAsyncHandleStructTwinRustAsync(
          {required MySize arg, required MySize boxed}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_size(arg, serializer);
        sse_encode_box_my_size(boxed, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 827, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_my_size,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscExampleTwinRustAsyncHandleStructTwinRustAsyncConstMeta,
      argValues: [arg, boxed],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscExampleTwinRustAsyncHandleStructTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_struct_twin_rust_async",
            argNames: ["arg", "boxed"],
          );

  @override
  MySize crateApiPseudoManualMiscExampleTwinSyncHandleStructTwinSync(
      {required MySize arg, required MySize boxed}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_size(arg, serializer);
        sse_encode_box_my_size(boxed, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 828)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_my_size,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscExampleTwinSyncHandleStructTwinSyncConstMeta,
      argValues: [arg, boxed],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscExampleTwinSyncHandleStructTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_struct_twin_sync",
            argNames: ["arg", "boxed"],
          );

  @override
  Future<List<Duration>> crateApiChronoTypeHandleTimestampsTwinNormal(
      {required List<DateTime> timestamps, required DateTime epoch}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_Chrono_Naive(timestamps, serializer);
        sse_encode_Chrono_Naive(epoch, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 829, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_Chrono_Duration,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiChronoTypeHandleTimestampsTwinNormalConstMeta,
      argValues: [timestamps, epoch],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiChronoTypeHandleTimestampsTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_timestamps_twin_normal",
        argNames: ["timestamps", "epoch"],
      );

  @override
  Future<List<Duration>>
      crateApiPseudoManualChronoTypeTwinRustAsyncHandleTimestampsTwinRustAsync(
          {required List<DateTime> timestamps, required DateTime epoch}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_Chrono_Naive(timestamps, serializer);
        sse_encode_Chrono_Naive(epoch, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 830, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_Chrono_Duration,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualChronoTypeTwinRustAsyncHandleTimestampsTwinRustAsyncConstMeta,
      argValues: [timestamps, epoch],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualChronoTypeTwinRustAsyncHandleTimestampsTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_timestamps_twin_rust_async",
            argNames: ["timestamps", "epoch"],
          );

  @override
  List<Duration> crateApiPseudoManualChronoTypeTwinSyncHandleTimestampsTwinSync(
      {required List<DateTime> timestamps, required DateTime epoch}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_Chrono_Naive(timestamps, serializer);
        sse_encode_Chrono_Naive(epoch, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 831)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_Chrono_Duration,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualChronoTypeTwinSyncHandleTimestampsTwinSyncConstMeta,
      argValues: [timestamps, epoch],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualChronoTypeTwinSyncHandleTimestampsTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_timestamps_twin_sync",
            argNames: ["timestamps", "epoch"],
          );

  @override
  Future<BigInt> crateApiTypeAliasHandleTypeAliasIdTwinNormal(
      {required BigInt input}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(input, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 832, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypeAliasHandleTypeAliasIdTwinNormalConstMeta,
      argValues: [input],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypeAliasHandleTypeAliasIdTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_type_alias_id_twin_normal",
        argNames: ["input"],
      );

  @override
  Future<BigInt>
      crateApiPseudoManualTypeAliasTwinRustAsyncHandleTypeAliasIdTwinRustAsync(
          {required BigInt input}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(input, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 833, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualTypeAliasTwinRustAsyncHandleTypeAliasIdTwinRustAsyncConstMeta,
      argValues: [input],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualTypeAliasTwinRustAsyncHandleTypeAliasIdTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_type_alias_id_twin_rust_async",
            argNames: ["input"],
          );

  @override
  BigInt crateApiPseudoManualTypeAliasTwinSyncHandleTypeAliasIdTwinSync(
      {required BigInt input}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(input, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 834)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualTypeAliasTwinSyncHandleTypeAliasIdTwinSyncConstMeta,
      argValues: [input],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualTypeAliasTwinSyncHandleTypeAliasIdTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_type_alias_id_twin_sync",
            argNames: ["input"],
          );

  @override
  Future<TestModelTwinNormal> crateApiTypeAliasHandleTypeAliasModelTwinNormal(
      {required BigInt input}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(input, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 835, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_test_model_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypeAliasHandleTypeAliasModelTwinNormalConstMeta,
      argValues: [input],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypeAliasHandleTypeAliasModelTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_type_alias_model_twin_normal",
        argNames: ["input"],
      );

  @override
  Future<TestModelTwinRustAsync>
      crateApiPseudoManualTypeAliasTwinRustAsyncHandleTypeAliasModelTwinRustAsync(
          {required BigInt input}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(input, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 836, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_test_model_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualTypeAliasTwinRustAsyncHandleTypeAliasModelTwinRustAsyncConstMeta,
      argValues: [input],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualTypeAliasTwinRustAsyncHandleTypeAliasModelTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_type_alias_model_twin_rust_async",
            argNames: ["input"],
          );

  @override
  TestModelTwinSync
      crateApiPseudoManualTypeAliasTwinSyncHandleTypeAliasModelTwinSync(
          {required BigInt input}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(input, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 837)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_test_model_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualTypeAliasTwinSyncHandleTypeAliasModelTwinSyncConstMeta,
      argValues: [input],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualTypeAliasTwinSyncHandleTypeAliasModelTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_type_alias_model_twin_sync",
            argNames: ["input"],
          );

  @override
  Future<BigInt> crateApiTypeAliasHandleTypeNestAliasIdTwinNormal(
      {required BigInt input}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(input, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 838, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypeAliasHandleTypeNestAliasIdTwinNormalConstMeta,
      argValues: [input],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiTypeAliasHandleTypeNestAliasIdTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "handle_type_nest_alias_id_twin_normal",
            argNames: ["input"],
          );

  @override
  Future<BigInt>
      crateApiPseudoManualTypeAliasTwinRustAsyncHandleTypeNestAliasIdTwinRustAsync(
          {required BigInt input}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(input, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 839, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualTypeAliasTwinRustAsyncHandleTypeNestAliasIdTwinRustAsyncConstMeta,
      argValues: [input],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualTypeAliasTwinRustAsyncHandleTypeNestAliasIdTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_type_nest_alias_id_twin_rust_async",
            argNames: ["input"],
          );

  @override
  BigInt crateApiPseudoManualTypeAliasTwinSyncHandleTypeNestAliasIdTwinSync(
      {required BigInt input}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(input, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 840)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualTypeAliasTwinSyncHandleTypeNestAliasIdTwinSyncConstMeta,
      argValues: [input],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualTypeAliasTwinSyncHandleTypeNestAliasIdTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_type_nest_alias_id_twin_sync",
            argNames: ["input"],
          );

  @override
  Future<UuidValue> crateApiUuidTypeHandleUuidTwinNormal(
      {required UuidValue id}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Uuid(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 841, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Uuid,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiUuidTypeHandleUuidTwinNormalConstMeta,
      argValues: [id],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUuidTypeHandleUuidTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_uuid_twin_normal",
        argNames: ["id"],
      );

  @override
  Future<UuidValue>
      crateApiPseudoManualUuidTypeTwinRustAsyncHandleUuidTwinRustAsync(
          {required UuidValue id}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Uuid(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 842, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Uuid,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualUuidTypeTwinRustAsyncHandleUuidTwinRustAsyncConstMeta,
      argValues: [id],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualUuidTypeTwinRustAsyncHandleUuidTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_uuid_twin_rust_async",
            argNames: ["id"],
          );

  @override
  UuidValue crateApiPseudoManualUuidTypeTwinSyncHandleUuidTwinSync(
      {required UuidValue id}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Uuid(id, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 843)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Uuid,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualUuidTypeTwinSyncHandleUuidTwinSyncConstMeta,
      argValues: [id],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualUuidTypeTwinSyncHandleUuidTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_uuid_twin_sync",
            argNames: ["id"],
          );

  @override
  Future<List<UuidValue>> crateApiUuidTypeHandleUuidsTwinNormal(
      {required List<UuidValue> ids}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_Uuid(ids, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 844, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_Uuid,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiUuidTypeHandleUuidsTwinNormalConstMeta,
      argValues: [ids],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUuidTypeHandleUuidsTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_uuids_twin_normal",
        argNames: ["ids"],
      );

  @override
  Future<List<UuidValue>>
      crateApiPseudoManualUuidTypeTwinRustAsyncHandleUuidsTwinRustAsync(
          {required List<UuidValue> ids}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_Uuid(ids, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 845, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_Uuid,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualUuidTypeTwinRustAsyncHandleUuidsTwinRustAsyncConstMeta,
      argValues: [ids],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualUuidTypeTwinRustAsyncHandleUuidsTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_uuids_twin_rust_async",
            argNames: ["ids"],
          );

  @override
  List<UuidValue> crateApiPseudoManualUuidTypeTwinSyncHandleUuidsTwinSync(
      {required List<UuidValue> ids}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_Uuid(ids, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 846)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_Uuid,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualUuidTypeTwinSyncHandleUuidsTwinSyncConstMeta,
      argValues: [ids],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualUuidTypeTwinSyncHandleUuidsTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_uuids_twin_sync",
            argNames: ["ids"],
          );

  @override
  Future<OptVecsTwinNormal> crateApiOptionalHandleVecOfOptsTwinNormal(
      {required OptVecsTwinNormal opt}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_opt_vecs_twin_normal(opt, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 847, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_vecs_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOptionalHandleVecOfOptsTwinNormalConstMeta,
      argValues: [opt],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOptionalHandleVecOfOptsTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_vec_of_opts_twin_normal",
        argNames: ["opt"],
      );

  @override
  Future<OptVecsTwinRustAsync>
      crateApiPseudoManualOptionalTwinRustAsyncHandleVecOfOptsTwinRustAsync(
          {required OptVecsTwinRustAsync opt}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_opt_vecs_twin_rust_async(opt, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 848, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_vecs_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOptionalTwinRustAsyncHandleVecOfOptsTwinRustAsyncConstMeta,
      argValues: [opt],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOptionalTwinRustAsyncHandleVecOfOptsTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_vec_of_opts_twin_rust_async",
            argNames: ["opt"],
          );

  @override
  OptVecsTwinSync crateApiPseudoManualOptionalTwinSyncHandleVecOfOptsTwinSync(
      {required OptVecsTwinSync opt}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_opt_vecs_twin_sync(opt, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 849)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_vecs_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOptionalTwinSyncHandleVecOfOptsTwinSyncConstMeta,
      argValues: [opt],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOptionalTwinSyncHandleVecOfOptsTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_vec_of_opts_twin_sync",
            argNames: ["opt"],
          );

  @override
  Future<VecOfPrimitivePackTwinNormal>
      crateApiPrimitiveListMiscHandleVecOfPrimitiveTwinNormal(
          {required int n}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(n, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 850, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_vec_of_primitive_pack_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPrimitiveListMiscHandleVecOfPrimitiveTwinNormalConstMeta,
      argValues: [n],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPrimitiveListMiscHandleVecOfPrimitiveTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "handle_vec_of_primitive_twin_normal",
            argNames: ["n"],
          );

  @override
  Future<VecOfPrimitivePackTwinRustAsync>
      crateApiPseudoManualPrimitiveListMiscTwinRustAsyncHandleVecOfPrimitiveTwinRustAsync(
          {required int n}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(n, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 851, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_vec_of_primitive_pack_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualPrimitiveListMiscTwinRustAsyncHandleVecOfPrimitiveTwinRustAsyncConstMeta,
      argValues: [n],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualPrimitiveListMiscTwinRustAsyncHandleVecOfPrimitiveTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_vec_of_primitive_twin_rust_async",
            argNames: ["n"],
          );

  @override
  VecOfPrimitivePackTwinSync
      crateApiPseudoManualPrimitiveListMiscTwinSyncHandleVecOfPrimitiveTwinSync(
          {required int n}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(n, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 852)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_vec_of_primitive_pack_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualPrimitiveListMiscTwinSyncHandleVecOfPrimitiveTwinSyncConstMeta,
      argValues: [n],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualPrimitiveListMiscTwinSyncHandleVecOfPrimitiveTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_vec_of_primitive_twin_sync",
            argNames: ["n"],
          );

  @override
  Future<Uint8List> crateApiMiscExampleHandleVecU8TwinNormal(
      {required List<int> v}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(v, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 853, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMiscExampleHandleVecU8TwinNormalConstMeta,
      argValues: [v],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMiscExampleHandleVecU8TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_vec_u8_twin_normal",
        argNames: ["v"],
      );

  @override
  Future<Uint8List>
      crateApiPseudoManualMiscExampleTwinRustAsyncHandleVecU8TwinRustAsync(
          {required List<int> v}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(v, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 854, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscExampleTwinRustAsyncHandleVecU8TwinRustAsyncConstMeta,
      argValues: [v],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscExampleTwinRustAsyncHandleVecU8TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_vec_u8_twin_rust_async",
            argNames: ["v"],
          );

  @override
  Uint8List crateApiPseudoManualMiscExampleTwinSyncHandleVecU8TwinSync(
      {required List<int> v}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(v, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 855)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscExampleTwinSyncHandleVecU8TwinSyncConstMeta,
      argValues: [v],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscExampleTwinSyncHandleVecU8TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_vec_u8_twin_sync",
            argNames: ["v"],
          );

  @override
  Future<Duration> crateApiChronoTypeHowLongDoesItTakeTwinNormal(
      {required FeatureChronoTwinNormal mine}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_feature_chrono_twin_normal(mine, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 856, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Chrono_Duration,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiChronoTypeHowLongDoesItTakeTwinNormalConstMeta,
      argValues: [mine],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiChronoTypeHowLongDoesItTakeTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "how_long_does_it_take_twin_normal",
        argNames: ["mine"],
      );

  @override
  Future<Duration>
      crateApiPseudoManualChronoTypeTwinRustAsyncHowLongDoesItTakeTwinRustAsync(
          {required FeatureChronoTwinRustAsync mine}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_feature_chrono_twin_rust_async(mine, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 857, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Chrono_Duration,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualChronoTypeTwinRustAsyncHowLongDoesItTakeTwinRustAsyncConstMeta,
      argValues: [mine],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualChronoTypeTwinRustAsyncHowLongDoesItTakeTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "how_long_does_it_take_twin_rust_async",
            argNames: ["mine"],
          );

  @override
  Duration crateApiPseudoManualChronoTypeTwinSyncHowLongDoesItTakeTwinSync(
      {required FeatureChronoTwinSync mine}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_feature_chrono_twin_sync(mine, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 858)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Chrono_Duration,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualChronoTypeTwinSyncHowLongDoesItTakeTwinSyncConstMeta,
      argValues: [mine],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualChronoTypeTwinSyncHowLongDoesItTakeTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "how_long_does_it_take_twin_sync",
            argNames: ["mine"],
          );

  @override
  Future<void> crateApiCustomizationInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 859, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiCustomizationInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCustomizationInitAppConstMeta =>
      const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  Future<bool> crateApiMirrorIsAppEmbeddedTwinNormal(
      {required ApplicationSettings appSettings}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_application_settings(appSettings, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 860, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMirrorIsAppEmbeddedTwinNormalConstMeta,
      argValues: [appSettings],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMirrorIsAppEmbeddedTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "is_app_embedded_twin_normal",
        argNames: ["appSettings"],
      );

  @override
  Future<bool>
      crateApiPseudoManualMirrorTwinRustAsyncIsAppEmbeddedTwinRustAsync(
          {required ApplicationSettings appSettings}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_application_settings(appSettings, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 861, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncIsAppEmbeddedTwinRustAsyncConstMeta,
      argValues: [appSettings],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncIsAppEmbeddedTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "is_app_embedded_twin_rust_async",
            argNames: ["appSettings"],
          );

  @override
  bool crateApiPseudoManualMirrorTwinSyncIsAppEmbeddedTwinSync(
      {required ApplicationSettings appSettings}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_application_settings(appSettings, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 862)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncIsAppEmbeddedTwinSyncConstMeta,
      argValues: [appSettings],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncIsAppEmbeddedTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "is_app_embedded_twin_sync",
            argNames: ["appSettings"],
          );

  @override
  Future<ItemContainerSolutionTwoTwinNormal>
      crateApiMiscNoTwinExampleAItemContainerSolutionTwoTwinNormalCreateTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 863, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_item_container_solution_two_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleAItemContainerSolutionTwoTwinNormalCreateTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleAItemContainerSolutionTwoTwinNormalCreateTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "item_container_solution_two_twin_normal_create_twin_normal",
            argNames: [],
          );

  @override
  Future<Int32List>
      crateApiMiscNoTwinExampleAItemContainerSolutionTwoTwinNormalGetItemContentsTwinNormal(
          {required ItemContainerSolutionTwoTwinNormal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_item_container_solution_two_twin_normal(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 864, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_i_32_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleAItemContainerSolutionTwoTwinNormalGetItemContentsTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleAItemContainerSolutionTwoTwinNormalGetItemContentsTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "item_container_solution_two_twin_normal_get_item_contents_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<double> crateApiArrayLastNumberTwinNormal(
      {required F64Array16 array}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_64_array_16(array, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 865, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiArrayLastNumberTwinNormalConstMeta,
      argValues: [array],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiArrayLastNumberTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "last_number_twin_normal",
        argNames: ["array"],
      );

  @override
  Future<double> crateApiPseudoManualArrayTwinRustAsyncLastNumberTwinRustAsync(
      {required F64Array16 array}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_64_array_16(array, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 866, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualArrayTwinRustAsyncLastNumberTwinRustAsyncConstMeta,
      argValues: [array],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualArrayTwinRustAsyncLastNumberTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "last_number_twin_rust_async",
            argNames: ["array"],
          );

  @override
  double crateApiPseudoManualArrayTwinSyncLastNumberTwinSync(
      {required F64Array16 array}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_64_array_16(array, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 867)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPseudoManualArrayTwinSyncLastNumberTwinSyncConstMeta,
      argValues: [array],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualArrayTwinSyncLastNumberTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "last_number_twin_sync",
            argNames: ["array"],
          );

  @override
  Future<List<WeekdaysTwinNormal>>
      crateApiMiscExampleListOfPrimitiveEnumsTwinNormal(
          {required List<WeekdaysTwinNormal> weekdays}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_weekdays_twin_normal(weekdays, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 868, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_weekdays_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMiscExampleListOfPrimitiveEnumsTwinNormalConstMeta,
      argValues: [weekdays],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscExampleListOfPrimitiveEnumsTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "list_of_primitive_enums_twin_normal",
            argNames: ["weekdays"],
          );

  @override
  Future<List<WeekdaysTwinRustAsync>>
      crateApiPseudoManualMiscExampleTwinRustAsyncListOfPrimitiveEnumsTwinRustAsync(
          {required List<WeekdaysTwinRustAsync> weekdays}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_weekdays_twin_rust_async(weekdays, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 869, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_weekdays_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscExampleTwinRustAsyncListOfPrimitiveEnumsTwinRustAsyncConstMeta,
      argValues: [weekdays],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscExampleTwinRustAsyncListOfPrimitiveEnumsTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "list_of_primitive_enums_twin_rust_async",
            argNames: ["weekdays"],
          );

  @override
  List<WeekdaysTwinSync>
      crateApiPseudoManualMiscExampleTwinSyncListOfPrimitiveEnumsTwinSync(
          {required List<WeekdaysTwinSync> weekdays}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_weekdays_twin_sync(weekdays, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 870)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_weekdays_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscExampleTwinSyncListOfPrimitiveEnumsTwinSyncConstMeta,
      argValues: [weekdays],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscExampleTwinSyncListOfPrimitiveEnumsTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "list_of_primitive_enums_twin_sync",
            argNames: ["weekdays"],
          );

  @override
  Future<void> crateApiDartOpaqueLoopBackArrayGetTwinNormal(
      {required ObjectArray1 opaque}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque_array_1(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 871, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartOpaqueLoopBackArrayGetTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartOpaqueLoopBackArrayGetTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "loop_back_array_get_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<void>
      crateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackArrayGetTwinRustAsync(
          {required ObjectArray1 opaque}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque_array_1(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 872, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackArrayGetTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackArrayGetTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "loop_back_array_get_twin_rust_async",
            argNames: ["opaque"],
          );

  @override
  void crateApiPseudoManualDartOpaqueTwinSyncLoopBackArrayGetTwinSync(
      {required ObjectArray1 opaque}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque_array_1(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 873)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinSyncLoopBackArrayGetTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinSyncLoopBackArrayGetTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "loop_back_array_get_twin_sync",
            argNames: ["opaque"],
          );

  @override
  Future<ObjectArray1> crateApiDartOpaqueLoopBackArrayTwinNormal(
      {required Object opaque}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 874, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque_array_1,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartOpaqueLoopBackArrayTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartOpaqueLoopBackArrayTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "loop_back_array_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<ObjectArray1>
      crateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackArrayTwinRustAsync(
          {required Object opaque}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 875, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque_array_1,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackArrayTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackArrayTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "loop_back_array_twin_rust_async",
            argNames: ["opaque"],
          );

  @override
  ObjectArray1 crateApiPseudoManualDartOpaqueTwinSyncLoopBackArrayTwinSync(
      {required Object opaque}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 876)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque_array_1,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinSyncLoopBackArrayTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinSyncLoopBackArrayTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "loop_back_array_twin_sync",
            argNames: ["opaque"],
          );

  @override
  Future<void> crateApiDartOpaqueLoopBackOptionGetTwinNormal({Object? opaque}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 877, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartOpaqueLoopBackOptionGetTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartOpaqueLoopBackOptionGetTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "loop_back_option_get_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<void>
      crateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackOptionGetTwinRustAsync(
          {Object? opaque}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 878, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackOptionGetTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackOptionGetTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "loop_back_option_get_twin_rust_async",
            argNames: ["opaque"],
          );

  @override
  void crateApiPseudoManualDartOpaqueTwinSyncLoopBackOptionGetTwinSync(
      {Object? opaque}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 879)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinSyncLoopBackOptionGetTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinSyncLoopBackOptionGetTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "loop_back_option_get_twin_sync",
            argNames: ["opaque"],
          );

  @override
  Future<Object?> crateApiDartOpaqueLoopBackOptionTwinNormal(
      {required Object opaque}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 880, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartOpaqueLoopBackOptionTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartOpaqueLoopBackOptionTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "loop_back_option_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<Object?>
      crateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackOptionTwinRustAsync(
          {required Object opaque}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 881, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackOptionTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackOptionTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "loop_back_option_twin_rust_async",
            argNames: ["opaque"],
          );

  @override
  Object? crateApiPseudoManualDartOpaqueTwinSyncLoopBackOptionTwinSync(
      {required Object opaque}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 882)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinSyncLoopBackOptionTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinSyncLoopBackOptionTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "loop_back_option_twin_sync",
            argNames: ["opaque"],
          );

  @override
  Future<Object> crateApiDartOpaqueLoopBackTwinNormal(
      {required Object opaque}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 883, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartOpaqueLoopBackTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartOpaqueLoopBackTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "loop_back_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<Object>
      crateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackTwinRustAsync(
          {required Object opaque}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 884, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "loop_back_twin_rust_async",
            argNames: ["opaque"],
          );

  @override
  Object crateApiPseudoManualDartOpaqueTwinSyncLoopBackTwinSync(
      {required Object opaque}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 885)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinSyncLoopBackTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinSyncLoopBackTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "loop_back_twin_sync",
            argNames: ["opaque"],
          );

  @override
  Future<void> crateApiDartOpaqueLoopBackVecGetTwinNormal(
      {required List<Object> opaque}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 886, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartOpaqueLoopBackVecGetTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartOpaqueLoopBackVecGetTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "loop_back_vec_get_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<void>
      crateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackVecGetTwinRustAsync(
          {required List<Object> opaque}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 887, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackVecGetTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackVecGetTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "loop_back_vec_get_twin_rust_async",
            argNames: ["opaque"],
          );

  @override
  void crateApiPseudoManualDartOpaqueTwinSyncLoopBackVecGetTwinSync(
      {required List<Object> opaque}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 888)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinSyncLoopBackVecGetTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinSyncLoopBackVecGetTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "loop_back_vec_get_twin_sync",
            argNames: ["opaque"],
          );

  @override
  Future<List<Object>> crateApiDartOpaqueLoopBackVecTwinNormal(
      {required Object opaque}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 889, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartOpaqueLoopBackVecTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartOpaqueLoopBackVecTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "loop_back_vec_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<List<Object>>
      crateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackVecTwinRustAsync(
          {required Object opaque}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 890, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackVecTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackVecTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "loop_back_vec_twin_rust_async",
            argNames: ["opaque"],
          );

  @override
  List<Object> crateApiPseudoManualDartOpaqueTwinSyncLoopBackVecTwinSync(
      {required Object opaque}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 891)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinSyncLoopBackVecTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinSyncLoopBackVecTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "loop_back_vec_twin_sync",
            argNames: ["opaque"],
          );

  @override
  Future<LtTypeWithLifetimeTwinNormal>
      crateApiLifetimeableLtComputeWithLifetimeFunctionTwinNormal(
          {required LtOwnedStructTwinNormal arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtOwnedStructTwinNormal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 892, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithLifetimeTwinNormalstatic,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiLifetimeableLtComputeWithLifetimeFunctionTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiLifetimeableLtComputeWithLifetimeFunctionTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "lt_compute_with_lifetime_function_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<LtTypeWithLifetimeTwinSync>
      crateApiPseudoManualLifetimeableTwinSyncLtComputeWithLifetimeFunctionTwinSync(
          {required LtOwnedStructTwinSync arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtOwnedStructTwinSync(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 893, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithLifetimeTwinSyncstatic,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualLifetimeableTwinSyncLtComputeWithLifetimeFunctionTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualLifetimeableTwinSyncLtComputeWithLifetimeFunctionTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "lt_compute_with_lifetime_function_twin_sync",
            argNames: ["arg"],
          );

  @override
  Stream<ApplicationModeArray2>
      crateApiMirrorMirrorArrayEnumStreamTwinNormal() {
    final sink = RustStreamSink<ApplicationModeArray2>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_application_mode_array_2_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 894, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMirrorMirrorArrayEnumStreamTwinNormalConstMeta,
      argValues: [sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiMirrorMirrorArrayEnumStreamTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "mirror_array_enum_stream_twin_normal",
        argNames: ["sink"],
      );

  @override
  Stream<ApplicationModeArray2>
      crateApiPseudoManualMirrorTwinRustAsyncMirrorArrayEnumStreamTwinRustAsync() {
    final sink = RustStreamSink<ApplicationModeArray2>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_application_mode_array_2_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 895, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncMirrorArrayEnumStreamTwinRustAsyncConstMeta,
      argValues: [sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncMirrorArrayEnumStreamTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "mirror_array_enum_stream_twin_rust_async",
            argNames: ["sink"],
          );

  @override
  Stream<ApplicationModeArray2>
      crateApiPseudoManualMirrorTwinSyncMirrorArrayEnumStreamTwinSync() {
    final sink = RustStreamSink<ApplicationModeArray2>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_application_mode_array_2_Sse(sink, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 896)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncMirrorArrayEnumStreamTwinSyncConstMeta,
      argValues: [sink],
      apiImpl: this,
    ));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncMirrorArrayEnumStreamTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "mirror_array_enum_stream_twin_sync",
            argNames: ["sink"],
          );

  @override
  Stream<ApplicationMode> crateApiMirrorMirrorEnumStreamTwinNormal() {
    final sink = RustStreamSink<ApplicationMode>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_application_mode_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 897, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMirrorMirrorEnumStreamTwinNormalConstMeta,
      argValues: [sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiMirrorMirrorEnumStreamTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "mirror_enum_stream_twin_normal",
        argNames: ["sink"],
      );

  @override
  Stream<ApplicationMode>
      crateApiPseudoManualMirrorTwinRustAsyncMirrorEnumStreamTwinRustAsync() {
    final sink = RustStreamSink<ApplicationMode>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_application_mode_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 898, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncMirrorEnumStreamTwinRustAsyncConstMeta,
      argValues: [sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncMirrorEnumStreamTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "mirror_enum_stream_twin_rust_async",
            argNames: ["sink"],
          );

  @override
  Stream<ApplicationMode>
      crateApiPseudoManualMirrorTwinSyncMirrorEnumStreamTwinSync() {
    final sink = RustStreamSink<ApplicationMode>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_application_mode_Sse(sink, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 899)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncMirrorEnumStreamTwinSyncConstMeta,
      argValues: [sink],
      apiImpl: this,
    ));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncMirrorEnumStreamTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "mirror_enum_stream_twin_sync",
            argNames: ["sink"],
          );

  @override
  Stream<Map<int, ApplicationMode>>
      crateApiMirrorMirrorMapEnumStreamTwinNormal() {
    final sink = RustStreamSink<Map<int, ApplicationMode>>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_Map_u_8_application_mode_None_Sse(
            sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 900, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMirrorMirrorMapEnumStreamTwinNormalConstMeta,
      argValues: [sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiMirrorMirrorMapEnumStreamTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "mirror_map_enum_stream_twin_normal",
        argNames: ["sink"],
      );

  @override
  Stream<Map<int, ApplicationMode>>
      crateApiPseudoManualMirrorTwinRustAsyncMirrorMapEnumStreamTwinRustAsync() {
    final sink = RustStreamSink<Map<int, ApplicationMode>>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_Map_u_8_application_mode_None_Sse(
            sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 901, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncMirrorMapEnumStreamTwinRustAsyncConstMeta,
      argValues: [sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncMirrorMapEnumStreamTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "mirror_map_enum_stream_twin_rust_async",
            argNames: ["sink"],
          );

  @override
  Stream<Map<int, ApplicationMode>>
      crateApiPseudoManualMirrorTwinSyncMirrorMapEnumStreamTwinSync() {
    final sink = RustStreamSink<Map<int, ApplicationMode>>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_Map_u_8_application_mode_None_Sse(
            sink, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 902)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncMirrorMapEnumStreamTwinSyncConstMeta,
      argValues: [sink],
      apiImpl: this,
    ));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncMirrorMapEnumStreamTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "mirror_map_enum_stream_twin_sync",
            argNames: ["sink"],
          );

  @override
  Stream<ApplicationMode?> crateApiMirrorMirrorOptionEnumStreamTwinNormal() {
    final sink = RustStreamSink<ApplicationMode?>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_opt_box_autoadd_application_mode_Sse(
            sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 903, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMirrorMirrorOptionEnumStreamTwinNormalConstMeta,
      argValues: [sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiMirrorMirrorOptionEnumStreamTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "mirror_option_enum_stream_twin_normal",
        argNames: ["sink"],
      );

  @override
  Stream<ApplicationMode?>
      crateApiPseudoManualMirrorTwinRustAsyncMirrorOptionEnumStreamTwinRustAsync() {
    final sink = RustStreamSink<ApplicationMode?>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_opt_box_autoadd_application_mode_Sse(
            sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 904, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncMirrorOptionEnumStreamTwinRustAsyncConstMeta,
      argValues: [sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncMirrorOptionEnumStreamTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "mirror_option_enum_stream_twin_rust_async",
            argNames: ["sink"],
          );

  @override
  Stream<ApplicationMode?>
      crateApiPseudoManualMirrorTwinSyncMirrorOptionEnumStreamTwinSync() {
    final sink = RustStreamSink<ApplicationMode?>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_opt_box_autoadd_application_mode_Sse(
            sink, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 905)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncMirrorOptionEnumStreamTwinSyncConstMeta,
      argValues: [sink],
      apiImpl: this,
    ));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncMirrorOptionEnumStreamTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "mirror_option_enum_stream_twin_sync",
            argNames: ["sink"],
          );

  @override
  Stream<Set<ApplicationMode>> crateApiMirrorMirrorSetEnumStreamTwinNormal() {
    final sink = RustStreamSink<Set<ApplicationMode>>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_Set_application_mode_None_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 906, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMirrorMirrorSetEnumStreamTwinNormalConstMeta,
      argValues: [sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiMirrorMirrorSetEnumStreamTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "mirror_set_enum_stream_twin_normal",
        argNames: ["sink"],
      );

  @override
  Stream<Set<ApplicationMode>>
      crateApiPseudoManualMirrorTwinRustAsyncMirrorSetEnumStreamTwinRustAsync() {
    final sink = RustStreamSink<Set<ApplicationMode>>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_Set_application_mode_None_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 907, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncMirrorSetEnumStreamTwinRustAsyncConstMeta,
      argValues: [sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncMirrorSetEnumStreamTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "mirror_set_enum_stream_twin_rust_async",
            argNames: ["sink"],
          );

  @override
  Stream<Set<ApplicationMode>>
      crateApiPseudoManualMirrorTwinSyncMirrorSetEnumStreamTwinSync() {
    final sink = RustStreamSink<Set<ApplicationMode>>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_Set_application_mode_None_Sse(sink, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 908)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncMirrorSetEnumStreamTwinSyncConstMeta,
      argValues: [sink],
      apiImpl: this,
    ));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncMirrorSetEnumStreamTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "mirror_set_enum_stream_twin_sync",
            argNames: ["sink"],
          );

  @override
  Stream<MirrorStructTwinNormal> crateApiMirrorMirrorStructStreamTwinNormal() {
    final sink = RustStreamSink<MirrorStructTwinNormal>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_mirror_struct_twin_normal_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 909, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMirrorMirrorStructStreamTwinNormalConstMeta,
      argValues: [sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiMirrorMirrorStructStreamTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "mirror_struct_stream_twin_normal",
        argNames: ["sink"],
      );

  @override
  Stream<MirrorStructTwinRustAsync>
      crateApiPseudoManualMirrorTwinRustAsyncMirrorStructStreamTwinRustAsync() {
    final sink = RustStreamSink<MirrorStructTwinRustAsync>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_mirror_struct_twin_rust_async_Sse(
            sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 910, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncMirrorStructStreamTwinRustAsyncConstMeta,
      argValues: [sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncMirrorStructStreamTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "mirror_struct_stream_twin_rust_async",
            argNames: ["sink"],
          );

  @override
  Stream<MirrorStructTwinSync>
      crateApiPseudoManualMirrorTwinSyncMirrorStructStreamTwinSync() {
    final sink = RustStreamSink<MirrorStructTwinSync>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_mirror_struct_twin_sync_Sse(sink, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 911)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncMirrorStructStreamTwinSyncConstMeta,
      argValues: [sink],
      apiImpl: this,
    ));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncMirrorStructStreamTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "mirror_struct_stream_twin_sync",
            argNames: ["sink"],
          );

  @override
  Stream<(ApplicationSettings, RawStringEnumMirrored)>
      crateApiMirrorMirrorTupleStreamTwinNormal() {
    final sink = RustStreamSink<(ApplicationSettings, RawStringEnumMirrored)>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_record_application_settings_raw_string_enum_mirrored_Sse(
            sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 912, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMirrorMirrorTupleStreamTwinNormalConstMeta,
      argValues: [sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiMirrorMirrorTupleStreamTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "mirror_tuple_stream_twin_normal",
        argNames: ["sink"],
      );

  @override
  Stream<(ApplicationSettings, RawStringEnumMirrored)>
      crateApiPseudoManualMirrorTwinRustAsyncMirrorTupleStreamTwinRustAsync() {
    final sink = RustStreamSink<(ApplicationSettings, RawStringEnumMirrored)>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_record_application_settings_raw_string_enum_mirrored_Sse(
            sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 913, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncMirrorTupleStreamTwinRustAsyncConstMeta,
      argValues: [sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncMirrorTupleStreamTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "mirror_tuple_stream_twin_rust_async",
            argNames: ["sink"],
          );

  @override
  Stream<(ApplicationSettings, RawStringEnumMirrored)>
      crateApiPseudoManualMirrorTwinSyncMirrorTupleStreamTwinSync() {
    final sink = RustStreamSink<(ApplicationSettings, RawStringEnumMirrored)>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_record_application_settings_raw_string_enum_mirrored_Sse(
            sink, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 914)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncMirrorTupleStreamTwinSyncConstMeta,
      argValues: [sink],
      apiImpl: this,
    ));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncMirrorTupleStreamTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "mirror_tuple_stream_twin_sync",
            argNames: ["sink"],
          );

  @override
  Stream<List<ApplicationMode>> crateApiMirrorMirrorVecEnumStreamTwinNormal() {
    final sink = RustStreamSink<List<ApplicationMode>>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_list_application_mode_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 915, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMirrorMirrorVecEnumStreamTwinNormalConstMeta,
      argValues: [sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiMirrorMirrorVecEnumStreamTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "mirror_vec_enum_stream_twin_normal",
        argNames: ["sink"],
      );

  @override
  Stream<List<ApplicationMode>>
      crateApiPseudoManualMirrorTwinRustAsyncMirrorVecEnumStreamTwinRustAsync() {
    final sink = RustStreamSink<List<ApplicationMode>>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_list_application_mode_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 916, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncMirrorVecEnumStreamTwinRustAsyncConstMeta,
      argValues: [sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncMirrorVecEnumStreamTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "mirror_vec_enum_stream_twin_rust_async",
            argNames: ["sink"],
          );

  @override
  Stream<List<ApplicationMode>>
      crateApiPseudoManualMirrorTwinSyncMirrorVecEnumStreamTwinSync() {
    final sink = RustStreamSink<List<ApplicationMode>>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_list_application_mode_Sse(sink, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 917)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncMirrorVecEnumStreamTwinSyncConstMeta,
      argValues: [sink],
      apiImpl: this,
    ));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncMirrorVecEnumStreamTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "mirror_vec_enum_stream_twin_sync",
            argNames: ["sink"],
          );

  @override
  Future<MeasureTwinNormal?> crateApiEnumerationMultiplyByTenTwinNormal(
      {required MeasureTwinNormal measure}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_measure_twin_normal(measure, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 918, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_measure_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEnumerationMultiplyByTenTwinNormalConstMeta,
      argValues: [measure],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiEnumerationMultiplyByTenTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "multiply_by_ten_twin_normal",
        argNames: ["measure"],
      );

  @override
  Future<MeasureTwinRustAsync?>
      crateApiPseudoManualEnumerationTwinRustAsyncMultiplyByTenTwinRustAsync(
          {required MeasureTwinRustAsync measure}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_measure_twin_rust_async(measure, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 919, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_measure_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualEnumerationTwinRustAsyncMultiplyByTenTwinRustAsyncConstMeta,
      argValues: [measure],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualEnumerationTwinRustAsyncMultiplyByTenTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "multiply_by_ten_twin_rust_async",
            argNames: ["measure"],
          );

  @override
  MeasureTwinSync? crateApiPseudoManualEnumerationTwinSyncMultiplyByTenTwinSync(
      {required MeasureTwinSync measure}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_measure_twin_sync(measure, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 920)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_measure_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualEnumerationTwinSyncMultiplyByTenTwinSyncConstMeta,
      argValues: [measure],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualEnumerationTwinSyncMultiplyByTenTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "multiply_by_ten_twin_sync",
            argNames: ["measure"],
          );

  @override
  Future<String> crateApiMethodMyCallableTwinNormalCall(
      {required MyCallableTwinNormal that, required String two}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_callable_twin_normal(that, serializer);
        sse_encode_String(two, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 921, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMethodMyCallableTwinNormalCallConstMeta,
      argValues: [that, two],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMethodMyCallableTwinNormalCallConstMeta =>
      const TaskConstMeta(
        debugName: "my_callable_twin_normal_call",
        argNames: ["that", "two"],
      );

  @override
  Future<String>
      crateApiPseudoManualMethodTwinRustAsyncMyCallableTwinRustAsyncCall(
          {required MyCallableTwinRustAsync that, required String two}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_callable_twin_rust_async(that, serializer);
        sse_encode_String(two, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 922, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinRustAsyncMyCallableTwinRustAsyncCallConstMeta,
      argValues: [that, two],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinRustAsyncMyCallableTwinRustAsyncCallConstMeta =>
          const TaskConstMeta(
            debugName: "my_callable_twin_rust_async_call",
            argNames: ["that", "two"],
          );

  @override
  String crateApiPseudoManualMethodTwinSyncMyCallableTwinSyncCall(
      {required MyCallableTwinSync that, required String two}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_callable_twin_sync(that, serializer);
        sse_encode_String(two, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 923)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinSyncMyCallableTwinSyncCallConstMeta,
      argValues: [that, two],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinSyncMyCallableTwinSyncCallConstMeta =>
          const TaskConstMeta(
            debugName: "my_callable_twin_sync_call",
            argNames: ["that", "two"],
          );

  @override
  Future<void> crateApiMiscNoTwinExampleAMyEnumWithJsonSerializableTwinNormalF(
      {required MyEnumWithJsonSerializableTwinNormal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_enum_with_json_serializable_twin_normal(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 924, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleAMyEnumWithJsonSerializableTwinNormalFConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleAMyEnumWithJsonSerializableTwinNormalFConstMeta =>
          const TaskConstMeta(
            debugName: "my_enum_with_json_serializable_twin_normal_f",
            argNames: ["that"],
          );

  @override
  Future<void> crateApiCustomizationMyInitOne() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 925, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiCustomizationMyInitOneConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCustomizationMyInitOneConstMeta =>
      const TaskConstMeta(
        debugName: "my_init_one",
        argNames: [],
      );

  @override
  Future<void> crateApiCustomizationMyInitTwo() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 926, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiCustomizationMyInitTwoConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCustomizationMyInitTwoConstMeta =>
      const TaskConstMeta(
        debugName: "my_init_two",
        argNames: [],
      );

  @override
  Future<void>
      crateApiMiscNoTwinExampleAMyStructWithJsonSerializableTwinNormalF(
          {required MyStructWithJsonSerializableTwinNormal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_struct_with_json_serializable_twin_normal(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 927, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleAMyStructWithJsonSerializableTwinNormalFConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleAMyStructWithJsonSerializableTwinNormalFConstMeta =>
          const TaskConstMeta(
            debugName: "my_struct_with_json_serializable_twin_normal_f",
            argNames: ["that"],
          );

  @override
  Future<void> crateApiMiscNoTwinExampleAMyStructWithSyncSync(
      {required MyStructWithSync that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_struct_with_sync(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 928, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMiscNoTwinExampleAMyStructWithSyncSyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMiscNoTwinExampleAMyStructWithSyncSyncConstMeta =>
      const TaskConstMeta(
        debugName: "my_struct_with_sync_sync(dart_style=sync)",
        argNames: ["that"],
      );

  @override
  Future<DateTime> crateApiChronoTypeNaivedatetimeTwinNormal(
      {required DateTime d}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Chrono_Naive(d, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 929, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Chrono_Naive,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiChronoTypeNaivedatetimeTwinNormalConstMeta,
      argValues: [d],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiChronoTypeNaivedatetimeTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "naivedatetime_twin_normal",
        argNames: ["d"],
      );

  @override
  Future<DateTime>
      crateApiPseudoManualChronoTypeTwinRustAsyncNaivedatetimeTwinRustAsync(
          {required DateTime d}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Chrono_Naive(d, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 930, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Chrono_Naive,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualChronoTypeTwinRustAsyncNaivedatetimeTwinRustAsyncConstMeta,
      argValues: [d],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualChronoTypeTwinRustAsyncNaivedatetimeTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "naivedatetime_twin_rust_async",
            argNames: ["d"],
          );

  @override
  DateTime crateApiPseudoManualChronoTypeTwinSyncNaivedatetimeTwinSync(
      {required DateTime d}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Chrono_Naive(d, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 931)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Chrono_Naive,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualChronoTypeTwinSyncNaivedatetimeTwinSyncConstMeta,
      argValues: [d],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualChronoTypeTwinSyncNaivedatetimeTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "naivedatetime_twin_sync",
            argNames: ["d"],
          );

  @override
  Future<TestIdTwinNormalArray2> crateApiArrayNestedIdTwinNormal(
      {required TestIdTwinNormalArray4 id}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_test_id_twin_normal_array_4(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 932, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_test_id_twin_normal_array_2,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiArrayNestedIdTwinNormalConstMeta,
      argValues: [id],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiArrayNestedIdTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "nested_id_twin_normal",
        argNames: ["id"],
      );

  @override
  Future<TestIdTwinRustAsyncArray2>
      crateApiPseudoManualArrayTwinRustAsyncNestedIdTwinRustAsync(
          {required TestIdTwinRustAsyncArray4 id}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_test_id_twin_rust_async_array_4(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 933, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_test_id_twin_rust_async_array_2,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualArrayTwinRustAsyncNestedIdTwinRustAsyncConstMeta,
      argValues: [id],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualArrayTwinRustAsyncNestedIdTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "nested_id_twin_rust_async",
            argNames: ["id"],
          );

  @override
  TestIdTwinSyncArray2 crateApiPseudoManualArrayTwinSyncNestedIdTwinSync(
      {required TestIdTwinSyncArray4 id}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_test_id_twin_sync_array_4(id, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 934)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_test_id_twin_sync_array_2,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPseudoManualArrayTwinSyncNestedIdTwinSyncConstMeta,
      argValues: [id],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualArrayTwinSyncNestedIdTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "nested_id_twin_sync",
            argNames: ["id"],
          );

  @override
  Future<MessageIdTwinNormal> crateApiArrayNewMsgidTwinNormal(
      {required U8Array32 id}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8_array_32(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 935, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_message_id_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiArrayNewMsgidTwinNormalConstMeta,
      argValues: [id],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiArrayNewMsgidTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "new_msgid_twin_normal",
        argNames: ["id"],
      );

  @override
  Future<MessageIdTwinRustAsync>
      crateApiPseudoManualArrayTwinRustAsyncNewMsgidTwinRustAsync(
          {required U8Array32 id}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8_array_32(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 936, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_message_id_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualArrayTwinRustAsyncNewMsgidTwinRustAsyncConstMeta,
      argValues: [id],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualArrayTwinRustAsyncNewMsgidTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "new_msgid_twin_rust_async",
            argNames: ["id"],
          );

  @override
  MessageIdTwinSync crateApiPseudoManualArrayTwinSyncNewMsgidTwinSync(
      {required U8Array32 id}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8_array_32(id, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 937)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_message_id_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPseudoManualArrayTwinSyncNewMsgidTwinSyncConstMeta,
      argValues: [id],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualArrayTwinSyncNewMsgidTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "new_msgid_twin_sync",
            argNames: ["id"],
          );

  @override
  Future<UserIdTwinNormal> crateApiAttributeNextUserIdTwinNormal(
      {UserIdTwinNormal userId = const UserIdTwinNormal()}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_user_id_twin_normal(userId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 938, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_user_id_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAttributeNextUserIdTwinNormalConstMeta,
      argValues: [userId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAttributeNextUserIdTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "next_user_id_twin_normal",
        argNames: ["userId"],
      );

  @override
  Future<UserIdTwinRustAsync>
      crateApiPseudoManualAttributeTwinRustAsyncNextUserIdTwinRustAsync(
          {UserIdTwinRustAsync userId = const UserIdTwinRustAsync()}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_user_id_twin_rust_async(userId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 939, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_user_id_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualAttributeTwinRustAsyncNextUserIdTwinRustAsyncConstMeta,
      argValues: [userId],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualAttributeTwinRustAsyncNextUserIdTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "next_user_id_twin_rust_async",
            argNames: ["userId"],
          );

  @override
  UserIdTwinSync crateApiPseudoManualAttributeTwinSyncNextUserIdTwinSync(
      {UserIdTwinSync userId = const UserIdTwinSync()}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_user_id_twin_sync(userId, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 940)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_user_id_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualAttributeTwinSyncNextUserIdTwinSyncConstMeta,
      argValues: [userId],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualAttributeTwinSyncNextUserIdTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "next_user_id_twin_sync",
            argNames: ["userId"],
          );

  @override
  Future<void> crateApiRustOpaqueOpaqueArrayRunTwinNormal(
      {required HideDataTwinNormalArray2 data}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_HideDataTwinNormal_array_2(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 941, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRustOpaqueOpaqueArrayRunTwinNormalConstMeta,
      argValues: [data],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRustOpaqueOpaqueArrayRunTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "opaque_array_run_twin_normal",
        argNames: ["data"],
      );

  @override
  Future<void>
      crateApiPseudoManualRustOpaqueTwinRustAsyncOpaqueArrayRunTwinRustAsync(
          {required HideDataTwinRustAsyncArray2 data}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_HideDataTwinRustAsync_array_2(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 942, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinRustAsyncOpaqueArrayRunTwinRustAsyncConstMeta,
      argValues: [data],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinRustAsyncOpaqueArrayRunTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "opaque_array_run_twin_rust_async",
            argNames: ["data"],
          );

  @override
  void crateApiPseudoManualRustOpaqueTwinSyncOpaqueArrayRunTwinSync(
      {required HideDataTwinSyncArray2 data}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_HideDataTwinSync_array_2(data, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 943)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinSyncOpaqueArrayRunTwinSyncConstMeta,
      argValues: [data],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinSyncOpaqueArrayRunTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "opaque_array_run_twin_sync",
            argNames: ["data"],
          );

  @override
  Future<HideDataTwinNormalArray2> crateApiRustOpaqueOpaqueArrayTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 944, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_HideDataTwinNormal_array_2,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRustOpaqueOpaqueArrayTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRustOpaqueOpaqueArrayTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "opaque_array_twin_normal",
        argNames: [],
      );

  @override
  Future<HideDataTwinRustAsyncArray2>
      crateApiPseudoManualRustOpaqueTwinRustAsyncOpaqueArrayTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 945, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_HideDataTwinRustAsync_array_2,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinRustAsyncOpaqueArrayTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinRustAsyncOpaqueArrayTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "opaque_array_twin_rust_async",
            argNames: [],
          );

  @override
  HideDataTwinSyncArray2
      crateApiPseudoManualRustOpaqueTwinSyncOpaqueArrayTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 946)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_HideDataTwinSync_array_2,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinSyncOpaqueArrayTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinSyncOpaqueArrayTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "opaque_array_twin_sync",
            argNames: [],
          );

  @override
  Future<void> crateApiRustOpaqueOpaqueVecRunTwinNormal(
      {required List<HideDataTwinNormal> data}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_RustOpaque_HideDataTwinNormal(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 947, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRustOpaqueOpaqueVecRunTwinNormalConstMeta,
      argValues: [data],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRustOpaqueOpaqueVecRunTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "opaque_vec_run_twin_normal",
        argNames: ["data"],
      );

  @override
  Future<void>
      crateApiPseudoManualRustOpaqueTwinRustAsyncOpaqueVecRunTwinRustAsync(
          {required List<HideDataTwinRustAsync> data}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_RustOpaque_HideDataTwinRustAsync(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 948, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinRustAsyncOpaqueVecRunTwinRustAsyncConstMeta,
      argValues: [data],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinRustAsyncOpaqueVecRunTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "opaque_vec_run_twin_rust_async",
            argNames: ["data"],
          );

  @override
  void crateApiPseudoManualRustOpaqueTwinSyncOpaqueVecRunTwinSync(
      {required List<HideDataTwinSync> data}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_RustOpaque_HideDataTwinSync(data, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 949)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinSyncOpaqueVecRunTwinSyncConstMeta,
      argValues: [data],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinSyncOpaqueVecRunTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "opaque_vec_run_twin_sync",
            argNames: ["data"],
          );

  @override
  Future<List<HideDataTwinNormal>> crateApiRustOpaqueOpaqueVecTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 950, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_RustOpaque_HideDataTwinNormal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRustOpaqueOpaqueVecTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRustOpaqueOpaqueVecTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "opaque_vec_twin_normal",
        argNames: [],
      );

  @override
  Future<List<HideDataTwinRustAsync>>
      crateApiPseudoManualRustOpaqueTwinRustAsyncOpaqueVecTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 951, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_RustOpaque_HideDataTwinRustAsync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinRustAsyncOpaqueVecTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinRustAsyncOpaqueVecTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "opaque_vec_twin_rust_async",
            argNames: [],
          );

  @override
  List<HideDataTwinSync>
      crateApiPseudoManualRustOpaqueTwinSyncOpaqueVecTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 952)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_RustOpaque_HideDataTwinSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinSyncOpaqueVecTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinSyncOpaqueVecTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "opaque_vec_twin_sync",
            argNames: [],
          );

  @override
  Future<DateTime?> crateApiChronoTypeOptionalEmptyDatetimeUtcTwinNormal(
      {DateTime? d}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_Chrono_Utc(d, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 953, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_Chrono_Utc,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiChronoTypeOptionalEmptyDatetimeUtcTwinNormalConstMeta,
      argValues: [d],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiChronoTypeOptionalEmptyDatetimeUtcTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "optional_empty_datetime_utc_twin_normal",
            argNames: ["d"],
          );

  @override
  Future<DateTime?>
      crateApiPseudoManualChronoTypeTwinRustAsyncOptionalEmptyDatetimeUtcTwinRustAsync(
          {DateTime? d}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_Chrono_Utc(d, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 954, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_Chrono_Utc,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualChronoTypeTwinRustAsyncOptionalEmptyDatetimeUtcTwinRustAsyncConstMeta,
      argValues: [d],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualChronoTypeTwinRustAsyncOptionalEmptyDatetimeUtcTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "optional_empty_datetime_utc_twin_rust_async",
            argNames: ["d"],
          );

  @override
  DateTime?
      crateApiPseudoManualChronoTypeTwinSyncOptionalEmptyDatetimeUtcTwinSync(
          {DateTime? d}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_Chrono_Utc(d, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 955)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_Chrono_Utc,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualChronoTypeTwinSyncOptionalEmptyDatetimeUtcTwinSyncConstMeta,
      argValues: [d],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualChronoTypeTwinSyncOptionalEmptyDatetimeUtcTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "optional_empty_datetime_utc_twin_sync",
            argNames: ["d"],
          );

  @override
  Future<void> crateApiDartOpaquePanicUnwrapDartOpaqueTwinNormal(
      {required Object opaque}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 956, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartOpaquePanicUnwrapDartOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiDartOpaquePanicUnwrapDartOpaqueTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "panic_unwrap_dart_opaque_twin_normal",
            argNames: ["opaque"],
          );

  @override
  Future<void>
      crateApiPseudoManualDartOpaqueTwinRustAsyncPanicUnwrapDartOpaqueTwinRustAsync(
          {required Object opaque}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 957, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinRustAsyncPanicUnwrapDartOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinRustAsyncPanicUnwrapDartOpaqueTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "panic_unwrap_dart_opaque_twin_rust_async",
            argNames: ["opaque"],
          );

  @override
  void crateApiPseudoManualDartOpaqueTwinSyncPanicUnwrapDartOpaqueTwinSync(
      {required Object opaque}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 958)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinSyncPanicUnwrapDartOpaqueTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinSyncPanicUnwrapDartOpaqueTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "panic_unwrap_dart_opaque_twin_sync",
            argNames: ["opaque"],
          );

  @override
  Future<void> crateApiExceptionPanicWithCustomResultTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 959, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_error_twin_normal,
      ),
      constMeta: kCrateApiExceptionPanicWithCustomResultTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiExceptionPanicWithCustomResultTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "panic_with_custom_result_twin_normal",
            argNames: [],
          );

  @override
  Future<void>
      crateApiPseudoManualExceptionTwinRustAsyncPanicWithCustomResultTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 960, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_error_twin_rust_async,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncPanicWithCustomResultTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncPanicWithCustomResultTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "panic_with_custom_result_twin_rust_async",
            argNames: [],
          );

  @override
  void crateApiPseudoManualExceptionTwinSyncPanicWithCustomResultTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 961)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_error_twin_sync,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncPanicWithCustomResultTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncPanicWithCustomResultTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "panic_with_custom_result_twin_sync",
            argNames: [],
          );

  @override
  Future<int> crateApiMiscExamplePositionalArgumentsTwinNormal(
      {required int a, required int b}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(a, serializer);
        sse_encode_i_32(b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 962, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMiscExamplePositionalArgumentsTwinNormalConstMeta,
      argValues: [a, b],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscExamplePositionalArgumentsTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "positional_arguments_twin_normal",
            argNames: ["a", "b"],
          );

  @override
  Future<int>
      crateApiPseudoManualMiscExampleTwinRustAsyncPositionalArgumentsTwinRustAsync(
          {required int a, required int b}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(a, serializer);
        sse_encode_i_32(b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 963, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscExampleTwinRustAsyncPositionalArgumentsTwinRustAsyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscExampleTwinRustAsyncPositionalArgumentsTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "positional_arguments_twin_rust_async",
            argNames: ["a", "b"],
          );

  @override
  int crateApiPseudoManualMiscExampleTwinSyncPositionalArgumentsTwinSync(
      {required int a, required int b}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(a, serializer);
        sse_encode_i_32(b, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 964)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscExampleTwinSyncPositionalArgumentsTwinSyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscExampleTwinSyncPositionalArgumentsTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "positional_arguments_twin_sync",
            argNames: ["a", "b"],
          );

  @override
  Future<int?> crateApiOptionalPrimitiveMiscPrimitiveOptionalTypesTwinNormal(
      {int? myI32, PlatformInt64? myI64, double? myF64, bool? myBool}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_i_32(myI32, serializer);
        sse_encode_opt_box_autoadd_i_64(myI64, serializer);
        sse_encode_opt_box_autoadd_f_64(myF64, serializer);
        sse_encode_opt_box_autoadd_bool(myBool, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 965, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiOptionalPrimitiveMiscPrimitiveOptionalTypesTwinNormalConstMeta,
      argValues: [myI32, myI64, myF64, myBool],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiOptionalPrimitiveMiscPrimitiveOptionalTypesTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "primitive_optional_types_twin_normal",
            argNames: ["myI32", "myI64", "myF64", "myBool"],
          );

  @override
  Future<int?>
      crateApiPseudoManualOptionalPrimitiveMiscTwinRustAsyncPrimitiveOptionalTypesTwinRustAsync(
          {int? myI32, PlatformInt64? myI64, double? myF64, bool? myBool}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_i_32(myI32, serializer);
        sse_encode_opt_box_autoadd_i_64(myI64, serializer);
        sse_encode_opt_box_autoadd_f_64(myF64, serializer);
        sse_encode_opt_box_autoadd_bool(myBool, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 966, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOptionalPrimitiveMiscTwinRustAsyncPrimitiveOptionalTypesTwinRustAsyncConstMeta,
      argValues: [myI32, myI64, myF64, myBool],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOptionalPrimitiveMiscTwinRustAsyncPrimitiveOptionalTypesTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "primitive_optional_types_twin_rust_async",
            argNames: ["myI32", "myI64", "myF64", "myBool"],
          );

  @override
  int?
      crateApiPseudoManualOptionalPrimitiveMiscTwinSyncPrimitiveOptionalTypesTwinSync(
          {int? myI32, PlatformInt64? myI64, double? myF64, bool? myBool}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_i_32(myI32, serializer);
        sse_encode_opt_box_autoadd_i_64(myI64, serializer);
        sse_encode_opt_box_autoadd_f_64(myF64, serializer);
        sse_encode_opt_box_autoadd_bool(myBool, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 967)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOptionalPrimitiveMiscTwinSyncPrimitiveOptionalTypesTwinSyncConstMeta,
      argValues: [myI32, myI64, myF64, myBool],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOptionalPrimitiveMiscTwinSyncPrimitiveOptionalTypesTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "primitive_optional_types_twin_sync",
            argNames: ["myI32", "myI64", "myF64", "myBool"],
          );

  @override
  Future<int> crateApiPrimitiveMiscPrimitiveTypesTwinNormal(
      {required int myI32,
      required PlatformInt64 myI64,
      required double myF64,
      required bool myBool}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(myI32, serializer);
        sse_encode_i_64(myI64, serializer);
        sse_encode_f_64(myF64, serializer);
        sse_encode_bool(myBool, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 968, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPrimitiveMiscPrimitiveTypesTwinNormalConstMeta,
      argValues: [myI32, myI64, myF64, myBool],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPrimitiveMiscPrimitiveTypesTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "primitive_types_twin_normal",
        argNames: ["myI32", "myI64", "myF64", "myBool"],
      );

  @override
  Future<int>
      crateApiPseudoManualPrimitiveMiscTwinRustAsyncPrimitiveTypesTwinRustAsync(
          {required int myI32,
          required PlatformInt64 myI64,
          required double myF64,
          required bool myBool}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(myI32, serializer);
        sse_encode_i_64(myI64, serializer);
        sse_encode_f_64(myF64, serializer);
        sse_encode_bool(myBool, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 969, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualPrimitiveMiscTwinRustAsyncPrimitiveTypesTwinRustAsyncConstMeta,
      argValues: [myI32, myI64, myF64, myBool],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualPrimitiveMiscTwinRustAsyncPrimitiveTypesTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "primitive_types_twin_rust_async",
            argNames: ["myI32", "myI64", "myF64", "myBool"],
          );

  @override
  int crateApiPseudoManualPrimitiveMiscTwinSyncPrimitiveTypesTwinSync(
      {required int myI32,
      required PlatformInt64 myI64,
      required double myF64,
      required bool myBool}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(myI32, serializer);
        sse_encode_i_64(myI64, serializer);
        sse_encode_f_64(myF64, serializer);
        sse_encode_bool(myBool, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 970)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualPrimitiveMiscTwinSyncPrimitiveTypesTwinSyncConstMeta,
      argValues: [myI32, myI64, myF64, myBool],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualPrimitiveMiscTwinSyncPrimitiveTypesTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "primitive_types_twin_sync",
            argNames: ["myI32", "myI64", "myF64", "myBool"],
          );

  @override
  Future<int> crateApiPrimitiveMiscPrimitiveU32TwinNormal(
      {required int myU32}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(myU32, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 971, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPrimitiveMiscPrimitiveU32TwinNormalConstMeta,
      argValues: [myU32],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPrimitiveMiscPrimitiveU32TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "primitive_u32_twin_normal",
        argNames: ["myU32"],
      );

  @override
  Future<int>
      crateApiPseudoManualPrimitiveMiscTwinRustAsyncPrimitiveU32TwinRustAsync(
          {required int myU32}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(myU32, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 972, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualPrimitiveMiscTwinRustAsyncPrimitiveU32TwinRustAsyncConstMeta,
      argValues: [myU32],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualPrimitiveMiscTwinRustAsyncPrimitiveU32TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "primitive_u32_twin_rust_async",
            argNames: ["myU32"],
          );

  @override
  int crateApiPseudoManualPrimitiveMiscTwinSyncPrimitiveU32TwinSync(
      {required int myU32}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(myU32, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 973)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualPrimitiveMiscTwinSyncPrimitiveU32TwinSyncConstMeta,
      argValues: [myU32],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualPrimitiveMiscTwinSyncPrimitiveU32TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "primitive_u32_twin_sync",
            argNames: ["myU32"],
          );

  @override
  Future<Uint8List> crateApiEnumerationPrintNoteTwinNormal(
      {required NoteTwinNormal note}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_note_twin_normal(note, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 974, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEnumerationPrintNoteTwinNormalConstMeta,
      argValues: [note],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiEnumerationPrintNoteTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "print_note_twin_normal",
        argNames: ["note"],
      );

  @override
  Future<Uint8List>
      crateApiPseudoManualEnumerationTwinRustAsyncPrintNoteTwinRustAsync(
          {required NoteTwinRustAsync note}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_note_twin_rust_async(note, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 975, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualEnumerationTwinRustAsyncPrintNoteTwinRustAsyncConstMeta,
      argValues: [note],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualEnumerationTwinRustAsyncPrintNoteTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "print_note_twin_rust_async",
            argNames: ["note"],
          );

  @override
  Uint8List crateApiPseudoManualEnumerationTwinSyncPrintNoteTwinSync(
      {required NoteTwinSync note}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_note_twin_sync(note, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 976)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualEnumerationTwinSyncPrintNoteTwinSyncConstMeta,
      argValues: [note],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualEnumerationTwinSyncPrintNoteTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "print_note_twin_sync",
            argNames: ["note"],
          );

  @override
  Future<Stream<EventTwinNormal>>
      crateApiEventListenerRegisterEventListenerTwinNormal() async {
    final listener = RustStreamSink<EventTwinNormal>();
    await handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_event_twin_normal_Sse(listener, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 977, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiEventListenerRegisterEventListenerTwinNormalConstMeta,
      argValues: [listener],
      apiImpl: this,
    ));
    return listener.stream;
  }

  TaskConstMeta
      get kCrateApiEventListenerRegisterEventListenerTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "register_event_listener_twin_normal",
            argNames: ["listener"],
          );

  @override
  Future<Stream<EventTwinRustAsync>>
      crateApiPseudoManualEventListenerTwinRustAsyncRegisterEventListenerTwinRustAsync() async {
    final listener = RustStreamSink<EventTwinRustAsync>();
    await handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_event_twin_rust_async_Sse(listener, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 978, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualEventListenerTwinRustAsyncRegisterEventListenerTwinRustAsyncConstMeta,
      argValues: [listener],
      apiImpl: this,
    ));
    return listener.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualEventListenerTwinRustAsyncRegisterEventListenerTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "register_event_listener_twin_rust_async",
            argNames: ["listener"],
          );

  @override
  Future<Numbers> crateApiMirrorRepeatNumberTwinNormal(
      {required int num, required BigInt times}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(num, serializer);
        sse_encode_usize(times, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 979, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_numbers,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMirrorRepeatNumberTwinNormalConstMeta,
      argValues: [num, times],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMirrorRepeatNumberTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "repeat_number_twin_normal",
        argNames: ["num", "times"],
      );

  @override
  Future<Numbers>
      crateApiPseudoManualMirrorTwinRustAsyncRepeatNumberTwinRustAsync(
          {required int num, required BigInt times}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(num, serializer);
        sse_encode_usize(times, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 980, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_numbers,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncRepeatNumberTwinRustAsyncConstMeta,
      argValues: [num, times],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncRepeatNumberTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "repeat_number_twin_rust_async",
            argNames: ["num", "times"],
          );

  @override
  Numbers crateApiPseudoManualMirrorTwinSyncRepeatNumberTwinSync(
      {required int num, required BigInt times}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(num, serializer);
        sse_encode_usize(times, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 981)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_numbers,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncRepeatNumberTwinSyncConstMeta,
      argValues: [num, times],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncRepeatNumberTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "repeat_number_twin_sync",
            argNames: ["num", "times"],
          );

  @override
  Future<Sequences> crateApiMirrorRepeatSequenceTwinNormal(
      {required int seq, required BigInt times}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(seq, serializer);
        sse_encode_usize(times, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 982, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_sequences,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMirrorRepeatSequenceTwinNormalConstMeta,
      argValues: [seq, times],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMirrorRepeatSequenceTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "repeat_sequence_twin_normal",
        argNames: ["seq", "times"],
      );

  @override
  Future<Sequences>
      crateApiPseudoManualMirrorTwinRustAsyncRepeatSequenceTwinRustAsync(
          {required int seq, required BigInt times}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(seq, serializer);
        sse_encode_usize(times, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 983, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_sequences,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncRepeatSequenceTwinRustAsyncConstMeta,
      argValues: [seq, times],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncRepeatSequenceTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "repeat_sequence_twin_rust_async",
            argNames: ["seq", "times"],
          );

  @override
  Sequences crateApiPseudoManualMirrorTwinSyncRepeatSequenceTwinSync(
      {required int seq, required BigInt times}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(seq, serializer);
        sse_encode_usize(times, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 984)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_sequences,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncRepeatSequenceTwinSyncConstMeta,
      argValues: [seq, times],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncRepeatSequenceTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "repeat_sequence_twin_sync",
            argNames: ["seq", "times"],
          );

  @override
  Future<FeedIdTwinNormal> crateApiArrayReturnBoxedFeedIdTwinNormal(
      {required U8Array8 id}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8_array_8(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 985, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_box_feed_id_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiArrayReturnBoxedFeedIdTwinNormalConstMeta,
      argValues: [id],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiArrayReturnBoxedFeedIdTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "return_boxed_feed_id_twin_normal",
        argNames: ["id"],
      );

  @override
  Future<FeedIdTwinRustAsync>
      crateApiPseudoManualArrayTwinRustAsyncReturnBoxedFeedIdTwinRustAsync(
          {required U8Array8 id}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8_array_8(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 986, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_box_feed_id_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualArrayTwinRustAsyncReturnBoxedFeedIdTwinRustAsyncConstMeta,
      argValues: [id],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualArrayTwinRustAsyncReturnBoxedFeedIdTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "return_boxed_feed_id_twin_rust_async",
            argNames: ["id"],
          );

  @override
  FeedIdTwinSync crateApiPseudoManualArrayTwinSyncReturnBoxedFeedIdTwinSync(
      {required U8Array8 id}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8_array_8(id, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 987)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_box_feed_id_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualArrayTwinSyncReturnBoxedFeedIdTwinSyncConstMeta,
      argValues: [id],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualArrayTwinSyncReturnBoxedFeedIdTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "return_boxed_feed_id_twin_sync",
            argNames: ["id"],
          );

  @override
  Future<U8Array8> crateApiArrayReturnBoxedRawFeedIdTwinNormal(
      {required FeedIdTwinNormal id}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_feed_id_twin_normal(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 988, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_box_u_8_array_8,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiArrayReturnBoxedRawFeedIdTwinNormalConstMeta,
      argValues: [id],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiArrayReturnBoxedRawFeedIdTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "return_boxed_raw_feed_id_twin_normal",
        argNames: ["id"],
      );

  @override
  Future<U8Array8>
      crateApiPseudoManualArrayTwinRustAsyncReturnBoxedRawFeedIdTwinRustAsync(
          {required FeedIdTwinRustAsync id}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_feed_id_twin_rust_async(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 989, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_box_u_8_array_8,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualArrayTwinRustAsyncReturnBoxedRawFeedIdTwinRustAsyncConstMeta,
      argValues: [id],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualArrayTwinRustAsyncReturnBoxedRawFeedIdTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "return_boxed_raw_feed_id_twin_rust_async",
            argNames: ["id"],
          );

  @override
  U8Array8 crateApiPseudoManualArrayTwinSyncReturnBoxedRawFeedIdTwinSync(
      {required FeedIdTwinSync id}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_feed_id_twin_sync(id, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 990)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_box_u_8_array_8,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualArrayTwinSyncReturnBoxedRawFeedIdTwinSyncConstMeta,
      argValues: [id],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualArrayTwinSyncReturnBoxedRawFeedIdTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "return_boxed_raw_feed_id_twin_sync",
            argNames: ["id"],
          );

  @override
  Future<void> crateApiExceptionReturnCustomNestedError1TwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 991, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_nested_error_1_twin_normal,
      ),
      constMeta: kCrateApiExceptionReturnCustomNestedError1TwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiExceptionReturnCustomNestedError1TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "return_custom_nested_error_1_twin_normal",
            argNames: [],
          );

  @override
  Future<void>
      crateApiPseudoManualExceptionTwinRustAsyncReturnCustomNestedError1TwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 992, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_nested_error_1_twin_rust_async,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncReturnCustomNestedError1TwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncReturnCustomNestedError1TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "return_custom_nested_error_1_twin_rust_async",
            argNames: [],
          );

  @override
  void crateApiPseudoManualExceptionTwinSyncReturnCustomNestedError1TwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 993)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_nested_error_1_twin_sync,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncReturnCustomNestedError1TwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncReturnCustomNestedError1TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "return_custom_nested_error_1_twin_sync",
            argNames: [],
          );

  @override
  Future<void> crateApiExceptionReturnCustomNestedError1Variant1TwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 994, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_nested_error_1_twin_normal,
      ),
      constMeta:
          kCrateApiExceptionReturnCustomNestedError1Variant1TwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiExceptionReturnCustomNestedError1Variant1TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "return_custom_nested_error_1_variant1_twin_normal",
            argNames: [],
          );

  @override
  Future<void>
      crateApiPseudoManualExceptionTwinRustAsyncReturnCustomNestedError1Variant1TwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 995, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_nested_error_1_twin_rust_async,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncReturnCustomNestedError1Variant1TwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncReturnCustomNestedError1Variant1TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "return_custom_nested_error_1_variant1_twin_rust_async",
            argNames: [],
          );

  @override
  void
      crateApiPseudoManualExceptionTwinSyncReturnCustomNestedError1Variant1TwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 996)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_nested_error_1_twin_sync,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncReturnCustomNestedError1Variant1TwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncReturnCustomNestedError1Variant1TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "return_custom_nested_error_1_variant1_twin_sync",
            argNames: [],
          );

  @override
  Future<void> crateApiExceptionReturnCustomNestedError2TwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 997, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_nested_error_2_twin_normal,
      ),
      constMeta: kCrateApiExceptionReturnCustomNestedError2TwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiExceptionReturnCustomNestedError2TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "return_custom_nested_error_2_twin_normal",
            argNames: [],
          );

  @override
  Future<void>
      crateApiPseudoManualExceptionTwinRustAsyncReturnCustomNestedError2TwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 998, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_nested_error_2_twin_rust_async,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncReturnCustomNestedError2TwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncReturnCustomNestedError2TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "return_custom_nested_error_2_twin_rust_async",
            argNames: [],
          );

  @override
  void crateApiPseudoManualExceptionTwinSyncReturnCustomNestedError2TwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 999)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_nested_error_2_twin_sync,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncReturnCustomNestedError2TwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncReturnCustomNestedError2TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "return_custom_nested_error_2_twin_sync",
            argNames: [],
          );

  @override
  Future<void> crateApiExceptionReturnCustomStructErrorTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1000, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_normal,
      ),
      constMeta: kCrateApiExceptionReturnCustomStructErrorTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiExceptionReturnCustomStructErrorTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "return_custom_struct_error_twin_normal",
            argNames: [],
          );

  @override
  Future<void>
      crateApiPseudoManualExceptionTwinRustAsyncReturnCustomStructErrorTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1001, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_rust_async,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncReturnCustomStructErrorTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncReturnCustomStructErrorTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "return_custom_struct_error_twin_rust_async",
            argNames: [],
          );

  @override
  void crateApiPseudoManualExceptionTwinSyncReturnCustomStructErrorTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1002)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_sync,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncReturnCustomStructErrorTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncReturnCustomStructErrorTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "return_custom_struct_error_twin_sync",
            argNames: [],
          );

  @override
  Future<int> crateApiExceptionReturnCustomStructOkTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1003, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_normal,
      ),
      constMeta: kCrateApiExceptionReturnCustomStructOkTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiExceptionReturnCustomStructOkTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "return_custom_struct_ok_twin_normal",
        argNames: [],
      );

  @override
  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncReturnCustomStructOkTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1004, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_rust_async,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncReturnCustomStructOkTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncReturnCustomStructOkTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "return_custom_struct_ok_twin_rust_async",
            argNames: [],
          );

  @override
  int crateApiPseudoManualExceptionTwinSyncReturnCustomStructOkTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1005)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_sync,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncReturnCustomStructOkTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncReturnCustomStructOkTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "return_custom_struct_ok_twin_sync",
            argNames: [],
          );

  @override
  Future<int> crateApiExceptionReturnErrCustomErrorTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1006, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_normal,
      ),
      constMeta: kCrateApiExceptionReturnErrCustomErrorTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiExceptionReturnErrCustomErrorTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "return_err_custom_error_twin_normal",
        argNames: [],
      );

  @override
  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncReturnErrCustomErrorTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1007, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_rust_async,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncReturnErrCustomErrorTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncReturnErrCustomErrorTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "return_err_custom_error_twin_rust_async",
            argNames: [],
          );

  @override
  int crateApiPseudoManualExceptionTwinSyncReturnErrCustomErrorTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1008)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_sync,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncReturnErrCustomErrorTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncReturnErrCustomErrorTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "return_err_custom_error_twin_sync",
            argNames: [],
          );

  @override
  Future<int> crateApiExceptionReturnErrorVariantTwinNormal(
      {required int variant}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(variant, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1009, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_normal,
      ),
      constMeta: kCrateApiExceptionReturnErrorVariantTwinNormalConstMeta,
      argValues: [variant],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiExceptionReturnErrorVariantTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "return_error_variant_twin_normal",
        argNames: ["variant"],
      );

  @override
  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncReturnErrorVariantTwinRustAsync(
          {required int variant}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(variant, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1010, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_rust_async,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncReturnErrorVariantTwinRustAsyncConstMeta,
      argValues: [variant],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncReturnErrorVariantTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "return_error_variant_twin_rust_async",
            argNames: ["variant"],
          );

  @override
  int crateApiPseudoManualExceptionTwinSyncReturnErrorVariantTwinSync(
      {required int variant}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(variant, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1011)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_sync,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncReturnErrorVariantTwinSyncConstMeta,
      argValues: [variant],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncReturnErrorVariantTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "return_error_variant_twin_sync",
            argNames: ["variant"],
          );

  @override
  Future<int> crateApiExceptionReturnOkCustomErrorTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1012, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_normal,
      ),
      constMeta: kCrateApiExceptionReturnOkCustomErrorTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiExceptionReturnOkCustomErrorTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "return_ok_custom_error_twin_normal",
        argNames: [],
      );

  @override
  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncReturnOkCustomErrorTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1013, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_rust_async,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncReturnOkCustomErrorTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncReturnOkCustomErrorTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "return_ok_custom_error_twin_rust_async",
            argNames: [],
          );

  @override
  int crateApiPseudoManualExceptionTwinSyncReturnOkCustomErrorTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1014)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_sync,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncReturnOkCustomErrorTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncReturnOkCustomErrorTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "return_ok_custom_error_twin_sync",
            argNames: [],
          );

  @override
  Future<String> crateApiRustOpaqueRunEnumOpaqueTwinNormal(
      {required EnumOpaqueTwinNormal opaque}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_opaque_twin_normal(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1015, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRustOpaqueRunEnumOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRustOpaqueRunEnumOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "run_enum_opaque_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<String>
      crateApiPseudoManualRustOpaqueTwinRustAsyncRunEnumOpaqueTwinRustAsync(
          {required EnumOpaqueTwinRustAsync opaque}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_opaque_twin_rust_async(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1016, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinRustAsyncRunEnumOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinRustAsyncRunEnumOpaqueTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "run_enum_opaque_twin_rust_async",
            argNames: ["opaque"],
          );

  @override
  String crateApiPseudoManualRustOpaqueTwinSyncRunEnumOpaqueTwinSync(
      {required EnumOpaqueTwinSync opaque}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_opaque_twin_sync(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1017)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinSyncRunEnumOpaqueTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinSyncRunEnumOpaqueTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "run_enum_opaque_twin_sync",
            argNames: ["opaque"],
          );

  @override
  Future<void> crateApiRustOpaqueRunNestedOpaqueTwinNormal(
      {required OpaqueNestedTwinNormal opaque}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_opaque_nested_twin_normal(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1018, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRustOpaqueRunNestedOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRustOpaqueRunNestedOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "run_nested_opaque_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<void>
      crateApiPseudoManualRustOpaqueTwinRustAsyncRunNestedOpaqueTwinRustAsync(
          {required OpaqueNestedTwinRustAsync opaque}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_opaque_nested_twin_rust_async(
            opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1019, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinRustAsyncRunNestedOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinRustAsyncRunNestedOpaqueTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "run_nested_opaque_twin_rust_async",
            argNames: ["opaque"],
          );

  @override
  void crateApiPseudoManualRustOpaqueTwinSyncRunNestedOpaqueTwinSync(
      {required OpaqueNestedTwinSync opaque}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_opaque_nested_twin_sync(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1020)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinSyncRunNestedOpaqueTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinSyncRunNestedOpaqueTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "run_nested_opaque_twin_sync",
            argNames: ["opaque"],
          );

  @override
  Future<String> crateApiRustOpaqueRunNonCloneTwinNormal(
      {required NonCloneDataTwinNormal clone}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_NonCloneDataTwinNormal(clone, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1021, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRustOpaqueRunNonCloneTwinNormalConstMeta,
      argValues: [clone],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRustOpaqueRunNonCloneTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "run_non_clone_twin_normal",
        argNames: ["clone"],
      );

  @override
  Future<String>
      crateApiPseudoManualRustOpaqueTwinRustAsyncRunNonCloneTwinRustAsync(
          {required NonCloneDataTwinRustAsync clone}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_NonCloneDataTwinRustAsync(clone, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1022, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinRustAsyncRunNonCloneTwinRustAsyncConstMeta,
      argValues: [clone],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinRustAsyncRunNonCloneTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "run_non_clone_twin_rust_async",
            argNames: ["clone"],
          );

  @override
  String crateApiPseudoManualRustOpaqueTwinSyncRunNonCloneTwinSync(
      {required NonCloneDataTwinSync clone}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_NonCloneDataTwinSync(clone, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1023)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinSyncRunNonCloneTwinSyncConstMeta,
      argValues: [clone],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinSyncRunNonCloneTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "run_non_clone_twin_sync",
            argNames: ["clone"],
          );

  @override
  Future<String> crateApiRustOpaqueRunOpaqueTwinNormal(
      {required HideDataTwinNormal opaque}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_HideDataTwinNormal(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1024, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRustOpaqueRunOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRustOpaqueRunOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "run_opaque_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<String>
      crateApiPseudoManualRustOpaqueTwinRustAsyncRunOpaqueTwinRustAsync(
          {required HideDataTwinRustAsync opaque}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_HideDataTwinRustAsync(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1025, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinRustAsyncRunOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinRustAsyncRunOpaqueTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "run_opaque_twin_rust_async",
            argNames: ["opaque"],
          );

  @override
  String crateApiPseudoManualRustOpaqueTwinSyncRunOpaqueTwinSync(
      {required HideDataTwinSync opaque}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_HideDataTwinSync(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1026)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinSyncRunOpaqueTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinSyncRunOpaqueTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "run_opaque_twin_sync",
            argNames: ["opaque"],
          );

  @override
  Future<String> crateApiRustOpaqueRunOpaqueWithDelayTwinNormal(
      {required HideDataTwinNormal opaque}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_HideDataTwinNormal(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1027, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRustOpaqueRunOpaqueWithDelayTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRustOpaqueRunOpaqueWithDelayTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "run_opaque_with_delay_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<String>
      crateApiPseudoManualRustOpaqueTwinRustAsyncRunOpaqueWithDelayTwinRustAsync(
          {required HideDataTwinRustAsync opaque}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_HideDataTwinRustAsync(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1028, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinRustAsyncRunOpaqueWithDelayTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinRustAsyncRunOpaqueWithDelayTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "run_opaque_with_delay_twin_rust_async",
            argNames: ["opaque"],
          );

  @override
  String crateApiPseudoManualRustOpaqueTwinSyncRunOpaqueWithDelayTwinSync(
      {required HideDataTwinSync opaque}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_HideDataTwinSync(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1029)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinSyncRunOpaqueWithDelayTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinSyncRunOpaqueWithDelayTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "run_opaque_with_delay_twin_sync",
            argNames: ["opaque"],
          );

  @override
  Future<void> crateApiRustAutoOpaqueRustAutoOpaqueArgBorrowTwinNormal(
      {required NonCloneSimpleTwinNormal arg, required int expect}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            arg, serializer);
        sse_encode_i_32(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1030, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueArgBorrowTwinNormalConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueArgBorrowTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_arg_borrow_twin_normal",
            argNames: ["arg", "expect"],
          );

  @override
  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueArgBorrowTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync arg, required int expect}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            arg, serializer);
        sse_encode_i_32(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1031, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueArgBorrowTwinRustAsyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueArgBorrowTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_arg_borrow_twin_rust_async",
            argNames: ["arg", "expect"],
          );

  @override
  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueArgBorrowTwinSync(
          {required NonCloneSimpleTwinSync arg, required int expect}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            arg, serializer);
        sse_encode_i_32(expect, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1032)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueArgBorrowTwinSyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueArgBorrowTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_arg_borrow_twin_sync",
            argNames: ["arg", "expect"],
          );

  @override
  Future<void> crateApiRustAutoOpaqueRustAutoOpaqueArgMutBorrowTwinNormal(
      {required NonCloneSimpleTwinNormal arg,
      required int expect,
      required int adder}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            arg, serializer);
        sse_encode_i_32(expect, serializer);
        sse_encode_i_32(adder, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1033, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueArgMutBorrowTwinNormalConstMeta,
      argValues: [arg, expect, adder],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueArgMutBorrowTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_arg_mut_borrow_twin_normal",
            argNames: ["arg", "expect", "adder"],
          );

  @override
  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueArgMutBorrowTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync arg,
          required int expect,
          required int adder}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            arg, serializer);
        sse_encode_i_32(expect, serializer);
        sse_encode_i_32(adder, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1034, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueArgMutBorrowTwinRustAsyncConstMeta,
      argValues: [arg, expect, adder],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueArgMutBorrowTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_arg_mut_borrow_twin_rust_async",
            argNames: ["arg", "expect", "adder"],
          );

  @override
  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueArgMutBorrowTwinSync(
          {required NonCloneSimpleTwinSync arg,
          required int expect,
          required int adder}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            arg, serializer);
        sse_encode_i_32(expect, serializer);
        sse_encode_i_32(adder, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1035)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueArgMutBorrowTwinSyncConstMeta,
      argValues: [arg, expect, adder],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueArgMutBorrowTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_arg_mut_borrow_twin_sync",
            argNames: ["arg", "expect", "adder"],
          );

  @override
  Future<NonCloneSimpleTwinNormal>
      crateApiRustAutoOpaqueRustAutoOpaqueArgOwnAndReturnOwnTwinNormal(
          {required NonCloneSimpleTwinNormal arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1036, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueArgOwnAndReturnOwnTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueArgOwnAndReturnOwnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_arg_own_and_return_own_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<NonCloneSimpleTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueArgOwnAndReturnOwnTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1037, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueArgOwnAndReturnOwnTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueArgOwnAndReturnOwnTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_arg_own_and_return_own_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  NonCloneSimpleTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueArgOwnAndReturnOwnTwinSync(
          {required NonCloneSimpleTwinSync arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1038)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueArgOwnAndReturnOwnTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueArgOwnAndReturnOwnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_arg_own_and_return_own_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<void> crateApiRustAutoOpaqueRustAutoOpaqueArgOwnTwinNormal(
      {required NonCloneSimpleTwinNormal arg, required int expect}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            arg, serializer);
        sse_encode_i_32(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1039, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRustAutoOpaqueRustAutoOpaqueArgOwnTwinNormalConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueArgOwnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_arg_own_twin_normal",
            argNames: ["arg", "expect"],
          );

  @override
  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueArgOwnTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync arg, required int expect}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            arg, serializer);
        sse_encode_i_32(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1040, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueArgOwnTwinRustAsyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueArgOwnTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_arg_own_twin_rust_async",
            argNames: ["arg", "expect"],
          );

  @override
  void crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueArgOwnTwinSync(
      {required NonCloneSimpleTwinSync arg, required int expect}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            arg, serializer);
        sse_encode_i_32(expect, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1041)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueArgOwnTwinSyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueArgOwnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_arg_own_twin_sync",
            argNames: ["arg", "expect"],
          );

  @override
  Future<void> crateApiRustAutoOpaqueRustAutoOpaqueArgVecOwnTwinNormal(
      {required List<NonCloneSimpleTwinNormal> arg,
      required List<int> expect}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            arg, serializer);
        sse_encode_list_prim_i_32_loose(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1042, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueArgVecOwnTwinNormalConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueArgVecOwnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_arg_vec_own_twin_normal",
            argNames: ["arg", "expect"],
          );

  @override
  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueArgVecOwnTwinRustAsync(
          {required List<NonCloneSimpleTwinRustAsync> arg,
          required List<int> expect}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            arg, serializer);
        sse_encode_list_prim_i_32_loose(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1043, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueArgVecOwnTwinRustAsyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueArgVecOwnTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_arg_vec_own_twin_rust_async",
            argNames: ["arg", "expect"],
          );

  @override
  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueArgVecOwnTwinSync(
          {required List<NonCloneSimpleTwinSync> arg,
          required List<int> expect}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            arg, serializer);
        sse_encode_list_prim_i_32_loose(expect, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1044)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueArgVecOwnTwinSyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueArgVecOwnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_arg_vec_own_twin_sync",
            argNames: ["arg", "expect"],
          );

  @override
  Future<int> crateApiRustAutoOpaqueRustAutoOpaqueBorrowAndBorrowTwinNormal(
      {required NonCloneSimpleTwinNormal a,
      required NonCloneSimpleTwinNormal b}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            a, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1045, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueBorrowAndBorrowTwinNormalConstMeta,
      argValues: [a, b],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueBorrowAndBorrowTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_borrow_and_borrow_twin_normal",
            argNames: ["a", "b"],
          );

  @override
  Future<int>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueBorrowAndBorrowTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync a,
          required NonCloneSimpleTwinRustAsync b}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            a, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1046, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueBorrowAndBorrowTwinRustAsyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueBorrowAndBorrowTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_borrow_and_borrow_twin_rust_async",
            argNames: ["a", "b"],
          );

  @override
  int crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueBorrowAndBorrowTwinSync(
      {required NonCloneSimpleTwinSync a, required NonCloneSimpleTwinSync b}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            a, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            b, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1047)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueBorrowAndBorrowTwinSyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueBorrowAndBorrowTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_borrow_and_borrow_twin_sync",
            argNames: ["a", "b"],
          );

  @override
  Future<int> crateApiRustAutoOpaqueRustAutoOpaqueBorrowAndMutBorrowTwinNormal(
      {required NonCloneSimpleTwinNormal borrow,
      required NonCloneSimpleTwinNormal mutBorrow}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            borrow, serializer);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            mutBorrow, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1048, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueBorrowAndMutBorrowTwinNormalConstMeta,
      argValues: [borrow, mutBorrow],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueBorrowAndMutBorrowTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_borrow_and_mut_borrow_twin_normal",
            argNames: ["borrow", "mutBorrow"],
          );

  @override
  Future<int>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueBorrowAndMutBorrowTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync borrow,
          required NonCloneSimpleTwinRustAsync mutBorrow}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            borrow, serializer);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            mutBorrow, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1049, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueBorrowAndMutBorrowTwinRustAsyncConstMeta,
      argValues: [borrow, mutBorrow],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueBorrowAndMutBorrowTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_borrow_and_mut_borrow_twin_rust_async",
            argNames: ["borrow", "mutBorrow"],
          );

  @override
  int crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueBorrowAndMutBorrowTwinSync(
      {required NonCloneSimpleTwinSync borrow,
      required NonCloneSimpleTwinSync mutBorrow}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            borrow, serializer);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            mutBorrow, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1050)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueBorrowAndMutBorrowTwinSyncConstMeta,
      argValues: [borrow, mutBorrow],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueBorrowAndMutBorrowTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_borrow_and_mut_borrow_twin_sync",
            argNames: ["borrow", "mutBorrow"],
          );

  @override
  Future<void> crateApiRustAutoOpaqueRustAutoOpaqueCallableArgTwinNormal(
      {required BoxFnStringString arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynFnStringStringSendSync(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1051, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueCallableArgTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueCallableArgTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_callable_arg_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueCallableArgTwinRustAsync(
          {required BoxFnStringString arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynFnStringStringSendSync(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1052, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueCallableArgTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueCallableArgTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_callable_arg_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueCallableArgTwinSync(
          {required BoxFnStringString arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynFnStringStringSendSync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1053)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueCallableArgTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueCallableArgTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_callable_arg_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<BoxFnStringString>
      crateApiRustAutoOpaqueRustAutoOpaqueCallableReturnTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1054, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynFnStringStringSendSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueCallableReturnTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueCallableReturnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_callable_return_twin_normal",
            argNames: [],
          );

  @override
  Future<BoxFnStringString>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueCallableReturnTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1055, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynFnStringStringSendSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueCallableReturnTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueCallableReturnTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_callable_return_twin_rust_async",
            argNames: [],
          );

  @override
  BoxFnStringString
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueCallableReturnTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1056)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynFnStringStringSendSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueCallableReturnTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueCallableReturnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_callable_return_twin_sync",
            argNames: [],
          );

  @override
  Future<void> crateApiRustAutoOpaqueRustAutoOpaqueDummyTwinNormal(
      {required StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal a,
      required EnumWithGoodAndOpaqueWithoutOptionTwinNormal b}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinNormal(
            a, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinNormal(
            b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1057, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRustAutoOpaqueRustAutoOpaqueDummyTwinNormalConstMeta,
      argValues: [a, b],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueDummyTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_dummy_twin_normal",
            argNames: ["a", "b"],
          );

  @override
  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueDummyTwinRustAsync(
          {required StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync a,
          required EnumWithGoodAndOpaqueWithoutOptionTwinRustAsync b}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync(
            a, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinRustAsync(
            b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1058, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueDummyTwinRustAsyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueDummyTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_dummy_twin_rust_async",
            argNames: ["a", "b"],
          );

  @override
  void crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueDummyTwinSync(
      {required StructWithGoodAndOpaqueFieldWithoutOptionTwinSync a,
      required EnumWithGoodAndOpaqueWithoutOptionTwinSync b}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinSync(
            a, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinSync(
            b, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1059)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueDummyTwinSyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueDummyTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_dummy_twin_sync",
            argNames: ["a", "b"],
          );

  @override
  Future<void> crateApiRustAutoOpaqueRustAutoOpaqueEnumArgBorrowTwinNormal(
      {required NonCloneSimpleEnumTwinNormal arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinNormal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1060, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueEnumArgBorrowTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueEnumArgBorrowTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_enum_arg_borrow_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueEnumArgBorrowTwinRustAsync(
          {required NonCloneSimpleEnumTwinRustAsync arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinRustAsync(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1061, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueEnumArgBorrowTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueEnumArgBorrowTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_enum_arg_borrow_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueEnumArgBorrowTwinSync(
          {required NonCloneSimpleEnumTwinSync arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinSync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1062)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueEnumArgBorrowTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueEnumArgBorrowTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_enum_arg_borrow_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<NonCloneSimpleEnumTwinNormal>
      crateApiRustAutoOpaqueRustAutoOpaqueEnumReturnOwnTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1063, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinNormal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueEnumReturnOwnTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueEnumReturnOwnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_enum_return_own_twin_normal",
            argNames: [],
          );

  @override
  Future<NonCloneSimpleEnumTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueEnumReturnOwnTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1064, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinRustAsync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueEnumReturnOwnTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueEnumReturnOwnTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_enum_return_own_twin_rust_async",
            argNames: [],
          );

  @override
  NonCloneSimpleEnumTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueEnumReturnOwnTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1065)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueEnumReturnOwnTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueEnumReturnOwnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_enum_return_own_twin_sync",
            argNames: [],
          );

  @override
  Future<void>
      crateApiRustAutoOpaqueRustAutoOpaqueEnumWithGoodAndOpaqueArgOwnTwinNormal(
          {required EnumWithGoodAndOpaqueTwinNormal arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_with_good_and_opaque_twin_normal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1066, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueEnumWithGoodAndOpaqueArgOwnTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueEnumWithGoodAndOpaqueArgOwnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_enum_with_good_and_opaque_arg_own_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueEnumWithGoodAndOpaqueArgOwnTwinRustAsync(
          {required EnumWithGoodAndOpaqueTwinRustAsync arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_with_good_and_opaque_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1067, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueEnumWithGoodAndOpaqueArgOwnTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueEnumWithGoodAndOpaqueArgOwnTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_enum_with_good_and_opaque_arg_own_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueEnumWithGoodAndOpaqueArgOwnTwinSync(
          {required EnumWithGoodAndOpaqueTwinSync arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_with_good_and_opaque_twin_sync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1068)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueEnumWithGoodAndOpaqueArgOwnTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueEnumWithGoodAndOpaqueArgOwnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_enum_with_good_and_opaque_arg_own_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<EnumWithGoodAndOpaqueTwinNormal>
      crateApiRustAutoOpaqueRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnGoodTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1069, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_with_good_and_opaque_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnGoodTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnGoodTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_enum_with_good_and_opaque_return_own_good_twin_normal",
            argNames: [],
          );

  @override
  Future<EnumWithGoodAndOpaqueTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnGoodTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1070, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_with_good_and_opaque_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnGoodTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnGoodTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_enum_with_good_and_opaque_return_own_good_twin_rust_async",
            argNames: [],
          );

  @override
  EnumWithGoodAndOpaqueTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnGoodTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1071)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_with_good_and_opaque_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnGoodTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnGoodTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_enum_with_good_and_opaque_return_own_good_twin_sync",
            argNames: [],
          );

  @override
  Future<EnumWithGoodAndOpaqueTwinNormal>
      crateApiRustAutoOpaqueRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnOpaqueTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1072, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_with_good_and_opaque_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnOpaqueTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnOpaqueTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_enum_with_good_and_opaque_return_own_opaque_twin_normal",
            argNames: [],
          );

  @override
  Future<EnumWithGoodAndOpaqueTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnOpaqueTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1073, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_with_good_and_opaque_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnOpaqueTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnOpaqueTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_enum_with_good_and_opaque_return_own_opaque_twin_rust_async",
            argNames: [],
          );

  @override
  EnumWithGoodAndOpaqueTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnOpaqueTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1074)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_with_good_and_opaque_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnOpaqueTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnOpaqueTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_enum_with_good_and_opaque_return_own_opaque_twin_sync",
            argNames: [],
          );

  @override
  Future<void> crateApiRustAutoOpaqueRustAutoOpaqueExplicitArgTwinNormal(
      {required NonCloneSimpleTwinNormal arg, required int expect}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            arg, serializer);
        sse_encode_i_32(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1075, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueExplicitArgTwinNormalConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueExplicitArgTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_explicit_arg_twin_normal",
            argNames: ["arg", "expect"],
          );

  @override
  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueExplicitArgTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync arg, required int expect}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            arg, serializer);
        sse_encode_i_32(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1076, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueExplicitArgTwinRustAsyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueExplicitArgTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_explicit_arg_twin_rust_async",
            argNames: ["arg", "expect"],
          );

  @override
  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueExplicitArgTwinSync(
          {required NonCloneSimpleTwinSync arg, required int expect}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            arg, serializer);
        sse_encode_i_32(expect, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1077)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueExplicitArgTwinSyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueExplicitArgTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_explicit_arg_twin_sync",
            argNames: ["arg", "expect"],
          );

  @override
  Future<StructWithExplicitAutoOpaqueFieldTwinNormal>
      crateApiRustAutoOpaqueRustAutoOpaqueExplicitReturnStructTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1078, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_struct_with_explicit_auto_opaque_field_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueExplicitReturnStructTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueExplicitReturnStructTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_explicit_return_struct_twin_normal",
            argNames: [],
          );

  @override
  Future<StructWithExplicitAutoOpaqueFieldTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueExplicitReturnStructTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1079, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_struct_with_explicit_auto_opaque_field_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueExplicitReturnStructTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueExplicitReturnStructTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_explicit_return_struct_twin_rust_async",
            argNames: [],
          );

  @override
  StructWithExplicitAutoOpaqueFieldTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueExplicitReturnStructTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1080)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_struct_with_explicit_auto_opaque_field_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueExplicitReturnStructTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueExplicitReturnStructTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_explicit_return_struct_twin_sync",
            argNames: [],
          );

  @override
  Future<NonCloneSimpleTwinNormal>
      crateApiRustAutoOpaqueRustAutoOpaqueExplicitReturnTwinNormal(
          {required int initial}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(initial, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1081, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueExplicitReturnTwinNormalConstMeta,
      argValues: [initial],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueExplicitReturnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_explicit_return_twin_normal",
            argNames: ["initial"],
          );

  @override
  Future<NonCloneSimpleTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueExplicitReturnTwinRustAsync(
          {required int initial}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(initial, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1082, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueExplicitReturnTwinRustAsyncConstMeta,
      argValues: [initial],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueExplicitReturnTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_explicit_return_twin_rust_async",
            argNames: ["initial"],
          );

  @override
  NonCloneSimpleTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueExplicitReturnTwinSync(
          {required int initial}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(initial, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1083)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueExplicitReturnTwinSyncConstMeta,
      argValues: [initial],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueExplicitReturnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_explicit_return_twin_sync",
            argNames: ["initial"],
          );

  @override
  Future<void> crateApiRustAutoOpaqueRustAutoOpaqueExplicitStructTwinNormal(
      {required StructWithExplicitAutoOpaqueFieldTwinNormal arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_explicit_auto_opaque_field_twin_normal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1084, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueExplicitStructTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueExplicitStructTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_explicit_struct_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueExplicitStructTwinRustAsync(
          {required StructWithExplicitAutoOpaqueFieldTwinRustAsync arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_explicit_auto_opaque_field_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1085, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueExplicitStructTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueExplicitStructTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_explicit_struct_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueExplicitStructTwinSync(
          {required StructWithExplicitAutoOpaqueFieldTwinSync arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_explicit_auto_opaque_field_twin_sync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1086)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueExplicitStructTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueExplicitStructTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_explicit_struct_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<void> crateApiRustAutoOpaqueRustAutoOpaqueNormalAndOpaqueArgTwinNormal(
      {required NonCloneSimpleTwinNormal a, required String b}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            a, serializer);
        sse_encode_String(b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1087, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueNormalAndOpaqueArgTwinNormalConstMeta,
      argValues: [a, b],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueNormalAndOpaqueArgTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_normal_and_opaque_arg_twin_normal",
            argNames: ["a", "b"],
          );

  @override
  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueNormalAndOpaqueArgTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync a, required String b}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            a, serializer);
        sse_encode_String(b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1088, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueNormalAndOpaqueArgTwinRustAsyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueNormalAndOpaqueArgTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_normal_and_opaque_arg_twin_rust_async",
            argNames: ["a", "b"],
          );

  @override
  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueNormalAndOpaqueArgTwinSync(
          {required NonCloneSimpleTwinSync a, required String b}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            a, serializer);
        sse_encode_String(b, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1089)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueNormalAndOpaqueArgTwinSyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueNormalAndOpaqueArgTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_normal_and_opaque_arg_twin_sync",
            argNames: ["a", "b"],
          );

  @override
  Future<void> crateApiRustAutoOpaqueRustAutoOpaquePlusSignArgTwinNormal(
      {required BoxMyTraitTwinNormal arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinNormalSendSync(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1090, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaquePlusSignArgTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaquePlusSignArgTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_plus_sign_arg_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaquePlusSignArgTwinRustAsync(
          {required BoxMyTraitTwinRustAsync arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinRustAsyncSendSync(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1091, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaquePlusSignArgTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaquePlusSignArgTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_plus_sign_arg_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaquePlusSignArgTwinSync(
          {required BoxMyTraitTwinSync arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinSyncSendSync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1092)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaquePlusSignArgTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaquePlusSignArgTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_plus_sign_arg_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<BoxMyTraitTwinNormal>
      crateApiRustAutoOpaqueRustAutoOpaquePlusSignReturnTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1093, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinNormalSendSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaquePlusSignReturnTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaquePlusSignReturnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_plus_sign_return_twin_normal",
            argNames: [],
          );

  @override
  Future<BoxMyTraitTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaquePlusSignReturnTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1094, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinRustAsyncSendSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaquePlusSignReturnTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaquePlusSignReturnTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_plus_sign_return_twin_rust_async",
            argNames: [],
          );

  @override
  BoxMyTraitTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaquePlusSignReturnTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1095)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinSyncSendSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaquePlusSignReturnTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaquePlusSignReturnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_plus_sign_return_twin_sync",
            argNames: [],
          );

  @override
  Future<(OpaqueOneTwinNormal, OpaqueTwoTwinNormal)>
      crateApiRustAutoOpaqueRustAutoOpaqueReturnOpaqueOneAndTwoTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1096, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_one_twin_normal_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_two_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueReturnOpaqueOneAndTwoTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueReturnOpaqueOneAndTwoTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_return_opaque_one_and_two_twin_normal",
            argNames: [],
          );

  @override
  Future<(OpaqueOneTwinRustAsync, OpaqueTwoTwinRustAsync)>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueReturnOpaqueOneAndTwoTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1097, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_one_twin_rust_async_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_two_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueReturnOpaqueOneAndTwoTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueReturnOpaqueOneAndTwoTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_return_opaque_one_and_two_twin_rust_async",
            argNames: [],
          );

  @override
  (
    OpaqueOneTwinSync,
    OpaqueTwoTwinSync
  ) crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueReturnOpaqueOneAndTwoTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1098)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_one_twin_sync_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_two_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueReturnOpaqueOneAndTwoTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueReturnOpaqueOneAndTwoTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_return_opaque_one_and_two_twin_sync",
            argNames: [],
          );

  @override
  Future<OpaqueTwoTwinNormal>
      crateApiRustAutoOpaqueRustAutoOpaqueReturnOpaqueTwoTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1099, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinNormal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueReturnOpaqueTwoTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueReturnOpaqueTwoTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_return_opaque_two_twin_normal",
            argNames: [],
          );

  @override
  Future<OpaqueTwoTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueReturnOpaqueTwoTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1100, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinRustAsync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueReturnOpaqueTwoTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueReturnOpaqueTwoTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_return_opaque_two_twin_rust_async",
            argNames: [],
          );

  @override
  OpaqueTwoTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueReturnOpaqueTwoTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1101)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueReturnOpaqueTwoTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueReturnOpaqueTwoTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_return_opaque_two_twin_sync",
            argNames: [],
          );

  @override
  Future<NonCloneSimpleTwinNormal>
      crateApiRustAutoOpaqueRustAutoOpaqueReturnOwnTwinNormal(
          {required int initial}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(initial, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1102, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueReturnOwnTwinNormalConstMeta,
      argValues: [initial],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueReturnOwnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_return_own_twin_normal",
            argNames: ["initial"],
          );

  @override
  Future<NonCloneSimpleTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueReturnOwnTwinRustAsync(
          {required int initial}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(initial, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1103, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueReturnOwnTwinRustAsyncConstMeta,
      argValues: [initial],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueReturnOwnTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_return_own_twin_rust_async",
            argNames: ["initial"],
          );

  @override
  NonCloneSimpleTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueReturnOwnTwinSync(
          {required int initial}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(initial, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1104)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueReturnOwnTwinSyncConstMeta,
      argValues: [initial],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueReturnOwnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_return_own_twin_sync",
            argNames: ["initial"],
          );

  @override
  Future<List<NonCloneSimpleTwinNormal>>
      crateApiRustAutoOpaqueRustAutoOpaqueReturnVecOwnTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1105, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueReturnVecOwnTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueReturnVecOwnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_return_vec_own_twin_normal",
            argNames: [],
          );

  @override
  Future<List<NonCloneSimpleTwinRustAsync>>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueReturnVecOwnTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1106, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueReturnVecOwnTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueReturnVecOwnTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_return_vec_own_twin_rust_async",
            argNames: [],
          );

  @override
  List<NonCloneSimpleTwinSync>
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueReturnVecOwnTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1107)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueReturnVecOwnTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueReturnVecOwnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_return_vec_own_twin_sync",
            argNames: [],
          );

  @override
  Future<int> crateApiRustAutoOpaqueRustAutoOpaqueSleepTwinNormal(
      {required NonCloneSimpleTwinNormal apple,
      required NonCloneSimpleTwinNormal orange}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            apple, serializer);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            orange, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1108, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRustAutoOpaqueRustAutoOpaqueSleepTwinNormalConstMeta,
      argValues: [apple, orange],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueSleepTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_sleep_twin_normal",
            argNames: ["apple", "orange"],
          );

  @override
  Future<int>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueSleepTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync apple,
          required NonCloneSimpleTwinRustAsync orange}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            apple, serializer);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            orange, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1109, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueSleepTwinRustAsyncConstMeta,
      argValues: [apple, orange],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueSleepTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_sleep_twin_rust_async",
            argNames: ["apple", "orange"],
          );

  @override
  int crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueSleepTwinSync(
      {required NonCloneSimpleTwinSync apple,
      required NonCloneSimpleTwinSync orange}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            apple, serializer);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            orange, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1110)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueSleepTwinSyncConstMeta,
      argValues: [apple, orange],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueSleepTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_sleep_twin_sync",
            argNames: ["apple", "orange"],
          );

  @override
  Stream<NonCloneSimpleTwinNormal>
      crateApiRustAutoOpaqueRustAutoOpaqueStreamSinkTwinNormal() {
    final sink = RustStreamSink<NonCloneSimpleTwinNormal>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal_Sse(
            sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1111, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueStreamSinkTwinNormalConstMeta,
      argValues: [sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueStreamSinkTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_stream_sink_twin_normal",
            argNames: ["sink"],
          );

  @override
  Stream<NonCloneSimpleTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueStreamSinkTwinRustAsync() {
    final sink = RustStreamSink<NonCloneSimpleTwinRustAsync>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync_Sse(
            sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1112, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueStreamSinkTwinRustAsyncConstMeta,
      argValues: [sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueStreamSinkTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_stream_sink_twin_rust_async",
            argNames: ["sink"],
          );

  @override
  Stream<NonCloneSimpleTwinSync>
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueStreamSinkTwinSync() {
    final sink = RustStreamSink<NonCloneSimpleTwinSync>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync_Sse(
            sink, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1113)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueStreamSinkTwinSyncConstMeta,
      argValues: [sink],
      apiImpl: this,
    ));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueStreamSinkTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_stream_sink_twin_sync",
            argNames: ["sink"],
          );

  @override
  Future<void>
      crateApiRustAutoOpaqueRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinNormal(
          {required StructWithGoodAndOpaqueFieldTwinNormal arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_good_and_opaque_field_twin_normal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1114, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinRustAsync(
          {required StructWithGoodAndOpaqueFieldTwinRustAsync arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_good_and_opaque_field_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1115, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinSync(
          {required StructWithGoodAndOpaqueFieldTwinSync arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_good_and_opaque_field_twin_sync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1116)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<StructWithGoodAndOpaqueFieldTwinNormal>
      crateApiRustAutoOpaqueRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1117, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_struct_with_good_and_opaque_field_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_normal",
            argNames: [],
          );

  @override
  Future<StructWithGoodAndOpaqueFieldTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1118, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_struct_with_good_and_opaque_field_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_rust_async",
            argNames: [],
          );

  @override
  StructWithGoodAndOpaqueFieldTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1119)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_struct_with_good_and_opaque_field_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sync",
            argNames: [],
          );

  @override
  Future<void> crateApiRustAutoOpaqueRustAutoOpaqueTwoArgsTwinNormal(
      {required NonCloneSimpleTwinNormal a,
      required NonCloneSimpleTwinNormal b}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            a, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1120, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueTwoArgsTwinNormalConstMeta,
      argValues: [a, b],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueTwoArgsTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_two_args_twin_normal",
            argNames: ["a", "b"],
          );

  @override
  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueTwoArgsTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync a,
          required NonCloneSimpleTwinRustAsync b}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            a, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1121, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueTwoArgsTwinRustAsyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueTwoArgsTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_two_args_twin_rust_async",
            argNames: ["a", "b"],
          );

  @override
  void crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueTwoArgsTwinSync(
      {required NonCloneSimpleTwinSync a, required NonCloneSimpleTwinSync b}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            a, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            b, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1122)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueTwoArgsTwinSyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueTwoArgsTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_two_args_twin_sync",
            argNames: ["a", "b"],
          );

  @override
  Future<void> crateApiDartFnRustCallDartLoopbackTwinNormal(
      {required FutureOr<DemoStructForRustCallDartTwinNormal> Function(
              DemoStructForRustCallDartTwinNormal)
          callback}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs_demo_struct_for_rust_call_dart_twin_normal_Output_demo_struct_for_rust_call_dart_twin_normal_AnyhowException(
            callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1123, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartFnRustCallDartLoopbackTwinNormalConstMeta,
      argValues: [callback],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartFnRustCallDartLoopbackTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_call_dart_loopback_twin_normal",
        argNames: ["callback"],
      );

  @override
  Future<void>
      crateApiPseudoManualDartFnTwinRustAsyncRustCallDartLoopbackTwinRustAsync(
          {required FutureOr<DemoStructForRustCallDartTwinRustAsync> Function(
                  DemoStructForRustCallDartTwinRustAsync)
              callback}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs_demo_struct_for_rust_call_dart_twin_rust_async_Output_demo_struct_for_rust_call_dart_twin_rust_async_AnyhowException(
            callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1124, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartFnTwinRustAsyncRustCallDartLoopbackTwinRustAsyncConstMeta,
      argValues: [callback],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartFnTwinRustAsyncRustCallDartLoopbackTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_call_dart_loopback_twin_rust_async",
            argNames: ["callback"],
          );

  @override
  Future<void> crateApiDartFnRustCallDartMultiTimesTwinNormal(
      {required FutureOr<void> Function() callback, required int numTimes}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs__Output_unit_AnyhowException(
            callback, serializer);
        sse_encode_i_32(numTimes, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1125, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartFnRustCallDartMultiTimesTwinNormalConstMeta,
      argValues: [callback, numTimes],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartFnRustCallDartMultiTimesTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_call_dart_multi_times_twin_normal",
        argNames: ["callback", "numTimes"],
      );

  @override
  Future<void>
      crateApiPseudoManualDartFnTwinRustAsyncRustCallDartMultiTimesTwinRustAsync(
          {required FutureOr<void> Function() callback,
          required int numTimes}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs__Output_unit_AnyhowException(
            callback, serializer);
        sse_encode_i_32(numTimes, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1126, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartFnTwinRustAsyncRustCallDartMultiTimesTwinRustAsyncConstMeta,
      argValues: [callback, numTimes],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartFnTwinRustAsyncRustCallDartMultiTimesTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_call_dart_multi_times_twin_rust_async",
            argNames: ["callback", "numTimes"],
          );

  @override
  Future<void> crateApiDartFnRustCallDartOneArgTwinNormal(
      {required FutureOr<void> Function(String) callback}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs_String_Output_unit_AnyhowException(
            callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1127, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartFnRustCallDartOneArgTwinNormalConstMeta,
      argValues: [callback],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartFnRustCallDartOneArgTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_call_dart_one_arg_twin_normal",
        argNames: ["callback"],
      );

  @override
  Future<void>
      crateApiPseudoManualDartFnTwinRustAsyncRustCallDartOneArgTwinRustAsync(
          {required FutureOr<void> Function(String) callback}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs_String_Output_unit_AnyhowException(
            callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1128, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartFnTwinRustAsyncRustCallDartOneArgTwinRustAsyncConstMeta,
      argValues: [callback],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartFnTwinRustAsyncRustCallDartOneArgTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_call_dart_one_arg_twin_rust_async",
            argNames: ["callback"],
          );

  @override
  Future<void> crateApiDartFnRustCallDartReturnResultTwinNormal(
      {required FutureOr<String> Function(String) callback,
      String? expectOutput}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs_String_Output_String_AnyhowException(
            callback, serializer);
        sse_encode_opt_String(expectOutput, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1129, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartFnRustCallDartReturnResultTwinNormalConstMeta,
      argValues: [callback, expectOutput],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiDartFnRustCallDartReturnResultTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_call_dart_return_result_twin_normal",
            argNames: ["callback", "expectOutput"],
          );

  @override
  Future<void>
      crateApiPseudoManualDartFnTwinRustAsyncRustCallDartReturnResultTwinRustAsync(
          {required FutureOr<String> Function(String) callback,
          String? expectOutput}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs_String_Output_String_AnyhowException(
            callback, serializer);
        sse_encode_opt_String(expectOutput, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1130, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartFnTwinRustAsyncRustCallDartReturnResultTwinRustAsyncConstMeta,
      argValues: [callback, expectOutput],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartFnTwinRustAsyncRustCallDartReturnResultTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_call_dart_return_result_twin_rust_async",
            argNames: ["callback", "expectOutput"],
          );

  @override
  Future<void> crateApiDartFnRustCallDartReturnTwinNormal(
      {required FutureOr<String> Function() callback}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs__Output_String_AnyhowException(
            callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1131, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartFnRustCallDartReturnTwinNormalConstMeta,
      argValues: [callback],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartFnRustCallDartReturnTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_call_dart_return_twin_normal",
        argNames: ["callback"],
      );

  @override
  Future<void>
      crateApiPseudoManualDartFnTwinRustAsyncRustCallDartReturnTwinRustAsync(
          {required FutureOr<String> Function() callback}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs__Output_String_AnyhowException(
            callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1132, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartFnTwinRustAsyncRustCallDartReturnTwinRustAsyncConstMeta,
      argValues: [callback],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartFnTwinRustAsyncRustCallDartReturnTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_call_dart_return_twin_rust_async",
            argNames: ["callback"],
          );

  @override
  Future<void> crateApiDartFnRustCallDartSimpleTwinNormal(
      {required FutureOr<void> Function() callback}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs__Output_unit_AnyhowException(
            callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1133, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartFnRustCallDartSimpleTwinNormalConstMeta,
      argValues: [callback],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartFnRustCallDartSimpleTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_call_dart_simple_twin_normal",
        argNames: ["callback"],
      );

  @override
  Future<void>
      crateApiPseudoManualDartFnTwinRustAsyncRustCallDartSimpleTwinRustAsync(
          {required FutureOr<void> Function() callback}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs__Output_unit_AnyhowException(
            callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1134, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartFnTwinRustAsyncRustCallDartSimpleTwinRustAsyncConstMeta,
      argValues: [callback],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartFnTwinRustAsyncRustCallDartSimpleTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_call_dart_simple_twin_rust_async",
            argNames: ["callback"],
          );

  @override
  Future<void> crateApiDartFnRustCallDartTwoArgsTwinNormal(
      {required FutureOr<void> Function(
              String, DemoStructForRustCallDartTwinNormal)
          callback}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs_String_demo_struct_for_rust_call_dart_twin_normal_Output_unit_AnyhowException(
            callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1135, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartFnRustCallDartTwoArgsTwinNormalConstMeta,
      argValues: [callback],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartFnRustCallDartTwoArgsTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_call_dart_two_args_twin_normal",
        argNames: ["callback"],
      );

  @override
  Future<void>
      crateApiPseudoManualDartFnTwinRustAsyncRustCallDartTwoArgsTwinRustAsync(
          {required FutureOr<void> Function(
                  String, DemoStructForRustCallDartTwinRustAsync)
              callback}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs_String_demo_struct_for_rust_call_dart_twin_rust_async_Output_unit_AnyhowException(
            callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1136, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartFnTwinRustAsyncRustCallDartTwoArgsTwinRustAsyncConstMeta,
      argValues: [callback],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartFnTwinRustAsyncRustCallDartTwoArgsTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_call_dart_two_args_twin_rust_async",
            argNames: ["callback"],
          );

  @override
  Future<void> crateApiDartFnRustCallDartWithDartOpaqueArgTwinNormal(
      {required Object input,
      required FutureOr<void> Function(Object) callback}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(input, serializer);
        sse_encode_DartFn_Inputs_DartOpaque_Output_unit_AnyhowException(
            callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1137, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiDartFnRustCallDartWithDartOpaqueArgTwinNormalConstMeta,
      argValues: [input, callback],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiDartFnRustCallDartWithDartOpaqueArgTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_call_dart_with_dart_opaque_arg_twin_normal",
            argNames: ["input", "callback"],
          );

  @override
  Future<void>
      crateApiPseudoManualDartFnTwinRustAsyncRustCallDartWithDartOpaqueArgTwinRustAsync(
          {required Object input,
          required FutureOr<void> Function(Object) callback}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(input, serializer);
        sse_encode_DartFn_Inputs_DartOpaque_Output_unit_AnyhowException(
            callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1138, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartFnTwinRustAsyncRustCallDartWithDartOpaqueArgTwinRustAsyncConstMeta,
      argValues: [input, callback],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartFnTwinRustAsyncRustCallDartWithDartOpaqueArgTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_call_dart_with_dart_opaque_arg_twin_rust_async",
            argNames: ["input", "callback"],
          );

  @override
  Future<Object> crateApiDartFnRustCallDartWithDartOpaqueResultTwinNormal(
      {required FutureOr<Object> Function() callback}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs__Output_DartOpaque_AnyhowException(
            callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1139, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiDartFnRustCallDartWithDartOpaqueResultTwinNormalConstMeta,
      argValues: [callback],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiDartFnRustCallDartWithDartOpaqueResultTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_call_dart_with_dart_opaque_result_twin_normal",
            argNames: ["callback"],
          );

  @override
  Future<Object>
      crateApiPseudoManualDartFnTwinRustAsyncRustCallDartWithDartOpaqueResultTwinRustAsync(
          {required FutureOr<Object> Function() callback}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs__Output_DartOpaque_AnyhowException(
            callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1140, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartFnTwinRustAsyncRustCallDartWithDartOpaqueResultTwinRustAsyncConstMeta,
      argValues: [callback],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartFnTwinRustAsyncRustCallDartWithDartOpaqueResultTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_call_dart_with_dart_opaque_result_twin_rust_async",
            argNames: ["callback"],
          );

  @override
  Future<void> crateApiMiscNoTwinExampleASameFunctionNameInDifferentFiles() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1141, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleASameFunctionNameInDifferentFilesConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleASameFunctionNameInDifferentFilesConstMeta =>
          const TaskConstMeta(
            debugName: "same_function_name_in_different_files",
            argNames: [],
          );

  @override
  Future<void> crateApiMiscNoTwinExampleBSameFunctionNameInDifferentFiles() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1142, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleBSameFunctionNameInDifferentFilesConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleBSameFunctionNameInDifferentFilesConstMeta =>
          const TaskConstMeta(
            debugName: "same_function_name_in_different_files",
            argNames: [],
          );

  @override
  Future<void> crateApiDartOpaqueSetStaticDartOpaqueTwinNormal(
      {required int id, required Object opaque}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(id, serializer);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1143, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartOpaqueSetStaticDartOpaqueTwinNormalConstMeta,
      argValues: [id, opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartOpaqueSetStaticDartOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "set_static_dart_opaque_twin_normal",
        argNames: ["id", "opaque"],
      );

  @override
  Future<void>
      crateApiPseudoManualDartOpaqueTwinRustAsyncSetStaticDartOpaqueTwinRustAsync(
          {required int id, required Object opaque}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(id, serializer);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1144, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinRustAsyncSetStaticDartOpaqueTwinRustAsyncConstMeta,
      argValues: [id, opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinRustAsyncSetStaticDartOpaqueTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "set_static_dart_opaque_twin_rust_async",
            argNames: ["id", "opaque"],
          );

  @override
  void crateApiPseudoManualDartOpaqueTwinSyncSetStaticDartOpaqueTwinSync(
      {required int id, required Object opaque}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(id, serializer);
        sse_encode_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1145)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinSyncSetStaticDartOpaqueTwinSyncConstMeta,
      argValues: [id, opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinSyncSetStaticDartOpaqueTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "set_static_dart_opaque_twin_sync",
            argNames: ["id", "opaque"],
          );

  @override
  Future<int> crateApiSimpleSimpleAdderTwinNormal(
      {required int a, required int b}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(a, serializer);
        sse_encode_i_32(b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1146, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleSimpleAdderTwinNormalConstMeta,
      argValues: [a, b],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleSimpleAdderTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "simple_adder_twin_normal",
        argNames: ["a", "b"],
      );

  @override
  Future<int> crateApiPseudoManualSimpleTwinRustAsyncSimpleAdderTwinRustAsync(
      {required int a, required int b}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(a, serializer);
        sse_encode_i_32(b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1147, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualSimpleTwinRustAsyncSimpleAdderTwinRustAsyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualSimpleTwinRustAsyncSimpleAdderTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "simple_adder_twin_rust_async",
            argNames: ["a", "b"],
          );

  @override
  int crateApiPseudoManualSimpleTwinSyncSimpleAdderTwinSync(
      {required int a, required int b}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(a, serializer);
        sse_encode_i_32(b, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1148)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualSimpleTwinSyncSimpleAdderTwinSyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualSimpleTwinSyncSimpleAdderTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "simple_adder_twin_sync",
            argNames: ["a", "b"],
          );

  @override
  Future<SimpleEnumTwinNormal>
      crateApiMethodSimpleEnumTwinNormalReturnSelfTwinNormal(
          {required String one}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(one, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1149, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_simple_enum_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMethodSimpleEnumTwinNormalReturnSelfTwinNormalConstMeta,
      argValues: [one],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMethodSimpleEnumTwinNormalReturnSelfTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "simple_enum_twin_normal_return_self_twin_normal",
            argNames: ["one"],
          );

  @override
  Future<String> crateApiMethodSimpleEnumTwinNormalSimpleMethodTwinNormal(
      {required SimpleEnumTwinNormal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_simple_enum_twin_normal(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1150, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMethodSimpleEnumTwinNormalSimpleMethodTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMethodSimpleEnumTwinNormalSimpleMethodTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "simple_enum_twin_normal_simple_method_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<SimpleEnumTwinRustAsync>
      crateApiPseudoManualMethodTwinRustAsyncSimpleEnumTwinRustAsyncReturnSelfTwinRustAsync(
          {required String one}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(one, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1151, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_simple_enum_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinRustAsyncSimpleEnumTwinRustAsyncReturnSelfTwinRustAsyncConstMeta,
      argValues: [one],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinRustAsyncSimpleEnumTwinRustAsyncReturnSelfTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "simple_enum_twin_rust_async_return_self_twin_rust_async",
            argNames: ["one"],
          );

  @override
  Future<String>
      crateApiPseudoManualMethodTwinRustAsyncSimpleEnumTwinRustAsyncSimpleMethodTwinRustAsync(
          {required SimpleEnumTwinRustAsync that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_simple_enum_twin_rust_async(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1152, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinRustAsyncSimpleEnumTwinRustAsyncSimpleMethodTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinRustAsyncSimpleEnumTwinRustAsyncSimpleMethodTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "simple_enum_twin_rust_async_simple_method_twin_rust_async",
            argNames: ["that"],
          );

  @override
  SimpleEnumTwinSync
      crateApiPseudoManualMethodTwinSyncSimpleEnumTwinSyncReturnSelfTwinSync(
          {required String one}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(one, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1153)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_simple_enum_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinSyncSimpleEnumTwinSyncReturnSelfTwinSyncConstMeta,
      argValues: [one],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinSyncSimpleEnumTwinSyncReturnSelfTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "simple_enum_twin_sync_return_self_twin_sync",
            argNames: ["one"],
          );

  @override
  String
      crateApiPseudoManualMethodTwinSyncSimpleEnumTwinSyncSimpleMethodTwinSync(
          {required SimpleEnumTwinSync that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_simple_enum_twin_sync(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1154)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinSyncSimpleEnumTwinSyncSimpleMethodTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinSyncSimpleEnumTwinSyncSimpleMethodTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "simple_enum_twin_sync_simple_method_twin_sync",
            argNames: ["that"],
          );

  @override
  Future<int> crateApiMethodSimplePrimitiveEnumTwinNormalSimpleMethodTwinNormal(
      {required SimplePrimitiveEnumTwinNormal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_simple_primitive_enum_twin_normal(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1155, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMethodSimplePrimitiveEnumTwinNormalSimpleMethodTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMethodSimplePrimitiveEnumTwinNormalSimpleMethodTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "simple_primitive_enum_twin_normal_simple_method_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<int>
      crateApiPseudoManualMethodTwinRustAsyncSimplePrimitiveEnumTwinRustAsyncSimpleMethodTwinRustAsync(
          {required SimplePrimitiveEnumTwinRustAsync that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_simple_primitive_enum_twin_rust_async(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1156, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinRustAsyncSimplePrimitiveEnumTwinRustAsyncSimpleMethodTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinRustAsyncSimplePrimitiveEnumTwinRustAsyncSimpleMethodTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "simple_primitive_enum_twin_rust_async_simple_method_twin_rust_async",
            argNames: ["that"],
          );

  @override
  int crateApiPseudoManualMethodTwinSyncSimplePrimitiveEnumTwinSyncSimpleMethodTwinSync(
      {required SimplePrimitiveEnumTwinSync that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_simple_primitive_enum_twin_sync(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1157)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinSyncSimplePrimitiveEnumTwinSyncSimpleMethodTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinSyncSimplePrimitiveEnumTwinSyncSimpleMethodTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "simple_primitive_enum_twin_sync_simple_method_twin_sync",
            argNames: ["that"],
          );

  @override
  Future<String> crateApiMethodSimpleStructTwinNormalArgSelfTwinNormal(
      {required SimpleStructTwinNormal a, required SimpleStructTwinNormal b}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_simple_struct_twin_normal(a, serializer);
        sse_encode_box_autoadd_simple_struct_twin_normal(b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1158, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMethodSimpleStructTwinNormalArgSelfTwinNormalConstMeta,
      argValues: [a, b],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMethodSimpleStructTwinNormalArgSelfTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "simple_struct_twin_normal_arg_self_twin_normal",
            argNames: ["a", "b"],
          );

  @override
  Future<String> crateApiMethodSimpleStructTwinNormalReceiverBorrowTwinNormal(
      {required SimpleStructTwinNormal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_simple_struct_twin_normal(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1159, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMethodSimpleStructTwinNormalReceiverBorrowTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMethodSimpleStructTwinNormalReceiverBorrowTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "simple_struct_twin_normal_receiver_borrow_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<String> crateApiMethodSimpleStructTwinNormalReceiverOwnTwinNormal(
      {required SimpleStructTwinNormal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_simple_struct_twin_normal(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1160, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMethodSimpleStructTwinNormalReceiverOwnTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMethodSimpleStructTwinNormalReceiverOwnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "simple_struct_twin_normal_receiver_own_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<SimpleStructTwinNormal>
      crateApiMethodSimpleStructTwinNormalReturnSelfTwinNormal(
          {required String one}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(one, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1161, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_simple_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMethodSimpleStructTwinNormalReturnSelfTwinNormalConstMeta,
      argValues: [one],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMethodSimpleStructTwinNormalReturnSelfTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "simple_struct_twin_normal_return_self_twin_normal",
            argNames: ["one"],
          );

  @override
  Future<List<String>> crateApiMethodSimpleStructTwinNormalVecSelfTwinNormal(
      {required List<SimpleStructTwinNormal> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_simple_struct_twin_normal(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1162, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMethodSimpleStructTwinNormalVecSelfTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMethodSimpleStructTwinNormalVecSelfTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "simple_struct_twin_normal_vec_self_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<String>
      crateApiPseudoManualMethodTwinRustAsyncSimpleStructTwinRustAsyncArgSelfTwinRustAsync(
          {required SimpleStructTwinRustAsync a,
          required SimpleStructTwinRustAsync b}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_simple_struct_twin_rust_async(a, serializer);
        sse_encode_box_autoadd_simple_struct_twin_rust_async(b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1163, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinRustAsyncSimpleStructTwinRustAsyncArgSelfTwinRustAsyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinRustAsyncSimpleStructTwinRustAsyncArgSelfTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "simple_struct_twin_rust_async_arg_self_twin_rust_async",
            argNames: ["a", "b"],
          );

  @override
  Future<String>
      crateApiPseudoManualMethodTwinRustAsyncSimpleStructTwinRustAsyncReceiverBorrowTwinRustAsync(
          {required SimpleStructTwinRustAsync that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_simple_struct_twin_rust_async(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1164, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinRustAsyncSimpleStructTwinRustAsyncReceiverBorrowTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinRustAsyncSimpleStructTwinRustAsyncReceiverBorrowTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "simple_struct_twin_rust_async_receiver_borrow_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Future<String>
      crateApiPseudoManualMethodTwinRustAsyncSimpleStructTwinRustAsyncReceiverOwnTwinRustAsync(
          {required SimpleStructTwinRustAsync that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_simple_struct_twin_rust_async(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1165, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinRustAsyncSimpleStructTwinRustAsyncReceiverOwnTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinRustAsyncSimpleStructTwinRustAsyncReceiverOwnTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "simple_struct_twin_rust_async_receiver_own_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Future<SimpleStructTwinRustAsync>
      crateApiPseudoManualMethodTwinRustAsyncSimpleStructTwinRustAsyncReturnSelfTwinRustAsync(
          {required String one}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(one, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1166, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_simple_struct_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinRustAsyncSimpleStructTwinRustAsyncReturnSelfTwinRustAsyncConstMeta,
      argValues: [one],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinRustAsyncSimpleStructTwinRustAsyncReturnSelfTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "simple_struct_twin_rust_async_return_self_twin_rust_async",
            argNames: ["one"],
          );

  @override
  Future<List<String>>
      crateApiPseudoManualMethodTwinRustAsyncSimpleStructTwinRustAsyncVecSelfTwinRustAsync(
          {required List<SimpleStructTwinRustAsync> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_simple_struct_twin_rust_async(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1167, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinRustAsyncSimpleStructTwinRustAsyncVecSelfTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinRustAsyncSimpleStructTwinRustAsyncVecSelfTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "simple_struct_twin_rust_async_vec_self_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  String crateApiPseudoManualMethodTwinSyncSimpleStructTwinSyncArgSelfTwinSync(
      {required SimpleStructTwinSync a, required SimpleStructTwinSync b}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_simple_struct_twin_sync(a, serializer);
        sse_encode_box_autoadd_simple_struct_twin_sync(b, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1168)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinSyncSimpleStructTwinSyncArgSelfTwinSyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinSyncSimpleStructTwinSyncArgSelfTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "simple_struct_twin_sync_arg_self_twin_sync",
            argNames: ["a", "b"],
          );

  @override
  String
      crateApiPseudoManualMethodTwinSyncSimpleStructTwinSyncReceiverBorrowTwinSync(
          {required SimpleStructTwinSync that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_simple_struct_twin_sync(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1169)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinSyncSimpleStructTwinSyncReceiverBorrowTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinSyncSimpleStructTwinSyncReceiverBorrowTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "simple_struct_twin_sync_receiver_borrow_twin_sync",
            argNames: ["that"],
          );

  @override
  String
      crateApiPseudoManualMethodTwinSyncSimpleStructTwinSyncReceiverOwnTwinSync(
          {required SimpleStructTwinSync that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_simple_struct_twin_sync(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1170)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinSyncSimpleStructTwinSyncReceiverOwnTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinSyncSimpleStructTwinSyncReceiverOwnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "simple_struct_twin_sync_receiver_own_twin_sync",
            argNames: ["that"],
          );

  @override
  SimpleStructTwinSync
      crateApiPseudoManualMethodTwinSyncSimpleStructTwinSyncReturnSelfTwinSync(
          {required String one}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(one, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1171)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_simple_struct_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinSyncSimpleStructTwinSyncReturnSelfTwinSyncConstMeta,
      argValues: [one],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinSyncSimpleStructTwinSyncReturnSelfTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "simple_struct_twin_sync_return_self_twin_sync",
            argNames: ["one"],
          );

  @override
  List<String>
      crateApiPseudoManualMethodTwinSyncSimpleStructTwinSyncVecSelfTwinSync(
          {required List<SimpleStructTwinSync> arg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_simple_struct_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1172)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinSyncSimpleStructTwinSyncVecSelfTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinSyncSimpleStructTwinSyncVecSelfTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "simple_struct_twin_sync_vec_self_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<String>
      crateApiExternalImplSimpleTranslatableExternalStructWithMethodSimpleExternalMethod(
          {required SimpleTranslatableExternalStructWithMethod that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_simple_translatable_external_struct_with_method(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1173, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiExternalImplSimpleTranslatableExternalStructWithMethodSimpleExternalMethodConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiExternalImplSimpleTranslatableExternalStructWithMethodSimpleExternalMethodConstMeta =>
          const TaskConstMeta(
            debugName:
                "simple_translatable_external_struct_with_method_simple_external_method",
            argNames: ["that"],
          );

  @override
  Future<String> crateApiAsyncSpawnSimpleUseAsyncSpawn({required String arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1174, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAsyncSpawnSimpleUseAsyncSpawnConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAsyncSpawnSimpleUseAsyncSpawnConstMeta =>
      const TaskConstMeta(
        debugName: "simple_use_async_spawn",
        argNames: ["arg"],
      );

  @override
  Future<String> crateApiAsyncSpawnSimpleUseAsyncSpawnBlocking(
      {required String arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1175, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAsyncSpawnSimpleUseAsyncSpawnBlockingConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAsyncSpawnSimpleUseAsyncSpawnBlockingConstMeta =>
      const TaskConstMeta(
        debugName: "simple_use_async_spawn_blocking",
        argNames: ["arg"],
      );

  @override
  Stream<String> crateApiAsyncSpawnSimpleUseAsyncSpawnLocal(
      {required String arg}) {
    final sink = RustStreamSink<String>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(arg, serializer);
        sse_encode_StreamSink_String_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1176, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAsyncSpawnSimpleUseAsyncSpawnLocalConstMeta,
      argValues: [arg, sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiAsyncSpawnSimpleUseAsyncSpawnLocalConstMeta =>
      const TaskConstMeta(
        debugName: "simple_use_async_spawn_local",
        argNames: ["arg", "sink"],
      );

  @override
  Future<SomeStructTwinNormal>
      crateApiExceptionSomeStructTwinNormalNewTwinNormal({required int value}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(value, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1177, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_some_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiExceptionSomeStructTwinNormalNewTwinNormalConstMeta,
      argValues: [value],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiExceptionSomeStructTwinNormalNewTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "some_struct_twin_normal_new_twin_normal",
            argNames: ["value"],
          );

  @override
  Future<int>
      crateApiExceptionSomeStructTwinNormalNonStaticReturnErrCustomErrorTwinNormal(
          {required SomeStructTwinNormal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_some_struct_twin_normal(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1178, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_normal,
      ),
      constMeta:
          kCrateApiExceptionSomeStructTwinNormalNonStaticReturnErrCustomErrorTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiExceptionSomeStructTwinNormalNonStaticReturnErrCustomErrorTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "some_struct_twin_normal_non_static_return_err_custom_error_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<int>
      crateApiExceptionSomeStructTwinNormalNonStaticReturnOkCustomErrorTwinNormal(
          {required SomeStructTwinNormal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_some_struct_twin_normal(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1179, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_normal,
      ),
      constMeta:
          kCrateApiExceptionSomeStructTwinNormalNonStaticReturnOkCustomErrorTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiExceptionSomeStructTwinNormalNonStaticReturnOkCustomErrorTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "some_struct_twin_normal_non_static_return_ok_custom_error_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<int>
      crateApiExceptionSomeStructTwinNormalStaticReturnErrCustomErrorTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1180, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_normal,
      ),
      constMeta:
          kCrateApiExceptionSomeStructTwinNormalStaticReturnErrCustomErrorTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiExceptionSomeStructTwinNormalStaticReturnErrCustomErrorTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "some_struct_twin_normal_static_return_err_custom_error_twin_normal",
            argNames: [],
          );

  @override
  Future<int>
      crateApiExceptionSomeStructTwinNormalStaticReturnOkCustomErrorTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1181, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_normal,
      ),
      constMeta:
          kCrateApiExceptionSomeStructTwinNormalStaticReturnOkCustomErrorTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiExceptionSomeStructTwinNormalStaticReturnOkCustomErrorTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "some_struct_twin_normal_static_return_ok_custom_error_twin_normal",
            argNames: [],
          );

  @override
  Future<SomeStructTwinRustAsync>
      crateApiPseudoManualExceptionTwinRustAsyncSomeStructTwinRustAsyncNewTwinRustAsync(
          {required int value}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(value, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1182, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_some_struct_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncSomeStructTwinRustAsyncNewTwinRustAsyncConstMeta,
      argValues: [value],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncSomeStructTwinRustAsyncNewTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "some_struct_twin_rust_async_new_twin_rust_async",
            argNames: ["value"],
          );

  @override
  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncSomeStructTwinRustAsyncNonStaticReturnErrCustomErrorTwinRustAsync(
          {required SomeStructTwinRustAsync that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_some_struct_twin_rust_async(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1183, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_rust_async,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncSomeStructTwinRustAsyncNonStaticReturnErrCustomErrorTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncSomeStructTwinRustAsyncNonStaticReturnErrCustomErrorTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "some_struct_twin_rust_async_non_static_return_err_custom_error_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncSomeStructTwinRustAsyncNonStaticReturnOkCustomErrorTwinRustAsync(
          {required SomeStructTwinRustAsync that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_some_struct_twin_rust_async(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1184, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_rust_async,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncSomeStructTwinRustAsyncNonStaticReturnOkCustomErrorTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncSomeStructTwinRustAsyncNonStaticReturnOkCustomErrorTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "some_struct_twin_rust_async_non_static_return_ok_custom_error_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncSomeStructTwinRustAsyncStaticReturnErrCustomErrorTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1185, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_rust_async,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncSomeStructTwinRustAsyncStaticReturnErrCustomErrorTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncSomeStructTwinRustAsyncStaticReturnErrCustomErrorTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "some_struct_twin_rust_async_static_return_err_custom_error_twin_rust_async",
            argNames: [],
          );

  @override
  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncSomeStructTwinRustAsyncStaticReturnOkCustomErrorTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1186, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_rust_async,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncSomeStructTwinRustAsyncStaticReturnOkCustomErrorTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncSomeStructTwinRustAsyncStaticReturnOkCustomErrorTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "some_struct_twin_rust_async_static_return_ok_custom_error_twin_rust_async",
            argNames: [],
          );

  @override
  SomeStructTwinSync
      crateApiPseudoManualExceptionTwinSyncSomeStructTwinSyncNewTwinSync(
          {required int value}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(value, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1187)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_some_struct_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncSomeStructTwinSyncNewTwinSyncConstMeta,
      argValues: [value],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncSomeStructTwinSyncNewTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "some_struct_twin_sync_new_twin_sync",
            argNames: ["value"],
          );

  @override
  int crateApiPseudoManualExceptionTwinSyncSomeStructTwinSyncNonStaticReturnErrCustomErrorTwinSync(
      {required SomeStructTwinSync that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_some_struct_twin_sync(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1188)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_sync,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncSomeStructTwinSyncNonStaticReturnErrCustomErrorTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncSomeStructTwinSyncNonStaticReturnErrCustomErrorTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "some_struct_twin_sync_non_static_return_err_custom_error_twin_sync",
            argNames: ["that"],
          );

  @override
  int crateApiPseudoManualExceptionTwinSyncSomeStructTwinSyncNonStaticReturnOkCustomErrorTwinSync(
      {required SomeStructTwinSync that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_some_struct_twin_sync(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1189)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_sync,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncSomeStructTwinSyncNonStaticReturnOkCustomErrorTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncSomeStructTwinSyncNonStaticReturnOkCustomErrorTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "some_struct_twin_sync_non_static_return_ok_custom_error_twin_sync",
            argNames: ["that"],
          );

  @override
  int crateApiPseudoManualExceptionTwinSyncSomeStructTwinSyncStaticReturnErrCustomErrorTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1190)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_sync,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncSomeStructTwinSyncStaticReturnErrCustomErrorTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncSomeStructTwinSyncStaticReturnErrCustomErrorTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "some_struct_twin_sync_static_return_err_custom_error_twin_sync",
            argNames: [],
          );

  @override
  int crateApiPseudoManualExceptionTwinSyncSomeStructTwinSyncStaticReturnOkCustomErrorTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1191)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_sync,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncSomeStructTwinSyncStaticReturnOkCustomErrorTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncSomeStructTwinSyncStaticReturnOkCustomErrorTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "some_struct_twin_sync_static_return_ok_custom_error_twin_sync",
            argNames: [],
          );

  @override
  Future<int> crateApiMethodStaticOnlyTwinNormalStaticMethodTwinNormal(
      {required int a}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(a, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1192, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMethodStaticOnlyTwinNormalStaticMethodTwinNormalConstMeta,
      argValues: [a],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMethodStaticOnlyTwinNormalStaticMethodTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "static_only_twin_normal_static_method_twin_normal",
            argNames: ["a"],
          );

  @override
  Future<int>
      crateApiPseudoManualMethodTwinRustAsyncStaticOnlyTwinRustAsyncStaticMethodTwinRustAsync(
          {required int a}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(a, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1193, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinRustAsyncStaticOnlyTwinRustAsyncStaticMethodTwinRustAsyncConstMeta,
      argValues: [a],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinRustAsyncStaticOnlyTwinRustAsyncStaticMethodTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "static_only_twin_rust_async_static_method_twin_rust_async",
            argNames: ["a"],
          );

  @override
  int crateApiPseudoManualMethodTwinSyncStaticOnlyTwinSyncStaticMethodTwinSync(
      {required int a}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(a, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1194)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinSyncStaticOnlyTwinSyncStaticMethodTwinSyncConstMeta,
      argValues: [a],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinSyncStaticOnlyTwinSyncStaticMethodTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "static_only_twin_sync_static_method_twin_sync",
            argNames: ["a"],
          );

  @override
  Future<Stream<int>> crateApiStreamMiscStreamSinkDartAsyncTwinNormal() async {
    final sink = RustStreamSink<int>();
    await handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_i_32_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1195, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStreamMiscStreamSinkDartAsyncTwinNormalConstMeta,
      argValues: [sink],
      apiImpl: this,
    ));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiStreamMiscStreamSinkDartAsyncTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "stream_sink_dart_async_twin_normal",
        argNames: ["sink"],
      );

  @override
  Stream<U8Array2>
      crateApiStreamStreamSinkFixedSizedPrimitiveArrayTwinNormal() {
    final sink = RustStreamSink<U8Array2>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_u_8_array_2_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1196, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiStreamStreamSinkFixedSizedPrimitiveArrayTwinNormalConstMeta,
      argValues: [sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiStreamStreamSinkFixedSizedPrimitiveArrayTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "stream_sink_fixed_sized_primitive_array_twin_normal",
            argNames: ["sink"],
          );

  @override
  Stream<U8Array2>
      crateApiPseudoManualStreamTwinRustAsyncStreamSinkFixedSizedPrimitiveArrayTwinRustAsync() {
    final sink = RustStreamSink<U8Array2>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_u_8_array_2_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1197, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualStreamTwinRustAsyncStreamSinkFixedSizedPrimitiveArrayTwinRustAsyncConstMeta,
      argValues: [sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualStreamTwinRustAsyncStreamSinkFixedSizedPrimitiveArrayTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "stream_sink_fixed_sized_primitive_array_twin_rust_async",
            argNames: ["sink"],
          );

  @override
  Future<void> crateApiStreamStreamSinkInsideStructTwinNormal(
      {required MyStructContainingStreamSinkTwinNormal arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_struct_containing_stream_sink_twin_normal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1198, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStreamStreamSinkInsideStructTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiStreamStreamSinkInsideStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "stream_sink_inside_struct_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<void>
      crateApiPseudoManualStreamTwinRustAsyncStreamSinkInsideStructTwinRustAsync(
          {required MyStructContainingStreamSinkTwinRustAsync arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_struct_containing_stream_sink_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1199, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualStreamTwinRustAsyncStreamSinkInsideStructTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualStreamTwinRustAsyncStreamSinkInsideStructTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "stream_sink_inside_struct_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<void> crateApiStreamStreamSinkInsideVecTwinNormal(
      {required List<RustStreamSink<int>> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_StreamSink_i_32_Sse(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1200, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStreamStreamSinkInsideVecTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiStreamStreamSinkInsideVecTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "stream_sink_inside_vec_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<void>
      crateApiPseudoManualStreamTwinRustAsyncStreamSinkInsideVecTwinRustAsync(
          {required List<RustStreamSink<int>> arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_StreamSink_i_32_Sse(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1201, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualStreamTwinRustAsyncStreamSinkInsideVecTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualStreamTwinRustAsyncStreamSinkInsideVecTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "stream_sink_inside_vec_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<Stream<String>>
      crateApiExceptionStreamSinkThrowAnyhowTwinNormal() async {
    final sink = RustStreamSink<String>();
    await handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_String_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1202, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiExceptionStreamSinkThrowAnyhowTwinNormalConstMeta,
      argValues: [sink],
      apiImpl: this,
    ));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiExceptionStreamSinkThrowAnyhowTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "stream_sink_throw_anyhow_twin_normal",
            argNames: ["sink"],
          );

  @override
  Future<Stream<String>>
      crateApiPseudoManualExceptionTwinRustAsyncStreamSinkThrowAnyhowTwinRustAsync() async {
    final sink = RustStreamSink<String>();
    await handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_String_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1203, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncStreamSinkThrowAnyhowTwinRustAsyncConstMeta,
      argValues: [sink],
      apiImpl: this,
    ));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncStreamSinkThrowAnyhowTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "stream_sink_throw_anyhow_twin_rust_async",
            argNames: ["sink"],
          );

  @override
  Stream<String>
      crateApiPseudoManualExceptionTwinSyncStreamSinkThrowAnyhowTwinSync() {
    final sink = RustStreamSink<String>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_String_Sse(sink, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1204)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncStreamSinkThrowAnyhowTwinSyncConstMeta,
      argValues: [sink],
      apiImpl: this,
    ));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncStreamSinkThrowAnyhowTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "stream_sink_throw_anyhow_twin_sync",
            argNames: ["sink"],
          );

  @override
  Future<void>
      crateApiCommentStructWithCommentsTwinNormalInstanceMethodTwinNormal(
          {required StructWithCommentsTwinNormal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_comments_twin_normal(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1205, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiCommentStructWithCommentsTwinNormalInstanceMethodTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiCommentStructWithCommentsTwinNormalInstanceMethodTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "struct_with_comments_twin_normal_instance_method_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<void>
      crateApiCommentStructWithCommentsTwinNormalStaticMethodTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1206, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiCommentStructWithCommentsTwinNormalStaticMethodTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiCommentStructWithCommentsTwinNormalStaticMethodTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "struct_with_comments_twin_normal_static_method_twin_normal",
            argNames: [],
          );

  @override
  Future<void>
      crateApiPseudoManualCommentTwinRustAsyncStructWithCommentsTwinRustAsyncInstanceMethodTwinRustAsync(
          {required StructWithCommentsTwinRustAsync that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_comments_twin_rust_async(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1207, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualCommentTwinRustAsyncStructWithCommentsTwinRustAsyncInstanceMethodTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualCommentTwinRustAsyncStructWithCommentsTwinRustAsyncInstanceMethodTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "struct_with_comments_twin_rust_async_instance_method_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Future<void>
      crateApiPseudoManualCommentTwinRustAsyncStructWithCommentsTwinRustAsyncStaticMethodTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1208, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualCommentTwinRustAsyncStructWithCommentsTwinRustAsyncStaticMethodTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualCommentTwinRustAsyncStructWithCommentsTwinRustAsyncStaticMethodTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "struct_with_comments_twin_rust_async_static_method_twin_rust_async",
            argNames: [],
          );

  @override
  void
      crateApiPseudoManualCommentTwinSyncStructWithCommentsTwinSyncInstanceMethodTwinSync(
          {required StructWithCommentsTwinSync that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_comments_twin_sync(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1209)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualCommentTwinSyncStructWithCommentsTwinSyncInstanceMethodTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualCommentTwinSyncStructWithCommentsTwinSyncInstanceMethodTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "struct_with_comments_twin_sync_instance_method_twin_sync",
            argNames: ["that"],
          );

  @override
  void
      crateApiPseudoManualCommentTwinSyncStructWithCommentsTwinSyncStaticMethodTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1210)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualCommentTwinSyncStructWithCommentsTwinSyncStaticMethodTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualCommentTwinSyncStructWithCommentsTwinSyncStaticMethodTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "struct_with_comments_twin_sync_static_method_twin_sync",
            argNames: [],
          );

  @override
  void
      crateApiMiscNoTwinExampleAStructWithCustomNameMethodTwinNormalMethodWithCustomNameTwinNormal(
          {required StructWithCustomNameMethodTwinNormal that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_custom_name_method_twin_normal(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1211)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleAStructWithCustomNameMethodTwinNormalMethodWithCustomNameTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleAStructWithCustomNameMethodTwinNormalMethodWithCustomNameTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "struct_with_custom_name_method_twin_normal_method_with_custom_name_twin_normal(dart_style=renamedMethod)",
            argNames: ["that"],
          );

  @override
  Future<void> crateApiMiscNoTwinExampleAStructWithImplBlockInAnotherFileF(
      {required StructWithImplBlockInAnotherFileDependency arg}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_impl_block_in_another_file_dependency(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1212, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleAStructWithImplBlockInAnotherFileFConstMeta,
      argValues: [arg],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleAStructWithImplBlockInAnotherFileFConstMeta =>
          const TaskConstMeta(
            debugName: "struct_with_impl_block_in_another_file_f",
            argNames: ["arg"],
          );

  @override
  Future<void> crateApiMiscNoTwinExampleAStructWithRawNameFieldDummyFunction() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1213, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleAStructWithRawNameFieldDummyFunctionConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleAStructWithRawNameFieldDummyFunctionConstMeta =>
          const TaskConstMeta(
            debugName: "struct_with_raw_name_field_dummy_function",
            argNames: [],
          );

  @override
  Future<StructWithRustAutoOpaqueFieldWithManyDerive>
      crateApiMiscNoTwinExampleAStructWithRustAutoOpaqueFieldWithManyDeriveDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1214, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_struct_with_rust_auto_opaque_field_with_many_derive,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleAStructWithRustAutoOpaqueFieldWithManyDeriveDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleAStructWithRustAutoOpaqueFieldWithManyDeriveDefaultConstMeta =>
          const TaskConstMeta(
            debugName:
                "struct_with_rust_auto_opaque_field_with_many_derive_default",
            argNames: [],
          );

  @override
  Future<void>
      crateApiMiscNoTwinExampleAStructWithRustAutoOpaqueFieldWithManyDeriveF(
          {required StructWithRustAutoOpaqueFieldWithManyDerive that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_rust_auto_opaque_field_with_many_derive(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1215, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleAStructWithRustAutoOpaqueFieldWithManyDeriveFConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleAStructWithRustAutoOpaqueFieldWithManyDeriveFConstMeta =>
          const TaskConstMeta(
            debugName: "struct_with_rust_auto_opaque_field_with_many_derive_f",
            argNames: ["that"],
          );

  @override
  Future<void>
      crateApiMiscNoTwinExampleAStructWithRustAutoOpaqueWithNonCloneDataF(
          {required StructWithRustAutoOpaqueWithNonCloneData that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_rust_auto_opaque_with_non_clone_data(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1216, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleAStructWithRustAutoOpaqueWithNonCloneDataFConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleAStructWithRustAutoOpaqueWithNonCloneDataFConstMeta =>
          const TaskConstMeta(
            debugName: "struct_with_rust_auto_opaque_with_non_clone_data_f",
            argNames: ["that"],
          );

  @override
  Future<int> crateApiMethodSumWithTwinNormalSumTwinNormal(
      {required SumWithTwinNormal that, required int y, required int z}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_sum_with_twin_normal(that, serializer);
        sse_encode_u_32(y, serializer);
        sse_encode_u_32(z, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1217, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMethodSumWithTwinNormalSumTwinNormalConstMeta,
      argValues: [that, y, z],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMethodSumWithTwinNormalSumTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "sum_with_twin_normal_sum_twin_normal",
        argNames: ["that", "y", "z"],
      );

  @override
  Future<int>
      crateApiPseudoManualMethodTwinRustAsyncSumWithTwinRustAsyncSumTwinRustAsync(
          {required SumWithTwinRustAsync that,
          required int y,
          required int z}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_sum_with_twin_rust_async(that, serializer);
        sse_encode_u_32(y, serializer);
        sse_encode_u_32(z, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1218, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinRustAsyncSumWithTwinRustAsyncSumTwinRustAsyncConstMeta,
      argValues: [that, y, z],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinRustAsyncSumWithTwinRustAsyncSumTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "sum_with_twin_rust_async_sum_twin_rust_async",
            argNames: ["that", "y", "z"],
          );

  @override
  int crateApiPseudoManualMethodTwinSyncSumWithTwinSyncSumTwinSync(
      {required SumWithTwinSync that, required int y, required int z}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_sum_with_twin_sync(that, serializer);
        sse_encode_u_32(y, serializer);
        sse_encode_u_32(z, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1219)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinSyncSumWithTwinSyncSumTwinSyncConstMeta,
      argValues: [that, y, z],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinSyncSumWithTwinSyncSumTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "sum_with_twin_sync_sum_twin_sync",
            argNames: ["that", "y", "z"],
          );

  @override
  String crateApiDartOpaqueSyncSyncAcceptDartOpaqueTwinNormal(
      {required Object opaque}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1220)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartOpaqueSyncSyncAcceptDartOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiDartOpaqueSyncSyncAcceptDartOpaqueTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "sync_accept_dart_opaque_twin_normal",
            argNames: ["opaque"],
          );

  @override
  NonCloneDataTwinNormal crateApiRustOpaqueSyncSyncCreateNonCloneTwinNormal() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1221)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_NonCloneDataTwinNormal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRustOpaqueSyncSyncCreateNonCloneTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustOpaqueSyncSyncCreateNonCloneTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "sync_create_non_clone_twin_normal",
            argNames: [],
          );

  @override
  HideDataAnotherTwinNormal crateApiRustOpaqueSyncSyncCreateOpaqueTwinNormal() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1222)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_HideDataAnotherTwinNormal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRustOpaqueSyncSyncCreateOpaqueTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustOpaqueSyncSyncCreateOpaqueTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "sync_create_opaque_twin_normal",
            argNames: [],
          );

  @override
  Object crateApiDartOpaqueSyncSyncLoopbackTwinNormal(
      {required Object opaque}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1223)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartOpaqueSyncSyncLoopbackTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDartOpaqueSyncSyncLoopbackTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "sync_loopback_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Object? crateApiDartOpaqueSyncSyncOptionDartOpaqueTwinNormal(
      {required Object opaque}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1224)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_DartOpaque,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiDartOpaqueSyncSyncOptionDartOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiDartOpaqueSyncSyncOptionDartOpaqueTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "sync_option_dart_opaque_twin_normal",
            argNames: ["opaque"],
          );

  @override
  Object? crateApiDartOpaqueSyncSyncOptionLoopbackTwinNormal({Object? opaque}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1225)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartOpaqueSyncSyncOptionLoopbackTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiDartOpaqueSyncSyncOptionLoopbackTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "sync_option_loopback_twin_normal",
            argNames: ["opaque"],
          );

  @override
  HideDataAnotherTwinNormal?
      crateApiRustOpaqueSyncSyncOptionRustOpaqueTwinNormal() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1226)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_RustOpaque_HideDataAnotherTwinNormal,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiRustOpaqueSyncSyncOptionRustOpaqueTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRustOpaqueSyncSyncOptionRustOpaqueTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "sync_option_rust_opaque_twin_normal",
            argNames: [],
          );

  @override
  Future<AbcTwinNormal> crateApiMiscExampleTestAbcEnumTwinNormal(
      {required AbcTwinNormal abc}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_abc_twin_normal(abc, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1227, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_abc_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMiscExampleTestAbcEnumTwinNormalConstMeta,
      argValues: [abc],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMiscExampleTestAbcEnumTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "test_abc_enum_twin_normal",
        argNames: ["abc"],
      );

  @override
  Future<AbcTwinRustAsync>
      crateApiPseudoManualMiscExampleTwinRustAsyncTestAbcEnumTwinRustAsync(
          {required AbcTwinRustAsync abc}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_abc_twin_rust_async(abc, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1228, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_abc_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscExampleTwinRustAsyncTestAbcEnumTwinRustAsyncConstMeta,
      argValues: [abc],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscExampleTwinRustAsyncTestAbcEnumTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_abc_enum_twin_rust_async",
            argNames: ["abc"],
          );

  @override
  AbcTwinSync crateApiPseudoManualMiscExampleTwinSyncTestAbcEnumTwinSync(
      {required AbcTwinSync abc}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_abc_twin_sync(abc, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1229)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_abc_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscExampleTwinSyncTestAbcEnumTwinSyncConstMeta,
      argValues: [abc],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscExampleTwinSyncTestAbcEnumTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_abc_enum_twin_sync",
            argNames: ["abc"],
          );

  @override
  Future<TestChronoTwinNormal> crateApiChronoTypeTestChronoTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1230, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_test_chrono_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiChronoTypeTestChronoTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiChronoTypeTestChronoTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "test_chrono_twin_normal",
        argNames: [],
      );

  @override
  Future<TestChronoTwinRustAsync>
      crateApiPseudoManualChronoTypeTwinRustAsyncTestChronoTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1231, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_test_chrono_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualChronoTypeTwinRustAsyncTestChronoTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualChronoTypeTwinRustAsyncTestChronoTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_chrono_twin_rust_async",
            argNames: [],
          );

  @override
  TestChronoTwinSync
      crateApiPseudoManualChronoTypeTwinSyncTestChronoTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1232)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_test_chrono_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualChronoTypeTwinSyncTestChronoTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualChronoTypeTwinSyncTestChronoTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_chrono_twin_sync",
            argNames: [],
          );

  @override
  Future<ContainsMirroredSubStructTwinNormal>
      crateApiMirrorTestContainsMirroredSubStructTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1233, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_contains_mirrored_sub_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMirrorTestContainsMirroredSubStructTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMirrorTestContainsMirroredSubStructTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "test_contains_mirrored_sub_struct_twin_normal",
            argNames: [],
          );

  @override
  Future<ContainsMirroredSubStructTwinRustAsync>
      crateApiPseudoManualMirrorTwinRustAsyncTestContainsMirroredSubStructTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1234, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_contains_mirrored_sub_struct_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncTestContainsMirroredSubStructTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncTestContainsMirroredSubStructTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_contains_mirrored_sub_struct_twin_rust_async",
            argNames: [],
          );

  @override
  ContainsMirroredSubStructTwinSync
      crateApiPseudoManualMirrorTwinSyncTestContainsMirroredSubStructTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1235)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_contains_mirrored_sub_struct_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncTestContainsMirroredSubStructTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncTestContainsMirroredSubStructTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_contains_mirrored_sub_struct_twin_sync",
            argNames: [],
          );

  @override
  Future<StructInUpperLevel>
      crateApiDeliberateNameConflictTestDuplicatedModuleNames(
          {required StructInLowerLevel s}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_in_lower_level(s, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1236, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_in_upper_level,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiDeliberateNameConflictTestDuplicatedModuleNamesConstMeta,
      argValues: [s],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiDeliberateNameConflictTestDuplicatedModuleNamesConstMeta =>
          const TaskConstMeta(
            debugName: "test_duplicated_module_names",
            argNames: ["s"],
          );

  @override
  Future<List<RawStringMirrored>>
      crateApiMirrorTestFallibleOfRawStringMirroredTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1237, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_raw_string_mirrored,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiMirrorTestFallibleOfRawStringMirroredTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMirrorTestFallibleOfRawStringMirroredTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "test_fallible_of_raw_string_mirrored_twin_normal",
            argNames: [],
          );

  @override
  Future<List<RawStringMirrored>>
      crateApiPseudoManualMirrorTwinRustAsyncTestFallibleOfRawStringMirroredTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1238, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_raw_string_mirrored,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncTestFallibleOfRawStringMirroredTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncTestFallibleOfRawStringMirroredTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_fallible_of_raw_string_mirrored_twin_rust_async",
            argNames: [],
          );

  @override
  List<RawStringMirrored>
      crateApiPseudoManualMirrorTwinSyncTestFallibleOfRawStringMirroredTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1239)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_raw_string_mirrored,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncTestFallibleOfRawStringMirroredTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncTestFallibleOfRawStringMirroredTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_fallible_of_raw_string_mirrored_twin_sync",
            argNames: [],
          );

  @override
  Future<StructWithHashMap>
      crateApiMirrorTestHashmapWithMirroredValueTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1240, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_with_hash_map,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMirrorTestHashmapWithMirroredValueTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMirrorTestHashmapWithMirroredValueTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "test_hashmap_with_mirrored_value_twin_normal",
            argNames: [],
          );

  @override
  Future<StructWithHashMap>
      crateApiPseudoManualMirrorTwinRustAsyncTestHashmapWithMirroredValueTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1241, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_with_hash_map,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncTestHashmapWithMirroredValueTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncTestHashmapWithMirroredValueTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_hashmap_with_mirrored_value_twin_rust_async",
            argNames: [],
          );

  @override
  StructWithHashMap
      crateApiPseudoManualMirrorTwinSyncTestHashmapWithMirroredValueTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1242)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_with_hash_map,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncTestHashmapWithMirroredValueTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncTestHashmapWithMirroredValueTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_hashmap_with_mirrored_value_twin_sync",
            argNames: [],
          );

  @override
  Future<List<RawStringEnumMirrored>>
      crateApiMirrorTestListOfNestedEnumsMirroredTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1243, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_raw_string_enum_mirrored,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMirrorTestListOfNestedEnumsMirroredTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMirrorTestListOfNestedEnumsMirroredTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "test_list_of_nested_enums_mirrored_twin_normal",
            argNames: [],
          );

  @override
  Future<List<RawStringEnumMirrored>>
      crateApiPseudoManualMirrorTwinRustAsyncTestListOfNestedEnumsMirroredTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1244, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_raw_string_enum_mirrored,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncTestListOfNestedEnumsMirroredTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncTestListOfNestedEnumsMirroredTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_list_of_nested_enums_mirrored_twin_rust_async",
            argNames: [],
          );

  @override
  List<RawStringEnumMirrored>
      crateApiPseudoManualMirrorTwinSyncTestListOfNestedEnumsMirroredTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1245)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_raw_string_enum_mirrored,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncTestListOfNestedEnumsMirroredTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncTestListOfNestedEnumsMirroredTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_list_of_nested_enums_mirrored_twin_sync",
            argNames: [],
          );

  @override
  Future<ListOfNestedRawStringMirrored>
      crateApiMirrorTestListOfRawNestedStringMirroredTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1246, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_of_nested_raw_string_mirrored,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMirrorTestListOfRawNestedStringMirroredTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMirrorTestListOfRawNestedStringMirroredTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "test_list_of_raw_nested_string_mirrored_twin_normal",
            argNames: [],
          );

  @override
  Future<ListOfNestedRawStringMirrored>
      crateApiPseudoManualMirrorTwinRustAsyncTestListOfRawNestedStringMirroredTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1247, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_of_nested_raw_string_mirrored,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncTestListOfRawNestedStringMirroredTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncTestListOfRawNestedStringMirroredTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "test_list_of_raw_nested_string_mirrored_twin_rust_async",
            argNames: [],
          );

  @override
  ListOfNestedRawStringMirrored
      crateApiPseudoManualMirrorTwinSyncTestListOfRawNestedStringMirroredTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1248)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_of_nested_raw_string_mirrored,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncTestListOfRawNestedStringMirroredTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncTestListOfRawNestedStringMirroredTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_list_of_raw_nested_string_mirrored_twin_sync",
            argNames: [],
          );

  @override
  Future<MoreThanJustOneRawStringStructTwinNormal>
      crateApiRawStringTestMoreThanJustOneRawStringStructTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1249, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_more_than_just_one_raw_string_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRawStringTestMoreThanJustOneRawStringStructTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRawStringTestMoreThanJustOneRawStringStructTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "test_more_than_just_one_raw_string_struct_twin_normal",
            argNames: [],
          );

  @override
  Future<MoreThanJustOneRawStringStructTwinRustAsync>
      crateApiPseudoManualRawStringTwinRustAsyncTestMoreThanJustOneRawStringStructTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1250, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_more_than_just_one_raw_string_struct_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRawStringTwinRustAsyncTestMoreThanJustOneRawStringStructTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRawStringTwinRustAsyncTestMoreThanJustOneRawStringStructTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "test_more_than_just_one_raw_string_struct_twin_rust_async",
            argNames: [],
          );

  @override
  MoreThanJustOneRawStringStructTwinSync
      crateApiPseudoManualRawStringTwinSyncTestMoreThanJustOneRawStringStructTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1251)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_more_than_just_one_raw_string_struct_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRawStringTwinSyncTestMoreThanJustOneRawStringStructTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRawStringTwinSyncTestMoreThanJustOneRawStringStructTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_more_than_just_one_raw_string_struct_twin_sync",
            argNames: [],
          );

  @override
  Future<NestedRawStringMirrored>
      crateApiMirrorTestNestedRawStringMirroredTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1252, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_nested_raw_string_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMirrorTestNestedRawStringMirroredTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMirrorTestNestedRawStringMirroredTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "test_nested_raw_string_mirrored_twin_normal",
            argNames: [],
          );

  @override
  Future<NestedRawStringMirrored>
      crateApiPseudoManualMirrorTwinRustAsyncTestNestedRawStringMirroredTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1253, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_nested_raw_string_mirrored,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncTestNestedRawStringMirroredTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncTestNestedRawStringMirroredTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_nested_raw_string_mirrored_twin_rust_async",
            argNames: [],
          );

  @override
  NestedRawStringMirrored
      crateApiPseudoManualMirrorTwinSyncTestNestedRawStringMirroredTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1254)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_nested_raw_string_mirrored,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncTestNestedRawStringMirroredTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncTestNestedRawStringMirroredTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_nested_raw_string_mirrored_twin_sync",
            argNames: [],
          );

  @override
  Future<TestChronoTwinNormal> crateApiChronoTypeTestPreciseChronoTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1255, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_test_chrono_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiChronoTypeTestPreciseChronoTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiChronoTypeTestPreciseChronoTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "test_precise_chrono_twin_normal",
        argNames: [],
      );

  @override
  Future<TestChronoTwinRustAsync>
      crateApiPseudoManualChronoTypeTwinRustAsyncTestPreciseChronoTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1256, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_test_chrono_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualChronoTypeTwinRustAsyncTestPreciseChronoTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualChronoTypeTwinRustAsyncTestPreciseChronoTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_precise_chrono_twin_rust_async",
            argNames: [],
          );

  @override
  TestChronoTwinSync
      crateApiPseudoManualChronoTypeTwinSyncTestPreciseChronoTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1257)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_test_chrono_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualChronoTypeTwinSyncTestPreciseChronoTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualChronoTypeTwinSyncTestPreciseChronoTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_precise_chrono_twin_sync",
            argNames: [],
          );

  @override
  Future<RawStringEnumMirrored>
      crateApiMirrorTestRawStringEnumMirroredTwinNormal(
          {required bool nested}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_bool(nested, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1258, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_raw_string_enum_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMirrorTestRawStringEnumMirroredTwinNormalConstMeta,
      argValues: [nested],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMirrorTestRawStringEnumMirroredTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "test_raw_string_enum_mirrored_twin_normal",
            argNames: ["nested"],
          );

  @override
  Future<RawStringEnumMirrored>
      crateApiPseudoManualMirrorTwinRustAsyncTestRawStringEnumMirroredTwinRustAsync(
          {required bool nested}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_bool(nested, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1259, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_raw_string_enum_mirrored,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncTestRawStringEnumMirroredTwinRustAsyncConstMeta,
      argValues: [nested],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncTestRawStringEnumMirroredTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_raw_string_enum_mirrored_twin_rust_async",
            argNames: ["nested"],
          );

  @override
  RawStringEnumMirrored
      crateApiPseudoManualMirrorTwinSyncTestRawStringEnumMirroredTwinSync(
          {required bool nested}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_bool(nested, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1260)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_raw_string_enum_mirrored,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncTestRawStringEnumMirroredTwinSyncConstMeta,
      argValues: [nested],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncTestRawStringEnumMirroredTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_raw_string_enum_mirrored_twin_sync",
            argNames: ["nested"],
          );

  @override
  Future<RawStringItemEnumTwinNormal>
      crateApiRawStringTestRawStringItemEnumTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1261, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_raw_string_item_enum_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRawStringTestRawStringItemEnumTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRawStringTestRawStringItemEnumTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "test_raw_string_item_enum_twin_normal",
            argNames: [],
          );

  @override
  Future<RawStringItemEnumTwinRustAsync>
      crateApiPseudoManualRawStringTwinRustAsyncTestRawStringItemEnumTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1262, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_raw_string_item_enum_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRawStringTwinRustAsyncTestRawStringItemEnumTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRawStringTwinRustAsyncTestRawStringItemEnumTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_raw_string_item_enum_twin_rust_async",
            argNames: [],
          );

  @override
  RawStringItemEnumTwinSync
      crateApiPseudoManualRawStringTwinSyncTestRawStringItemEnumTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1263)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_raw_string_item_enum_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRawStringTwinSyncTestRawStringItemEnumTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRawStringTwinSyncTestRawStringItemEnumTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_raw_string_item_enum_twin_sync",
            argNames: [],
          );

  @override
  Future<RawStringItemStructTwinNormal>
      crateApiRawStringTestRawStringItemStructTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1264, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_raw_string_item_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRawStringTestRawStringItemStructTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiRawStringTestRawStringItemStructTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "test_raw_string_item_struct_twin_normal",
            argNames: [],
          );

  @override
  Future<RawStringItemStructTwinRustAsync>
      crateApiPseudoManualRawStringTwinRustAsyncTestRawStringItemStructTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1265, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_raw_string_item_struct_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRawStringTwinRustAsyncTestRawStringItemStructTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRawStringTwinRustAsyncTestRawStringItemStructTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_raw_string_item_struct_twin_rust_async",
            argNames: [],
          );

  @override
  RawStringItemStructTwinSync
      crateApiPseudoManualRawStringTwinSyncTestRawStringItemStructTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1266)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_raw_string_item_struct_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRawStringTwinSyncTestRawStringItemStructTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRawStringTwinSyncTestRawStringItemStructTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_raw_string_item_struct_twin_sync",
            argNames: [],
          );

  @override
  Future<RawStringMirrored> crateApiMirrorTestRawStringMirroredTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1267, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_raw_string_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMirrorTestRawStringMirroredTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMirrorTestRawStringMirroredTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "test_raw_string_mirrored_twin_normal",
        argNames: [],
      );

  @override
  Future<RawStringMirrored>
      crateApiPseudoManualMirrorTwinRustAsyncTestRawStringMirroredTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1268, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_raw_string_mirrored,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncTestRawStringMirroredTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncTestRawStringMirroredTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_raw_string_mirrored_twin_rust_async",
            argNames: [],
          );

  @override
  RawStringMirrored
      crateApiPseudoManualMirrorTwinSyncTestRawStringMirroredTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1269)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_raw_string_mirrored,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncTestRawStringMirroredTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncTestRawStringMirroredTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_raw_string_mirrored_twin_sync",
            argNames: [],
          );

  @override
  Future<StructWithEnumTwinNormal>
      crateApiMiscExampleTestStructWithEnumTwinNormal(
          {required StructWithEnumTwinNormal se}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_enum_twin_normal(se, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1270, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_with_enum_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMiscExampleTestStructWithEnumTwinNormalConstMeta,
      argValues: [se],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMiscExampleTestStructWithEnumTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "test_struct_with_enum_twin_normal",
        argNames: ["se"],
      );

  @override
  Future<StructWithEnumTwinRustAsync>
      crateApiPseudoManualMiscExampleTwinRustAsyncTestStructWithEnumTwinRustAsync(
          {required StructWithEnumTwinRustAsync se}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_enum_twin_rust_async(se, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1271, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_with_enum_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscExampleTwinRustAsyncTestStructWithEnumTwinRustAsyncConstMeta,
      argValues: [se],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscExampleTwinRustAsyncTestStructWithEnumTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_struct_with_enum_twin_rust_async",
            argNames: ["se"],
          );

  @override
  StructWithEnumTwinSync
      crateApiPseudoManualMiscExampleTwinSyncTestStructWithEnumTwinSync(
          {required StructWithEnumTwinSync se}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_enum_twin_sync(se, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1272)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_with_enum_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscExampleTwinSyncTestStructWithEnumTwinSyncConstMeta,
      argValues: [se],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscExampleTwinSyncTestStructWithEnumTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_struct_with_enum_twin_sync",
            argNames: ["se"],
          );

  @override
  Future<void> crateApiTupleTestTuple2TwinNormal(
      {required List<(String, int)> value}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_record_string_i_32(value, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1273, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTupleTestTuple2TwinNormalConstMeta,
      argValues: [value],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTupleTestTuple2TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "test_tuple_2_twin_normal",
        argNames: ["value"],
      );

  @override
  Future<void> crateApiPseudoManualTupleTwinRustAsyncTestTuple2TwinRustAsync(
      {required List<(String, int)> value}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_record_string_i_32(value, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1274, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualTupleTwinRustAsyncTestTuple2TwinRustAsyncConstMeta,
      argValues: [value],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualTupleTwinRustAsyncTestTuple2TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_tuple_2_twin_rust_async",
            argNames: ["value"],
          );

  @override
  void crateApiPseudoManualTupleTwinSyncTestTuple2TwinSync(
      {required List<(String, int)> value}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_record_string_i_32(value, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1275)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPseudoManualTupleTwinSyncTestTuple2TwinSyncConstMeta,
      argValues: [value],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualTupleTwinSyncTestTuple2TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_tuple_2_twin_sync",
            argNames: ["value"],
          );

  @override
  Future<(String, int)> crateApiTupleTestTupleTwinNormal(
      {(String, int)? value}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_record_string_i_32(value, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1276, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_record_string_i_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTupleTestTupleTwinNormalConstMeta,
      argValues: [value],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTupleTestTupleTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "test_tuple_twin_normal",
        argNames: ["value"],
      );

  @override
  Future<(String, int)>
      crateApiPseudoManualTupleTwinRustAsyncTestTupleTwinRustAsync(
          {(String, int)? value}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_record_string_i_32(value, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1277, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_record_string_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualTupleTwinRustAsyncTestTupleTwinRustAsyncConstMeta,
      argValues: [value],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualTupleTwinRustAsyncTestTupleTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_tuple_twin_rust_async",
            argNames: ["value"],
          );

  @override
  (String, int) crateApiPseudoManualTupleTwinSyncTestTupleTwinSync(
      {(String, int)? value}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_record_string_i_32(value, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1278)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_record_string_i_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPseudoManualTupleTwinSyncTestTupleTwinSyncConstMeta,
      argValues: [value],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualTupleTwinSyncTestTupleTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_tuple_twin_sync",
            argNames: ["value"],
          );

  @override
  Future<void> crateApiExceptionThrowAnyhowTwinNormal() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1279, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiExceptionThrowAnyhowTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiExceptionThrowAnyhowTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "throw_anyhow_twin_normal",
        argNames: [],
      );

  @override
  Future<void>
      crateApiPseudoManualExceptionTwinRustAsyncThrowAnyhowTwinRustAsync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1280, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncThrowAnyhowTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncThrowAnyhowTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "throw_anyhow_twin_rust_async",
            argNames: [],
          );

  @override
  void crateApiPseudoManualExceptionTwinSyncThrowAnyhowTwinSync() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1281)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncThrowAnyhowTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncThrowAnyhowTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "throw_anyhow_twin_sync",
            argNames: [],
          );

  @override
  Future<int>
      crateApiDartCodeTranslatableStructWithDartCodeTwinNormalNormalMethodTwinNormal(
          {required TranslatableStructWithDartCodeTwinNormal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_translatable_struct_with_dart_code_twin_normal(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1282, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiDartCodeTranslatableStructWithDartCodeTwinNormalNormalMethodTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiDartCodeTranslatableStructWithDartCodeTwinNormalNormalMethodTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "translatable_struct_with_dart_code_twin_normal_normal_method_twin_normal",
            argNames: ["that"],
          );

  @override
  String crateApiDartOpaqueSyncUnwrapDartOpaqueTwinNormal(
      {required Object opaque}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1283)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartOpaqueSyncUnwrapDartOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiDartOpaqueSyncUnwrapDartOpaqueTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "unwrap_dart_opaque_twin_normal",
            argNames: ["opaque"],
          );

  @override
  Future<String> crateApiRustOpaqueUnwrapRustOpaqueTwinNormal(
      {required HideDataTwinNormal opaque}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_HideDataTwinNormal(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1284, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiRustOpaqueUnwrapRustOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRustOpaqueUnwrapRustOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "unwrap_rust_opaque_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<String>
      crateApiPseudoManualRustOpaqueTwinRustAsyncUnwrapRustOpaqueTwinRustAsync(
          {required HideDataTwinRustAsync opaque}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_HideDataTwinRustAsync(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1285, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinRustAsyncUnwrapRustOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinRustAsyncUnwrapRustOpaqueTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "unwrap_rust_opaque_twin_rust_async",
            argNames: ["opaque"],
          );

  @override
  String crateApiPseudoManualRustOpaqueTwinSyncUnwrapRustOpaqueTwinSync(
      {required HideDataTwinSync opaque}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_HideDataTwinSync(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1286)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinSyncUnwrapRustOpaqueTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinSyncUnwrapRustOpaqueTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "unwrap_rust_opaque_twin_sync",
            argNames: ["opaque"],
          );

  @override
  Future<U8Array1600> crateApiArrayUseBoxedBlobTwinNormal(
      {required BlobTwinNormal blob}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_blob_twin_normal(blob, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1287, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8_array_1600,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiArrayUseBoxedBlobTwinNormalConstMeta,
      argValues: [blob],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiArrayUseBoxedBlobTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "use_boxed_blob_twin_normal",
        argNames: ["blob"],
      );

  @override
  Future<U8Array1600>
      crateApiPseudoManualArrayTwinRustAsyncUseBoxedBlobTwinRustAsync(
          {required BlobTwinRustAsync blob}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_blob_twin_rust_async(blob, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1288, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8_array_1600,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualArrayTwinRustAsyncUseBoxedBlobTwinRustAsyncConstMeta,
      argValues: [blob],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualArrayTwinRustAsyncUseBoxedBlobTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "use_boxed_blob_twin_rust_async",
            argNames: ["blob"],
          );

  @override
  U8Array1600 crateApiPseudoManualArrayTwinSyncUseBoxedBlobTwinSync(
      {required BlobTwinSync blob}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_blob_twin_sync(blob, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1289)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8_array_1600,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualArrayTwinSyncUseBoxedBlobTwinSyncConstMeta,
      argValues: [blob],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualArrayTwinSyncUseBoxedBlobTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "use_boxed_blob_twin_sync",
            argNames: ["blob"],
          );

  @override
  Future<bool> crateApiExternalTypeInCrateUseImportedEnumTwinNormal(
      {required MyEnum myEnum}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_my_enum(myEnum, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1290, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiExternalTypeInCrateUseImportedEnumTwinNormalConstMeta,
      argValues: [myEnum],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiExternalTypeInCrateUseImportedEnumTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "use_imported_enum_twin_normal",
            argNames: ["myEnum"],
          );

  @override
  Future<bool>
      crateApiPseudoManualExternalTypeInCrateTwinRustAsyncUseImportedEnumTwinRustAsync(
          {required MyEnum myEnum}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_my_enum(myEnum, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1291, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualExternalTypeInCrateTwinRustAsyncUseImportedEnumTwinRustAsyncConstMeta,
      argValues: [myEnum],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExternalTypeInCrateTwinRustAsyncUseImportedEnumTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "use_imported_enum_twin_rust_async",
            argNames: ["myEnum"],
          );

  @override
  bool crateApiPseudoManualExternalTypeInCrateTwinSyncUseImportedEnumTwinSync(
      {required MyEnum myEnum}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_my_enum(myEnum, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1292)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualExternalTypeInCrateTwinSyncUseImportedEnumTwinSyncConstMeta,
      argValues: [myEnum],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExternalTypeInCrateTwinSyncUseImportedEnumTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "use_imported_enum_twin_sync",
            argNames: ["myEnum"],
          );

  @override
  Future<bool> crateApiExternalTypeInCrateUseImportedStructTwinNormal(
      {required MyStruct myStruct}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_struct(myStruct, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1293, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiExternalTypeInCrateUseImportedStructTwinNormalConstMeta,
      argValues: [myStruct],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiExternalTypeInCrateUseImportedStructTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "use_imported_struct_twin_normal",
            argNames: ["myStruct"],
          );

  @override
  Future<bool>
      crateApiPseudoManualExternalTypeInCrateTwinRustAsyncUseImportedStructTwinRustAsync(
          {required MyStruct myStruct}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_struct(myStruct, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1294, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualExternalTypeInCrateTwinRustAsyncUseImportedStructTwinRustAsyncConstMeta,
      argValues: [myStruct],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExternalTypeInCrateTwinRustAsyncUseImportedStructTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "use_imported_struct_twin_rust_async",
            argNames: ["myStruct"],
          );

  @override
  bool crateApiPseudoManualExternalTypeInCrateTwinSyncUseImportedStructTwinSync(
      {required MyStruct myStruct}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_struct(myStruct, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1295)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualExternalTypeInCrateTwinSyncUseImportedStructTwinSyncConstMeta,
      argValues: [myStruct],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExternalTypeInCrateTwinSyncUseImportedStructTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "use_imported_struct_twin_sync",
            argNames: ["myStruct"],
          );

  @override
  Future<U8Array32> crateApiArrayUseMsgidTwinNormal(
      {required MessageIdTwinNormal id}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_message_id_twin_normal(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1296, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8_array_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiArrayUseMsgidTwinNormalConstMeta,
      argValues: [id],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiArrayUseMsgidTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "use_msgid_twin_normal",
        argNames: ["id"],
      );

  @override
  Future<U8Array32> crateApiPseudoManualArrayTwinRustAsyncUseMsgidTwinRustAsync(
      {required MessageIdTwinRustAsync id}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_message_id_twin_rust_async(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1297, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8_array_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualArrayTwinRustAsyncUseMsgidTwinRustAsyncConstMeta,
      argValues: [id],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualArrayTwinRustAsyncUseMsgidTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "use_msgid_twin_rust_async",
            argNames: ["id"],
          );

  @override
  U8Array32 crateApiPseudoManualArrayTwinSyncUseMsgidTwinSync(
      {required MessageIdTwinSync id}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_message_id_twin_sync(id, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1298)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8_array_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPseudoManualArrayTwinSyncUseMsgidTwinSyncConstMeta,
      argValues: [id],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualArrayTwinSyncUseMsgidTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "use_msgid_twin_sync",
            argNames: ["id"],
          );

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_DartOpaque_Output_unit_AnyhowException(
          FutureOr<void> Function(Object) raw) {
    return (callId, rawArg0) async {
      final arg0 = dco_decode_DartOpaque(rawArg0);

      Box<void>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_unit(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_String_Output_String_AnyhowException(
          FutureOr<String> Function(String) raw) {
    return (callId, rawArg0) async {
      final arg0 = dco_decode_String(rawArg0);

      Box<String>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_String(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_String_Output_unit_AnyhowException(
          FutureOr<void> Function(String) raw) {
    return (callId, rawArg0) async {
      final arg0 = dco_decode_String(rawArg0);

      Box<void>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_unit(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic, dynamic)
      encode_DartFn_Inputs_String_demo_struct_for_rust_call_dart_twin_normal_Output_unit_AnyhowException(
          FutureOr<void> Function(String, DemoStructForRustCallDartTwinNormal)
              raw) {
    return (callId, rawArg0, rawArg1) async {
      final arg0 = dco_decode_String(rawArg0);
      final arg1 =
          dco_decode_demo_struct_for_rust_call_dart_twin_normal(rawArg1);

      Box<void>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0, arg1));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_unit(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic, dynamic)
      encode_DartFn_Inputs_String_demo_struct_for_rust_call_dart_twin_rust_async_Output_unit_AnyhowException(
          FutureOr<void> Function(
                  String, DemoStructForRustCallDartTwinRustAsync)
              raw) {
    return (callId, rawArg0, rawArg1) async {
      final arg0 = dco_decode_String(rawArg0);
      final arg1 =
          dco_decode_demo_struct_for_rust_call_dart_twin_rust_async(rawArg1);

      Box<void>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0, arg1));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_unit(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(
    int,
  ) encode_DartFn_Inputs__Output_DartOpaque_AnyhowException(
      FutureOr<Object> Function() raw) {
    return (
      callId,
    ) async {
      Box<Object>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw());
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_DartOpaque(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(
    int,
  ) encode_DartFn_Inputs__Output_String_AnyhowException(
      FutureOr<String> Function() raw) {
    return (
      callId,
    ) async {
      Box<String>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw());
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_String(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(
    int,
  ) encode_DartFn_Inputs__Output_unit_AnyhowException(
      FutureOr<void> Function() raw) {
    return (
      callId,
    ) async {
      Box<void>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw());
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_unit(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_demo_struct_for_rust_call_dart_twin_normal_Output_demo_struct_for_rust_call_dart_twin_normal_AnyhowException(
          FutureOr<DemoStructForRustCallDartTwinNormal> Function(
                  DemoStructForRustCallDartTwinNormal)
              raw) {
    return (callId, rawArg0) async {
      final arg0 =
          dco_decode_demo_struct_for_rust_call_dart_twin_normal(rawArg0);

      Box<DemoStructForRustCallDartTwinNormal>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_demo_struct_for_rust_call_dart_twin_normal(
            rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_demo_struct_for_rust_call_dart_twin_rust_async_Output_demo_struct_for_rust_call_dart_twin_rust_async_AnyhowException(
          FutureOr<DemoStructForRustCallDartTwinRustAsync> Function(
                  DemoStructForRustCallDartTwinRustAsync)
              raw) {
    return (callId, rawArg0) async {
      final arg0 =
          dco_decode_demo_struct_for_rust_call_dart_twin_rust_async(rawArg0);

      Box<DemoStructForRustCallDartTwinRustAsync>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_demo_struct_for_rust_call_dart_twin_rust_async(
            rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxDartDebugTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_BoxdynDartDebugTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxDartDebugTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_BoxdynDartDebugTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxDartDebugTwinRustAsync => wire
          .rust_arc_increment_strong_count_RustOpaque_BoxdynDartDebugTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxDartDebugTwinRustAsync => wire
          .rust_arc_decrement_strong_count_RustOpaque_BoxdynDartDebugTwinRustAsync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxDartDebugTwinSync => wire
          .rust_arc_increment_strong_count_RustOpaque_BoxdynDartDebugTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxDartDebugTwinSync => wire
          .rust_arc_decrement_strong_count_RustOpaque_BoxdynDartDebugTwinSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbOpaqueReturnTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_FrbOpaqueReturnTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbOpaqueReturnTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_FrbOpaqueReturnTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbOpaqueReturnTwinRustAsync => wire
          .rust_arc_increment_strong_count_RustOpaque_FrbOpaqueReturnTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbOpaqueReturnTwinRustAsync => wire
          .rust_arc_decrement_strong_count_RustOpaque_FrbOpaqueReturnTwinRustAsync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbOpaqueReturnTwinSync => wire
          .rust_arc_increment_strong_count_RustOpaque_FrbOpaqueReturnTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbOpaqueReturnTwinSync => wire
          .rust_arc_decrement_strong_count_RustOpaque_FrbOpaqueReturnTwinSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbOpaqueSyncReturnTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_FrbOpaqueSyncReturnTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbOpaqueSyncReturnTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_FrbOpaqueSyncReturnTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_HideDataAnotherTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_HideDataAnotherTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_HideDataAnotherTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_HideDataAnotherTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_HideDataTwinNormal =>
          wire.rust_arc_increment_strong_count_RustOpaque_HideDataTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_HideDataTwinNormal =>
          wire.rust_arc_decrement_strong_count_RustOpaque_HideDataTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_HideDataTwinRustAsync =>
          wire.rust_arc_increment_strong_count_RustOpaque_HideDataTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_HideDataTwinRustAsync =>
          wire.rust_arc_decrement_strong_count_RustOpaque_HideDataTwinRustAsync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_HideDataTwinSync =>
          wire.rust_arc_increment_strong_count_RustOpaque_HideDataTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_HideDataTwinSync =>
          wire.rust_arc_decrement_strong_count_RustOpaque_HideDataTwinSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MutexHideDataTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_MutexHideDataTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MutexHideDataTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_MutexHideDataTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MutexHideDataTwinRustAsync => wire
          .rust_arc_increment_strong_count_RustOpaque_MutexHideDataTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MutexHideDataTwinRustAsync => wire
          .rust_arc_decrement_strong_count_RustOpaque_MutexHideDataTwinRustAsync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MutexHideDataTwinSync =>
          wire.rust_arc_increment_strong_count_RustOpaque_MutexHideDataTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MutexHideDataTwinSync =>
          wire.rust_arc_decrement_strong_count_RustOpaque_MutexHideDataTwinSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneDataTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_NonCloneDataTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneDataTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_NonCloneDataTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneDataTwinRustAsync => wire
          .rust_arc_increment_strong_count_RustOpaque_NonCloneDataTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneDataTwinRustAsync => wire
          .rust_arc_decrement_strong_count_RustOpaque_NonCloneDataTwinRustAsync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneDataTwinSync =>
          wire.rust_arc_increment_strong_count_RustOpaque_NonCloneDataTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneDataTwinSync =>
          wire.rust_arc_decrement_strong_count_RustOpaque_NonCloneDataTwinSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockHideDataTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_RwLockHideDataTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockHideDataTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_RwLockHideDataTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockHideDataTwinRustAsync => wire
          .rust_arc_increment_strong_count_RustOpaque_RwLockHideDataTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockHideDataTwinRustAsync => wire
          .rust_arc_decrement_strong_count_RustOpaque_RwLockHideDataTwinRustAsync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockHideDataTwinSync => wire
          .rust_arc_increment_strong_count_RustOpaque_RwLockHideDataTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockHideDataTwinSync => wire
          .rust_arc_decrement_strong_count_RustOpaque_RwLockHideDataTwinSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxAnyMyDartTypeRename => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynAnySendSyncstatic;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxAnyMyDartTypeRename => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynAnySendSyncstatic;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxFnStringString => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynFnStringStringSendSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxFnStringString => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynFnStringStringSendSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxMyTraitTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinNormalSendSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxMyTraitTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinNormalSendSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxMyTraitTwinRustAsync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinRustAsyncSendSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxMyTraitTwinRustAsync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinRustAsyncSendSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxMyTraitTwinSync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinSyncSendSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxMyTraitTwinSync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinSyncSendSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ConstructorOpaqueStructTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueStructTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ConstructorOpaqueStructTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueStructTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ConstructorOpaqueSyncStructTwinNormal =>
          wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueSyncStructTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ConstructorOpaqueSyncStructTwinNormal =>
          wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueSyncStructTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_CustomHasherTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_CustomHasherTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_CustomHasherTwinRustAsync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_CustomHasherTwinRustAsync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinRustAsync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_CustomHasherTwinSync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_CustomHasherTwinSync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DeliberateFailSanityCheckTwinNormal =>
          wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDeliberateFailSanityCheckTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DeliberateFailSanityCheckTwinNormal =>
          wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDeliberateFailSanityCheckTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DroppableTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DroppableTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DroppableTwinRustAsync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DroppableTwinRustAsync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinRustAsync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DroppableTwinSync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DroppableTwinSync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinNormal =>
          wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinNormal =>
          wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinRustAsync =>
          wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinRustAsync =>
          wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinRustAsync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinSync =>
          wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinSync =>
          wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ItemContainerSolutionOneTwinNormal =>
          wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerItemContainerSolutionOneTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ItemContainerSolutionOneTwinNormal =>
          wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerItemContainerSolutionOneTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LtNestedTypeWithLifetimeTwinNormal =>
          wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtNestedTypeWithLifetimeTwinNormalstatic;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LtNestedTypeWithLifetimeTwinNormal =>
          wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtNestedTypeWithLifetimeTwinNormalstatic;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LtNestedTypeWithLifetimeTwinSync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtNestedTypeWithLifetimeTwinSyncstatic;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LtNestedTypeWithLifetimeTwinSync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtNestedTypeWithLifetimeTwinSyncstatic;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LtTypeWithLifetimeTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithLifetimeTwinNormalstatic;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LtTypeWithLifetimeTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithLifetimeTwinNormalstatic;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LtTypeWithLifetimeTwinSync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithLifetimeTwinSyncstatic;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LtTypeWithLifetimeTwinSync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithLifetimeTwinSyncstatic;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LtTypeWithMultiDepTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithMultiDepTwinNormalstatic;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LtTypeWithMultiDepTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithMultiDepTwinNormalstatic;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LtTypeWithMultiDepTwinSync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithMultiDepTwinSyncstatic;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LtTypeWithMultiDepTwinSync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithMultiDepTwinSyncstatic;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LtOwnedStructTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtOwnedStructTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LtOwnedStructTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtOwnedStructTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LtOwnedStructTwinSync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtOwnedStructTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LtOwnedStructTwinSync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtOwnedStructTwinSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LtSubStructTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtSubStructTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LtSubStructTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtSubStructTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LtSubStructTwinSync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtSubStructTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LtSubStructTwinSync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtSubStructTwinSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MyAudioParamTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyAudioParamTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MyAudioParamTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyAudioParamTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MyImplTraitWithSelfTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyImplTraitWithSelfTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MyImplTraitWithSelfTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyImplTraitWithSelfTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MyImplTraitWithSelfTwinSync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyImplTraitWithSelfTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MyImplTraitWithSelfTwinSync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyImplTraitWithSelfTwinSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MyNodeTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyNodeTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MyNodeTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyNodeTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MyStructWithTryFromTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyStructWithTryFromTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MyStructWithTryFromTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyStructWithTryFromTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneDataRaw => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneDataRaw;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneDataRaw => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneDataRaw;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneSimpleEnumTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneSimpleEnumTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneSimpleEnumTwinRustAsync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneSimpleEnumTwinRustAsync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinRustAsync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneSimpleEnumTwinSync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneSimpleEnumTwinSync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneSimpleTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneSimpleTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneSimpleTwinRustAsync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneSimpleTwinRustAsync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneSimpleTwinSync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneSimpleTwinSync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueItemTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueItemTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueItemTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueItemTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueOneTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueOneTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueOneTwinRustAsync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueOneTwinRustAsync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinRustAsync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueOneTwinSync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueOneTwinSync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueStructWithDartCodeTwinNormal =>
          wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueStructWithDartCodeTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueStructWithDartCodeTwinNormal =>
          wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueStructWithDartCodeTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueTwoTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueTwoTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueTwoTwinRustAsync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueTwoTwinRustAsync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinRustAsync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueTwoTwinSync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueTwoTwinSync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SimpleLogger => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSimpleLogger;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SimpleLogger => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSimpleLogger;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SimpleOpaqueExternalStructWithMethod =>
          wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSimpleOpaqueExternalStructWithMethod;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SimpleOpaqueExternalStructWithMethod =>
          wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSimpleOpaqueExternalStructWithMethod;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StaticGetterOnlyTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StaticGetterOnlyTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StaticGetterOnlyTwinRustAsync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StaticGetterOnlyTwinRustAsync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinRustAsync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StaticGetterOnlyTwinSync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StaticGetterOnlyTwinSync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructInMiscNoTwinExampleA => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleA;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructInMiscNoTwinExampleA => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleA;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructInMiscNoTwinExampleB => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleB;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructInMiscNoTwinExampleB => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleB;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructOneWithTraitForDynTwinNormal =>
          wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitForDynTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructOneWithTraitForDynTwinNormal =>
          wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitForDynTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructOneWithTraitTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructOneWithTraitTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructOneWithTraitTwinSync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructOneWithTraitTwinSync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitTwinSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructTwoWithTraitForDynTwinNormal =>
          wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitForDynTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructTwoWithTraitForDynTwinNormal =>
          wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitForDynTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructTwoWithTraitTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructTwoWithTraitTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructTwoWithTraitTwinSync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructTwoWithTraitTwinSync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitTwinSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal =>
          wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal =>
          wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync =>
          wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync =>
          wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinSync =>
          wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinSync =>
          wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructWithImplBlockInMultiFile => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithImplBlockInMultiFile;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructWithImplBlockInMultiFile => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithImplBlockInMultiFile;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructWithRustAutoOpaqueFieldWithManyDeriveInner =>
          wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithRustAutoOpaqueFieldWithManyDeriveInner;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructWithRustAutoOpaqueFieldWithManyDeriveInner =>
          wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithRustAutoOpaqueFieldWithManyDeriveInner;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructWithSimpleSetterTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithSimpleSetterTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructWithSimpleSetterTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithSimpleSetterTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_TypeForIgnore => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTypeForIgnore;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_TypeForIgnore => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTypeForIgnore;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_TypeForIgnoreAll => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTypeForIgnoreAll;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_TypeForIgnoreAll => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTypeForIgnoreAll;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_I32 =>
      wire.rust_arc_increment_strong_count_RustOpaque_i32;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_I32 =>
      wire.rust_arc_decrement_strong_count_RustOpaque_i32;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  LtNestedTypeWithLifetimeTwinNormal
      dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtNestedTypeWithLifetimeTwinNormalstatic(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtNestedTypeWithLifetimeTwinNormalstatic(
        raw);
  }

  @protected
  LtNestedTypeWithLifetimeTwinSync
      dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtNestedTypeWithLifetimeTwinSyncstatic(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtNestedTypeWithLifetimeTwinSyncstatic(
        raw);
  }

  @protected
  LtTypeWithLifetimeTwinNormal
      dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithLifetimeTwinNormalstatic(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithLifetimeTwinNormalstatic(
        raw);
  }

  @protected
  LtTypeWithLifetimeTwinSync
      dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithLifetimeTwinSyncstatic(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithLifetimeTwinSyncstatic(
        raw);
  }

  @protected
  LtTypeWithMultiDepTwinNormal
      dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithMultiDepTwinNormalstatic(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithMultiDepTwinNormalstatic(
        raw);
  }

  @protected
  LtTypeWithMultiDepTwinSync
      dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithMultiDepTwinSyncstatic(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithMultiDepTwinSyncstatic(
        raw);
  }

  @protected
  MyNodeTwinNormal
      dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyNodeTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyNodeTwinNormal(
        raw);
  }

  @protected
  NonCloneDataRaw
      dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneDataRaw(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneDataRaw(
        raw);
  }

  @protected
  NonCloneSimpleTwinNormal
      dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
        raw);
  }

  @protected
  NonCloneSimpleTwinRustAsync
      dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
        raw);
  }

  @protected
  NonCloneSimpleTwinSync
      dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
        raw);
  }

  @protected
  OpaqueItemTwinNormal
      dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueItemTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueItemTwinNormal(
        raw);
  }

  @protected
  StructOneWithTraitForDynTwinNormal
      dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitForDynTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitForDynTwinNormal(
        raw);
  }

  @protected
  StructTwoWithTraitForDynTwinNormal
      dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitForDynTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitForDynTwinNormal(
        raw);
  }

  @protected
  StructWithRustAutoOpaqueFieldWithManyDeriveInner
      dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithRustAutoOpaqueFieldWithManyDeriveInner(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithRustAutoOpaqueFieldWithManyDeriveInner(
        raw);
  }

  @protected
  BoxAnyMyDartTypeRename
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynAnySendSyncstatic(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BoxAnyMyDartTypeRenameImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  BoxFnStringString
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynFnStringStringSendSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BoxFnStringStringImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  BoxMyTraitTwinNormal
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinNormalSendSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BoxMyTraitTwinNormalImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  BoxMyTraitTwinRustAsync
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinRustAsyncSendSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BoxMyTraitTwinRustAsyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  BoxMyTraitTwinSync
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinSyncSendSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BoxMyTraitTwinSyncImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ConstructorOpaqueStructTwinNormal
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueStructTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConstructorOpaqueStructTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  ConstructorOpaqueSyncStructTwinNormal
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueSyncStructTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConstructorOpaqueSyncStructTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  CustomHasherTwinNormal
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CustomHasherTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  CustomHasherTwinRustAsync
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CustomHasherTwinRustAsyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  CustomHasherTwinSync
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CustomHasherTwinSyncImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DeliberateFailSanityCheckTwinNormal
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDeliberateFailSanityCheckTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DeliberateFailSanityCheckTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  DroppableTwinNormal
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DroppableTwinNormalImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DroppableTwinRustAsync
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DroppableTwinRustAsyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  DroppableTwinSync
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DroppableTwinSyncImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  EnumWithGoodAndOpaqueWithoutOptionTwinNormal
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EnumWithGoodAndOpaqueWithoutOptionTwinNormalImpl
        .frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  EnumWithGoodAndOpaqueWithoutOptionTwinRustAsync
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncImpl
        .frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  EnumWithGoodAndOpaqueWithoutOptionTwinSync
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EnumWithGoodAndOpaqueWithoutOptionTwinSyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  ItemContainerSolutionOneTwinNormal
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerItemContainerSolutionOneTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ItemContainerSolutionOneTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  LtOwnedStructTwinNormal
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtOwnedStructTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LtOwnedStructTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  LtOwnedStructTwinSync
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtOwnedStructTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LtOwnedStructTwinSyncImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  LtSubStructTwinNormal
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtSubStructTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LtSubStructTwinNormalImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  LtSubStructTwinSync
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtSubStructTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LtSubStructTwinSyncImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MyAudioParamTwinNormal
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyAudioParamTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MyAudioParamTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  MyImplTraitWithSelfTwinNormal
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyImplTraitWithSelfTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MyImplTraitWithSelfTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  MyImplTraitWithSelfTwinSync
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyImplTraitWithSelfTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MyImplTraitWithSelfTwinSyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  MyNodeTwinNormal
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyNodeTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MyNodeTwinNormalImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MyStructWithTryFromTwinNormal
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyStructWithTryFromTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MyStructWithTryFromTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  NonCloneSimpleEnumTwinNormal
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneSimpleEnumTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  NonCloneSimpleEnumTwinRustAsync
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneSimpleEnumTwinRustAsyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  NonCloneSimpleEnumTwinSync
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneSimpleEnumTwinSyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  NonCloneSimpleTwinNormal
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneSimpleTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  NonCloneSimpleTwinRustAsync
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneSimpleTwinRustAsyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  NonCloneSimpleTwinSync
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneSimpleTwinSyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  OpaqueItemTwinNormal
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueItemTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OpaqueItemTwinNormalImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OpaqueOneTwinNormal
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OpaqueOneTwinNormalImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OpaqueOneTwinRustAsync
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OpaqueOneTwinRustAsyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  OpaqueOneTwinSync
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OpaqueOneTwinSyncImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OpaqueStructWithDartCodeTwinNormal
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueStructWithDartCodeTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OpaqueStructWithDartCodeTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  OpaqueTwoTwinNormal
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OpaqueTwoTwinNormalImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OpaqueTwoTwinRustAsync
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OpaqueTwoTwinRustAsyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  OpaqueTwoTwinSync
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OpaqueTwoTwinSyncImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SimpleLogger
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSimpleLogger(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SimpleLoggerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SimpleOpaqueExternalStructWithMethod
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSimpleOpaqueExternalStructWithMethod(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SimpleOpaqueExternalStructWithMethodImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StaticGetterOnlyTwinNormal
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StaticGetterOnlyTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StaticGetterOnlyTwinRustAsync
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StaticGetterOnlyTwinRustAsyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StaticGetterOnlyTwinSync
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StaticGetterOnlyTwinSyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StructInMiscNoTwinExampleA
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleA(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructInMiscNoTwinExampleAImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StructInMiscNoTwinExampleB
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleB(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructInMiscNoTwinExampleBImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StructOneWithTraitForDynTwinNormal
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitForDynTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructOneWithTraitForDynTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StructOneWithTraitTwinNormal
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructOneWithTraitTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StructOneWithTraitTwinSync
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructOneWithTraitTwinSyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StructTwoWithTraitForDynTwinNormal
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitForDynTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructTwoWithTraitForDynTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StructTwoWithTraitTwinNormal
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructTwoWithTraitTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StructTwoWithTraitTwinSync
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructTwoWithTraitTwinSyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructWithGoodAndOpaqueFieldWithoutOptionTwinNormalImpl
        .frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncImpl
        .frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  StructWithGoodAndOpaqueFieldWithoutOptionTwinSync
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructWithGoodAndOpaqueFieldWithoutOptionTwinSyncImpl
        .frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  StructWithImplBlockInMultiFile
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithImplBlockInMultiFile(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructWithImplBlockInMultiFileImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StructWithRustAutoOpaqueFieldWithManyDeriveInner
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithRustAutoOpaqueFieldWithManyDeriveInner(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructWithRustAutoOpaqueFieldWithManyDeriveInnerImpl
        .frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  StructWithSimpleSetterTwinNormal
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithSimpleSetterTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructWithSimpleSetterTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  TypeForIgnore
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTypeForIgnore(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TypeForIgnoreImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  TypeForIgnoreAll
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTypeForIgnoreAll(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TypeForIgnoreAllImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ConstructorOpaqueStructTwinNormal
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueStructTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConstructorOpaqueStructTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  ConstructorOpaqueSyncStructTwinNormal
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueSyncStructTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConstructorOpaqueSyncStructTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  DeliberateFailSanityCheckTwinNormal
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDeliberateFailSanityCheckTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DeliberateFailSanityCheckTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  DroppableTwinNormal
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DroppableTwinNormalImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DroppableTwinRustAsync
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DroppableTwinRustAsyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  DroppableTwinSync
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DroppableTwinSyncImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ItemContainerSolutionOneTwinNormal
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerItemContainerSolutionOneTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ItemContainerSolutionOneTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  LtSubStructTwinNormal
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtSubStructTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LtSubStructTwinNormalImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  LtSubStructTwinSync
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtSubStructTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LtSubStructTwinSyncImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  NonCloneSimpleTwinNormal
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneSimpleTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  NonCloneSimpleTwinRustAsync
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneSimpleTwinRustAsyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  NonCloneSimpleTwinSync
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneSimpleTwinSyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StructOneWithTraitForDynTwinNormal
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitForDynTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructOneWithTraitForDynTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StructOneWithTraitTwinNormal
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructOneWithTraitTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StructOneWithTraitTwinSync
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructOneWithTraitTwinSyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StructTwoWithTraitForDynTwinNormal
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitForDynTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructTwoWithTraitForDynTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StructTwoWithTraitTwinNormal
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructTwoWithTraitTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StructTwoWithTraitTwinSync
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructTwoWithTraitTwinSyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructWithGoodAndOpaqueFieldWithoutOptionTwinNormalImpl
        .frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncImpl
        .frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  StructWithGoodAndOpaqueFieldWithoutOptionTwinSync
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructWithGoodAndOpaqueFieldWithoutOptionTwinSyncImpl
        .frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  StructWithSimpleSetterTwinNormal
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithSimpleSetterTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructWithSimpleSetterTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  TypeForIgnoreAll
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTypeForIgnoreAll(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TypeForIgnoreAllImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ConstructorOpaqueStructTwinNormal
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueStructTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConstructorOpaqueStructTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  ConstructorOpaqueSyncStructTwinNormal
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueSyncStructTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConstructorOpaqueSyncStructTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  DeliberateFailSanityCheckTwinNormal
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDeliberateFailSanityCheckTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DeliberateFailSanityCheckTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  DroppableTwinNormal
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DroppableTwinNormalImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DroppableTwinRustAsync
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DroppableTwinRustAsyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  DroppableTwinSync
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DroppableTwinSyncImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ItemContainerSolutionOneTwinNormal
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerItemContainerSolutionOneTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ItemContainerSolutionOneTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  LtOwnedStructTwinNormal
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtOwnedStructTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LtOwnedStructTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  LtOwnedStructTwinSync
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtOwnedStructTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LtOwnedStructTwinSyncImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  LtSubStructTwinNormal
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtSubStructTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LtSubStructTwinNormalImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  LtSubStructTwinSync
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtSubStructTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LtSubStructTwinSyncImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MyAudioParamTwinNormal
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyAudioParamTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MyAudioParamTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  MyImplTraitWithSelfTwinNormal
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyImplTraitWithSelfTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MyImplTraitWithSelfTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  MyImplTraitWithSelfTwinSync
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyImplTraitWithSelfTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MyImplTraitWithSelfTwinSyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  MyNodeTwinNormal
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyNodeTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MyNodeTwinNormalImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MyStructWithTryFromTwinNormal
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyStructWithTryFromTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MyStructWithTryFromTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  NonCloneSimpleEnumTwinNormal
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneSimpleEnumTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  NonCloneSimpleEnumTwinRustAsync
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneSimpleEnumTwinRustAsyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  NonCloneSimpleEnumTwinSync
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneSimpleEnumTwinSyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  NonCloneSimpleTwinNormal
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneSimpleTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  NonCloneSimpleTwinRustAsync
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneSimpleTwinRustAsyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  NonCloneSimpleTwinSync
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneSimpleTwinSyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  OpaqueStructWithDartCodeTwinNormal
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueStructWithDartCodeTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OpaqueStructWithDartCodeTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  SimpleLogger
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSimpleLogger(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SimpleLoggerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SimpleOpaqueExternalStructWithMethod
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSimpleOpaqueExternalStructWithMethod(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SimpleOpaqueExternalStructWithMethodImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StructInMiscNoTwinExampleA
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleA(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructInMiscNoTwinExampleAImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StructInMiscNoTwinExampleB
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleB(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructInMiscNoTwinExampleBImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StructOneWithTraitForDynTwinNormal
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitForDynTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructOneWithTraitForDynTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StructOneWithTraitTwinNormal
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructOneWithTraitTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StructOneWithTraitTwinSync
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructOneWithTraitTwinSyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StructTwoWithTraitForDynTwinNormal
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitForDynTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructTwoWithTraitForDynTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StructTwoWithTraitTwinNormal
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructTwoWithTraitTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StructTwoWithTraitTwinSync
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructTwoWithTraitTwinSyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructWithGoodAndOpaqueFieldWithoutOptionTwinNormalImpl
        .frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncImpl
        .frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  StructWithGoodAndOpaqueFieldWithoutOptionTwinSync
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructWithGoodAndOpaqueFieldWithoutOptionTwinSyncImpl
        .frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  StructWithImplBlockInMultiFile
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithImplBlockInMultiFile(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructWithImplBlockInMultiFileImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StructWithSimpleSetterTwinNormal
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithSimpleSetterTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructWithSimpleSetterTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  TypeForIgnore
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTypeForIgnore(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TypeForIgnoreImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  TypeForIgnoreAll
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTypeForIgnoreAll(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TypeForIgnoreAllImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_Backtrace(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  int dco_decode_CastedPrimitive_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError(
        'Not implemented in this codec, please use the other one');
  }

  @protected
  int dco_decode_CastedPrimitive_isize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError(
        'Not implemented in this codec, please use the other one');
  }

  @protected
  int dco_decode_CastedPrimitive_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError(
        'Not implemented in this codec, please use the other one');
  }

  @protected
  int dco_decode_CastedPrimitive_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError(
        'Not implemented in this codec, please use the other one');
  }

  @protected
  String dco_decode_Char(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return String.fromCharCode(raw);
  }

  @protected
  Duration dco_decode_Chrono_Duration(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeDuration(dco_decode_i_64(raw).toInt());
  }

  @protected
  DateTime dco_decode_Chrono_Local(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeTimestamp(ts: dco_decode_i_64(raw).toInt(), isUtc: false);
  }

  @protected
  DateTime dco_decode_Chrono_Naive(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeTimestamp(ts: dco_decode_i_64(raw).toInt(), isUtc: true);
  }

  @protected
  DateTime dco_decode_Chrono_Utc(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeTimestamp(ts: dco_decode_i_64(raw).toInt(), isUtc: true);
  }

  @protected
  InternetAddress
      dco_decode_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIpv4Addr(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError(
        'Not implemented in this codec, please use the other one');
  }

  @protected
  int dco_decode_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageWithCustomSerializerTwinNormal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError(
        'Not implemented in this codec, please use the other one');
  }

  @protected
  FutureOr<void> Function(Object)
      dco_decode_DartFn_Inputs_DartOpaque_Output_unit_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<String> Function(String)
      dco_decode_DartFn_Inputs_String_Output_String_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<void> Function(String)
      dco_decode_DartFn_Inputs_String_Output_unit_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<void> Function(String, DemoStructForRustCallDartTwinNormal)
      dco_decode_DartFn_Inputs_String_demo_struct_for_rust_call_dart_twin_normal_Output_unit_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<void> Function(String, DemoStructForRustCallDartTwinRustAsync)
      dco_decode_DartFn_Inputs_String_demo_struct_for_rust_call_dart_twin_rust_async_Output_unit_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<Object> Function()
      dco_decode_DartFn_Inputs__Output_DartOpaque_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<String> Function()
      dco_decode_DartFn_Inputs__Output_String_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<void> Function()
      dco_decode_DartFn_Inputs__Output_unit_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<DemoStructForRustCallDartTwinNormal> Function(
          DemoStructForRustCallDartTwinNormal)
      dco_decode_DartFn_Inputs_demo_struct_for_rust_call_dart_twin_normal_Output_demo_struct_for_rust_call_dart_twin_normal_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<DemoStructForRustCallDartTwinRustAsync> Function(
          DemoStructForRustCallDartTwinRustAsync)
      dco_decode_DartFn_Inputs_demo_struct_for_rust_call_dart_twin_rust_async_Output_demo_struct_for_rust_call_dart_twin_rust_async_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  Object dco_decode_DartOpaque(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return decodeDartOpaque(raw, generalizedFrbRustBinding);
  }

  @protected
  ObjectArray1 dco_decode_DartOpaque_array_1(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ObjectArray1(
        (raw as List<dynamic>).map(dco_decode_DartOpaque).toList());
  }

  @protected
  SimpleTraitForDynTwinNormal dco_decode_DynTrait_SimpleTraitForDynTwinNormal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  BigInt dco_decode_I128(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BigInt.parse(raw);
  }

  @protected
  LtNestedTypeWithLifetimeTwinNormal
      dco_decode_Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtNestedTypeWithLifetimeTwinNormalstatic(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError(
        'Not implemented in this codec, please use the other one');
  }

  @protected
  LtNestedTypeWithLifetimeTwinSync
      dco_decode_Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtNestedTypeWithLifetimeTwinSyncstatic(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError(
        'Not implemented in this codec, please use the other one');
  }

  @protected
  LtTypeWithLifetimeTwinNormal
      dco_decode_Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithLifetimeTwinNormalstatic(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError(
        'Not implemented in this codec, please use the other one');
  }

  @protected
  LtTypeWithLifetimeTwinSync
      dco_decode_Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithLifetimeTwinSyncstatic(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError(
        'Not implemented in this codec, please use the other one');
  }

  @protected
  LtTypeWithMultiDepTwinNormal
      dco_decode_Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithMultiDepTwinNormalstatic(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError(
        'Not implemented in this codec, please use the other one');
  }

  @protected
  LtTypeWithMultiDepTwinSync
      dco_decode_Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithMultiDepTwinSyncstatic(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError(
        'Not implemented in this codec, please use the other one');
  }

  @protected
  LtNestedTypeWithLifetimeTwinNormal
      dco_decode_Lifetimeable_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtNestedTypeWithLifetimeTwinNormalstatic(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError(
        'Not implemented in this codec, please use the other one');
  }

  @protected
  LtNestedTypeWithLifetimeTwinSync
      dco_decode_Lifetimeable_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtNestedTypeWithLifetimeTwinSyncstatic(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError(
        'Not implemented in this codec, please use the other one');
  }

  @protected
  LtTypeWithLifetimeTwinNormal
      dco_decode_Lifetimeable_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithLifetimeTwinNormalstatic(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError(
        'Not implemented in this codec, please use the other one');
  }

  @protected
  LtTypeWithLifetimeTwinSync
      dco_decode_Lifetimeable_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithLifetimeTwinSyncstatic(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError(
        'Not implemented in this codec, please use the other one');
  }

  @protected
  LtTypeWithMultiDepTwinNormal
      dco_decode_Lifetimeable_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithMultiDepTwinNormalstatic(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError(
        'Not implemented in this codec, please use the other one');
  }

  @protected
  LtTypeWithMultiDepTwinSync
      dco_decode_Lifetimeable_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithMultiDepTwinSyncstatic(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError(
        'Not implemented in this codec, please use the other one');
  }

  @protected
  Map<String, String>
      dco_decode_Map_String_String_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_string_string(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, String>
      dco_decode_Map_String_String_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_string_string(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, String>
      dco_decode_Map_String_String_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_string_string(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, String> dco_decode_Map_String_String_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_string_string(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, EnumSimpleTwinNormal>
      dco_decode_Map_String_enum_simple_twin_normal_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_string_enum_simple_twin_normal(raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, EnumSimpleTwinRustAsync>
      dco_decode_Map_String_enum_simple_twin_rust_async_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_string_enum_simple_twin_rust_async(raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, EnumSimpleTwinSync>
      dco_decode_Map_String_enum_simple_twin_sync_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_string_enum_simple_twin_sync(raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, HashMapValue> dco_decode_Map_String_hash_map_value_None(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_string_hash_map_value(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, KitchenSinkTwinNormal>
      dco_decode_Map_String_kitchen_sink_twin_normal_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_string_kitchen_sink_twin_normal(raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, KitchenSinkTwinRustAsync>
      dco_decode_Map_String_kitchen_sink_twin_rust_async_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_string_kitchen_sink_twin_rust_async(raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, KitchenSinkTwinSync>
      dco_decode_Map_String_kitchen_sink_twin_sync_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_string_kitchen_sink_twin_sync(raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, Uint8List> dco_decode_Map_String_list_prim_u_8_strict_None(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_string_list_prim_u_8_strict(raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, MySize> dco_decode_Map_String_my_size_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_string_my_size(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BigInt> dco_decode_Map_i_32_I128_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_i_32_i_128(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, String> dco_decode_Map_i_32_String_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_i_32_string(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BigInt> dco_decode_Map_i_32_U128_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_i_32_u_128(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BasicGeneralEnumTwinNormal>
      dco_decode_Map_i_32_basic_general_enum_twin_normal_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_i_32_basic_general_enum_twin_normal(raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BasicGeneralEnumTwinRustAsync>
      dco_decode_Map_i_32_basic_general_enum_twin_rust_async_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_i_32_basic_general_enum_twin_rust_async(raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BasicGeneralEnumTwinSync>
      dco_decode_Map_i_32_basic_general_enum_twin_sync_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_i_32_basic_general_enum_twin_sync(raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BasicPrimitiveEnumTwinNormal>
      dco_decode_Map_i_32_basic_primitive_enum_twin_normal_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_i_32_basic_primitive_enum_twin_normal(raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BasicPrimitiveEnumTwinRustAsync>
      dco_decode_Map_i_32_basic_primitive_enum_twin_rust_async_None(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_i_32_basic_primitive_enum_twin_rust_async(raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BasicPrimitiveEnumTwinSync>
      dco_decode_Map_i_32_basic_primitive_enum_twin_sync_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_i_32_basic_primitive_enum_twin_sync(raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BasicStructTwinNormal>
      dco_decode_Map_i_32_basic_struct_twin_normal_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_i_32_basic_struct_twin_normal(raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BasicStructTwinRustAsync>
      dco_decode_Map_i_32_basic_struct_twin_rust_async_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_i_32_basic_struct_twin_rust_async(raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BasicStructTwinSync> dco_decode_Map_i_32_basic_struct_twin_sync_None(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_i_32_basic_struct_twin_sync(raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, bool> dco_decode_Map_i_32_bool_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_i_32_bool(raw).map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, double> dco_decode_Map_i_32_f_32_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_i_32_f_32(raw).map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, double> dco_decode_Map_i_32_f_64_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_i_32_f_64(raw).map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, int> dco_decode_Map_i_32_i_16_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_i_32_i_16(raw).map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, int> dco_decode_Map_i_32_i_32_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_i_32_i_32(raw).map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, PlatformInt64> dco_decode_Map_i_32_i_64_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_i_32_i_64(raw).map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, int> dco_decode_Map_i_32_i_8_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_i_32_i_8(raw).map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, PlatformInt64> dco_decode_Map_i_32_isize_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_i_32_isize(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, Uint8List> dco_decode_Map_i_32_list_prim_u_8_strict_None(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_i_32_list_prim_u_8_strict(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, int> dco_decode_Map_i_32_u_16_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_i_32_u_16(raw).map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, int> dco_decode_Map_i_32_u_32_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_i_32_u_32(raw).map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BigInt> dco_decode_Map_i_32_u_64_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_i_32_u_64(raw).map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, int> dco_decode_Map_i_32_u_8_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_i_32_u_8(raw).map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BigInt> dco_decode_Map_i_32_usize_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_i_32_usize(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, ApplicationMode> dco_decode_Map_u_8_application_mode_None(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_u_8_application_mode(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  MyAudioParamTwinNormal
      dco_decode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_my_audio_param_twin_normal_proxy_enum(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError(
        'Not implemented in this codec, please use the other one');
  }

  @protected
  MyAudioParamTwinNormal
      dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyNodeTwinNormal_param_one_twin_normal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError(
        'Not implemented in this codec, please use the other one');
  }

  @protected
  MyAudioParamTwinNormal
      dco_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyNodeTwinNormal_param_two_twin_normal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError(
        'Not implemented in this codec, please use the other one');
  }

  @protected
  BoxDartDebugTwinNormal dco_decode_RustOpaque_BoxdynDartDebugTwinNormal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BoxDartDebugTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  BoxDartDebugTwinRustAsync dco_decode_RustOpaque_BoxdynDartDebugTwinRustAsync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BoxDartDebugTwinRustAsyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  BoxDartDebugTwinSync dco_decode_RustOpaque_BoxdynDartDebugTwinSync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BoxDartDebugTwinSyncImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbOpaqueReturnTwinNormal dco_decode_RustOpaque_FrbOpaqueReturnTwinNormal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbOpaqueReturnTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  FrbOpaqueReturnTwinRustAsync
      dco_decode_RustOpaque_FrbOpaqueReturnTwinRustAsync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbOpaqueReturnTwinRustAsyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  FrbOpaqueReturnTwinSync dco_decode_RustOpaque_FrbOpaqueReturnTwinSync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbOpaqueReturnTwinSyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  FrbOpaqueSyncReturnTwinNormal
      dco_decode_RustOpaque_FrbOpaqueSyncReturnTwinNormal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbOpaqueSyncReturnTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  HideDataAnotherTwinNormal dco_decode_RustOpaque_HideDataAnotherTwinNormal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return HideDataAnotherTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  HideDataTwinNormal dco_decode_RustOpaque_HideDataTwinNormal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return HideDataTwinNormalImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  HideDataTwinNormalArray2 dco_decode_RustOpaque_HideDataTwinNormal_array_2(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return HideDataTwinNormalArray2((raw as List<dynamic>)
        .map(dco_decode_RustOpaque_HideDataTwinNormal)
        .toList());
  }

  @protected
  HideDataTwinRustAsync dco_decode_RustOpaque_HideDataTwinRustAsync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return HideDataTwinRustAsyncImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  HideDataTwinRustAsyncArray2
      dco_decode_RustOpaque_HideDataTwinRustAsync_array_2(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return HideDataTwinRustAsyncArray2((raw as List<dynamic>)
        .map(dco_decode_RustOpaque_HideDataTwinRustAsync)
        .toList());
  }

  @protected
  HideDataTwinSync dco_decode_RustOpaque_HideDataTwinSync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return HideDataTwinSyncImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  HideDataTwinSyncArray2 dco_decode_RustOpaque_HideDataTwinSync_array_2(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return HideDataTwinSyncArray2((raw as List<dynamic>)
        .map(dco_decode_RustOpaque_HideDataTwinSync)
        .toList());
  }

  @protected
  MutexHideDataTwinNormal dco_decode_RustOpaque_MutexHideDataTwinNormal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MutexHideDataTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  MutexHideDataTwinRustAsync dco_decode_RustOpaque_MutexHideDataTwinRustAsync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MutexHideDataTwinRustAsyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  MutexHideDataTwinSync dco_decode_RustOpaque_MutexHideDataTwinSync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MutexHideDataTwinSyncImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  NonCloneDataTwinNormal dco_decode_RustOpaque_NonCloneDataTwinNormal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneDataTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  NonCloneDataTwinRustAsync dco_decode_RustOpaque_NonCloneDataTwinRustAsync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneDataTwinRustAsyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  NonCloneDataTwinSync dco_decode_RustOpaque_NonCloneDataTwinSync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneDataTwinSyncImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RwLockHideDataTwinNormal dco_decode_RustOpaque_RwLockHideDataTwinNormal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RwLockHideDataTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  RwLockHideDataTwinRustAsync dco_decode_RustOpaque_RwLockHideDataTwinRustAsync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RwLockHideDataTwinRustAsyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  RwLockHideDataTwinSync dco_decode_RustOpaque_RwLockHideDataTwinSync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RwLockHideDataTwinSyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  BoxAnyMyDartTypeRename
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynAnySendSyncstatic(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BoxAnyMyDartTypeRenameImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  BoxFnStringString
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynFnStringStringSendSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BoxFnStringStringImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  BoxMyTraitTwinNormal
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinNormalSendSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BoxMyTraitTwinNormalImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  BoxMyTraitTwinRustAsync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinRustAsyncSendSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BoxMyTraitTwinRustAsyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  BoxMyTraitTwinSync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinSyncSendSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BoxMyTraitTwinSyncImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ConstructorOpaqueStructTwinNormal
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueStructTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConstructorOpaqueStructTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  ConstructorOpaqueSyncStructTwinNormal
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueSyncStructTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConstructorOpaqueSyncStructTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  CustomHasherTwinNormal
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CustomHasherTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  CustomHasherTwinRustAsync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CustomHasherTwinRustAsyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  CustomHasherTwinSync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CustomHasherTwinSyncImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DeliberateFailSanityCheckTwinNormal
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDeliberateFailSanityCheckTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DeliberateFailSanityCheckTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  DroppableTwinNormal
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DroppableTwinNormalImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DroppableTwinRustAsync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DroppableTwinRustAsyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  DroppableTwinSync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DroppableTwinSyncImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  EnumWithGoodAndOpaqueWithoutOptionTwinNormal
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EnumWithGoodAndOpaqueWithoutOptionTwinNormalImpl
        .frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  EnumWithGoodAndOpaqueWithoutOptionTwinRustAsync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncImpl
        .frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  EnumWithGoodAndOpaqueWithoutOptionTwinSync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EnumWithGoodAndOpaqueWithoutOptionTwinSyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  ItemContainerSolutionOneTwinNormal
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerItemContainerSolutionOneTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ItemContainerSolutionOneTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  LtNestedTypeWithLifetimeTwinNormal
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtNestedTypeWithLifetimeTwinNormalstatic(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LtNestedTypeWithLifetimeTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  LtNestedTypeWithLifetimeTwinSync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtNestedTypeWithLifetimeTwinSyncstatic(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LtNestedTypeWithLifetimeTwinSyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  LtTypeWithLifetimeTwinNormal
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithLifetimeTwinNormalstatic(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LtTypeWithLifetimeTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  LtTypeWithLifetimeTwinSync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithLifetimeTwinSyncstatic(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LtTypeWithLifetimeTwinSyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  LtTypeWithMultiDepTwinNormal
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithMultiDepTwinNormalstatic(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LtTypeWithMultiDepTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  LtTypeWithMultiDepTwinSync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithMultiDepTwinSyncstatic(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LtTypeWithMultiDepTwinSyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  LtOwnedStructTwinNormal
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtOwnedStructTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LtOwnedStructTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  LtOwnedStructTwinSync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtOwnedStructTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LtOwnedStructTwinSyncImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  LtSubStructTwinNormal
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtSubStructTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LtSubStructTwinNormalImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  LtSubStructTwinSync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtSubStructTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LtSubStructTwinSyncImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MyAudioParamTwinNormal
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyAudioParamTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MyAudioParamTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  MyImplTraitWithSelfTwinNormal
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyImplTraitWithSelfTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MyImplTraitWithSelfTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  MyImplTraitWithSelfTwinSync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyImplTraitWithSelfTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MyImplTraitWithSelfTwinSyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  MyNodeTwinNormal
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyNodeTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MyNodeTwinNormalImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MyStructWithTryFromTwinNormal
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyStructWithTryFromTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MyStructWithTryFromTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  NonCloneDataRaw
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneDataRaw(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneDataRawImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  NonCloneSimpleEnumTwinNormal
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneSimpleEnumTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  NonCloneSimpleEnumTwinRustAsync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneSimpleEnumTwinRustAsyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  NonCloneSimpleEnumTwinSync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneSimpleEnumTwinSyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  NonCloneSimpleTwinNormal
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneSimpleTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  NonCloneSimpleTwinRustAsync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneSimpleTwinRustAsyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  NonCloneSimpleTwinSync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneSimpleTwinSyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  OpaqueItemTwinNormal
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueItemTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OpaqueItemTwinNormalImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OpaqueOneTwinNormal
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OpaqueOneTwinNormalImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OpaqueOneTwinRustAsync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OpaqueOneTwinRustAsyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  OpaqueOneTwinSync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OpaqueOneTwinSyncImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OpaqueStructWithDartCodeTwinNormal
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueStructWithDartCodeTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OpaqueStructWithDartCodeTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  OpaqueTwoTwinNormal
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OpaqueTwoTwinNormalImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OpaqueTwoTwinRustAsync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OpaqueTwoTwinRustAsyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  OpaqueTwoTwinSync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OpaqueTwoTwinSyncImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SimpleLogger
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSimpleLogger(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SimpleLoggerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SimpleOpaqueExternalStructWithMethod
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSimpleOpaqueExternalStructWithMethod(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SimpleOpaqueExternalStructWithMethodImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StaticGetterOnlyTwinNormal
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StaticGetterOnlyTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StaticGetterOnlyTwinRustAsync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StaticGetterOnlyTwinRustAsyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StaticGetterOnlyTwinSync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StaticGetterOnlyTwinSyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StructInMiscNoTwinExampleA
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleA(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructInMiscNoTwinExampleAImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StructInMiscNoTwinExampleB
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleB(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructInMiscNoTwinExampleBImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StructOneWithTraitForDynTwinNormal
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitForDynTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructOneWithTraitForDynTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StructOneWithTraitTwinNormal
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructOneWithTraitTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StructOneWithTraitTwinSync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructOneWithTraitTwinSyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StructTwoWithTraitForDynTwinNormal
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitForDynTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructTwoWithTraitForDynTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StructTwoWithTraitTwinNormal
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructTwoWithTraitTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StructTwoWithTraitTwinSync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructTwoWithTraitTwinSyncImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructWithGoodAndOpaqueFieldWithoutOptionTwinNormalImpl
        .frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncImpl
        .frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  StructWithGoodAndOpaqueFieldWithoutOptionTwinSync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructWithGoodAndOpaqueFieldWithoutOptionTwinSyncImpl
        .frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  StructWithImplBlockInMultiFile
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithImplBlockInMultiFile(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructWithImplBlockInMultiFileImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StructWithRustAutoOpaqueFieldWithManyDeriveInner
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithRustAutoOpaqueFieldWithManyDeriveInner(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructWithRustAutoOpaqueFieldWithManyDeriveInnerImpl
        .frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  StructWithSimpleSetterTwinNormal
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithSimpleSetterTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructWithSimpleSetterTwinNormalImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  TypeForIgnore
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTypeForIgnore(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TypeForIgnoreImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  TypeForIgnoreAll
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTypeForIgnoreAll(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TypeForIgnoreAllImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  I32 dco_decode_RustOpaque_i32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return I32Impl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Set<String>
      dco_decode_Set_String_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Set.from(dco_decode_list_String(raw));
  }

  @protected
  Set<String>
      dco_decode_Set_String_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Set.from(dco_decode_list_String(raw));
  }

  @protected
  Set<String>
      dco_decode_Set_String_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Set.from(dco_decode_list_String(raw));
  }

  @protected
  Set<String> dco_decode_Set_String_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Set.from(dco_decode_list_String(raw));
  }

  @protected
  Set<ApplicationMode> dco_decode_Set_application_mode_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Set.from(dco_decode_list_application_mode(raw));
  }

  @protected
  Set<int> dco_decode_Set_i_32_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Set.from(dco_decode_list_prim_i_32_strict(raw));
  }

  @protected
  RustStreamSink<NonCloneSimpleTwinNormal>
      dco_decode_StreamSink_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal_Sse(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<NonCloneSimpleTwinRustAsync>
      dco_decode_StreamSink_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync_Sse(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<NonCloneSimpleTwinSync>
      dco_decode_StreamSink_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync_Sse(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<Map<int, ApplicationMode>>
      dco_decode_StreamSink_Map_u_8_application_mode_None_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<Set<ApplicationMode>>
      dco_decode_StreamSink_Set_application_mode_None_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<String> dco_decode_StreamSink_String_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<ApplicationMode> dco_decode_StreamSink_application_mode_Sse(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<ApplicationModeArray2>
      dco_decode_StreamSink_application_mode_array_2_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<ApplicationSettings>
      dco_decode_StreamSink_application_settings_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<EventTwinNormal> dco_decode_StreamSink_event_twin_normal_Sse(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<EventTwinRustAsync>
      dco_decode_StreamSink_event_twin_rust_async_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<int> dco_decode_StreamSink_i_32_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<List<ApplicationMode>>
      dco_decode_StreamSink_list_application_mode_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<List<ApplicationSettings>>
      dco_decode_StreamSink_list_application_settings_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<Log2TwinNormal> dco_decode_StreamSink_log_2_twin_normal_Sse(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<Log2TwinRustAsync>
      dco_decode_StreamSink_log_2_twin_rust_async_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<Log2TwinSync> dco_decode_StreamSink_log_2_twin_sync_Sse(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<LogTwinNormal> dco_decode_StreamSink_log_twin_normal_Sse(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<LogTwinRustAsync>
      dco_decode_StreamSink_log_twin_rust_async_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<MirrorStructTwinNormal>
      dco_decode_StreamSink_mirror_struct_twin_normal_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<MirrorStructTwinRustAsync>
      dco_decode_StreamSink_mirror_struct_twin_rust_async_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<MirrorStructTwinSync>
      dco_decode_StreamSink_mirror_struct_twin_sync_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<MyStreamEntryTwinNormal>
      dco_decode_StreamSink_my_stream_entry_twin_normal_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<MyStreamEntryTwinRustAsync>
      dco_decode_StreamSink_my_stream_entry_twin_rust_async_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<ApplicationMode?>
      dco_decode_StreamSink_opt_box_autoadd_application_mode_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<(ApplicationSettings, RawStringEnumMirrored)>
      dco_decode_StreamSink_record_application_settings_raw_string_enum_mirrored_Sse(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<int> dco_decode_StreamSink_u_32_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<U8Array2> dco_decode_StreamSink_u_8_array_2_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  Issue2170Trait dco_decode_TraitDef_Issue2170Trait(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  MyTraitTwinNormal dco_decode_TraitDef_MyTraitTwinNormal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  MyTraitTwinRustAsync dco_decode_TraitDef_MyTraitTwinRustAsync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  MyTraitTwinSync dco_decode_TraitDef_MyTraitTwinSync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  MyTraitWithSelfTwinNormal dco_decode_TraitDef_MyTraitWithSelfTwinNormal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  MyTraitWithSelfTwinSync dco_decode_TraitDef_MyTraitWithSelfTwinSync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  SimpleTraitForDynTwinNormal dco_decode_TraitDef_SimpleTraitForDynTwinNormal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  SimpleTraitTwinNormal dco_decode_TraitDef_SimpleTraitTwinNormal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  SimpleTraitTwinSync dco_decode_TraitDef_SimpleTraitTwinSync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  BigInt dco_decode_U128(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BigInt.parse(raw);
  }

  @protected
  UuidValue dco_decode_Uuid(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UuidValue.fromByteList(dco_decode_list_prim_u_8_strict(raw));
  }

  @protected
  ATwinNormal dco_decode_a_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ATwinNormal(
      a: dco_decode_String(arr[0]),
    );
  }

  @protected
  ATwinRustAsync dco_decode_a_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ATwinRustAsync(
      a: dco_decode_String(arr[0]),
    );
  }

  @protected
  ATwinSync dco_decode_a_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ATwinSync(
      a: dco_decode_String(arr[0]),
    );
  }

  @protected
  AbcTwinNormal dco_decode_abc_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return AbcTwinNormal_A(
          dco_decode_box_autoadd_a_twin_normal(raw[1]),
        );
      case 1:
        return AbcTwinNormal_B(
          dco_decode_box_autoadd_b_twin_normal(raw[1]),
        );
      case 2:
        return AbcTwinNormal_C(
          dco_decode_box_autoadd_c_twin_normal(raw[1]),
        );
      case 3:
        return AbcTwinNormal_JustInt(
          dco_decode_i_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  AbcTwinRustAsync dco_decode_abc_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return AbcTwinRustAsync_A(
          dco_decode_box_autoadd_a_twin_rust_async(raw[1]),
        );
      case 1:
        return AbcTwinRustAsync_B(
          dco_decode_box_autoadd_b_twin_rust_async(raw[1]),
        );
      case 2:
        return AbcTwinRustAsync_C(
          dco_decode_box_autoadd_c_twin_rust_async(raw[1]),
        );
      case 3:
        return AbcTwinRustAsync_JustInt(
          dco_decode_i_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  AbcTwinSync dco_decode_abc_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return AbcTwinSync_A(
          dco_decode_box_autoadd_a_twin_sync(raw[1]),
        );
      case 1:
        return AbcTwinSync_B(
          dco_decode_box_autoadd_b_twin_sync(raw[1]),
        );
      case 2:
        return AbcTwinSync_C(
          dco_decode_box_autoadd_c_twin_sync(raw[1]),
        );
      case 3:
        return AbcTwinSync_JustInt(
          dco_decode_i_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  AnotherMacroStructTwinNormal dco_decode_another_macro_struct_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return AnotherMacroStructTwinNormal(
      data: dco_decode_i_32(arr[0]),
      nonFinalData: dco_decode_i_32(arr[1]),
    );
  }

  @protected
  AnotherTwinNormal dco_decode_another_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return AnotherTwinNormal(
      a: dco_decode_String(arr[0]),
    );
  }

  @protected
  AnotherTwinRustAsync dco_decode_another_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return AnotherTwinRustAsync(
      a: dco_decode_String(arr[0]),
    );
  }

  @protected
  AnotherTwinSync dco_decode_another_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return AnotherTwinSync(
      a: dco_decode_String(arr[0]),
    );
  }

  @protected
  ApplicationEnv dco_decode_application_env(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ApplicationEnv(
      vars: dco_decode_list_application_env_var(arr[0]),
    );
  }

  @protected
  ApplicationEnvVar dco_decode_application_env_var(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ApplicationEnvVar(
      field0: dco_decode_String(arr[0]),
      field1: dco_decode_bool(arr[1]),
    );
  }

  @protected
  ApplicationMessage dco_decode_application_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return ApplicationMessage_DisplayMessage(
          dco_decode_String(raw[1]),
        );
      case 1:
        return ApplicationMessage_RenderPixel(
          x: dco_decode_i_32(raw[1]),
          y: dco_decode_i_32(raw[2]),
        );
      case 2:
        return ApplicationMessage_Exit();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  ApplicationMode dco_decode_application_mode(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApplicationMode.values[raw as int];
  }

  @protected
  ApplicationModeArray2 dco_decode_application_mode_array_2(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApplicationModeArray2(
        (raw as List<dynamic>).map(dco_decode_application_mode).toList());
  }

  @protected
  ApplicationSettings dco_decode_application_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return ApplicationSettings(
      name: dco_decode_String(arr[0]),
      version: dco_decode_String(arr[1]),
      mode: dco_decode_application_mode(arr[2]),
      env: dco_decode_box_application_env(arr[3]),
      envOptional: dco_decode_opt_box_autoadd_application_env(arr[4]),
    );
  }

  @protected
  AttributeTwinNormal dco_decode_attribute_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return AttributeTwinNormal(
      key: dco_decode_String(arr[0]),
      value: dco_decode_String(arr[1]),
    );
  }

  @protected
  AttributeTwinRustAsync dco_decode_attribute_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return AttributeTwinRustAsync(
      key: dco_decode_String(arr[0]),
      value: dco_decode_String(arr[1]),
    );
  }

  @protected
  AttributeTwinSync dco_decode_attribute_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return AttributeTwinSync(
      key: dco_decode_String(arr[0]),
      value: dco_decode_String(arr[1]),
    );
  }

  @protected
  Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyAudioParamTwinNormalProxyEnum
      dco_decode_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_my_audio_param_twin_normal_proxy_enum(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyAudioParamTwinNormalProxyEnum_Variant0(
          dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyNodeTwinNormal(
              raw[1]),
        );
      case 1:
        return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyAudioParamTwinNormalProxyEnum_Variant1(
          dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyNodeTwinNormal(
              raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  BTwinNormal dco_decode_b_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return BTwinNormal(
      b: dco_decode_i_32(arr[0]),
    );
  }

  @protected
  BTwinRustAsync dco_decode_b_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return BTwinRustAsync(
      b: dco_decode_i_32(arr[0]),
    );
  }

  @protected
  BTwinSync dco_decode_b_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return BTwinSync(
      b: dco_decode_i_32(arr[0]),
    );
  }

  @protected
  BasicGeneralEnumTwinNormal dco_decode_basic_general_enum_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return BasicGeneralEnumTwinNormal_Apple(
          field: dco_decode_String(raw[1]),
        );
      case 1:
        return BasicGeneralEnumTwinNormal_Orange();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  BasicGeneralEnumTwinRustAsync dco_decode_basic_general_enum_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return BasicGeneralEnumTwinRustAsync_Apple(
          field: dco_decode_String(raw[1]),
        );
      case 1:
        return BasicGeneralEnumTwinRustAsync_Orange();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  BasicGeneralEnumTwinSync dco_decode_basic_general_enum_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return BasicGeneralEnumTwinSync_Apple(
          field: dco_decode_String(raw[1]),
        );
      case 1:
        return BasicGeneralEnumTwinSync_Orange();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  BasicPrimitiveEnumTwinNormal dco_decode_basic_primitive_enum_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BasicPrimitiveEnumTwinNormal.values[raw as int];
  }

  @protected
  BasicPrimitiveEnumTwinRustAsync
      dco_decode_basic_primitive_enum_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BasicPrimitiveEnumTwinRustAsync.values[raw as int];
  }

  @protected
  BasicPrimitiveEnumTwinSync dco_decode_basic_primitive_enum_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BasicPrimitiveEnumTwinSync.values[raw as int];
  }

  @protected
  BasicStructTwinNormal dco_decode_basic_struct_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return BasicStructTwinNormal(
      apple: dco_decode_opt_String(arr[0]),
      orange: dco_decode_opt_box_autoadd_i_32(arr[1]),
    );
  }

  @protected
  BasicStructTwinRustAsync dco_decode_basic_struct_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return BasicStructTwinRustAsync(
      apple: dco_decode_opt_String(arr[0]),
      orange: dco_decode_opt_box_autoadd_i_32(arr[1]),
    );
  }

  @protected
  BasicStructTwinSync dco_decode_basic_struct_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return BasicStructTwinSync(
      apple: dco_decode_opt_String(arr[0]),
      orange: dco_decode_opt_box_autoadd_i_32(arr[1]),
    );
  }

  @protected
  BenchmarkBinaryTreeTwinNormal dco_decode_benchmark_binary_tree_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return BenchmarkBinaryTreeTwinNormal(
      name: dco_decode_String(arr[0]),
      left: dco_decode_opt_box_benchmark_binary_tree_twin_normal(arr[1]),
      right: dco_decode_opt_box_benchmark_binary_tree_twin_normal(arr[2]),
    );
  }

  @protected
  BenchmarkBinaryTreeTwinRustAsync
      dco_decode_benchmark_binary_tree_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return BenchmarkBinaryTreeTwinRustAsync(
      name: dco_decode_String(arr[0]),
      left: dco_decode_opt_box_benchmark_binary_tree_twin_rust_async(arr[1]),
      right: dco_decode_opt_box_benchmark_binary_tree_twin_rust_async(arr[2]),
    );
  }

  @protected
  BenchmarkBinaryTreeTwinSync dco_decode_benchmark_binary_tree_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return BenchmarkBinaryTreeTwinSync(
      name: dco_decode_String(arr[0]),
      left: dco_decode_opt_box_benchmark_binary_tree_twin_sync(arr[1]),
      right: dco_decode_opt_box_benchmark_binary_tree_twin_sync(arr[2]),
    );
  }

  @protected
  BenchmarkBlobTwinNormal dco_decode_benchmark_blob_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return BenchmarkBlobTwinNormal(
      first: dco_decode_list_prim_u_8_strict(arr[0]),
      second: dco_decode_list_prim_u_8_strict(arr[1]),
      third: dco_decode_list_prim_u_8_strict(arr[2]),
    );
  }

  @protected
  BenchmarkBlobTwinRustAsync dco_decode_benchmark_blob_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return BenchmarkBlobTwinRustAsync(
      first: dco_decode_list_prim_u_8_strict(arr[0]),
      second: dco_decode_list_prim_u_8_strict(arr[1]),
      third: dco_decode_list_prim_u_8_strict(arr[2]),
    );
  }

  @protected
  BenchmarkBlobTwinSync dco_decode_benchmark_blob_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return BenchmarkBlobTwinSync(
      first: dco_decode_list_prim_u_8_strict(arr[0]),
      second: dco_decode_list_prim_u_8_strict(arr[1]),
      third: dco_decode_list_prim_u_8_strict(arr[2]),
    );
  }

  @protected
  BigBuffersTwinNormal dco_decode_big_buffers_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return BigBuffersTwinNormal(
      int64: dco_decode_list_prim_i_64_strict(arr[0]),
      uint64: dco_decode_list_prim_u_64_strict(arr[1]),
    );
  }

  @protected
  BigBuffersTwinRustAsync dco_decode_big_buffers_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return BigBuffersTwinRustAsync(
      int64: dco_decode_list_prim_i_64_strict(arr[0]),
      uint64: dco_decode_list_prim_u_64_strict(arr[1]),
    );
  }

  @protected
  BigBuffersTwinSync dco_decode_big_buffers_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return BigBuffersTwinSync(
      int64: dco_decode_list_prim_i_64_strict(arr[0]),
      uint64: dco_decode_list_prim_u_64_strict(arr[1]),
    );
  }

  @protected
  BlobTwinNormal dco_decode_blob_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return BlobTwinNormal(
      field0: dco_decode_u_8_array_1600(arr[0]),
    );
  }

  @protected
  BlobTwinRustAsync dco_decode_blob_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return BlobTwinRustAsync(
      field0: dco_decode_u_8_array_1600(arr[0]),
    );
  }

  @protected
  BlobTwinSync dco_decode_blob_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return BlobTwinSync(
      field0: dco_decode_u_8_array_1600(arr[0]),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  ApplicationEnv dco_decode_box_application_env(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_application_env(raw);
  }

  @protected
  NonCloneSimpleTwinNormal
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
        raw);
  }

  @protected
  NonCloneSimpleTwinRustAsync
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
        raw);
  }

  @protected
  NonCloneSimpleTwinSync
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
        raw);
  }

  @protected
  Duration dco_decode_box_autoadd_Chrono_Duration(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Chrono_Duration(raw);
  }

  @protected
  DateTime dco_decode_box_autoadd_Chrono_Naive(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Chrono_Naive(raw);
  }

  @protected
  DateTime dco_decode_box_autoadd_Chrono_Utc(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Chrono_Utc(raw);
  }

  @protected
  Object dco_decode_box_autoadd_DartOpaque(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_DartOpaque(raw);
  }

  @protected
  HideDataAnotherTwinNormal
      dco_decode_box_autoadd_RustOpaque_HideDataAnotherTwinNormal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_RustOpaque_HideDataAnotherTwinNormal(raw);
  }

  @protected
  HideDataTwinNormal dco_decode_box_autoadd_RustOpaque_HideDataTwinNormal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_RustOpaque_HideDataTwinNormal(raw);
  }

  @protected
  HideDataTwinRustAsync dco_decode_box_autoadd_RustOpaque_HideDataTwinRustAsync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_RustOpaque_HideDataTwinRustAsync(raw);
  }

  @protected
  HideDataTwinSync dco_decode_box_autoadd_RustOpaque_HideDataTwinSync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_RustOpaque_HideDataTwinSync(raw);
  }

  @protected
  ATwinNormal dco_decode_box_autoadd_a_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_a_twin_normal(raw);
  }

  @protected
  ATwinRustAsync dco_decode_box_autoadd_a_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_a_twin_rust_async(raw);
  }

  @protected
  ATwinSync dco_decode_box_autoadd_a_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_a_twin_sync(raw);
  }

  @protected
  AbcTwinNormal dco_decode_box_autoadd_abc_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_abc_twin_normal(raw);
  }

  @protected
  AbcTwinRustAsync dco_decode_box_autoadd_abc_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_abc_twin_rust_async(raw);
  }

  @protected
  AbcTwinSync dco_decode_box_autoadd_abc_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_abc_twin_sync(raw);
  }

  @protected
  ApplicationEnv dco_decode_box_autoadd_application_env(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_application_env(raw);
  }

  @protected
  ApplicationMode dco_decode_box_autoadd_application_mode(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_application_mode(raw);
  }

  @protected
  ApplicationSettings dco_decode_box_autoadd_application_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_application_settings(raw);
  }

  @protected
  AttributeTwinNormal dco_decode_box_autoadd_attribute_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_attribute_twin_normal(raw);
  }

  @protected
  AttributeTwinRustAsync dco_decode_box_autoadd_attribute_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_attribute_twin_rust_async(raw);
  }

  @protected
  AttributeTwinSync dco_decode_box_autoadd_attribute_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_attribute_twin_sync(raw);
  }

  @protected
  Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyAudioParamTwinNormalProxyEnum
      dco_decode_box_autoadd_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_my_audio_param_twin_normal_proxy_enum(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_my_audio_param_twin_normal_proxy_enum(
        raw);
  }

  @protected
  BTwinNormal dco_decode_box_autoadd_b_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_b_twin_normal(raw);
  }

  @protected
  BTwinRustAsync dco_decode_box_autoadd_b_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_b_twin_rust_async(raw);
  }

  @protected
  BTwinSync dco_decode_box_autoadd_b_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_b_twin_sync(raw);
  }

  @protected
  BasicGeneralEnumTwinNormal
      dco_decode_box_autoadd_basic_general_enum_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_basic_general_enum_twin_normal(raw);
  }

  @protected
  BasicGeneralEnumTwinRustAsync
      dco_decode_box_autoadd_basic_general_enum_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_basic_general_enum_twin_rust_async(raw);
  }

  @protected
  BasicGeneralEnumTwinSync dco_decode_box_autoadd_basic_general_enum_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_basic_general_enum_twin_sync(raw);
  }

  @protected
  BasicPrimitiveEnumTwinNormal
      dco_decode_box_autoadd_basic_primitive_enum_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_basic_primitive_enum_twin_normal(raw);
  }

  @protected
  BasicPrimitiveEnumTwinRustAsync
      dco_decode_box_autoadd_basic_primitive_enum_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_basic_primitive_enum_twin_rust_async(raw);
  }

  @protected
  BasicPrimitiveEnumTwinSync
      dco_decode_box_autoadd_basic_primitive_enum_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_basic_primitive_enum_twin_sync(raw);
  }

  @protected
  BasicStructTwinNormal dco_decode_box_autoadd_basic_struct_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_basic_struct_twin_normal(raw);
  }

  @protected
  BasicStructTwinRustAsync dco_decode_box_autoadd_basic_struct_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_basic_struct_twin_rust_async(raw);
  }

  @protected
  BasicStructTwinSync dco_decode_box_autoadd_basic_struct_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_basic_struct_twin_sync(raw);
  }

  @protected
  BenchmarkBinaryTreeTwinNormal
      dco_decode_box_autoadd_benchmark_binary_tree_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_benchmark_binary_tree_twin_normal(raw);
  }

  @protected
  BenchmarkBinaryTreeTwinRustAsync
      dco_decode_box_autoadd_benchmark_binary_tree_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_benchmark_binary_tree_twin_rust_async(raw);
  }

  @protected
  BenchmarkBinaryTreeTwinSync
      dco_decode_box_autoadd_benchmark_binary_tree_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_benchmark_binary_tree_twin_sync(raw);
  }

  @protected
  BenchmarkBlobTwinNormal dco_decode_box_autoadd_benchmark_blob_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_benchmark_blob_twin_normal(raw);
  }

  @protected
  BenchmarkBlobTwinRustAsync
      dco_decode_box_autoadd_benchmark_blob_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_benchmark_blob_twin_rust_async(raw);
  }

  @protected
  BenchmarkBlobTwinSync dco_decode_box_autoadd_benchmark_blob_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_benchmark_blob_twin_sync(raw);
  }

  @protected
  bool dco_decode_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  CTwinNormal dco_decode_box_autoadd_c_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_c_twin_normal(raw);
  }

  @protected
  CTwinRustAsync dco_decode_box_autoadd_c_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_c_twin_rust_async(raw);
  }

  @protected
  CTwinSync dco_decode_box_autoadd_c_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_c_twin_sync(raw);
  }

  @protected
  ConcatenateWithTwinNormal dco_decode_box_autoadd_concatenate_with_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_concatenate_with_twin_normal(raw);
  }

  @protected
  ConcatenateWithTwinRustAsync
      dco_decode_box_autoadd_concatenate_with_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_concatenate_with_twin_rust_async(raw);
  }

  @protected
  ConcatenateWithTwinSync dco_decode_box_autoadd_concatenate_with_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_concatenate_with_twin_sync(raw);
  }

  @protected
  CustomNestedError2TwinNormal
      dco_decode_box_autoadd_custom_nested_error_2_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_custom_nested_error_2_twin_normal(raw);
  }

  @protected
  CustomNestedError2TwinRustAsync
      dco_decode_box_autoadd_custom_nested_error_2_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_custom_nested_error_2_twin_rust_async(raw);
  }

  @protected
  CustomNestedError2TwinSync
      dco_decode_box_autoadd_custom_nested_error_2_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_custom_nested_error_2_twin_sync(raw);
  }

  @protected
  CustomNestedErrorInnerTwinNormal
      dco_decode_box_autoadd_custom_nested_error_inner_twin_normal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_custom_nested_error_inner_twin_normal(raw);
  }

  @protected
  CustomNestedErrorInnerTwinRustAsync
      dco_decode_box_autoadd_custom_nested_error_inner_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_custom_nested_error_inner_twin_rust_async(raw);
  }

  @protected
  CustomNestedErrorInnerTwinSync
      dco_decode_box_autoadd_custom_nested_error_inner_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_custom_nested_error_inner_twin_sync(raw);
  }

  @protected
  CustomNestedErrorOuterTwinNormal
      dco_decode_box_autoadd_custom_nested_error_outer_twin_normal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_custom_nested_error_outer_twin_normal(raw);
  }

  @protected
  CustomNestedErrorOuterTwinRustAsync
      dco_decode_box_autoadd_custom_nested_error_outer_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_custom_nested_error_outer_twin_rust_async(raw);
  }

  @protected
  CustomNestedErrorOuterTwinSync
      dco_decode_box_autoadd_custom_nested_error_outer_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_custom_nested_error_outer_twin_sync(raw);
  }

  @protected
  CustomStructErrorTwinNormal
      dco_decode_box_autoadd_custom_struct_error_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_custom_struct_error_twin_normal(raw);
  }

  @protected
  CustomStructErrorTwinRustAsync
      dco_decode_box_autoadd_custom_struct_error_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_custom_struct_error_twin_rust_async(raw);
  }

  @protected
  CustomStructErrorTwinSync
      dco_decode_box_autoadd_custom_struct_error_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_custom_struct_error_twin_sync(raw);
  }

  @protected
  CustomStructTwinNormal dco_decode_box_autoadd_custom_struct_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_custom_struct_twin_normal(raw);
  }

  @protected
  CustomStructTwinRustAsync
      dco_decode_box_autoadd_custom_struct_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_custom_struct_twin_rust_async(raw);
  }

  @protected
  CustomStructTwinSync dco_decode_box_autoadd_custom_struct_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_custom_struct_twin_sync(raw);
  }

  @protected
  CustomizedTwinNormal dco_decode_box_autoadd_customized_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_customized_twin_normal(raw);
  }

  @protected
  CustomizedTwinRustAsync dco_decode_box_autoadd_customized_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_customized_twin_rust_async(raw);
  }

  @protected
  CustomizedTwinSync dco_decode_box_autoadd_customized_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_customized_twin_sync(raw);
  }

  @protected
  DartOpaqueNestedTwinNormal
      dco_decode_box_autoadd_dart_opaque_nested_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_dart_opaque_nested_twin_normal(raw);
  }

  @protected
  DartOpaqueNestedTwinRustAsync
      dco_decode_box_autoadd_dart_opaque_nested_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_dart_opaque_nested_twin_rust_async(raw);
  }

  @protected
  DartOpaqueNestedTwinSync dco_decode_box_autoadd_dart_opaque_nested_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_dart_opaque_nested_twin_sync(raw);
  }

  @protected
  ElementTwinNormal dco_decode_box_autoadd_element_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_element_twin_normal(raw);
  }

  @protected
  ElementTwinRustAsync dco_decode_box_autoadd_element_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_element_twin_rust_async(raw);
  }

  @protected
  ElementTwinSync dco_decode_box_autoadd_element_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_element_twin_sync(raw);
  }

  @protected
  EmptyTwinNormal dco_decode_box_autoadd_empty_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_empty_twin_normal(raw);
  }

  @protected
  EmptyTwinRustAsync dco_decode_box_autoadd_empty_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_empty_twin_rust_async(raw);
  }

  @protected
  EmptyTwinSync dco_decode_box_autoadd_empty_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_empty_twin_sync(raw);
  }

  @protected
  EnumDartOpaqueTwinNormal dco_decode_box_autoadd_enum_dart_opaque_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_enum_dart_opaque_twin_normal(raw);
  }

  @protected
  EnumDartOpaqueTwinRustAsync
      dco_decode_box_autoadd_enum_dart_opaque_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_enum_dart_opaque_twin_rust_async(raw);
  }

  @protected
  EnumDartOpaqueTwinSync dco_decode_box_autoadd_enum_dart_opaque_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_enum_dart_opaque_twin_sync(raw);
  }

  @protected
  EnumOpaqueTwinNormal dco_decode_box_autoadd_enum_opaque_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_enum_opaque_twin_normal(raw);
  }

  @protected
  EnumOpaqueTwinRustAsync dco_decode_box_autoadd_enum_opaque_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_enum_opaque_twin_rust_async(raw);
  }

  @protected
  EnumOpaqueTwinSync dco_decode_box_autoadd_enum_opaque_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_enum_opaque_twin_sync(raw);
  }

  @protected
  EnumWithGoodAndOpaqueTwinNormal
      dco_decode_box_autoadd_enum_with_good_and_opaque_twin_normal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_enum_with_good_and_opaque_twin_normal(raw);
  }

  @protected
  EnumWithGoodAndOpaqueTwinRustAsync
      dco_decode_box_autoadd_enum_with_good_and_opaque_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_enum_with_good_and_opaque_twin_rust_async(raw);
  }

  @protected
  EnumWithGoodAndOpaqueTwinSync
      dco_decode_box_autoadd_enum_with_good_and_opaque_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_enum_with_good_and_opaque_twin_sync(raw);
  }

  @protected
  EnumWithItemMixedTwinNormal
      dco_decode_box_autoadd_enum_with_item_mixed_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_enum_with_item_mixed_twin_normal(raw);
  }

  @protected
  EnumWithItemMixedTwinRustAsync
      dco_decode_box_autoadd_enum_with_item_mixed_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_enum_with_item_mixed_twin_rust_async(raw);
  }

  @protected
  EnumWithItemMixedTwinSync
      dco_decode_box_autoadd_enum_with_item_mixed_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_enum_with_item_mixed_twin_sync(raw);
  }

  @protected
  EnumWithItemStructTwinNormal
      dco_decode_box_autoadd_enum_with_item_struct_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_enum_with_item_struct_twin_normal(raw);
  }

  @protected
  EnumWithItemStructTwinRustAsync
      dco_decode_box_autoadd_enum_with_item_struct_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_enum_with_item_struct_twin_rust_async(raw);
  }

  @protected
  EnumWithItemStructTwinSync
      dco_decode_box_autoadd_enum_with_item_struct_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_enum_with_item_struct_twin_sync(raw);
  }

  @protected
  EnumWithItemTupleTwinNormal
      dco_decode_box_autoadd_enum_with_item_tuple_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_enum_with_item_tuple_twin_normal(raw);
  }

  @protected
  EnumWithItemTupleTwinRustAsync
      dco_decode_box_autoadd_enum_with_item_tuple_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_enum_with_item_tuple_twin_rust_async(raw);
  }

  @protected
  EnumWithItemTupleTwinSync
      dco_decode_box_autoadd_enum_with_item_tuple_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_enum_with_item_tuple_twin_sync(raw);
  }

  @protected
  EventTwinNormal dco_decode_box_autoadd_event_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_event_twin_normal(raw);
  }

  @protected
  EventTwinRustAsync dco_decode_box_autoadd_event_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_event_twin_rust_async(raw);
  }

  @protected
  ExoticOptionalsTwinNormal dco_decode_box_autoadd_exotic_optionals_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_exotic_optionals_twin_normal(raw);
  }

  @protected
  ExoticOptionalsTwinRustAsync
      dco_decode_box_autoadd_exotic_optionals_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_exotic_optionals_twin_rust_async(raw);
  }

  @protected
  ExoticOptionalsTwinSync dco_decode_box_autoadd_exotic_optionals_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_exotic_optionals_twin_sync(raw);
  }

  @protected
  double dco_decode_box_autoadd_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  double dco_decode_box_autoadd_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  FeatureChronoTwinNormal dco_decode_box_autoadd_feature_chrono_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_feature_chrono_twin_normal(raw);
  }

  @protected
  FeatureChronoTwinRustAsync
      dco_decode_box_autoadd_feature_chrono_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_feature_chrono_twin_rust_async(raw);
  }

  @protected
  FeatureChronoTwinSync dco_decode_box_autoadd_feature_chrono_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_feature_chrono_twin_sync(raw);
  }

  @protected
  FeatureUuidTwinNormal dco_decode_box_autoadd_feature_uuid_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_feature_uuid_twin_normal(raw);
  }

  @protected
  FeatureUuidTwinRustAsync dco_decode_box_autoadd_feature_uuid_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_feature_uuid_twin_rust_async(raw);
  }

  @protected
  FeatureUuidTwinSync dco_decode_box_autoadd_feature_uuid_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_feature_uuid_twin_sync(raw);
  }

  @protected
  FeedIdTwinNormal dco_decode_box_autoadd_feed_id_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_feed_id_twin_normal(raw);
  }

  @protected
  FeedIdTwinRustAsync dco_decode_box_autoadd_feed_id_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_feed_id_twin_rust_async(raw);
  }

  @protected
  FeedIdTwinSync dco_decode_box_autoadd_feed_id_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_feed_id_twin_sync(raw);
  }

  @protected
  int dco_decode_box_autoadd_i_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_box_autoadd_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_box_autoadd_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_i_64(raw);
  }

  @protected
  int dco_decode_box_autoadd_i_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_box_autoadd_isize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_isize(raw);
  }

  @protected
  ItemContainerSolutionTwoTwinNormal
      dco_decode_box_autoadd_item_container_solution_two_twin_normal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_item_container_solution_two_twin_normal(raw);
  }

  @protected
  KitchenSinkTwinNormal dco_decode_box_autoadd_kitchen_sink_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_kitchen_sink_twin_normal(raw);
  }

  @protected
  KitchenSinkTwinRustAsync dco_decode_box_autoadd_kitchen_sink_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_kitchen_sink_twin_rust_async(raw);
  }

  @protected
  KitchenSinkTwinSync dco_decode_box_autoadd_kitchen_sink_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_kitchen_sink_twin_sync(raw);
  }

  @protected
  ListOfNestedRawStringMirrored
      dco_decode_box_autoadd_list_of_nested_raw_string_mirrored(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_list_of_nested_raw_string_mirrored(raw);
  }

  @protected
  MacroStruct dco_decode_box_autoadd_macro_struct(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_macro_struct(raw);
  }

  @protected
  MeasureTwinNormal dco_decode_box_autoadd_measure_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_measure_twin_normal(raw);
  }

  @protected
  MeasureTwinRustAsync dco_decode_box_autoadd_measure_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_measure_twin_rust_async(raw);
  }

  @protected
  MeasureTwinSync dco_decode_box_autoadd_measure_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_measure_twin_sync(raw);
  }

  @protected
  MessageIdTwinNormal dco_decode_box_autoadd_message_id_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_message_id_twin_normal(raw);
  }

  @protected
  MessageIdTwinRustAsync dco_decode_box_autoadd_message_id_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_message_id_twin_rust_async(raw);
  }

  @protected
  MessageIdTwinSync dco_decode_box_autoadd_message_id_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_message_id_twin_sync(raw);
  }

  @protected
  MyCallableTwinNormal dco_decode_box_autoadd_my_callable_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_my_callable_twin_normal(raw);
  }

  @protected
  MyCallableTwinRustAsync dco_decode_box_autoadd_my_callable_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_my_callable_twin_rust_async(raw);
  }

  @protected
  MyCallableTwinSync dco_decode_box_autoadd_my_callable_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_my_callable_twin_sync(raw);
  }

  @protected
  MyEnumWithJsonSerializableTwinNormal
      dco_decode_box_autoadd_my_enum_with_json_serializable_twin_normal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_my_enum_with_json_serializable_twin_normal(raw);
  }

  @protected
  MyNestedStructTwinNormal dco_decode_box_autoadd_my_nested_struct_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_my_nested_struct_twin_normal(raw);
  }

  @protected
  MyNestedStructTwinRustAsync
      dco_decode_box_autoadd_my_nested_struct_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_my_nested_struct_twin_rust_async(raw);
  }

  @protected
  MyNestedStructTwinSync dco_decode_box_autoadd_my_nested_struct_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_my_nested_struct_twin_sync(raw);
  }

  @protected
  MySize dco_decode_box_autoadd_my_size(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_my_size(raw);
  }

  @protected
  MyStruct dco_decode_box_autoadd_my_struct(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_my_struct(raw);
  }

  @protected
  MyStructContainingStreamSinkTwinNormal
      dco_decode_box_autoadd_my_struct_containing_stream_sink_twin_normal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_my_struct_containing_stream_sink_twin_normal(raw);
  }

  @protected
  MyStructContainingStreamSinkTwinRustAsync
      dco_decode_box_autoadd_my_struct_containing_stream_sink_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_my_struct_containing_stream_sink_twin_rust_async(raw);
  }

  @protected
  MyStructWithJsonSerializableTwinNormal
      dco_decode_box_autoadd_my_struct_with_json_serializable_twin_normal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_my_struct_with_json_serializable_twin_normal(raw);
  }

  @protected
  MyStructWithSync dco_decode_box_autoadd_my_struct_with_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_my_struct_with_sync(raw);
  }

  @protected
  MyTreeNodeTwinNormal dco_decode_box_autoadd_my_tree_node_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_my_tree_node_twin_normal(raw);
  }

  @protected
  MyTreeNodeTwinRustAsync dco_decode_box_autoadd_my_tree_node_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_my_tree_node_twin_rust_async(raw);
  }

  @protected
  MyTreeNodeTwinSync dco_decode_box_autoadd_my_tree_node_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_my_tree_node_twin_sync(raw);
  }

  @protected
  NestedRawStringMirrored dco_decode_box_autoadd_nested_raw_string_mirrored(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_nested_raw_string_mirrored(raw);
  }

  @protected
  NewTypeIntTwinNormal dco_decode_box_autoadd_new_type_int_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_new_type_int_twin_normal(raw);
  }

  @protected
  NewTypeIntTwinRustAsync dco_decode_box_autoadd_new_type_int_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_new_type_int_twin_rust_async(raw);
  }

  @protected
  NewTypeIntTwinSync dco_decode_box_autoadd_new_type_int_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_new_type_int_twin_sync(raw);
  }

  @protected
  NonOpaqueStructContainingIpv4Addr
      dco_decode_box_autoadd_non_opaque_struct_containing_ipv_4_addr(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_non_opaque_struct_containing_ipv_4_addr(raw);
  }

  @protected
  NoteTwinNormal dco_decode_box_autoadd_note_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_note_twin_normal(raw);
  }

  @protected
  NoteTwinRustAsync dco_decode_box_autoadd_note_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_note_twin_rust_async(raw);
  }

  @protected
  NoteTwinSync dco_decode_box_autoadd_note_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_note_twin_sync(raw);
  }

  @protected
  Numbers dco_decode_box_autoadd_numbers(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_numbers(raw);
  }

  @protected
  OpaqueNestedTwinNormal dco_decode_box_autoadd_opaque_nested_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_opaque_nested_twin_normal(raw);
  }

  @protected
  OpaqueNestedTwinRustAsync
      dco_decode_box_autoadd_opaque_nested_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_opaque_nested_twin_rust_async(raw);
  }

  @protected
  OpaqueNestedTwinSync dco_decode_box_autoadd_opaque_nested_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_opaque_nested_twin_sync(raw);
  }

  @protected
  OptVecsTwinNormal dco_decode_box_autoadd_opt_vecs_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_opt_vecs_twin_normal(raw);
  }

  @protected
  OptVecsTwinRustAsync dco_decode_box_autoadd_opt_vecs_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_opt_vecs_twin_rust_async(raw);
  }

  @protected
  OptVecsTwinSync dco_decode_box_autoadd_opt_vecs_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_opt_vecs_twin_sync(raw);
  }

  @protected
  RawStringMirrored dco_decode_box_autoadd_raw_string_mirrored(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_raw_string_mirrored(raw);
  }

  @protected
  (String, int) dco_decode_box_autoadd_record_string_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as (String, int);
  }

  @protected
  Sequences dco_decode_box_autoadd_sequences(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_sequences(raw);
  }

  @protected
  SimpleEnumTwinNormal dco_decode_box_autoadd_simple_enum_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_simple_enum_twin_normal(raw);
  }

  @protected
  SimpleEnumTwinRustAsync dco_decode_box_autoadd_simple_enum_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_simple_enum_twin_rust_async(raw);
  }

  @protected
  SimpleEnumTwinSync dco_decode_box_autoadd_simple_enum_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_simple_enum_twin_sync(raw);
  }

  @protected
  SimpleStructForBorrowTwinNormal
      dco_decode_box_autoadd_simple_struct_for_borrow_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_simple_struct_for_borrow_twin_normal(raw);
  }

  @protected
  SimpleStructForBorrowTwinRustAsync
      dco_decode_box_autoadd_simple_struct_for_borrow_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_simple_struct_for_borrow_twin_rust_async(raw);
  }

  @protected
  SimpleStructForBorrowTwinSync
      dco_decode_box_autoadd_simple_struct_for_borrow_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_simple_struct_for_borrow_twin_sync(raw);
  }

  @protected
  SimpleStructTwinNormal dco_decode_box_autoadd_simple_struct_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_simple_struct_twin_normal(raw);
  }

  @protected
  SimpleStructTwinRustAsync
      dco_decode_box_autoadd_simple_struct_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_simple_struct_twin_rust_async(raw);
  }

  @protected
  SimpleStructTwinSync dco_decode_box_autoadd_simple_struct_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_simple_struct_twin_sync(raw);
  }

  @protected
  SimpleTraitForDynTwinNormalImplementor
      dco_decode_box_autoadd_simple_trait_for_dyn_twin_normal_implementor(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_simple_trait_for_dyn_twin_normal_implementor(raw);
  }

  @protected
  SimpleTranslatableExternalStructWithMethod
      dco_decode_box_autoadd_simple_translatable_external_struct_with_method(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_simple_translatable_external_struct_with_method(raw);
  }

  @protected
  SomeStructTwinNormal dco_decode_box_autoadd_some_struct_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_some_struct_twin_normal(raw);
  }

  @protected
  SomeStructTwinRustAsync dco_decode_box_autoadd_some_struct_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_some_struct_twin_rust_async(raw);
  }

  @protected
  SomeStructTwinSync dco_decode_box_autoadd_some_struct_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_some_struct_twin_sync(raw);
  }

  @protected
  StructInLowerLevel dco_decode_box_autoadd_struct_in_lower_level(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_in_lower_level(raw);
  }

  @protected
  StructWithCastedPrimitiveTwinNormal
      dco_decode_box_autoadd_struct_with_casted_primitive_twin_normal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_casted_primitive_twin_normal(raw);
  }

  @protected
  StructWithCommentsTwinNormal
      dco_decode_box_autoadd_struct_with_comments_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_comments_twin_normal(raw);
  }

  @protected
  StructWithCommentsTwinRustAsync
      dco_decode_box_autoadd_struct_with_comments_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_comments_twin_rust_async(raw);
  }

  @protected
  StructWithCommentsTwinSync
      dco_decode_box_autoadd_struct_with_comments_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_comments_twin_sync(raw);
  }

  @protected
  StructWithCustomNameMethodTwinNormal
      dco_decode_box_autoadd_struct_with_custom_name_method_twin_normal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_custom_name_method_twin_normal(raw);
  }

  @protected
  StructWithDartKeywordFieldTwinNormal
      dco_decode_box_autoadd_struct_with_dart_keyword_field_twin_normal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_dart_keyword_field_twin_normal(raw);
  }

  @protected
  StructWithDartKeywordFieldTwinRustAsync
      dco_decode_box_autoadd_struct_with_dart_keyword_field_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_dart_keyword_field_twin_rust_async(raw);
  }

  @protected
  StructWithDartKeywordFieldTwinSync
      dco_decode_box_autoadd_struct_with_dart_keyword_field_twin_sync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_dart_keyword_field_twin_sync(raw);
  }

  @protected
  StructWithEnumTwinNormal dco_decode_box_autoadd_struct_with_enum_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_enum_twin_normal(raw);
  }

  @protected
  StructWithEnumTwinRustAsync
      dco_decode_box_autoadd_struct_with_enum_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_enum_twin_rust_async(raw);
  }

  @protected
  StructWithEnumTwinSync dco_decode_box_autoadd_struct_with_enum_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_enum_twin_sync(raw);
  }

  @protected
  StructWithExplicitAutoOpaqueFieldTwinNormal
      dco_decode_box_autoadd_struct_with_explicit_auto_opaque_field_twin_normal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_explicit_auto_opaque_field_twin_normal(raw);
  }

  @protected
  StructWithExplicitAutoOpaqueFieldTwinRustAsync
      dco_decode_box_autoadd_struct_with_explicit_auto_opaque_field_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_explicit_auto_opaque_field_twin_rust_async(
        raw);
  }

  @protected
  StructWithExplicitAutoOpaqueFieldTwinSync
      dco_decode_box_autoadd_struct_with_explicit_auto_opaque_field_twin_sync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_explicit_auto_opaque_field_twin_sync(raw);
  }

  @protected
  StructWithFieldRenameTwinNormal
      dco_decode_box_autoadd_struct_with_field_rename_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_field_rename_twin_normal(raw);
  }

  @protected
  StructWithFieldRenameTwinRustAsync
      dco_decode_box_autoadd_struct_with_field_rename_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_field_rename_twin_rust_async(raw);
  }

  @protected
  StructWithFieldRenameTwinSync
      dco_decode_box_autoadd_struct_with_field_rename_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_field_rename_twin_sync(raw);
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinNormal
      dco_decode_box_autoadd_struct_with_good_and_opaque_field_twin_normal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_good_and_opaque_field_twin_normal(raw);
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinRustAsync
      dco_decode_box_autoadd_struct_with_good_and_opaque_field_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_good_and_opaque_field_twin_rust_async(raw);
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinSync
      dco_decode_box_autoadd_struct_with_good_and_opaque_field_twin_sync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_good_and_opaque_field_twin_sync(raw);
  }

  @protected
  StructWithImplBlockInAnotherFileDependency
      dco_decode_box_autoadd_struct_with_impl_block_in_another_file_dependency(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_impl_block_in_another_file_dependency(raw);
  }

  @protected
  StructWithOneFieldTwinNormal
      dco_decode_box_autoadd_struct_with_one_field_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_one_field_twin_normal(raw);
  }

  @protected
  StructWithOneFieldTwinRustAsync
      dco_decode_box_autoadd_struct_with_one_field_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_one_field_twin_rust_async(raw);
  }

  @protected
  StructWithOneFieldTwinSync
      dco_decode_box_autoadd_struct_with_one_field_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_one_field_twin_sync(raw);
  }

  @protected
  StructWithRustAutoOpaqueFieldWithManyDerive
      dco_decode_box_autoadd_struct_with_rust_auto_opaque_field_with_many_derive(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_rust_auto_opaque_field_with_many_derive(raw);
  }

  @protected
  StructWithRustAutoOpaqueWithNonCloneData
      dco_decode_box_autoadd_struct_with_rust_auto_opaque_with_non_clone_data(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_rust_auto_opaque_with_non_clone_data(raw);
  }

  @protected
  StructWithTwoFieldTwinNormal
      dco_decode_box_autoadd_struct_with_two_field_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_two_field_twin_normal(raw);
  }

  @protected
  StructWithTwoFieldTwinRustAsync
      dco_decode_box_autoadd_struct_with_two_field_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_two_field_twin_rust_async(raw);
  }

  @protected
  StructWithTwoFieldTwinSync
      dco_decode_box_autoadd_struct_with_two_field_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_two_field_twin_sync(raw);
  }

  @protected
  StructWithZeroFieldTwinNormal
      dco_decode_box_autoadd_struct_with_zero_field_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_zero_field_twin_normal(raw);
  }

  @protected
  StructWithZeroFieldTwinRustAsync
      dco_decode_box_autoadd_struct_with_zero_field_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_zero_field_twin_rust_async(raw);
  }

  @protected
  StructWithZeroFieldTwinSync
      dco_decode_box_autoadd_struct_with_zero_field_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_zero_field_twin_sync(raw);
  }

  @protected
  SumWithTwinNormal dco_decode_box_autoadd_sum_with_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_sum_with_twin_normal(raw);
  }

  @protected
  SumWithTwinRustAsync dco_decode_box_autoadd_sum_with_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_sum_with_twin_rust_async(raw);
  }

  @protected
  SumWithTwinSync dco_decode_box_autoadd_sum_with_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_sum_with_twin_sync(raw);
  }

  @protected
  TestIdTwinNormal dco_decode_box_autoadd_test_id_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_test_id_twin_normal(raw);
  }

  @protected
  TestIdTwinRustAsync dco_decode_box_autoadd_test_id_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_test_id_twin_rust_async(raw);
  }

  @protected
  TestIdTwinSync dco_decode_box_autoadd_test_id_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_test_id_twin_sync(raw);
  }

  @protected
  TranslatableStructWithDartCodeTwinNormal
      dco_decode_box_autoadd_translatable_struct_with_dart_code_twin_normal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_translatable_struct_with_dart_code_twin_normal(raw);
  }

  @protected
  TupleStructWithOneFieldTwinNormal
      dco_decode_box_autoadd_tuple_struct_with_one_field_twin_normal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_tuple_struct_with_one_field_twin_normal(raw);
  }

  @protected
  TupleStructWithOneFieldTwinRustAsync
      dco_decode_box_autoadd_tuple_struct_with_one_field_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_tuple_struct_with_one_field_twin_rust_async(raw);
  }

  @protected
  TupleStructWithOneFieldTwinSync
      dco_decode_box_autoadd_tuple_struct_with_one_field_twin_sync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_tuple_struct_with_one_field_twin_sync(raw);
  }

  @protected
  TupleStructWithTwoFieldTwinNormal
      dco_decode_box_autoadd_tuple_struct_with_two_field_twin_normal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_tuple_struct_with_two_field_twin_normal(raw);
  }

  @protected
  TupleStructWithTwoFieldTwinRustAsync
      dco_decode_box_autoadd_tuple_struct_with_two_field_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_tuple_struct_with_two_field_twin_rust_async(raw);
  }

  @protected
  TupleStructWithTwoFieldTwinSync
      dco_decode_box_autoadd_tuple_struct_with_two_field_twin_sync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_tuple_struct_with_two_field_twin_sync(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_u_64(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  UserIdTwinNormal dco_decode_box_autoadd_user_id_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_user_id_twin_normal(raw);
  }

  @protected
  UserIdTwinRustAsync dco_decode_box_autoadd_user_id_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_user_id_twin_rust_async(raw);
  }

  @protected
  UserIdTwinSync dco_decode_box_autoadd_user_id_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_user_id_twin_sync(raw);
  }

  @protected
  BigInt dco_decode_box_autoadd_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_usize(raw);
  }

  @protected
  WeekdaysTwinNormal dco_decode_box_autoadd_weekdays_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_weekdays_twin_normal(raw);
  }

  @protected
  WeekdaysTwinRustAsync dco_decode_box_autoadd_weekdays_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_weekdays_twin_rust_async(raw);
  }

  @protected
  WeekdaysTwinSync dco_decode_box_autoadd_weekdays_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_weekdays_twin_sync(raw);
  }

  @protected
  BenchmarkBinaryTreeTwinNormal
      dco_decode_box_benchmark_binary_tree_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_benchmark_binary_tree_twin_normal(raw);
  }

  @protected
  BenchmarkBinaryTreeTwinRustAsync
      dco_decode_box_benchmark_binary_tree_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_benchmark_binary_tree_twin_rust_async(raw);
  }

  @protected
  BenchmarkBinaryTreeTwinSync dco_decode_box_benchmark_binary_tree_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_benchmark_binary_tree_twin_sync(raw);
  }

  @protected
  BlobTwinNormal dco_decode_box_blob_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_blob_twin_normal(raw);
  }

  @protected
  BlobTwinRustAsync dco_decode_box_blob_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_blob_twin_rust_async(raw);
  }

  @protected
  BlobTwinSync dco_decode_box_blob_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_blob_twin_sync(raw);
  }

  @protected
  bool dco_decode_box_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  DistanceTwinNormal dco_decode_box_distance_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_distance_twin_normal(raw);
  }

  @protected
  DistanceTwinRustAsync dco_decode_box_distance_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_distance_twin_rust_async(raw);
  }

  @protected
  DistanceTwinSync dco_decode_box_distance_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_distance_twin_sync(raw);
  }

  @protected
  ExoticOptionalsTwinNormal dco_decode_box_exotic_optionals_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_exotic_optionals_twin_normal(raw);
  }

  @protected
  ExoticOptionalsTwinRustAsync dco_decode_box_exotic_optionals_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_exotic_optionals_twin_rust_async(raw);
  }

  @protected
  ExoticOptionalsTwinSync dco_decode_box_exotic_optionals_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_exotic_optionals_twin_sync(raw);
  }

  @protected
  double dco_decode_box_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  FeedIdTwinNormal dco_decode_box_feed_id_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_feed_id_twin_normal(raw);
  }

  @protected
  FeedIdTwinRustAsync dco_decode_box_feed_id_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_feed_id_twin_rust_async(raw);
  }

  @protected
  FeedIdTwinSync dco_decode_box_feed_id_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_feed_id_twin_sync(raw);
  }

  @protected
  int dco_decode_box_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_box_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_i_64(raw);
  }

  @protected
  int dco_decode_box_i_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  KitchenSinkTwinNormal dco_decode_box_kitchen_sink_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_kitchen_sink_twin_normal(raw);
  }

  @protected
  KitchenSinkTwinRustAsync dco_decode_box_kitchen_sink_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_kitchen_sink_twin_rust_async(raw);
  }

  @protected
  KitchenSinkTwinSync dco_decode_box_kitchen_sink_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_kitchen_sink_twin_sync(raw);
  }

  @protected
  MySize dco_decode_box_my_size(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_my_size(raw);
  }

  @protected
  SpeedTwinNormal dco_decode_box_speed_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_speed_twin_normal(raw);
  }

  @protected
  SpeedTwinRustAsync dco_decode_box_speed_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_speed_twin_rust_async(raw);
  }

  @protected
  SpeedTwinSync dco_decode_box_speed_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_speed_twin_sync(raw);
  }

  @protected
  int dco_decode_box_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  U8Array1600 dco_decode_box_u_8_array_1600(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_u_8_array_1600(raw);
  }

  @protected
  U8Array8 dco_decode_box_u_8_array_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_u_8_array_8(raw);
  }

  @protected
  WeekdaysTwinNormal dco_decode_box_weekdays_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_weekdays_twin_normal(raw);
  }

  @protected
  WeekdaysTwinRustAsync dco_decode_box_weekdays_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_weekdays_twin_rust_async(raw);
  }

  @protected
  WeekdaysTwinSync dco_decode_box_weekdays_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_weekdays_twin_sync(raw);
  }

  @protected
  CTwinNormal dco_decode_c_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CTwinNormal(
      c: dco_decode_bool(arr[0]),
    );
  }

  @protected
  CTwinRustAsync dco_decode_c_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CTwinRustAsync(
      c: dco_decode_bool(arr[0]),
    );
  }

  @protected
  CTwinSync dco_decode_c_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CTwinSync(
      c: dco_decode_bool(arr[0]),
    );
  }

  @protected
  ConcatenateWithTwinNormal dco_decode_concatenate_with_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ConcatenateWithTwinNormal(
      a: dco_decode_String(arr[0]),
    );
  }

  @protected
  ConcatenateWithTwinRustAsync dco_decode_concatenate_with_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ConcatenateWithTwinRustAsync(
      a: dco_decode_String(arr[0]),
    );
  }

  @protected
  ConcatenateWithTwinSync dco_decode_concatenate_with_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ConcatenateWithTwinSync(
      a: dco_decode_String(arr[0]),
    );
  }

  @protected
  ConstructorTranslatableStructTwinNormal
      dco_decode_constructor_translatable_struct_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ConstructorTranslatableStructTwinNormal(
      one: dco_decode_String(arr[0]),
    );
  }

  @protected
  ConstructorTranslatableSyncStructTwinNormal
      dco_decode_constructor_translatable_sync_struct_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ConstructorTranslatableSyncStructTwinNormal.raw(
      one: dco_decode_String(arr[0]),
    );
  }

  @protected
  ContainsMirroredSubStructTwinNormal
      dco_decode_contains_mirrored_sub_struct_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ContainsMirroredSubStructTwinNormal(
      test: dco_decode_raw_string_mirrored(arr[0]),
      test2: dco_decode_another_twin_normal(arr[1]),
    );
  }

  @protected
  ContainsMirroredSubStructTwinRustAsync
      dco_decode_contains_mirrored_sub_struct_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ContainsMirroredSubStructTwinRustAsync(
      test: dco_decode_raw_string_mirrored(arr[0]),
      test2: dco_decode_another_twin_rust_async(arr[1]),
    );
  }

  @protected
  ContainsMirroredSubStructTwinSync
      dco_decode_contains_mirrored_sub_struct_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ContainsMirroredSubStructTwinSync(
      test: dco_decode_raw_string_mirrored(arr[0]),
      test2: dco_decode_another_twin_sync(arr[1]),
    );
  }

  @protected
  CustomEnumErrorTwinNormal dco_decode_custom_enum_error_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return CustomEnumErrorTwinNormal_One(
          message: dco_decode_String(raw[1]),
          backtrace: dco_decode_Backtrace(raw[2]),
        );
      case 1:
        return CustomEnumErrorTwinNormal_Two(
          message: dco_decode_u_32(raw[1]),
          backtrace: dco_decode_Backtrace(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  CustomEnumErrorTwinRustAsync dco_decode_custom_enum_error_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return CustomEnumErrorTwinRustAsync_One(
          message: dco_decode_String(raw[1]),
          backtrace: dco_decode_Backtrace(raw[2]),
        );
      case 1:
        return CustomEnumErrorTwinRustAsync_Two(
          message: dco_decode_u_32(raw[1]),
          backtrace: dco_decode_Backtrace(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  CustomEnumErrorTwinSync dco_decode_custom_enum_error_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return CustomEnumErrorTwinSync_One(
          message: dco_decode_String(raw[1]),
          backtrace: dco_decode_Backtrace(raw[2]),
        );
      case 1:
        return CustomEnumErrorTwinSync_Two(
          message: dco_decode_u_32(raw[1]),
          backtrace: dco_decode_Backtrace(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  CustomErrorTwinNormal dco_decode_custom_error_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return CustomErrorTwinNormal_Error0(
          e: dco_decode_String(raw[1]),
          backtrace: dco_decode_Backtrace(raw[2]),
        );
      case 1:
        return CustomErrorTwinNormal_Error1(
          e: dco_decode_u_32(raw[1]),
          backtrace: dco_decode_Backtrace(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  CustomErrorTwinRustAsync dco_decode_custom_error_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return CustomErrorTwinRustAsync_Error0(
          e: dco_decode_String(raw[1]),
          backtrace: dco_decode_Backtrace(raw[2]),
        );
      case 1:
        return CustomErrorTwinRustAsync_Error1(
          e: dco_decode_u_32(raw[1]),
          backtrace: dco_decode_Backtrace(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  CustomErrorTwinSync dco_decode_custom_error_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return CustomErrorTwinSync_Error0(
          e: dco_decode_String(raw[1]),
          backtrace: dco_decode_Backtrace(raw[2]),
        );
      case 1:
        return CustomErrorTwinSync_Error1(
          e: dco_decode_u_32(raw[1]),
          backtrace: dco_decode_Backtrace(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  CustomNestedError1TwinNormal dco_decode_custom_nested_error_1_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return CustomNestedError1TwinNormal_CustomNested1(
          dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedError1TwinNormal_ErrorNested(
          dco_decode_box_autoadd_custom_nested_error_2_twin_normal(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  CustomNestedError1TwinRustAsync
      dco_decode_custom_nested_error_1_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return CustomNestedError1TwinRustAsync_CustomNested1(
          dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedError1TwinRustAsync_ErrorNested(
          dco_decode_box_autoadd_custom_nested_error_2_twin_rust_async(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  CustomNestedError1TwinSync dco_decode_custom_nested_error_1_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return CustomNestedError1TwinSync_CustomNested1(
          dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedError1TwinSync_ErrorNested(
          dco_decode_box_autoadd_custom_nested_error_2_twin_sync(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  CustomNestedError2TwinNormal dco_decode_custom_nested_error_2_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return CustomNestedError2TwinNormal_CustomNested2(
          dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedError2TwinNormal_CustomNested2Number(
          dco_decode_u_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  CustomNestedError2TwinRustAsync
      dco_decode_custom_nested_error_2_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return CustomNestedError2TwinRustAsync_CustomNested2(
          dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedError2TwinRustAsync_CustomNested2Number(
          dco_decode_u_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  CustomNestedError2TwinSync dco_decode_custom_nested_error_2_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return CustomNestedError2TwinSync_CustomNested2(
          dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedError2TwinSync_CustomNested2Number(
          dco_decode_u_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  CustomNestedErrorInnerTwinNormal
      dco_decode_custom_nested_error_inner_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return CustomNestedErrorInnerTwinNormal_Three(
          dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedErrorInnerTwinNormal_Four(
          dco_decode_u_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  CustomNestedErrorInnerTwinRustAsync
      dco_decode_custom_nested_error_inner_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return CustomNestedErrorInnerTwinRustAsync_Three(
          dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedErrorInnerTwinRustAsync_Four(
          dco_decode_u_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  CustomNestedErrorInnerTwinSync dco_decode_custom_nested_error_inner_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return CustomNestedErrorInnerTwinSync_Three(
          dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedErrorInnerTwinSync_Four(
          dco_decode_u_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  CustomNestedErrorOuterTwinNormal
      dco_decode_custom_nested_error_outer_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return CustomNestedErrorOuterTwinNormal_One(
          dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedErrorOuterTwinNormal_Two(
          dco_decode_box_autoadd_custom_nested_error_inner_twin_normal(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  CustomNestedErrorOuterTwinRustAsync
      dco_decode_custom_nested_error_outer_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return CustomNestedErrorOuterTwinRustAsync_One(
          dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedErrorOuterTwinRustAsync_Two(
          dco_decode_box_autoadd_custom_nested_error_inner_twin_rust_async(
              raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  CustomNestedErrorOuterTwinSync dco_decode_custom_nested_error_outer_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return CustomNestedErrorOuterTwinSync_One(
          dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedErrorOuterTwinSync_Two(
          dco_decode_box_autoadd_custom_nested_error_inner_twin_sync(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  CustomStructErrorAnotherTwinNormal
      dco_decode_custom_struct_error_another_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CustomStructErrorAnotherTwinNormal(
      message: dco_decode_String(arr[0]),
    );
  }

  @protected
  CustomStructErrorAnotherTwinRustAsync
      dco_decode_custom_struct_error_another_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CustomStructErrorAnotherTwinRustAsync(
      message: dco_decode_String(arr[0]),
    );
  }

  @protected
  CustomStructErrorAnotherTwinSync
      dco_decode_custom_struct_error_another_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CustomStructErrorAnotherTwinSync(
      message: dco_decode_String(arr[0]),
    );
  }

  @protected
  CustomStructErrorTwinNormal dco_decode_custom_struct_error_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CustomStructErrorTwinNormal(
      a: dco_decode_String(arr[0]),
    );
  }

  @protected
  CustomStructErrorTwinRustAsync dco_decode_custom_struct_error_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CustomStructErrorTwinRustAsync(
      a: dco_decode_String(arr[0]),
    );
  }

  @protected
  CustomStructErrorTwinSync dco_decode_custom_struct_error_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CustomStructErrorTwinSync(
      a: dco_decode_String(arr[0]),
    );
  }

  @protected
  CustomStructTwinNormal dco_decode_custom_struct_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CustomStructTwinNormal(
      message: dco_decode_String(arr[0]),
    );
  }

  @protected
  CustomStructTwinRustAsync dco_decode_custom_struct_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CustomStructTwinRustAsync(
      message: dco_decode_String(arr[0]),
    );
  }

  @protected
  CustomStructTwinSync dco_decode_custom_struct_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CustomStructTwinSync(
      message: dco_decode_String(arr[0]),
    );
  }

  @protected
  CustomizedTwinNormal dco_decode_customized_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return CustomizedTwinNormal(
      finalField: dco_decode_String(arr[0]),
      nonFinalField: dco_decode_opt_String(arr[1]),
    );
  }

  @protected
  CustomizedTwinRustAsync dco_decode_customized_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return CustomizedTwinRustAsync(
      finalField: dco_decode_String(arr[0]),
      nonFinalField: dco_decode_opt_String(arr[1]),
    );
  }

  @protected
  CustomizedTwinSync dco_decode_customized_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return CustomizedTwinSync(
      finalField: dco_decode_String(arr[0]),
      nonFinalField: dco_decode_opt_String(arr[1]),
    );
  }

  @protected
  DartOpaqueNestedTwinNormal dco_decode_dart_opaque_nested_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DartOpaqueNestedTwinNormal(
      first: dco_decode_DartOpaque(arr[0]),
      second: dco_decode_DartOpaque(arr[1]),
    );
  }

  @protected
  DartOpaqueNestedTwinRustAsync dco_decode_dart_opaque_nested_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DartOpaqueNestedTwinRustAsync(
      first: dco_decode_DartOpaque(arr[0]),
      second: dco_decode_DartOpaque(arr[1]),
    );
  }

  @protected
  DartOpaqueNestedTwinSync dco_decode_dart_opaque_nested_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DartOpaqueNestedTwinSync(
      first: dco_decode_DartOpaque(arr[0]),
      second: dco_decode_DartOpaque(arr[1]),
    );
  }

  @protected
  DemoStructForRustCallDartTwinNormal
      dco_decode_demo_struct_for_rust_call_dart_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return DemoStructForRustCallDartTwinNormal(
      name: dco_decode_String(arr[0]),
    );
  }

  @protected
  DemoStructForRustCallDartTwinRustAsync
      dco_decode_demo_struct_for_rust_call_dart_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return DemoStructForRustCallDartTwinRustAsync(
      name: dco_decode_String(arr[0]),
    );
  }

  @protected
  DistanceTwinNormal dco_decode_distance_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return DistanceTwinNormal_Unknown();
      case 1:
        return DistanceTwinNormal_Map(
          dco_decode_f_64(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  DistanceTwinRustAsync dco_decode_distance_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return DistanceTwinRustAsync_Unknown();
      case 1:
        return DistanceTwinRustAsync_Map(
          dco_decode_f_64(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  DistanceTwinSync dco_decode_distance_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return DistanceTwinSync_Unknown();
      case 1:
        return DistanceTwinSync_Map(
          dco_decode_f_64(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  ElementTwinNormal dco_decode_element_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return ElementTwinNormal(
      tag: dco_decode_opt_String(arr[0]),
      text: dco_decode_opt_String(arr[1]),
      attributes: dco_decode_opt_list_attribute_twin_normal(arr[2]),
      children: dco_decode_opt_list_element_twin_normal(arr[3]),
    );
  }

  @protected
  ElementTwinRustAsync dco_decode_element_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return ElementTwinRustAsync(
      tag: dco_decode_opt_String(arr[0]),
      text: dco_decode_opt_String(arr[1]),
      attributes: dco_decode_opt_list_attribute_twin_rust_async(arr[2]),
      children: dco_decode_opt_list_element_twin_rust_async(arr[3]),
    );
  }

  @protected
  ElementTwinSync dco_decode_element_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return ElementTwinSync(
      tag: dco_decode_opt_String(arr[0]),
      text: dco_decode_opt_String(arr[1]),
      attributes: dco_decode_opt_list_attribute_twin_sync(arr[2]),
      children: dco_decode_opt_list_element_twin_sync(arr[3]),
    );
  }

  @protected
  EmptyTwinNormal dco_decode_empty_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return EmptyTwinNormal();
  }

  @protected
  EmptyTwinRustAsync dco_decode_empty_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return EmptyTwinRustAsync();
  }

  @protected
  EmptyTwinSync dco_decode_empty_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return EmptyTwinSync();
  }

  @protected
  EnumDartOpaqueTwinNormal dco_decode_enum_dart_opaque_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return EnumDartOpaqueTwinNormal_Primitive(
          dco_decode_i_32(raw[1]),
        );
      case 1:
        return EnumDartOpaqueTwinNormal_Opaque(
          dco_decode_DartOpaque(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  EnumDartOpaqueTwinRustAsync dco_decode_enum_dart_opaque_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return EnumDartOpaqueTwinRustAsync_Primitive(
          dco_decode_i_32(raw[1]),
        );
      case 1:
        return EnumDartOpaqueTwinRustAsync_Opaque(
          dco_decode_DartOpaque(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  EnumDartOpaqueTwinSync dco_decode_enum_dart_opaque_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return EnumDartOpaqueTwinSync_Primitive(
          dco_decode_i_32(raw[1]),
        );
      case 1:
        return EnumDartOpaqueTwinSync_Opaque(
          dco_decode_DartOpaque(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  EnumOpaqueTwinNormal dco_decode_enum_opaque_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return EnumOpaqueTwinNormal_Struct(
          dco_decode_RustOpaque_HideDataTwinNormal(raw[1]),
        );
      case 1:
        return EnumOpaqueTwinNormal_Primitive(
          dco_decode_RustOpaque_i32(raw[1]),
        );
      case 2:
        return EnumOpaqueTwinNormal_TraitObj(
          dco_decode_RustOpaque_BoxdynDartDebugTwinNormal(raw[1]),
        );
      case 3:
        return EnumOpaqueTwinNormal_Mutex(
          dco_decode_RustOpaque_MutexHideDataTwinNormal(raw[1]),
        );
      case 4:
        return EnumOpaqueTwinNormal_RwLock(
          dco_decode_RustOpaque_RwLockHideDataTwinNormal(raw[1]),
        );
      case 5:
        return EnumOpaqueTwinNormal_Nothing();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  EnumOpaqueTwinNormalArray5 dco_decode_enum_opaque_twin_normal_array_5(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EnumOpaqueTwinNormalArray5((raw as List<dynamic>)
        .map(dco_decode_enum_opaque_twin_normal)
        .toList());
  }

  @protected
  EnumOpaqueTwinRustAsync dco_decode_enum_opaque_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return EnumOpaqueTwinRustAsync_Struct(
          dco_decode_RustOpaque_HideDataTwinRustAsync(raw[1]),
        );
      case 1:
        return EnumOpaqueTwinRustAsync_Primitive(
          dco_decode_RustOpaque_i32(raw[1]),
        );
      case 2:
        return EnumOpaqueTwinRustAsync_TraitObj(
          dco_decode_RustOpaque_BoxdynDartDebugTwinRustAsync(raw[1]),
        );
      case 3:
        return EnumOpaqueTwinRustAsync_Mutex(
          dco_decode_RustOpaque_MutexHideDataTwinRustAsync(raw[1]),
        );
      case 4:
        return EnumOpaqueTwinRustAsync_RwLock(
          dco_decode_RustOpaque_RwLockHideDataTwinRustAsync(raw[1]),
        );
      case 5:
        return EnumOpaqueTwinRustAsync_Nothing();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  EnumOpaqueTwinRustAsyncArray5 dco_decode_enum_opaque_twin_rust_async_array_5(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EnumOpaqueTwinRustAsyncArray5((raw as List<dynamic>)
        .map(dco_decode_enum_opaque_twin_rust_async)
        .toList());
  }

  @protected
  EnumOpaqueTwinSync dco_decode_enum_opaque_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return EnumOpaqueTwinSync_Struct(
          dco_decode_RustOpaque_HideDataTwinSync(raw[1]),
        );
      case 1:
        return EnumOpaqueTwinSync_Primitive(
          dco_decode_RustOpaque_i32(raw[1]),
        );
      case 2:
        return EnumOpaqueTwinSync_TraitObj(
          dco_decode_RustOpaque_BoxdynDartDebugTwinSync(raw[1]),
        );
      case 3:
        return EnumOpaqueTwinSync_Mutex(
          dco_decode_RustOpaque_MutexHideDataTwinSync(raw[1]),
        );
      case 4:
        return EnumOpaqueTwinSync_RwLock(
          dco_decode_RustOpaque_RwLockHideDataTwinSync(raw[1]),
        );
      case 5:
        return EnumOpaqueTwinSync_Nothing();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  EnumOpaqueTwinSyncArray5 dco_decode_enum_opaque_twin_sync_array_5(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EnumOpaqueTwinSyncArray5(
        (raw as List<dynamic>).map(dco_decode_enum_opaque_twin_sync).toList());
  }

  @protected
  EnumSimpleTwinNormal dco_decode_enum_simple_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EnumSimpleTwinNormal.values[raw as int];
  }

  @protected
  EnumSimpleTwinRustAsync dco_decode_enum_simple_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EnumSimpleTwinRustAsync.values[raw as int];
  }

  @protected
  EnumSimpleTwinSync dco_decode_enum_simple_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EnumSimpleTwinSync.values[raw as int];
  }

  @protected
  EnumWithDiscriminantTwinNormal dco_decode_enum_with_discriminant_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EnumWithDiscriminantTwinNormal.values[raw as int];
  }

  @protected
  EnumWithDiscriminantTwinRustAsync
      dco_decode_enum_with_discriminant_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EnumWithDiscriminantTwinRustAsync.values[raw as int];
  }

  @protected
  EnumWithDiscriminantTwinSync dco_decode_enum_with_discriminant_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EnumWithDiscriminantTwinSync.values[raw as int];
  }

  @protected
  EnumWithGoodAndOpaqueTwinNormal
      dco_decode_enum_with_good_and_opaque_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return EnumWithGoodAndOpaqueTwinNormal_Good(
          dco_decode_String(raw[1]),
        );
      case 1:
        return EnumWithGoodAndOpaqueTwinNormal_Opaque(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
              raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  EnumWithGoodAndOpaqueTwinRustAsync
      dco_decode_enum_with_good_and_opaque_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return EnumWithGoodAndOpaqueTwinRustAsync_Good(
          dco_decode_String(raw[1]),
        );
      case 1:
        return EnumWithGoodAndOpaqueTwinRustAsync_Opaque(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
              raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  EnumWithGoodAndOpaqueTwinSync dco_decode_enum_with_good_and_opaque_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return EnumWithGoodAndOpaqueTwinSync_Good(
          dco_decode_String(raw[1]),
        );
      case 1:
        return EnumWithGoodAndOpaqueTwinSync_Opaque(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
              raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  EnumWithItemMixedTwinNormal dco_decode_enum_with_item_mixed_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return EnumWithItemMixedTwinNormal_A();
      case 1:
        return EnumWithItemMixedTwinNormal_B(
          dco_decode_list_prim_u_8_strict(raw[1]),
        );
      case 2:
        return EnumWithItemMixedTwinNormal_C(
          cField: dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  EnumWithItemMixedTwinRustAsync
      dco_decode_enum_with_item_mixed_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return EnumWithItemMixedTwinRustAsync_A();
      case 1:
        return EnumWithItemMixedTwinRustAsync_B(
          dco_decode_list_prim_u_8_strict(raw[1]),
        );
      case 2:
        return EnumWithItemMixedTwinRustAsync_C(
          cField: dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  EnumWithItemMixedTwinSync dco_decode_enum_with_item_mixed_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return EnumWithItemMixedTwinSync_A();
      case 1:
        return EnumWithItemMixedTwinSync_B(
          dco_decode_list_prim_u_8_strict(raw[1]),
        );
      case 2:
        return EnumWithItemMixedTwinSync_C(
          cField: dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  EnumWithItemStructTwinNormal dco_decode_enum_with_item_struct_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return EnumWithItemStructTwinNormal_A(
          aField: dco_decode_list_prim_u_8_strict(raw[1]),
        );
      case 1:
        return EnumWithItemStructTwinNormal_B(
          bField: dco_decode_list_prim_i_32_strict(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  EnumWithItemStructTwinRustAsync
      dco_decode_enum_with_item_struct_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return EnumWithItemStructTwinRustAsync_A(
          aField: dco_decode_list_prim_u_8_strict(raw[1]),
        );
      case 1:
        return EnumWithItemStructTwinRustAsync_B(
          bField: dco_decode_list_prim_i_32_strict(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  EnumWithItemStructTwinSync dco_decode_enum_with_item_struct_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return EnumWithItemStructTwinSync_A(
          aField: dco_decode_list_prim_u_8_strict(raw[1]),
        );
      case 1:
        return EnumWithItemStructTwinSync_B(
          bField: dco_decode_list_prim_i_32_strict(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  EnumWithItemTupleTwinNormal dco_decode_enum_with_item_tuple_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return EnumWithItemTupleTwinNormal_A(
          dco_decode_list_prim_u_8_strict(raw[1]),
        );
      case 1:
        return EnumWithItemTupleTwinNormal_B(
          dco_decode_i_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  EnumWithItemTupleTwinRustAsync
      dco_decode_enum_with_item_tuple_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return EnumWithItemTupleTwinRustAsync_A(
          dco_decode_list_prim_u_8_strict(raw[1]),
        );
      case 1:
        return EnumWithItemTupleTwinRustAsync_B(
          dco_decode_i_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  EnumWithItemTupleTwinSync dco_decode_enum_with_item_tuple_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return EnumWithItemTupleTwinSync_A(
          dco_decode_list_prim_u_8_strict(raw[1]),
        );
      case 1:
        return EnumWithItemTupleTwinSync_B(
          dco_decode_i_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  EventTwinNormal dco_decode_event_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return EventTwinNormal(
      address: dco_decode_String(arr[0]),
      payload: dco_decode_String(arr[1]),
    );
  }

  @protected
  EventTwinRustAsync dco_decode_event_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return EventTwinRustAsync(
      address: dco_decode_String(arr[0]),
      payload: dco_decode_String(arr[1]),
    );
  }

  @protected
  ExoticOptionalsTwinNormal dco_decode_exotic_optionals_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 14)
      throw Exception('unexpected arr length: expect 14 but see ${arr.length}');
    return ExoticOptionalsTwinNormal(
      int32: dco_decode_opt_box_autoadd_i_32(arr[0]),
      int64: dco_decode_opt_box_autoadd_i_64(arr[1]),
      float64: dco_decode_opt_box_autoadd_f_64(arr[2]),
      boolean: dco_decode_opt_box_autoadd_bool(arr[3]),
      zerocopy: dco_decode_opt_list_prim_u_8_strict(arr[4]),
      int8List: dco_decode_opt_list_prim_i_8_strict(arr[5]),
      uint8List: dco_decode_opt_list_prim_u_8_strict(arr[6]),
      int32List: dco_decode_opt_list_prim_i_32_strict(arr[7]),
      float32List: dco_decode_opt_list_prim_f_32_strict(arr[8]),
      float64List: dco_decode_opt_list_prim_f_64_strict(arr[9]),
      attributes: dco_decode_opt_list_attribute_twin_normal(arr[10]),
      attributesNullable:
          dco_decode_list_opt_box_autoadd_attribute_twin_normal(arr[11]),
      nullableAttributes:
          dco_decode_opt_list_opt_box_autoadd_attribute_twin_normal(arr[12]),
      newtypeint: dco_decode_opt_box_autoadd_new_type_int_twin_normal(arr[13]),
    );
  }

  @protected
  ExoticOptionalsTwinRustAsync dco_decode_exotic_optionals_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 14)
      throw Exception('unexpected arr length: expect 14 but see ${arr.length}');
    return ExoticOptionalsTwinRustAsync(
      int32: dco_decode_opt_box_autoadd_i_32(arr[0]),
      int64: dco_decode_opt_box_autoadd_i_64(arr[1]),
      float64: dco_decode_opt_box_autoadd_f_64(arr[2]),
      boolean: dco_decode_opt_box_autoadd_bool(arr[3]),
      zerocopy: dco_decode_opt_list_prim_u_8_strict(arr[4]),
      int8List: dco_decode_opt_list_prim_i_8_strict(arr[5]),
      uint8List: dco_decode_opt_list_prim_u_8_strict(arr[6]),
      int32List: dco_decode_opt_list_prim_i_32_strict(arr[7]),
      float32List: dco_decode_opt_list_prim_f_32_strict(arr[8]),
      float64List: dco_decode_opt_list_prim_f_64_strict(arr[9]),
      attributes: dco_decode_opt_list_attribute_twin_rust_async(arr[10]),
      attributesNullable:
          dco_decode_list_opt_box_autoadd_attribute_twin_rust_async(arr[11]),
      nullableAttributes:
          dco_decode_opt_list_opt_box_autoadd_attribute_twin_rust_async(
              arr[12]),
      newtypeint:
          dco_decode_opt_box_autoadd_new_type_int_twin_rust_async(arr[13]),
    );
  }

  @protected
  ExoticOptionalsTwinSync dco_decode_exotic_optionals_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 14)
      throw Exception('unexpected arr length: expect 14 but see ${arr.length}');
    return ExoticOptionalsTwinSync(
      int32: dco_decode_opt_box_autoadd_i_32(arr[0]),
      int64: dco_decode_opt_box_autoadd_i_64(arr[1]),
      float64: dco_decode_opt_box_autoadd_f_64(arr[2]),
      boolean: dco_decode_opt_box_autoadd_bool(arr[3]),
      zerocopy: dco_decode_opt_list_prim_u_8_strict(arr[4]),
      int8List: dco_decode_opt_list_prim_i_8_strict(arr[5]),
      uint8List: dco_decode_opt_list_prim_u_8_strict(arr[6]),
      int32List: dco_decode_opt_list_prim_i_32_strict(arr[7]),
      float32List: dco_decode_opt_list_prim_f_32_strict(arr[8]),
      float64List: dco_decode_opt_list_prim_f_64_strict(arr[9]),
      attributes: dco_decode_opt_list_attribute_twin_sync(arr[10]),
      attributesNullable:
          dco_decode_list_opt_box_autoadd_attribute_twin_sync(arr[11]),
      nullableAttributes:
          dco_decode_opt_list_opt_box_autoadd_attribute_twin_sync(arr[12]),
      newtypeint: dco_decode_opt_box_autoadd_new_type_int_twin_sync(arr[13]),
    );
  }

  @protected
  double dco_decode_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  F32Array3 dco_decode_f_32_array_3(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return F32Array3(dco_decode_list_prim_f_32_strict(raw));
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  F64Array16 dco_decode_f_64_array_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return F64Array16(dco_decode_list_prim_f_64_strict(raw));
  }

  @protected
  FeatureChronoTwinNormal dco_decode_feature_chrono_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return FeatureChronoTwinNormal(
      utc: dco_decode_Chrono_Utc(arr[0]),
      local: dco_decode_Chrono_Local(arr[1]),
      duration: dco_decode_Chrono_Duration(arr[2]),
      naive: dco_decode_Chrono_Naive(arr[3]),
    );
  }

  @protected
  FeatureChronoTwinRustAsync dco_decode_feature_chrono_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return FeatureChronoTwinRustAsync(
      utc: dco_decode_Chrono_Utc(arr[0]),
      local: dco_decode_Chrono_Local(arr[1]),
      duration: dco_decode_Chrono_Duration(arr[2]),
      naive: dco_decode_Chrono_Naive(arr[3]),
    );
  }

  @protected
  FeatureChronoTwinSync dco_decode_feature_chrono_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return FeatureChronoTwinSync(
      utc: dco_decode_Chrono_Utc(arr[0]),
      local: dco_decode_Chrono_Local(arr[1]),
      duration: dco_decode_Chrono_Duration(arr[2]),
      naive: dco_decode_Chrono_Naive(arr[3]),
    );
  }

  @protected
  FeatureUuidTwinNormal dco_decode_feature_uuid_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FeatureUuidTwinNormal(
      one: dco_decode_Uuid(arr[0]),
    );
  }

  @protected
  FeatureUuidTwinRustAsync dco_decode_feature_uuid_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FeatureUuidTwinRustAsync(
      one: dco_decode_Uuid(arr[0]),
    );
  }

  @protected
  FeatureUuidTwinSync dco_decode_feature_uuid_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FeatureUuidTwinSync(
      one: dco_decode_Uuid(arr[0]),
    );
  }

  @protected
  FeedIdTwinNormal dco_decode_feed_id_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FeedIdTwinNormal(
      field0: dco_decode_u_8_array_8(arr[0]),
    );
  }

  @protected
  FeedIdTwinRustAsync dco_decode_feed_id_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FeedIdTwinRustAsync(
      field0: dco_decode_u_8_array_8(arr[0]),
    );
  }

  @protected
  FeedIdTwinSync dco_decode_feed_id_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FeedIdTwinSync(
      field0: dco_decode_u_8_array_8(arr[0]),
    );
  }

  @protected
  HashMapValue dco_decode_hash_map_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return HashMapValue(
      inner: dco_decode_String(arr[0]),
    );
  }

  @protected
  int dco_decode_i_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  I32Array2 dco_decode_i_32_array_2(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return I32Array2(dco_decode_list_prim_i_32_strict(raw));
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  int dco_decode_i_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_isize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  ItemContainerSolutionTwoTwinNormal
      dco_decode_item_container_solution_two_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ItemContainerSolutionTwoTwinNormal(
      name: dco_decode_String(arr[0]),
      items:
          dco_decode_list_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueItemTwinNormal(
              arr[1]),
    );
  }

  @protected
  KitchenSinkTwinNormal dco_decode_kitchen_sink_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return KitchenSinkTwinNormal_Empty();
      case 1:
        return KitchenSinkTwinNormal_Primitives(
          int32: dco_decode_i_32(raw[1]),
          float64: dco_decode_f_64(raw[2]),
          boolean: dco_decode_bool(raw[3]),
        );
      case 2:
        return KitchenSinkTwinNormal_Nested(
          dco_decode_i_32(raw[1]),
          dco_decode_box_kitchen_sink_twin_normal(raw[2]),
        );
      case 3:
        return KitchenSinkTwinNormal_Optional(
          dco_decode_opt_box_autoadd_i_32(raw[1]),
          dco_decode_opt_box_autoadd_i_32(raw[2]),
        );
      case 4:
        return KitchenSinkTwinNormal_Buffer(
          dco_decode_list_prim_u_8_strict(raw[1]),
        );
      case 5:
        return KitchenSinkTwinNormal_Enums(
          dco_decode_weekdays_twin_normal(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  KitchenSinkTwinRustAsync dco_decode_kitchen_sink_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return KitchenSinkTwinRustAsync_Empty();
      case 1:
        return KitchenSinkTwinRustAsync_Primitives(
          int32: dco_decode_i_32(raw[1]),
          float64: dco_decode_f_64(raw[2]),
          boolean: dco_decode_bool(raw[3]),
        );
      case 2:
        return KitchenSinkTwinRustAsync_Nested(
          dco_decode_i_32(raw[1]),
          dco_decode_box_kitchen_sink_twin_rust_async(raw[2]),
        );
      case 3:
        return KitchenSinkTwinRustAsync_Optional(
          dco_decode_opt_box_autoadd_i_32(raw[1]),
          dco_decode_opt_box_autoadd_i_32(raw[2]),
        );
      case 4:
        return KitchenSinkTwinRustAsync_Buffer(
          dco_decode_list_prim_u_8_strict(raw[1]),
        );
      case 5:
        return KitchenSinkTwinRustAsync_Enums(
          dco_decode_weekdays_twin_rust_async(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  KitchenSinkTwinSync dco_decode_kitchen_sink_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return KitchenSinkTwinSync_Empty();
      case 1:
        return KitchenSinkTwinSync_Primitives(
          int32: dco_decode_i_32(raw[1]),
          float64: dco_decode_f_64(raw[2]),
          boolean: dco_decode_bool(raw[3]),
        );
      case 2:
        return KitchenSinkTwinSync_Nested(
          dco_decode_i_32(raw[1]),
          dco_decode_box_kitchen_sink_twin_sync(raw[2]),
        );
      case 3:
        return KitchenSinkTwinSync_Optional(
          dco_decode_opt_box_autoadd_i_32(raw[1]),
          dco_decode_opt_box_autoadd_i_32(raw[2]),
        );
      case 4:
        return KitchenSinkTwinSync_Buffer(
          dco_decode_list_prim_u_8_strict(raw[1]),
        );
      case 5:
        return KitchenSinkTwinSync_Enums(
          dco_decode_weekdays_twin_sync(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  List<OpaqueItemTwinNormal>
      dco_decode_list_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueItemTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueItemTwinNormal)
        .toList();
  }

  @protected
  List<NonCloneSimpleTwinNormal>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal)
        .toList();
  }

  @protected
  List<NonCloneSimpleTwinRustAsync>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync)
        .toList();
  }

  @protected
  List<NonCloneSimpleTwinSync>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync)
        .toList();
  }

  @protected
  List<OpaqueItemTwinNormal>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueItemTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueItemTwinNormal)
        .toList();
  }

  @protected
  List<Duration> dco_decode_list_Chrono_Duration(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_Chrono_Duration).toList();
  }

  @protected
  List<DateTime> dco_decode_list_Chrono_Local(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_Chrono_Local).toList();
  }

  @protected
  List<DateTime> dco_decode_list_Chrono_Naive(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_Chrono_Naive).toList();
  }

  @protected
  List<Object> dco_decode_list_DartOpaque(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_DartOpaque).toList();
  }

  @protected
  List<HideDataTwinNormal> dco_decode_list_RustOpaque_HideDataTwinNormal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_RustOpaque_HideDataTwinNormal)
        .toList();
  }

  @protected
  List<HideDataTwinRustAsync> dco_decode_list_RustOpaque_HideDataTwinRustAsync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_RustOpaque_HideDataTwinRustAsync)
        .toList();
  }

  @protected
  List<HideDataTwinSync> dco_decode_list_RustOpaque_HideDataTwinSync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_RustOpaque_HideDataTwinSync)
        .toList();
  }

  @protected
  List<RustStreamSink<int>> dco_decode_list_StreamSink_i_32_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_StreamSink_i_32_Sse).toList();
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<UuidValue> dco_decode_list_Uuid(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    const kUuidSizeInBytes = 16;
    final bytes = dco_decode_list_prim_u_8_strict(raw);
    return List.generate(
      bytes.lengthInBytes ~/ kUuidSizeInBytes,
      (i) => UuidValue.fromByteList(
          Uint8List.view(bytes.buffer, i * kUuidSizeInBytes, kUuidSizeInBytes)),
      growable: false,
    );
  }

  @protected
  List<ApplicationEnvVar> dco_decode_list_application_env_var(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_application_env_var).toList();
  }

  @protected
  List<ApplicationMode> dco_decode_list_application_mode(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_application_mode).toList();
  }

  @protected
  List<ApplicationSettings> dco_decode_list_application_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_application_settings).toList();
  }

  @protected
  List<AttributeTwinNormal> dco_decode_list_attribute_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_attribute_twin_normal)
        .toList();
  }

  @protected
  List<AttributeTwinRustAsync> dco_decode_list_attribute_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_attribute_twin_rust_async)
        .toList();
  }

  @protected
  List<AttributeTwinSync> dco_decode_list_attribute_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_attribute_twin_sync).toList();
  }

  @protected
  List<BasicGeneralEnumTwinNormal>
      dco_decode_list_basic_general_enum_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_basic_general_enum_twin_normal)
        .toList();
  }

  @protected
  List<BasicGeneralEnumTwinRustAsync>
      dco_decode_list_basic_general_enum_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_basic_general_enum_twin_rust_async)
        .toList();
  }

  @protected
  List<BasicGeneralEnumTwinSync> dco_decode_list_basic_general_enum_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_basic_general_enum_twin_sync)
        .toList();
  }

  @protected
  List<BasicPrimitiveEnumTwinNormal>
      dco_decode_list_basic_primitive_enum_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_basic_primitive_enum_twin_normal)
        .toList();
  }

  @protected
  List<BasicPrimitiveEnumTwinRustAsync>
      dco_decode_list_basic_primitive_enum_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_basic_primitive_enum_twin_rust_async)
        .toList();
  }

  @protected
  List<BasicPrimitiveEnumTwinSync>
      dco_decode_list_basic_primitive_enum_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_basic_primitive_enum_twin_sync)
        .toList();
  }

  @protected
  List<BasicStructTwinNormal> dco_decode_list_basic_struct_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_basic_struct_twin_normal)
        .toList();
  }

  @protected
  List<BasicStructTwinRustAsync> dco_decode_list_basic_struct_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_basic_struct_twin_rust_async)
        .toList();
  }

  @protected
  List<BasicStructTwinSync> dco_decode_list_basic_struct_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_basic_struct_twin_sync)
        .toList();
  }

  @protected
  List<bool> dco_decode_list_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_bool).toList();
  }

  @protected
  List<ElementTwinNormal> dco_decode_list_element_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_element_twin_normal).toList();
  }

  @protected
  List<ElementTwinRustAsync> dco_decode_list_element_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_element_twin_rust_async)
        .toList();
  }

  @protected
  List<ElementTwinSync> dco_decode_list_element_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_element_twin_sync).toList();
  }

  @protected
  List<EnumOpaqueTwinNormal> dco_decode_list_enum_opaque_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_enum_opaque_twin_normal)
        .toList();
  }

  @protected
  List<EnumOpaqueTwinRustAsync> dco_decode_list_enum_opaque_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_enum_opaque_twin_rust_async)
        .toList();
  }

  @protected
  List<EnumOpaqueTwinSync> dco_decode_list_enum_opaque_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_enum_opaque_twin_sync)
        .toList();
  }

  @protected
  List<Uint8List> dco_decode_list_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_list_prim_u_8_strict).toList();
  }

  @protected
  List<MyEnum> dco_decode_list_my_enum(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_my_enum).toList();
  }

  @protected
  List<MySize> dco_decode_list_my_size(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_my_size).toList();
  }

  @protected
  List<MyTreeNodeTwinNormal> dco_decode_list_my_tree_node_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_my_tree_node_twin_normal)
        .toList();
  }

  @protected
  List<MyTreeNodeTwinRustAsync> dco_decode_list_my_tree_node_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_my_tree_node_twin_rust_async)
        .toList();
  }

  @protected
  List<MyTreeNodeTwinSync> dco_decode_list_my_tree_node_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_my_tree_node_twin_sync)
        .toList();
  }

  @protected
  List<NestedRawStringMirrored> dco_decode_list_nested_raw_string_mirrored(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_nested_raw_string_mirrored)
        .toList();
  }

  @protected
  ListOfNestedRawStringMirrored dco_decode_list_of_nested_raw_string_mirrored(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ListOfNestedRawStringMirrored(
      raw: dco_decode_list_nested_raw_string_mirrored(arr[0]),
    );
  }

  @protected
  List<String?> dco_decode_list_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_opt_String).toList();
  }

  @protected
  List<AttributeTwinNormal?>
      dco_decode_list_opt_box_autoadd_attribute_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_opt_box_autoadd_attribute_twin_normal)
        .toList();
  }

  @protected
  List<AttributeTwinRustAsync?>
      dco_decode_list_opt_box_autoadd_attribute_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_opt_box_autoadd_attribute_twin_rust_async)
        .toList();
  }

  @protected
  List<AttributeTwinSync?> dco_decode_list_opt_box_autoadd_attribute_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_opt_box_autoadd_attribute_twin_sync)
        .toList();
  }

  @protected
  List<int?> dco_decode_list_opt_box_autoadd_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_opt_box_autoadd_i_32).toList();
  }

  @protected
  List<WeekdaysTwinNormal?>
      dco_decode_list_opt_box_autoadd_weekdays_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_opt_box_autoadd_weekdays_twin_normal)
        .toList();
  }

  @protected
  List<WeekdaysTwinRustAsync?>
      dco_decode_list_opt_box_autoadd_weekdays_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_opt_box_autoadd_weekdays_twin_rust_async)
        .toList();
  }

  @protected
  List<WeekdaysTwinSync?> dco_decode_list_opt_box_autoadd_weekdays_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_opt_box_autoadd_weekdays_twin_sync)
        .toList();
  }

  @protected
  List<Int32List?> dco_decode_list_opt_list_prim_i_32_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_opt_list_prim_i_32_strict)
        .toList();
  }

  @protected
  List<PointTwinNormal> dco_decode_list_point_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_point_twin_normal).toList();
  }

  @protected
  List<PointTwinRustAsync> dco_decode_list_point_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_point_twin_rust_async)
        .toList();
  }

  @protected
  List<PointTwinSync> dco_decode_list_point_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_point_twin_sync).toList();
  }

  @protected
  List<double> dco_decode_list_prim_f_32_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<double>;
  }

  @protected
  Float32List dco_decode_list_prim_f_32_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Float32List;
  }

  @protected
  List<double> dco_decode_list_prim_f_64_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<double>;
  }

  @protected
  Float64List dco_decode_list_prim_f_64_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Float64List;
  }

  @protected
  List<int> dco_decode_list_prim_i_16_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Int16List dco_decode_list_prim_i_16_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Int16List;
  }

  @protected
  List<int> dco_decode_list_prim_i_32_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Int32List dco_decode_list_prim_i_32_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Int32List;
  }

  @protected
  Int64List dco_decode_list_prim_i_64_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeInt64List(raw);
  }

  @protected
  List<int> dco_decode_list_prim_i_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Int8List dco_decode_list_prim_i_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Int8List;
  }

  @protected
  List<int> dco_decode_list_prim_u_16_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint16List dco_decode_list_prim_u_16_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint16List;
  }

  @protected
  List<int> dco_decode_list_prim_u_32_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint32List dco_decode_list_prim_u_32_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint32List;
  }

  @protected
  Uint64List dco_decode_list_prim_u_64_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeUint64List(raw);
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<RawStringEnumMirrored> dco_decode_list_raw_string_enum_mirrored(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_raw_string_enum_mirrored)
        .toList();
  }

  @protected
  List<RawStringMirrored> dco_decode_list_raw_string_mirrored(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_raw_string_mirrored).toList();
  }

  @protected
  List<(int, BasicGeneralEnumTwinNormal)>
      dco_decode_list_record_i_32_basic_general_enum_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_i_32_basic_general_enum_twin_normal)
        .toList();
  }

  @protected
  List<(int, BasicGeneralEnumTwinRustAsync)>
      dco_decode_list_record_i_32_basic_general_enum_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_i_32_basic_general_enum_twin_rust_async)
        .toList();
  }

  @protected
  List<(int, BasicGeneralEnumTwinSync)>
      dco_decode_list_record_i_32_basic_general_enum_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_i_32_basic_general_enum_twin_sync)
        .toList();
  }

  @protected
  List<(int, BasicPrimitiveEnumTwinNormal)>
      dco_decode_list_record_i_32_basic_primitive_enum_twin_normal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_i_32_basic_primitive_enum_twin_normal)
        .toList();
  }

  @protected
  List<(int, BasicPrimitiveEnumTwinRustAsync)>
      dco_decode_list_record_i_32_basic_primitive_enum_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_i_32_basic_primitive_enum_twin_rust_async)
        .toList();
  }

  @protected
  List<(int, BasicPrimitiveEnumTwinSync)>
      dco_decode_list_record_i_32_basic_primitive_enum_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_i_32_basic_primitive_enum_twin_sync)
        .toList();
  }

  @protected
  List<(int, BasicStructTwinNormal)>
      dco_decode_list_record_i_32_basic_struct_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_i_32_basic_struct_twin_normal)
        .toList();
  }

  @protected
  List<(int, BasicStructTwinRustAsync)>
      dco_decode_list_record_i_32_basic_struct_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_i_32_basic_struct_twin_rust_async)
        .toList();
  }

  @protected
  List<(int, BasicStructTwinSync)>
      dco_decode_list_record_i_32_basic_struct_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_i_32_basic_struct_twin_sync)
        .toList();
  }

  @protected
  List<(int, bool)> dco_decode_list_record_i_32_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_i_32_bool).toList();
  }

  @protected
  List<(int, double)> dco_decode_list_record_i_32_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_i_32_f_32).toList();
  }

  @protected
  List<(int, double)> dco_decode_list_record_i_32_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_i_32_f_64).toList();
  }

  @protected
  List<(int, BigInt)> dco_decode_list_record_i_32_i_128(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_i_32_i_128).toList();
  }

  @protected
  List<(int, int)> dco_decode_list_record_i_32_i_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_i_32_i_16).toList();
  }

  @protected
  List<(int, int)> dco_decode_list_record_i_32_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_i_32_i_32).toList();
  }

  @protected
  List<(int, PlatformInt64)> dco_decode_list_record_i_32_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_i_32_i_64).toList();
  }

  @protected
  List<(int, int)> dco_decode_list_record_i_32_i_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_i_32_i_8).toList();
  }

  @protected
  List<(int, PlatformInt64)> dco_decode_list_record_i_32_isize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_i_32_isize).toList();
  }

  @protected
  List<(int, Uint8List)> dco_decode_list_record_i_32_list_prim_u_8_strict(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_i_32_list_prim_u_8_strict)
        .toList();
  }

  @protected
  List<(int, String)> dco_decode_list_record_i_32_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_i_32_string).toList();
  }

  @protected
  List<(int, BigInt)> dco_decode_list_record_i_32_u_128(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_i_32_u_128).toList();
  }

  @protected
  List<(int, int)> dco_decode_list_record_i_32_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_i_32_u_16).toList();
  }

  @protected
  List<(int, int)> dco_decode_list_record_i_32_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_i_32_u_32).toList();
  }

  @protected
  List<(int, BigInt)> dco_decode_list_record_i_32_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_i_32_u_64).toList();
  }

  @protected
  List<(int, int)> dco_decode_list_record_i_32_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_i_32_u_8).toList();
  }

  @protected
  List<(int, BigInt)> dco_decode_list_record_i_32_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_i_32_usize).toList();
  }

  @protected
  List<(String, EnumSimpleTwinNormal)>
      dco_decode_list_record_string_enum_simple_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_string_enum_simple_twin_normal)
        .toList();
  }

  @protected
  List<(String, EnumSimpleTwinRustAsync)>
      dco_decode_list_record_string_enum_simple_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_string_enum_simple_twin_rust_async)
        .toList();
  }

  @protected
  List<(String, EnumSimpleTwinSync)>
      dco_decode_list_record_string_enum_simple_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_string_enum_simple_twin_sync)
        .toList();
  }

  @protected
  List<(String, HashMapValue)> dco_decode_list_record_string_hash_map_value(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_string_hash_map_value)
        .toList();
  }

  @protected
  List<(String, int)> dco_decode_list_record_string_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_string_i_32).toList();
  }

  @protected
  List<(String, KitchenSinkTwinNormal)>
      dco_decode_list_record_string_kitchen_sink_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_string_kitchen_sink_twin_normal)
        .toList();
  }

  @protected
  List<(String, KitchenSinkTwinRustAsync)>
      dco_decode_list_record_string_kitchen_sink_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_string_kitchen_sink_twin_rust_async)
        .toList();
  }

  @protected
  List<(String, KitchenSinkTwinSync)>
      dco_decode_list_record_string_kitchen_sink_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_string_kitchen_sink_twin_sync)
        .toList();
  }

  @protected
  List<(String, Uint8List)> dco_decode_list_record_string_list_prim_u_8_strict(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_string_list_prim_u_8_strict)
        .toList();
  }

  @protected
  List<(String, MySize)> dco_decode_list_record_string_my_size(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_string_my_size)
        .toList();
  }

  @protected
  List<(String, String)> dco_decode_list_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_string_string).toList();
  }

  @protected
  List<(int, ApplicationMode)> dco_decode_list_record_u_8_application_mode(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_u_8_application_mode)
        .toList();
  }

  @protected
  List<SimpleStructTwinNormal> dco_decode_list_simple_struct_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_simple_struct_twin_normal)
        .toList();
  }

  @protected
  List<SimpleStructTwinRustAsync> dco_decode_list_simple_struct_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_simple_struct_twin_rust_async)
        .toList();
  }

  @protected
  List<SimpleStructTwinSync> dco_decode_list_simple_struct_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_simple_struct_twin_sync)
        .toList();
  }

  @protected
  List<SumWithTwinNormal> dco_decode_list_sum_with_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_sum_with_twin_normal).toList();
  }

  @protected
  List<SumWithTwinRustAsync> dco_decode_list_sum_with_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_sum_with_twin_rust_async)
        .toList();
  }

  @protected
  List<SumWithTwinSync> dco_decode_list_sum_with_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_sum_with_twin_sync).toList();
  }

  @protected
  List<TestIdTwinNormal> dco_decode_list_test_id_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_test_id_twin_normal).toList();
  }

  @protected
  List<TestIdTwinRustAsync> dco_decode_list_test_id_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_test_id_twin_rust_async)
        .toList();
  }

  @protected
  List<TestIdTwinSync> dco_decode_list_test_id_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_test_id_twin_sync).toList();
  }

  @protected
  List<WeekdaysTwinNormal> dco_decode_list_weekdays_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_weekdays_twin_normal).toList();
  }

  @protected
  List<WeekdaysTwinRustAsync> dco_decode_list_weekdays_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_weekdays_twin_rust_async)
        .toList();
  }

  @protected
  List<WeekdaysTwinSync> dco_decode_list_weekdays_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_weekdays_twin_sync).toList();
  }

  @protected
  Log2TwinNormal dco_decode_log_2_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Log2TwinNormal(
      key: dco_decode_u_32(arr[0]),
      value: dco_decode_String(arr[1]),
    );
  }

  @protected
  Log2TwinRustAsync dco_decode_log_2_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Log2TwinRustAsync(
      key: dco_decode_u_32(arr[0]),
      value: dco_decode_String(arr[1]),
    );
  }

  @protected
  Log2TwinSync dco_decode_log_2_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Log2TwinSync(
      key: dco_decode_u_32(arr[0]),
      value: dco_decode_String(arr[1]),
    );
  }

  @protected
  LogTwinNormal dco_decode_log_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return LogTwinNormal(
      key: dco_decode_u_32(arr[0]),
      value: dco_decode_u_32(arr[1]),
    );
  }

  @protected
  LogTwinRustAsync dco_decode_log_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return LogTwinRustAsync(
      key: dco_decode_u_32(arr[0]),
      value: dco_decode_u_32(arr[1]),
    );
  }

  @protected
  MacroStruct dco_decode_macro_struct(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MacroStruct(
      data: dco_decode_i_32(arr[0]),
    );
  }

  @protected
  MeasureTwinNormal dco_decode_measure_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return MeasureTwinNormal_Speed(
          dco_decode_box_speed_twin_normal(raw[1]),
        );
      case 1:
        return MeasureTwinNormal_Distance(
          dco_decode_box_distance_twin_normal(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  MeasureTwinRustAsync dco_decode_measure_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return MeasureTwinRustAsync_Speed(
          dco_decode_box_speed_twin_rust_async(raw[1]),
        );
      case 1:
        return MeasureTwinRustAsync_Distance(
          dco_decode_box_distance_twin_rust_async(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  MeasureTwinSync dco_decode_measure_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return MeasureTwinSync_Speed(
          dco_decode_box_speed_twin_sync(raw[1]),
        );
      case 1:
        return MeasureTwinSync_Distance(
          dco_decode_box_distance_twin_sync(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  MessageIdTwinNormal dco_decode_message_id_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MessageIdTwinNormal(
      field0: dco_decode_u_8_array_32(arr[0]),
    );
  }

  @protected
  MessageIdTwinRustAsync dco_decode_message_id_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MessageIdTwinRustAsync(
      field0: dco_decode_u_8_array_32(arr[0]),
    );
  }

  @protected
  MessageIdTwinSync dco_decode_message_id_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MessageIdTwinSync(
      field0: dco_decode_u_8_array_32(arr[0]),
    );
  }

  @protected
  MirrorStructTwinNormal dco_decode_mirror_struct_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return MirrorStructTwinNormal(
      a: dco_decode_application_settings(arr[0]),
      b: dco_decode_my_struct(arr[1]),
      c: dco_decode_list_my_enum(arr[2]),
      d: dco_decode_list_application_settings(arr[3]),
    );
  }

  @protected
  MirrorStructTwinRustAsync dco_decode_mirror_struct_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return MirrorStructTwinRustAsync(
      a: dco_decode_application_settings(arr[0]),
      b: dco_decode_my_struct(arr[1]),
      c: dco_decode_list_my_enum(arr[2]),
      d: dco_decode_list_application_settings(arr[3]),
    );
  }

  @protected
  MirrorStructTwinSync dco_decode_mirror_struct_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return MirrorStructTwinSync(
      a: dco_decode_application_settings(arr[0]),
      b: dco_decode_my_struct(arr[1]),
      c: dco_decode_list_my_enum(arr[2]),
      d: dco_decode_list_application_settings(arr[3]),
    );
  }

  @protected
  MoreThanJustOneRawStringStructTwinNormal
      dco_decode_more_than_just_one_raw_string_struct_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return MoreThanJustOneRawStringStructTwinNormal(
      regular: dco_decode_String(arr[0]),
      type: dco_decode_String(arr[1]),
      async_: dco_decode_bool(arr[2]),
      another: dco_decode_String(arr[3]),
    );
  }

  @protected
  MoreThanJustOneRawStringStructTwinRustAsync
      dco_decode_more_than_just_one_raw_string_struct_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return MoreThanJustOneRawStringStructTwinRustAsync(
      regular: dco_decode_String(arr[0]),
      type: dco_decode_String(arr[1]),
      async_: dco_decode_bool(arr[2]),
      another: dco_decode_String(arr[3]),
    );
  }

  @protected
  MoreThanJustOneRawStringStructTwinSync
      dco_decode_more_than_just_one_raw_string_struct_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return MoreThanJustOneRawStringStructTwinSync(
      regular: dco_decode_String(arr[0]),
      type: dco_decode_String(arr[1]),
      async_: dco_decode_bool(arr[2]),
      another: dco_decode_String(arr[3]),
    );
  }

  @protected
  MyCallableTwinNormal dco_decode_my_callable_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MyCallableTwinNormal(
      one: dco_decode_String(arr[0]),
    );
  }

  @protected
  MyCallableTwinRustAsync dco_decode_my_callable_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MyCallableTwinRustAsync(
      one: dco_decode_String(arr[0]),
    );
  }

  @protected
  MyCallableTwinSync dco_decode_my_callable_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MyCallableTwinSync(
      one: dco_decode_String(arr[0]),
    );
  }

  @protected
  MyEnum dco_decode_my_enum(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MyEnum.values[raw as int];
  }

  @protected
  MyEnumWithJsonSerializableTwinNormal
      dco_decode_my_enum_with_json_serializable_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return MyEnumWithJsonSerializableTwinNormal_Apple(
          dco_decode_String(raw[1]),
        );
      case 1:
        return MyEnumWithJsonSerializableTwinNormal_Orange(
          a: dco_decode_i_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  MyEnumWithoutFnWithUnignoreTwinNormal
      dco_decode_my_enum_without_fn_with_unignore_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return MyEnumWithoutFnWithUnignoreTwinNormal_One(
          dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  MyNestedStructTwinNormal dco_decode_my_nested_struct_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return MyNestedStructTwinNormal(
      treeNode: dco_decode_my_tree_node_twin_normal(arr[0]),
      weekday: dco_decode_weekdays_twin_normal(arr[1]),
    );
  }

  @protected
  MyNestedStructTwinRustAsync dco_decode_my_nested_struct_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return MyNestedStructTwinRustAsync(
      treeNode: dco_decode_my_tree_node_twin_rust_async(arr[0]),
      weekday: dco_decode_weekdays_twin_rust_async(arr[1]),
    );
  }

  @protected
  MyNestedStructTwinSync dco_decode_my_nested_struct_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return MyNestedStructTwinSync(
      treeNode: dco_decode_my_tree_node_twin_sync(arr[0]),
      weekday: dco_decode_weekdays_twin_sync(arr[1]),
    );
  }

  @protected
  MySize dco_decode_my_size(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return MySize(
      width: dco_decode_i_32(arr[0]),
      height: dco_decode_i_32(arr[1]),
    );
  }

  @protected
  MyStreamEntryTwinNormal dco_decode_my_stream_entry_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MyStreamEntryTwinNormal(
      hello: dco_decode_String(arr[0]),
    );
  }

  @protected
  MyStreamEntryTwinRustAsync dco_decode_my_stream_entry_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MyStreamEntryTwinRustAsync(
      hello: dco_decode_String(arr[0]),
    );
  }

  @protected
  MyStruct dco_decode_my_struct(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MyStruct(
      content: dco_decode_bool(arr[0]),
    );
  }

  @protected
  MyStructContainingStreamSinkTwinNormal
      dco_decode_my_struct_containing_stream_sink_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return MyStructContainingStreamSinkTwinNormal(
      a: dco_decode_i_32(arr[0]),
      b: dco_decode_StreamSink_i_32_Sse(arr[1]),
    );
  }

  @protected
  MyStructContainingStreamSinkTwinRustAsync
      dco_decode_my_struct_containing_stream_sink_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return MyStructContainingStreamSinkTwinRustAsync(
      a: dco_decode_i_32(arr[0]),
      b: dco_decode_StreamSink_i_32_Sse(arr[1]),
    );
  }

  @protected
  MyStructWithJsonSerializableTwinNormal
      dco_decode_my_struct_with_json_serializable_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MyStructWithJsonSerializableTwinNormal(
      fieldOne: dco_decode_String(arr[0]),
    );
  }

  @protected
  MyStructWithSync dco_decode_my_struct_with_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return MyStructWithSync();
  }

  @protected
  MyStructWithoutFnWithUnignoreTwinNormal
      dco_decode_my_struct_without_fn_with_unignore_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MyStructWithoutFnWithUnignoreTwinNormal(
      a: dco_decode_String(arr[0]),
    );
  }

  @protected
  MyStructWithoutFnWithUnignoreWithJsonSerializableTwinNormal
      dco_decode_my_struct_without_fn_with_unignore_with_json_serializable_twin_normal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MyStructWithoutFnWithUnignoreWithJsonSerializableTwinNormal(
      a: dco_decode_String(arr[0]),
    );
  }

  @protected
  MyTreeNodeTwinNormal dco_decode_my_tree_node_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return MyTreeNodeTwinNormal(
      valueI32: dco_decode_i_32(arr[0]),
      valueVecU8: dco_decode_list_prim_u_8_strict(arr[1]),
      valueBoolean: dco_decode_bool(arr[2]),
      children: dco_decode_list_my_tree_node_twin_normal(arr[3]),
    );
  }

  @protected
  MyTreeNodeTwinRustAsync dco_decode_my_tree_node_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return MyTreeNodeTwinRustAsync(
      valueI32: dco_decode_i_32(arr[0]),
      valueVecU8: dco_decode_list_prim_u_8_strict(arr[1]),
      valueBoolean: dco_decode_bool(arr[2]),
      children: dco_decode_list_my_tree_node_twin_rust_async(arr[3]),
    );
  }

  @protected
  MyTreeNodeTwinSync dco_decode_my_tree_node_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return MyTreeNodeTwinSync(
      valueI32: dco_decode_i_32(arr[0]),
      valueVecU8: dco_decode_list_prim_u_8_strict(arr[1]),
      valueBoolean: dco_decode_bool(arr[2]),
      children: dco_decode_list_my_tree_node_twin_sync(arr[3]),
    );
  }

  @protected
  NestedRawStringMirrored dco_decode_nested_raw_string_mirrored(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return NestedRawStringMirrored(
      raw: dco_decode_raw_string_mirrored(arr[0]),
    );
  }

  @protected
  NewSimpleStruct dco_decode_new_simple_struct(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return NewSimpleStruct(
      field: dco_decode_i_32(arr[0]),
    );
  }

  @protected
  NewTypeIntTwinNormal dco_decode_new_type_int_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return NewTypeIntTwinNormal(
      field0: dco_decode_i_64(arr[0]),
    );
  }

  @protected
  NewTypeIntTwinRustAsync dco_decode_new_type_int_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return NewTypeIntTwinRustAsync(
      field0: dco_decode_i_64(arr[0]),
    );
  }

  @protected
  NewTypeIntTwinSync dco_decode_new_type_int_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return NewTypeIntTwinSync(
      field0: dco_decode_i_64(arr[0]),
    );
  }

  @protected
  NonOpaqueStructContainingIpv4Addr
      dco_decode_non_opaque_struct_containing_ipv_4_addr(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return NonOpaqueStructContainingIpv4Addr(
      inner:
          dco_decode_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIpv4Addr(
              arr[0]),
    );
  }

  @protected
  NoteTwinNormal dco_decode_note_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return NoteTwinNormal(
      day: dco_decode_box_weekdays_twin_normal(arr[0]),
      body: dco_decode_String(arr[1]),
    );
  }

  @protected
  NoteTwinRustAsync dco_decode_note_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return NoteTwinRustAsync(
      day: dco_decode_box_weekdays_twin_rust_async(arr[0]),
      body: dco_decode_String(arr[1]),
    );
  }

  @protected
  NoteTwinSync dco_decode_note_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return NoteTwinSync(
      day: dco_decode_box_weekdays_twin_sync(arr[0]),
      body: dco_decode_String(arr[1]),
    );
  }

  @protected
  Numbers dco_decode_numbers(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Numbers(
      field0: dco_decode_list_prim_i_32_strict(arr[0]),
    );
  }

  @protected
  OldSimpleStruct dco_decode_old_simple_struct(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return OldSimpleStruct(
      field: dco_decode_i_32(arr[0]),
    );
  }

  @protected
  OpaqueNestedTwinNormal dco_decode_opaque_nested_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return OpaqueNestedTwinNormal(
      first: dco_decode_RustOpaque_HideDataTwinNormal(arr[0]),
      second: dco_decode_RustOpaque_HideDataTwinNormal(arr[1]),
    );
  }

  @protected
  OpaqueNestedTwinRustAsync dco_decode_opaque_nested_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return OpaqueNestedTwinRustAsync(
      first: dco_decode_RustOpaque_HideDataTwinRustAsync(arr[0]),
      second: dco_decode_RustOpaque_HideDataTwinRustAsync(arr[1]),
    );
  }

  @protected
  OpaqueNestedTwinSync dco_decode_opaque_nested_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return OpaqueNestedTwinSync(
      first: dco_decode_RustOpaque_HideDataTwinSync(arr[0]),
      second: dco_decode_RustOpaque_HideDataTwinSync(arr[1]),
    );
  }

  @protected
  BigInt? dco_decode_opt_I128(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_I128(raw);
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  BigInt? dco_decode_opt_U128(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_U128(raw);
  }

  @protected
  NonCloneSimpleTwinNormal?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            raw);
  }

  @protected
  NonCloneSimpleTwinRustAsync?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            raw);
  }

  @protected
  NonCloneSimpleTwinSync?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            raw);
  }

  @protected
  Duration? dco_decode_opt_box_autoadd_Chrono_Duration(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_Chrono_Duration(raw);
  }

  @protected
  DateTime? dco_decode_opt_box_autoadd_Chrono_Naive(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_Chrono_Naive(raw);
  }

  @protected
  DateTime? dco_decode_opt_box_autoadd_Chrono_Utc(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_Chrono_Utc(raw);
  }

  @protected
  Object? dco_decode_opt_box_autoadd_DartOpaque(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_DartOpaque(raw);
  }

  @protected
  HideDataAnotherTwinNormal?
      dco_decode_opt_box_autoadd_RustOpaque_HideDataAnotherTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_RustOpaque_HideDataAnotherTwinNormal(raw);
  }

  @protected
  HideDataTwinNormal? dco_decode_opt_box_autoadd_RustOpaque_HideDataTwinNormal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_RustOpaque_HideDataTwinNormal(raw);
  }

  @protected
  HideDataTwinRustAsync?
      dco_decode_opt_box_autoadd_RustOpaque_HideDataTwinRustAsync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_RustOpaque_HideDataTwinRustAsync(raw);
  }

  @protected
  HideDataTwinSync? dco_decode_opt_box_autoadd_RustOpaque_HideDataTwinSync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_RustOpaque_HideDataTwinSync(raw);
  }

  @protected
  ApplicationEnv? dco_decode_opt_box_autoadd_application_env(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_application_env(raw);
  }

  @protected
  ApplicationMode? dco_decode_opt_box_autoadd_application_mode(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_application_mode(raw);
  }

  @protected
  AttributeTwinNormal? dco_decode_opt_box_autoadd_attribute_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_attribute_twin_normal(raw);
  }

  @protected
  AttributeTwinRustAsync? dco_decode_opt_box_autoadd_attribute_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_attribute_twin_rust_async(raw);
  }

  @protected
  AttributeTwinSync? dco_decode_opt_box_autoadd_attribute_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_attribute_twin_sync(raw);
  }

  @protected
  BasicGeneralEnumTwinNormal?
      dco_decode_opt_box_autoadd_basic_general_enum_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_basic_general_enum_twin_normal(raw);
  }

  @protected
  BasicGeneralEnumTwinRustAsync?
      dco_decode_opt_box_autoadd_basic_general_enum_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_basic_general_enum_twin_rust_async(raw);
  }

  @protected
  BasicGeneralEnumTwinSync?
      dco_decode_opt_box_autoadd_basic_general_enum_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_basic_general_enum_twin_sync(raw);
  }

  @protected
  BasicPrimitiveEnumTwinNormal?
      dco_decode_opt_box_autoadd_basic_primitive_enum_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_basic_primitive_enum_twin_normal(raw);
  }

  @protected
  BasicPrimitiveEnumTwinRustAsync?
      dco_decode_opt_box_autoadd_basic_primitive_enum_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_basic_primitive_enum_twin_rust_async(raw);
  }

  @protected
  BasicPrimitiveEnumTwinSync?
      dco_decode_opt_box_autoadd_basic_primitive_enum_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_basic_primitive_enum_twin_sync(raw);
  }

  @protected
  BasicStructTwinNormal? dco_decode_opt_box_autoadd_basic_struct_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_basic_struct_twin_normal(raw);
  }

  @protected
  BasicStructTwinRustAsync?
      dco_decode_opt_box_autoadd_basic_struct_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_basic_struct_twin_rust_async(raw);
  }

  @protected
  BasicStructTwinSync? dco_decode_opt_box_autoadd_basic_struct_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_basic_struct_twin_sync(raw);
  }

  @protected
  bool? dco_decode_opt_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_bool(raw);
  }

  @protected
  ElementTwinNormal? dco_decode_opt_box_autoadd_element_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_element_twin_normal(raw);
  }

  @protected
  ElementTwinRustAsync? dco_decode_opt_box_autoadd_element_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_element_twin_rust_async(raw);
  }

  @protected
  ElementTwinSync? dco_decode_opt_box_autoadd_element_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_element_twin_sync(raw);
  }

  @protected
  ExoticOptionalsTwinNormal?
      dco_decode_opt_box_autoadd_exotic_optionals_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_exotic_optionals_twin_normal(raw);
  }

  @protected
  ExoticOptionalsTwinRustAsync?
      dco_decode_opt_box_autoadd_exotic_optionals_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_exotic_optionals_twin_rust_async(raw);
  }

  @protected
  ExoticOptionalsTwinSync?
      dco_decode_opt_box_autoadd_exotic_optionals_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_exotic_optionals_twin_sync(raw);
  }

  @protected
  double? dco_decode_opt_box_autoadd_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_f_32(raw);
  }

  @protected
  double? dco_decode_opt_box_autoadd_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_f_64(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_i_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_i_16(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_i_32(raw);
  }

  @protected
  PlatformInt64? dco_decode_opt_box_autoadd_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_i_64(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_i_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_i_8(raw);
  }

  @protected
  PlatformInt64? dco_decode_opt_box_autoadd_isize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_isize(raw);
  }

  @protected
  MeasureTwinNormal? dco_decode_opt_box_autoadd_measure_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_measure_twin_normal(raw);
  }

  @protected
  MeasureTwinRustAsync? dco_decode_opt_box_autoadd_measure_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_measure_twin_rust_async(raw);
  }

  @protected
  MeasureTwinSync? dco_decode_opt_box_autoadd_measure_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_measure_twin_sync(raw);
  }

  @protected
  NewTypeIntTwinNormal? dco_decode_opt_box_autoadd_new_type_int_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_new_type_int_twin_normal(raw);
  }

  @protected
  NewTypeIntTwinRustAsync?
      dco_decode_opt_box_autoadd_new_type_int_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_new_type_int_twin_rust_async(raw);
  }

  @protected
  NewTypeIntTwinSync? dco_decode_opt_box_autoadd_new_type_int_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_new_type_int_twin_sync(raw);
  }

  @protected
  (String, int)? dco_decode_opt_box_autoadd_record_string_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_record_string_i_32(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_16(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_32(raw);
  }

  @protected
  BigInt? dco_decode_opt_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_64(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_8(raw);
  }

  @protected
  BigInt? dco_decode_opt_box_autoadd_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_usize(raw);
  }

  @protected
  WeekdaysTwinNormal? dco_decode_opt_box_autoadd_weekdays_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_weekdays_twin_normal(raw);
  }

  @protected
  WeekdaysTwinRustAsync? dco_decode_opt_box_autoadd_weekdays_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_weekdays_twin_rust_async(raw);
  }

  @protected
  WeekdaysTwinSync? dco_decode_opt_box_autoadd_weekdays_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_weekdays_twin_sync(raw);
  }

  @protected
  BenchmarkBinaryTreeTwinNormal?
      dco_decode_opt_box_benchmark_binary_tree_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_benchmark_binary_tree_twin_normal(raw);
  }

  @protected
  BenchmarkBinaryTreeTwinRustAsync?
      dco_decode_opt_box_benchmark_binary_tree_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_benchmark_binary_tree_twin_rust_async(raw);
  }

  @protected
  BenchmarkBinaryTreeTwinSync?
      dco_decode_opt_box_benchmark_binary_tree_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_benchmark_binary_tree_twin_sync(raw);
  }

  @protected
  bool? dco_decode_opt_box_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_bool(raw);
  }

  @protected
  ExoticOptionalsTwinNormal? dco_decode_opt_box_exotic_optionals_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_exotic_optionals_twin_normal(raw);
  }

  @protected
  ExoticOptionalsTwinRustAsync?
      dco_decode_opt_box_exotic_optionals_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_exotic_optionals_twin_rust_async(raw);
  }

  @protected
  ExoticOptionalsTwinSync? dco_decode_opt_box_exotic_optionals_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_exotic_optionals_twin_sync(raw);
  }

  @protected
  double? dco_decode_opt_box_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_f_64(raw);
  }

  @protected
  int? dco_decode_opt_box_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_i_32(raw);
  }

  @protected
  PlatformInt64? dco_decode_opt_box_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_i_64(raw);
  }

  @protected
  int? dco_decode_opt_box_i_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_i_8(raw);
  }

  @protected
  int? dco_decode_opt_box_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_u_8(raw);
  }

  @protected
  List<AttributeTwinNormal>? dco_decode_opt_list_attribute_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_attribute_twin_normal(raw);
  }

  @protected
  List<AttributeTwinRustAsync>? dco_decode_opt_list_attribute_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_attribute_twin_rust_async(raw);
  }

  @protected
  List<AttributeTwinSync>? dco_decode_opt_list_attribute_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_attribute_twin_sync(raw);
  }

  @protected
  List<ElementTwinNormal>? dco_decode_opt_list_element_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_element_twin_normal(raw);
  }

  @protected
  List<ElementTwinRustAsync>? dco_decode_opt_list_element_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_element_twin_rust_async(raw);
  }

  @protected
  List<ElementTwinSync>? dco_decode_opt_list_element_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_element_twin_sync(raw);
  }

  @protected
  List<AttributeTwinNormal?>?
      dco_decode_opt_list_opt_box_autoadd_attribute_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_list_opt_box_autoadd_attribute_twin_normal(raw);
  }

  @protected
  List<AttributeTwinRustAsync?>?
      dco_decode_opt_list_opt_box_autoadd_attribute_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_list_opt_box_autoadd_attribute_twin_rust_async(raw);
  }

  @protected
  List<AttributeTwinSync?>?
      dco_decode_opt_list_opt_box_autoadd_attribute_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_list_opt_box_autoadd_attribute_twin_sync(raw);
  }

  @protected
  Float32List? dco_decode_opt_list_prim_f_32_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_prim_f_32_strict(raw);
  }

  @protected
  Float64List? dco_decode_opt_list_prim_f_64_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_prim_f_64_strict(raw);
  }

  @protected
  Int32List? dco_decode_opt_list_prim_i_32_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_prim_i_32_strict(raw);
  }

  @protected
  Int8List? dco_decode_opt_list_prim_i_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_prim_i_8_strict(raw);
  }

  @protected
  Uint8List? dco_decode_opt_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_prim_u_8_strict(raw);
  }

  @protected
  OptVecsTwinNormal dco_decode_opt_vecs_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return OptVecsTwinNormal(
      i32: dco_decode_list_opt_box_autoadd_i_32(arr[0]),
      enums: dco_decode_list_opt_box_autoadd_weekdays_twin_normal(arr[1]),
      strings: dco_decode_list_opt_String(arr[2]),
      buffers: dco_decode_list_opt_list_prim_i_32_strict(arr[3]),
    );
  }

  @protected
  OptVecsTwinRustAsync dco_decode_opt_vecs_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return OptVecsTwinRustAsync(
      i32: dco_decode_list_opt_box_autoadd_i_32(arr[0]),
      enums: dco_decode_list_opt_box_autoadd_weekdays_twin_rust_async(arr[1]),
      strings: dco_decode_list_opt_String(arr[2]),
      buffers: dco_decode_list_opt_list_prim_i_32_strict(arr[3]),
    );
  }

  @protected
  OptVecsTwinSync dco_decode_opt_vecs_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return OptVecsTwinSync(
      i32: dco_decode_list_opt_box_autoadd_i_32(arr[0]),
      enums: dco_decode_list_opt_box_autoadd_weekdays_twin_sync(arr[1]),
      strings: dco_decode_list_opt_String(arr[2]),
      buffers: dco_decode_list_opt_list_prim_i_32_strict(arr[3]),
    );
  }

  @protected
  PointTwinNormal dco_decode_point_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return PointTwinNormal(
      x: dco_decode_f_32(arr[0]),
      y: dco_decode_f_32(arr[1]),
    );
  }

  @protected
  PointTwinNormalArray2 dco_decode_point_twin_normal_array_2(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PointTwinNormalArray2(
        (raw as List<dynamic>).map(dco_decode_point_twin_normal).toList());
  }

  @protected
  PointTwinRustAsync dco_decode_point_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return PointTwinRustAsync(
      x: dco_decode_f_32(arr[0]),
      y: dco_decode_f_32(arr[1]),
    );
  }

  @protected
  PointTwinRustAsyncArray2 dco_decode_point_twin_rust_async_array_2(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PointTwinRustAsyncArray2(
        (raw as List<dynamic>).map(dco_decode_point_twin_rust_async).toList());
  }

  @protected
  PointTwinSync dco_decode_point_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return PointTwinSync(
      x: dco_decode_f_32(arr[0]),
      y: dco_decode_f_32(arr[1]),
    );
  }

  @protected
  PointTwinSyncArray2 dco_decode_point_twin_sync_array_2(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PointTwinSyncArray2(
        (raw as List<dynamic>).map(dco_decode_point_twin_sync).toList());
  }

  @protected
  RawStringEnumMirrored dco_decode_raw_string_enum_mirrored(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return RawStringEnumMirrored_Raw(
          dco_decode_box_autoadd_raw_string_mirrored(raw[1]),
        );
      case 1:
        return RawStringEnumMirrored_Nested(
          dco_decode_box_autoadd_nested_raw_string_mirrored(raw[1]),
        );
      case 2:
        return RawStringEnumMirrored_ListOfNested(
          dco_decode_box_autoadd_list_of_nested_raw_string_mirrored(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  RawStringItemEnumTwinNormal dco_decode_raw_string_item_enum_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return RawStringItemEnumTwinNormal_Regular(
          regular: dco_decode_String(raw[1]),
        );
      case 1:
        return RawStringItemEnumTwinNormal_Raw(
          type: dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  RawStringItemEnumTwinRustAsync
      dco_decode_raw_string_item_enum_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return RawStringItemEnumTwinRustAsync_Regular(
          regular: dco_decode_String(raw[1]),
        );
      case 1:
        return RawStringItemEnumTwinRustAsync_Raw(
          type: dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  RawStringItemEnumTwinSync dco_decode_raw_string_item_enum_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return RawStringItemEnumTwinSync_Regular(
          regular: dco_decode_String(raw[1]),
        );
      case 1:
        return RawStringItemEnumTwinSync_Raw(
          type: dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  RawStringItemStructTwinNormal dco_decode_raw_string_item_struct_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return RawStringItemStructTwinNormal(
      type: dco_decode_String(arr[0]),
    );
  }

  @protected
  RawStringItemStructTwinRustAsync
      dco_decode_raw_string_item_struct_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return RawStringItemStructTwinRustAsync(
      type: dco_decode_String(arr[0]),
    );
  }

  @protected
  RawStringItemStructTwinSync dco_decode_raw_string_item_struct_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return RawStringItemStructTwinSync(
      type: dco_decode_String(arr[0]),
    );
  }

  @protected
  RawStringMirrored dco_decode_raw_string_mirrored(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return RawStringMirrored(
      value: dco_decode_String(arr[0]),
      type: dco_decode_String(arr[1]),
    );
  }

  @protected
  (ApplicationSettings, RawStringEnumMirrored)
      dco_decode_record_application_settings_raw_string_enum_mirrored(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_application_settings(arr[0]),
      dco_decode_raw_string_enum_mirrored(arr[1]),
    );
  }

  @protected
  (
    OpaqueOneTwinNormal,
    OpaqueTwoTwinNormal
  ) dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_one_twin_normal_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_two_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinNormal(
          arr[0]),
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinNormal(
          arr[1]),
    );
  }

  @protected
  (
    OpaqueOneTwinRustAsync,
    OpaqueTwoTwinRustAsync
  ) dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_one_twin_rust_async_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_two_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinRustAsync(
          arr[0]),
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinRustAsync(
          arr[1]),
    );
  }

  @protected
  (
    OpaqueOneTwinSync,
    OpaqueTwoTwinSync
  ) dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_one_twin_sync_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_two_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinSync(
          arr[0]),
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinSync(
          arr[1]),
    );
  }

  @protected
  (int, BasicGeneralEnumTwinNormal)
      dco_decode_record_i_32_basic_general_enum_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_basic_general_enum_twin_normal(arr[1]),
    );
  }

  @protected
  (int, BasicGeneralEnumTwinRustAsync)
      dco_decode_record_i_32_basic_general_enum_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_basic_general_enum_twin_rust_async(arr[1]),
    );
  }

  @protected
  (int, BasicGeneralEnumTwinSync)
      dco_decode_record_i_32_basic_general_enum_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_basic_general_enum_twin_sync(arr[1]),
    );
  }

  @protected
  (int, BasicPrimitiveEnumTwinNormal)
      dco_decode_record_i_32_basic_primitive_enum_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_basic_primitive_enum_twin_normal(arr[1]),
    );
  }

  @protected
  (int, BasicPrimitiveEnumTwinRustAsync)
      dco_decode_record_i_32_basic_primitive_enum_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_basic_primitive_enum_twin_rust_async(arr[1]),
    );
  }

  @protected
  (int, BasicPrimitiveEnumTwinSync)
      dco_decode_record_i_32_basic_primitive_enum_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_basic_primitive_enum_twin_sync(arr[1]),
    );
  }

  @protected
  (int, BasicStructTwinNormal) dco_decode_record_i_32_basic_struct_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_basic_struct_twin_normal(arr[1]),
    );
  }

  @protected
  (int, BasicStructTwinRustAsync)
      dco_decode_record_i_32_basic_struct_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_basic_struct_twin_rust_async(arr[1]),
    );
  }

  @protected
  (int, BasicStructTwinSync) dco_decode_record_i_32_basic_struct_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_basic_struct_twin_sync(arr[1]),
    );
  }

  @protected
  (int, bool) dco_decode_record_i_32_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_bool(arr[1]),
    );
  }

  @protected
  (int, double) dco_decode_record_i_32_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_f_32(arr[1]),
    );
  }

  @protected
  (int, double) dco_decode_record_i_32_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_f_64(arr[1]),
    );
  }

  @protected
  (int, BigInt) dco_decode_record_i_32_i_128(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_I128(arr[1]),
    );
  }

  @protected
  (int, int) dco_decode_record_i_32_i_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_i_16(arr[1]),
    );
  }

  @protected
  (int, int) dco_decode_record_i_32_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_i_32(arr[1]),
    );
  }

  @protected
  (int, PlatformInt64) dco_decode_record_i_32_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_i_64(arr[1]),
    );
  }

  @protected
  (int, int) dco_decode_record_i_32_i_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_i_8(arr[1]),
    );
  }

  @protected
  (int, PlatformInt64) dco_decode_record_i_32_isize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_isize(arr[1]),
    );
  }

  @protected
  (int, Uint8List) dco_decode_record_i_32_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_list_prim_u_8_strict(arr[1]),
    );
  }

  @protected
  (int, String) dco_decode_record_i_32_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_String(arr[1]),
    );
  }

  @protected
  (int, BigInt) dco_decode_record_i_32_u_128(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_U128(arr[1]),
    );
  }

  @protected
  (int, int) dco_decode_record_i_32_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_u_16(arr[1]),
    );
  }

  @protected
  (int, int) dco_decode_record_i_32_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_u_32(arr[1]),
    );
  }

  @protected
  (int, BigInt) dco_decode_record_i_32_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_u_64(arr[1]),
    );
  }

  @protected
  (int, int) dco_decode_record_i_32_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_u_8(arr[1]),
    );
  }

  @protected
  (int, BigInt) dco_decode_record_i_32_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_usize(arr[1]),
    );
  }

  @protected
  (String, EnumSimpleTwinNormal)
      dco_decode_record_string_enum_simple_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_enum_simple_twin_normal(arr[1]),
    );
  }

  @protected
  (String, EnumSimpleTwinRustAsync)
      dco_decode_record_string_enum_simple_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_enum_simple_twin_rust_async(arr[1]),
    );
  }

  @protected
  (String, EnumSimpleTwinSync) dco_decode_record_string_enum_simple_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_enum_simple_twin_sync(arr[1]),
    );
  }

  @protected
  (String, HashMapValue) dco_decode_record_string_hash_map_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_hash_map_value(arr[1]),
    );
  }

  @protected
  (String, int) dco_decode_record_string_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_i_32(arr[1]),
    );
  }

  @protected
  (String, KitchenSinkTwinNormal)
      dco_decode_record_string_kitchen_sink_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_kitchen_sink_twin_normal(arr[1]),
    );
  }

  @protected
  (String, KitchenSinkTwinRustAsync)
      dco_decode_record_string_kitchen_sink_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_kitchen_sink_twin_rust_async(arr[1]),
    );
  }

  @protected
  (String, KitchenSinkTwinSync) dco_decode_record_string_kitchen_sink_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_kitchen_sink_twin_sync(arr[1]),
    );
  }

  @protected
  (String, Uint8List) dco_decode_record_string_list_prim_u_8_strict(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_list_prim_u_8_strict(arr[1]),
    );
  }

  @protected
  (String, MySize) dco_decode_record_string_my_size(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_my_size(arr[1]),
    );
  }

  @protected
  (String, String) dco_decode_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_String(arr[1]),
    );
  }

  @protected
  (int, ApplicationMode) dco_decode_record_u_8_application_mode(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_u_8(arr[0]),
      dco_decode_application_mode(arr[1]),
    );
  }

  @protected
  Sequences dco_decode_sequences(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Sequences(
      field0: dco_decode_list_prim_i_32_strict(arr[0]),
    );
  }

  @protected
  SimpleEnumTwinNormal dco_decode_simple_enum_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return SimpleEnumTwinNormal_First();
      case 1:
        return SimpleEnumTwinNormal_Second(
          dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  SimpleEnumTwinRustAsync dco_decode_simple_enum_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return SimpleEnumTwinRustAsync_First();
      case 1:
        return SimpleEnumTwinRustAsync_Second(
          dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  SimpleEnumTwinSync dco_decode_simple_enum_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return SimpleEnumTwinSync_First();
      case 1:
        return SimpleEnumTwinSync_Second(
          dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  SimplePrimitiveEnumTwinNormal dco_decode_simple_primitive_enum_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SimplePrimitiveEnumTwinNormal.values[raw as int];
  }

  @protected
  SimplePrimitiveEnumTwinRustAsync
      dco_decode_simple_primitive_enum_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SimplePrimitiveEnumTwinRustAsync.values[raw as int];
  }

  @protected
  SimplePrimitiveEnumTwinSync dco_decode_simple_primitive_enum_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SimplePrimitiveEnumTwinSync.values[raw as int];
  }

  @protected
  SimpleStructForBorrowTwinNormal
      dco_decode_simple_struct_for_borrow_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SimpleStructForBorrowTwinNormal(
      one: dco_decode_String(arr[0]),
    );
  }

  @protected
  SimpleStructForBorrowTwinRustAsync
      dco_decode_simple_struct_for_borrow_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SimpleStructForBorrowTwinRustAsync(
      one: dco_decode_String(arr[0]),
    );
  }

  @protected
  SimpleStructForBorrowTwinSync dco_decode_simple_struct_for_borrow_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SimpleStructForBorrowTwinSync(
      one: dco_decode_String(arr[0]),
    );
  }

  @protected
  SimpleStructTwinNormal dco_decode_simple_struct_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SimpleStructTwinNormal(
      one: dco_decode_String(arr[0]),
    );
  }

  @protected
  SimpleStructTwinRustAsync dco_decode_simple_struct_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SimpleStructTwinRustAsync(
      one: dco_decode_String(arr[0]),
    );
  }

  @protected
  SimpleStructTwinSync dco_decode_simple_struct_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SimpleStructTwinSync(
      one: dco_decode_String(arr[0]),
    );
  }

  @protected
  SimpleTraitForDynTwinNormalImplementor
      dco_decode_simple_trait_for_dyn_twin_normal_implementor(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return SimpleTraitForDynTwinNormalImplementor_Variant0(
          dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitForDynTwinNormal(
              raw[1]),
        );
      case 1:
        return SimpleTraitForDynTwinNormalImplementor_Variant1(
          dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitForDynTwinNormal(
              raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  SimpleTranslatableExternalStructWithMethod
      dco_decode_simple_translatable_external_struct_with_method(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SimpleTranslatableExternalStructWithMethod(
      a: dco_decode_String(arr[0]),
    );
  }

  @protected
  SomeStructTwinNormal dco_decode_some_struct_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SomeStructTwinNormal(
      value: dco_decode_u_32(arr[0]),
    );
  }

  @protected
  SomeStructTwinRustAsync dco_decode_some_struct_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SomeStructTwinRustAsync(
      value: dco_decode_u_32(arr[0]),
    );
  }

  @protected
  SomeStructTwinSync dco_decode_some_struct_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SomeStructTwinSync(
      value: dco_decode_u_32(arr[0]),
    );
  }

  @protected
  SpeedTwinNormal dco_decode_speed_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return SpeedTwinNormal_Unknown();
      case 1:
        return SpeedTwinNormal_GPS(
          dco_decode_f_64(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  SpeedTwinRustAsync dco_decode_speed_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return SpeedTwinRustAsync_Unknown();
      case 1:
        return SpeedTwinRustAsync_GPS(
          dco_decode_f_64(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  SpeedTwinSync dco_decode_speed_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return SpeedTwinSync_Unknown();
      case 1:
        return SpeedTwinSync_GPS(
          dco_decode_f_64(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  StaticOnlyTwinNormal dco_decode_static_only_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return StaticOnlyTwinNormal(
      one: dco_decode_String(arr[0]),
    );
  }

  @protected
  StaticOnlyTwinRustAsync dco_decode_static_only_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return StaticOnlyTwinRustAsync(
      one: dco_decode_String(arr[0]),
    );
  }

  @protected
  StaticOnlyTwinSync dco_decode_static_only_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return StaticOnlyTwinSync(
      one: dco_decode_String(arr[0]),
    );
  }

  @protected
  StructInLowerLevel dco_decode_struct_in_lower_level(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return StructInLowerLevel(
      inner: dco_decode_struct_in_upper_level(arr[0]),
    );
  }

  @protected
  StructInUpperLevel dco_decode_struct_in_upper_level(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return StructInUpperLevel(
      upper: dco_decode_usize(arr[0]),
    );
  }

  @protected
  StructWithCastedPrimitiveTwinNormal
      dco_decode_struct_with_casted_primitive_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return StructWithCastedPrimitiveTwinNormal(
      fieldI64: dco_decode_CastedPrimitive_i_64(arr[0]),
      fieldU64: dco_decode_CastedPrimitive_u_64(arr[1]),
      fieldI32: dco_decode_i_32(arr[2]),
      fieldVecU8: dco_decode_list_prim_u_8_strict(arr[3]),
    );
  }

  @protected
  StructWithCommentsTwinNormal dco_decode_struct_with_comments_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return StructWithCommentsTwinNormal(
      fieldWithComments: dco_decode_i_32(arr[0]),
    );
  }

  @protected
  StructWithCommentsTwinRustAsync
      dco_decode_struct_with_comments_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return StructWithCommentsTwinRustAsync(
      fieldWithComments: dco_decode_i_32(arr[0]),
    );
  }

  @protected
  StructWithCommentsTwinSync dco_decode_struct_with_comments_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return StructWithCommentsTwinSync(
      fieldWithComments: dco_decode_i_32(arr[0]),
    );
  }

  @protected
  StructWithCustomNameMethodTwinNormal
      dco_decode_struct_with_custom_name_method_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return StructWithCustomNameMethodTwinNormal(
      field0: dco_decode_i_32(arr[0]),
    );
  }

  @protected
  StructWithDartKeywordFieldTwinNormal
      dco_decode_struct_with_dart_keyword_field_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return StructWithDartKeywordFieldTwinNormal(
      class_: dco_decode_i_32(arr[0]),
      interface_: dco_decode_i_64(arr[1]),
    );
  }

  @protected
  StructWithDartKeywordFieldTwinRustAsync
      dco_decode_struct_with_dart_keyword_field_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return StructWithDartKeywordFieldTwinRustAsync(
      class_: dco_decode_i_32(arr[0]),
      interface_: dco_decode_i_64(arr[1]),
    );
  }

  @protected
  StructWithDartKeywordFieldTwinSync
      dco_decode_struct_with_dart_keyword_field_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return StructWithDartKeywordFieldTwinSync(
      class_: dco_decode_i_32(arr[0]),
      interface_: dco_decode_i_64(arr[1]),
    );
  }

  @protected
  StructWithEnumTwinNormal dco_decode_struct_with_enum_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return StructWithEnumTwinNormal(
      abc1: dco_decode_abc_twin_normal(arr[0]),
      abc2: dco_decode_abc_twin_normal(arr[1]),
    );
  }

  @protected
  StructWithEnumTwinRustAsync dco_decode_struct_with_enum_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return StructWithEnumTwinRustAsync(
      abc1: dco_decode_abc_twin_rust_async(arr[0]),
      abc2: dco_decode_abc_twin_rust_async(arr[1]),
    );
  }

  @protected
  StructWithEnumTwinSync dco_decode_struct_with_enum_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return StructWithEnumTwinSync(
      abc1: dco_decode_abc_twin_sync(arr[0]),
      abc2: dco_decode_abc_twin_sync(arr[1]),
    );
  }

  @protected
  StructWithExplicitAutoOpaqueFieldTwinNormal
      dco_decode_struct_with_explicit_auto_opaque_field_twin_normal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return StructWithExplicitAutoOpaqueFieldTwinNormal(
      autoOpaque:
          dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
              arr[0]),
      normal: dco_decode_i_32(arr[1]),
    );
  }

  @protected
  StructWithExplicitAutoOpaqueFieldTwinRustAsync
      dco_decode_struct_with_explicit_auto_opaque_field_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return StructWithExplicitAutoOpaqueFieldTwinRustAsync(
      autoOpaque:
          dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
              arr[0]),
      normal: dco_decode_i_32(arr[1]),
    );
  }

  @protected
  StructWithExplicitAutoOpaqueFieldTwinSync
      dco_decode_struct_with_explicit_auto_opaque_field_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return StructWithExplicitAutoOpaqueFieldTwinSync(
      autoOpaque:
          dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
              arr[0]),
      normal: dco_decode_i_32(arr[1]),
    );
  }

  @protected
  StructWithFieldRenameTwinNormal
      dco_decode_struct_with_field_rename_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return StructWithFieldRenameTwinNormal(
      renamed_field: dco_decode_i_32(arr[0]),
    );
  }

  @protected
  StructWithFieldRenameTwinRustAsync
      dco_decode_struct_with_field_rename_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return StructWithFieldRenameTwinRustAsync(
      renamed_field: dco_decode_i_32(arr[0]),
    );
  }

  @protected
  StructWithFieldRenameTwinSync dco_decode_struct_with_field_rename_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return StructWithFieldRenameTwinSync(
      renamed_field: dco_decode_i_32(arr[0]),
    );
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinNormal
      dco_decode_struct_with_good_and_opaque_field_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return StructWithGoodAndOpaqueFieldTwinNormal(
      good: dco_decode_String(arr[0]),
      opaque:
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
              arr[1]),
      optionOpaque:
          dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
              arr[2]),
    );
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinRustAsync
      dco_decode_struct_with_good_and_opaque_field_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return StructWithGoodAndOpaqueFieldTwinRustAsync(
      good: dco_decode_String(arr[0]),
      opaque:
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
              arr[1]),
      optionOpaque:
          dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
              arr[2]),
    );
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinSync
      dco_decode_struct_with_good_and_opaque_field_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return StructWithGoodAndOpaqueFieldTwinSync(
      good: dco_decode_String(arr[0]),
      opaque:
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
              arr[1]),
      optionOpaque:
          dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
              arr[2]),
    );
  }

  @protected
  StructWithHashMap dco_decode_struct_with_hash_map(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return StructWithHashMap(
      map: dco_decode_Map_String_hash_map_value_None(arr[0]),
    );
  }

  @protected
  StructWithImplBlockInAnotherFile
      dco_decode_struct_with_impl_block_in_another_file(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return StructWithImplBlockInAnotherFile();
  }

  @protected
  StructWithImplBlockInAnotherFileDependency
      dco_decode_struct_with_impl_block_in_another_file_dependency(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return StructWithImplBlockInAnotherFileDependency();
  }

  @protected
  StructWithOneFieldTwinNormal dco_decode_struct_with_one_field_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return StructWithOneFieldTwinNormal(
      a: dco_decode_i_32(arr[0]),
    );
  }

  @protected
  StructWithOneFieldTwinRustAsync
      dco_decode_struct_with_one_field_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return StructWithOneFieldTwinRustAsync(
      a: dco_decode_i_32(arr[0]),
    );
  }

  @protected
  StructWithOneFieldTwinSync dco_decode_struct_with_one_field_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return StructWithOneFieldTwinSync(
      a: dco_decode_i_32(arr[0]),
    );
  }

  @protected
  StructWithRawNameField dco_decode_struct_with_raw_name_field(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return StructWithRawNameField(
      type: dco_decode_String(arr[0]),
    );
  }

  @protected
  StructWithRustAutoOpaqueFieldWithManyDerive
      dco_decode_struct_with_rust_auto_opaque_field_with_many_derive(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return StructWithRustAutoOpaqueFieldWithManyDerive(
      content:
          dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithRustAutoOpaqueFieldWithManyDeriveInner(
              arr[0]),
    );
  }

  @protected
  StructWithRustAutoOpaqueWithNonCloneData
      dco_decode_struct_with_rust_auto_opaque_with_non_clone_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return StructWithRustAutoOpaqueWithNonCloneData(
      content:
          dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneDataRaw(
              arr[0]),
    );
  }

  @protected
  StructWithTwoFieldTwinNormal dco_decode_struct_with_two_field_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return StructWithTwoFieldTwinNormal(
      a: dco_decode_i_32(arr[0]),
      b: dco_decode_i_32(arr[1]),
    );
  }

  @protected
  StructWithTwoFieldTwinRustAsync
      dco_decode_struct_with_two_field_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return StructWithTwoFieldTwinRustAsync(
      a: dco_decode_i_32(arr[0]),
      b: dco_decode_i_32(arr[1]),
    );
  }

  @protected
  StructWithTwoFieldTwinSync dco_decode_struct_with_two_field_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return StructWithTwoFieldTwinSync(
      a: dco_decode_i_32(arr[0]),
      b: dco_decode_i_32(arr[1]),
    );
  }

  @protected
  StructWithZeroFieldTwinNormal dco_decode_struct_with_zero_field_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return StructWithZeroFieldTwinNormal();
  }

  @protected
  StructWithZeroFieldTwinRustAsync
      dco_decode_struct_with_zero_field_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return StructWithZeroFieldTwinRustAsync();
  }

  @protected
  StructWithZeroFieldTwinSync dco_decode_struct_with_zero_field_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return StructWithZeroFieldTwinSync();
  }

  @protected
  SumWithTwinNormal dco_decode_sum_with_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SumWithTwinNormal(
      x: dco_decode_u_32(arr[0]),
    );
  }

  @protected
  SumWithTwinNormalArray3 dco_decode_sum_with_twin_normal_array_3(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SumWithTwinNormalArray3(
        (raw as List<dynamic>).map(dco_decode_sum_with_twin_normal).toList());
  }

  @protected
  SumWithTwinRustAsync dco_decode_sum_with_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SumWithTwinRustAsync(
      x: dco_decode_u_32(arr[0]),
    );
  }

  @protected
  SumWithTwinRustAsyncArray3 dco_decode_sum_with_twin_rust_async_array_3(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SumWithTwinRustAsyncArray3((raw as List<dynamic>)
        .map(dco_decode_sum_with_twin_rust_async)
        .toList());
  }

  @protected
  SumWithTwinSync dco_decode_sum_with_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SumWithTwinSync(
      x: dco_decode_u_32(arr[0]),
    );
  }

  @protected
  SumWithTwinSyncArray3 dco_decode_sum_with_twin_sync_array_3(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SumWithTwinSyncArray3(
        (raw as List<dynamic>).map(dco_decode_sum_with_twin_sync).toList());
  }

  @protected
  TestChronoTwinNormal dco_decode_test_chrono_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return TestChronoTwinNormal(
      dt: dco_decode_opt_box_autoadd_Chrono_Utc(arr[0]),
      dt2: dco_decode_opt_box_autoadd_Chrono_Naive(arr[1]),
      du: dco_decode_opt_box_autoadd_Chrono_Duration(arr[2]),
    );
  }

  @protected
  TestChronoTwinRustAsync dco_decode_test_chrono_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return TestChronoTwinRustAsync(
      dt: dco_decode_opt_box_autoadd_Chrono_Utc(arr[0]),
      dt2: dco_decode_opt_box_autoadd_Chrono_Naive(arr[1]),
      du: dco_decode_opt_box_autoadd_Chrono_Duration(arr[2]),
    );
  }

  @protected
  TestChronoTwinSync dco_decode_test_chrono_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return TestChronoTwinSync(
      dt: dco_decode_opt_box_autoadd_Chrono_Utc(arr[0]),
      dt2: dco_decode_opt_box_autoadd_Chrono_Naive(arr[1]),
      du: dco_decode_opt_box_autoadd_Chrono_Duration(arr[2]),
    );
  }

  @protected
  TestIdTwinNormal dco_decode_test_id_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return TestIdTwinNormal(
      field0: dco_decode_i_32_array_2(arr[0]),
    );
  }

  @protected
  TestIdTwinNormalArray2 dco_decode_test_id_twin_normal_array_2(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TestIdTwinNormalArray2(
        (raw as List<dynamic>).map(dco_decode_test_id_twin_normal).toList());
  }

  @protected
  TestIdTwinNormalArray4 dco_decode_test_id_twin_normal_array_4(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TestIdTwinNormalArray4(
        (raw as List<dynamic>).map(dco_decode_test_id_twin_normal).toList());
  }

  @protected
  TestIdTwinRustAsync dco_decode_test_id_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return TestIdTwinRustAsync(
      field0: dco_decode_i_32_array_2(arr[0]),
    );
  }

  @protected
  TestIdTwinRustAsyncArray2 dco_decode_test_id_twin_rust_async_array_2(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TestIdTwinRustAsyncArray2((raw as List<dynamic>)
        .map(dco_decode_test_id_twin_rust_async)
        .toList());
  }

  @protected
  TestIdTwinRustAsyncArray4 dco_decode_test_id_twin_rust_async_array_4(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TestIdTwinRustAsyncArray4((raw as List<dynamic>)
        .map(dco_decode_test_id_twin_rust_async)
        .toList());
  }

  @protected
  TestIdTwinSync dco_decode_test_id_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return TestIdTwinSync(
      field0: dco_decode_i_32_array_2(arr[0]),
    );
  }

  @protected
  TestIdTwinSyncArray2 dco_decode_test_id_twin_sync_array_2(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TestIdTwinSyncArray2(
        (raw as List<dynamic>).map(dco_decode_test_id_twin_sync).toList());
  }

  @protected
  TestIdTwinSyncArray4 dco_decode_test_id_twin_sync_array_4(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TestIdTwinSyncArray4(
        (raw as List<dynamic>).map(dco_decode_test_id_twin_sync).toList());
  }

  @protected
  TestModelTwinNormal dco_decode_test_model_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return TestModelTwinNormal(
      id: dco_decode_u_64(arr[0]),
      name: dco_decode_String(arr[1]),
      aliasEnum: dco_decode_my_enum(arr[2]),
      aliasStruct: dco_decode_my_struct(arr[3]),
    );
  }

  @protected
  TestModelTwinRustAsync dco_decode_test_model_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return TestModelTwinRustAsync(
      id: dco_decode_u_64(arr[0]),
      name: dco_decode_String(arr[1]),
      aliasEnum: dco_decode_my_enum(arr[2]),
      aliasStruct: dco_decode_my_struct(arr[3]),
    );
  }

  @protected
  TestModelTwinSync dco_decode_test_model_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return TestModelTwinSync(
      id: dco_decode_u_64(arr[0]),
      name: dco_decode_String(arr[1]),
      aliasEnum: dco_decode_my_enum(arr[2]),
      aliasStruct: dco_decode_my_struct(arr[3]),
    );
  }

  @protected
  TranslatableStructWithDartCodeTwinNormal
      dco_decode_translatable_struct_with_dart_code_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return TranslatableStructWithDartCodeTwinNormal(
      a: dco_decode_i_32(arr[0]),
    );
  }

  @protected
  TupleStructWithOneFieldTwinNormal
      dco_decode_tuple_struct_with_one_field_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return TupleStructWithOneFieldTwinNormal(
      field0: dco_decode_i_32(arr[0]),
    );
  }

  @protected
  TupleStructWithOneFieldTwinRustAsync
      dco_decode_tuple_struct_with_one_field_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return TupleStructWithOneFieldTwinRustAsync(
      field0: dco_decode_i_32(arr[0]),
    );
  }

  @protected
  TupleStructWithOneFieldTwinSync
      dco_decode_tuple_struct_with_one_field_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return TupleStructWithOneFieldTwinSync(
      field0: dco_decode_i_32(arr[0]),
    );
  }

  @protected
  TupleStructWithTwoFieldTwinNormal
      dco_decode_tuple_struct_with_two_field_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TupleStructWithTwoFieldTwinNormal(
      field0: dco_decode_i_32(arr[0]),
      field1: dco_decode_i_32(arr[1]),
    );
  }

  @protected
  TupleStructWithTwoFieldTwinRustAsync
      dco_decode_tuple_struct_with_two_field_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TupleStructWithTwoFieldTwinRustAsync(
      field0: dco_decode_i_32(arr[0]),
      field1: dco_decode_i_32(arr[1]),
    );
  }

  @protected
  TupleStructWithTwoFieldTwinSync
      dco_decode_tuple_struct_with_two_field_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TupleStructWithTwoFieldTwinSync(
      field0: dco_decode_i_32(arr[0]),
      field1: dco_decode_i_32(arr[1]),
    );
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  U8Array1600 dco_decode_u_8_array_1600(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return U8Array1600(dco_decode_list_prim_u_8_strict(raw));
  }

  @protected
  U8Array2 dco_decode_u_8_array_2(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return U8Array2(dco_decode_list_prim_u_8_strict(raw));
  }

  @protected
  U8Array32 dco_decode_u_8_array_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return U8Array32(dco_decode_list_prim_u_8_strict(raw));
  }

  @protected
  U8Array5 dco_decode_u_8_array_5(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return U8Array5(dco_decode_list_prim_u_8_strict(raw));
  }

  @protected
  U8Array8 dco_decode_u_8_array_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return U8Array8(dco_decode_list_prim_u_8_strict(raw));
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  UserIdTwinNormal dco_decode_user_id_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return UserIdTwinNormal(
      value: dco_decode_u_32(arr[0]),
    );
  }

  @protected
  UserIdTwinRustAsync dco_decode_user_id_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return UserIdTwinRustAsync(
      value: dco_decode_u_32(arr[0]),
    );
  }

  @protected
  UserIdTwinSync dco_decode_user_id_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return UserIdTwinSync(
      value: dco_decode_u_32(arr[0]),
    );
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  VecOfPrimitivePackTwinNormal dco_decode_vec_of_primitive_pack_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 11)
      throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return VecOfPrimitivePackTwinNormal(
      int8List: dco_decode_list_prim_i_8_strict(arr[0]),
      uint8List: dco_decode_list_prim_u_8_strict(arr[1]),
      int16List: dco_decode_list_prim_i_16_strict(arr[2]),
      uint16List: dco_decode_list_prim_u_16_strict(arr[3]),
      uint32List: dco_decode_list_prim_u_32_strict(arr[4]),
      int32List: dco_decode_list_prim_i_32_strict(arr[5]),
      uint64List: dco_decode_list_prim_u_64_strict(arr[6]),
      int64List: dco_decode_list_prim_i_64_strict(arr[7]),
      float32List: dco_decode_list_prim_f_32_strict(arr[8]),
      float64List: dco_decode_list_prim_f_64_strict(arr[9]),
      boolList: dco_decode_list_bool(arr[10]),
    );
  }

  @protected
  VecOfPrimitivePackTwinRustAsync
      dco_decode_vec_of_primitive_pack_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 11)
      throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return VecOfPrimitivePackTwinRustAsync(
      int8List: dco_decode_list_prim_i_8_strict(arr[0]),
      uint8List: dco_decode_list_prim_u_8_strict(arr[1]),
      int16List: dco_decode_list_prim_i_16_strict(arr[2]),
      uint16List: dco_decode_list_prim_u_16_strict(arr[3]),
      uint32List: dco_decode_list_prim_u_32_strict(arr[4]),
      int32List: dco_decode_list_prim_i_32_strict(arr[5]),
      uint64List: dco_decode_list_prim_u_64_strict(arr[6]),
      int64List: dco_decode_list_prim_i_64_strict(arr[7]),
      float32List: dco_decode_list_prim_f_32_strict(arr[8]),
      float64List: dco_decode_list_prim_f_64_strict(arr[9]),
      boolList: dco_decode_list_bool(arr[10]),
    );
  }

  @protected
  VecOfPrimitivePackTwinSync dco_decode_vec_of_primitive_pack_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 11)
      throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return VecOfPrimitivePackTwinSync(
      int8List: dco_decode_list_prim_i_8_strict(arr[0]),
      uint8List: dco_decode_list_prim_u_8_strict(arr[1]),
      int16List: dco_decode_list_prim_i_16_strict(arr[2]),
      uint16List: dco_decode_list_prim_u_16_strict(arr[3]),
      uint32List: dco_decode_list_prim_u_32_strict(arr[4]),
      int32List: dco_decode_list_prim_i_32_strict(arr[5]),
      uint64List: dco_decode_list_prim_u_64_strict(arr[6]),
      int64List: dco_decode_list_prim_i_64_strict(arr[7]),
      float32List: dco_decode_list_prim_f_32_strict(arr[8]),
      float64List: dco_decode_list_prim_f_64_strict(arr[9]),
      boolList: dco_decode_list_bool(arr[10]),
    );
  }

  @protected
  WeekdaysTwinNormal dco_decode_weekdays_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WeekdaysTwinNormal.values[raw as int];
  }

  @protected
  WeekdaysTwinRustAsync dco_decode_weekdays_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WeekdaysTwinRustAsync.values[raw as int];
  }

  @protected
  WeekdaysTwinSync dco_decode_weekdays_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WeekdaysTwinSync.values[raw as int];
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  LtNestedTypeWithLifetimeTwinNormal
      sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtNestedTypeWithLifetimeTwinNormalstatic(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtNestedTypeWithLifetimeTwinNormalstatic(
            deserializer);
    return inner;
  }

  @protected
  LtNestedTypeWithLifetimeTwinSync
      sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtNestedTypeWithLifetimeTwinSyncstatic(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtNestedTypeWithLifetimeTwinSyncstatic(
            deserializer);
    return inner;
  }

  @protected
  LtTypeWithLifetimeTwinNormal
      sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithLifetimeTwinNormalstatic(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithLifetimeTwinNormalstatic(
            deserializer);
    return inner;
  }

  @protected
  LtTypeWithLifetimeTwinSync
      sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithLifetimeTwinSyncstatic(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithLifetimeTwinSyncstatic(
            deserializer);
    return inner;
  }

  @protected
  LtTypeWithMultiDepTwinNormal
      sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithMultiDepTwinNormalstatic(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithMultiDepTwinNormalstatic(
            deserializer);
    return inner;
  }

  @protected
  LtTypeWithMultiDepTwinSync
      sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithMultiDepTwinSyncstatic(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithMultiDepTwinSyncstatic(
            deserializer);
    return inner;
  }

  @protected
  MyNodeTwinNormal
      sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyNodeTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyNodeTwinNormal(
            deserializer);
    return inner;
  }

  @protected
  NonCloneDataRaw
      sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneDataRaw(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneDataRaw(
            deserializer);
    return inner;
  }

  @protected
  NonCloneSimpleTwinNormal
      sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            deserializer);
    return inner;
  }

  @protected
  NonCloneSimpleTwinRustAsync
      sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            deserializer);
    return inner;
  }

  @protected
  NonCloneSimpleTwinSync
      sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            deserializer);
    return inner;
  }

  @protected
  OpaqueItemTwinNormal
      sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueItemTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueItemTwinNormal(
            deserializer);
    return inner;
  }

  @protected
  StructOneWithTraitForDynTwinNormal
      sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitForDynTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitForDynTwinNormal(
            deserializer);
    return inner;
  }

  @protected
  StructTwoWithTraitForDynTwinNormal
      sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitForDynTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitForDynTwinNormal(
            deserializer);
    return inner;
  }

  @protected
  StructWithRustAutoOpaqueFieldWithManyDeriveInner
      sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithRustAutoOpaqueFieldWithManyDeriveInner(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithRustAutoOpaqueFieldWithManyDeriveInner(
            deserializer);
    return inner;
  }

  @protected
  BoxAnyMyDartTypeRename
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynAnySendSyncstatic(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BoxAnyMyDartTypeRenameImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxFnStringString
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynFnStringStringSendSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BoxFnStringStringImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxMyTraitTwinNormal
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinNormalSendSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BoxMyTraitTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxMyTraitTwinRustAsync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinRustAsyncSendSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BoxMyTraitTwinRustAsyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxMyTraitTwinSync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinSyncSendSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BoxMyTraitTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ConstructorOpaqueStructTwinNormal
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueStructTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConstructorOpaqueStructTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ConstructorOpaqueSyncStructTwinNormal
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueSyncStructTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConstructorOpaqueSyncStructTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  CustomHasherTwinNormal
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CustomHasherTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  CustomHasherTwinRustAsync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CustomHasherTwinRustAsyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  CustomHasherTwinSync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CustomHasherTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DeliberateFailSanityCheckTwinNormal
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDeliberateFailSanityCheckTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DeliberateFailSanityCheckTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DroppableTwinNormal
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DroppableTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DroppableTwinRustAsync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DroppableTwinRustAsyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DroppableTwinSync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DroppableTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  EnumWithGoodAndOpaqueWithoutOptionTwinNormal
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EnumWithGoodAndOpaqueWithoutOptionTwinNormalImpl
        .frbInternalSseDecode(
            sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  EnumWithGoodAndOpaqueWithoutOptionTwinRustAsync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncImpl
        .frbInternalSseDecode(
            sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  EnumWithGoodAndOpaqueWithoutOptionTwinSync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EnumWithGoodAndOpaqueWithoutOptionTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ItemContainerSolutionOneTwinNormal
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerItemContainerSolutionOneTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ItemContainerSolutionOneTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LtOwnedStructTwinNormal
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtOwnedStructTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LtOwnedStructTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LtOwnedStructTwinSync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtOwnedStructTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LtOwnedStructTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LtSubStructTwinNormal
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtSubStructTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LtSubStructTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LtSubStructTwinSync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtSubStructTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LtSubStructTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MyAudioParamTwinNormal
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyAudioParamTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MyAudioParamTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MyImplTraitWithSelfTwinNormal
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyImplTraitWithSelfTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MyImplTraitWithSelfTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MyImplTraitWithSelfTwinSync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyImplTraitWithSelfTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MyImplTraitWithSelfTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MyNodeTwinNormal
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyNodeTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MyNodeTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MyStructWithTryFromTwinNormal
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyStructWithTryFromTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MyStructWithTryFromTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleEnumTwinNormal
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneSimpleEnumTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleEnumTwinRustAsync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneSimpleEnumTwinRustAsyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleEnumTwinSync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneSimpleEnumTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinNormal
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneSimpleTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinRustAsync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneSimpleTwinRustAsyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinSync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneSimpleTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueItemTwinNormal
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueItemTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OpaqueItemTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueOneTwinNormal
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OpaqueOneTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueOneTwinRustAsync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OpaqueOneTwinRustAsyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueOneTwinSync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OpaqueOneTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueStructWithDartCodeTwinNormal
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueStructWithDartCodeTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OpaqueStructWithDartCodeTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueTwoTwinNormal
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OpaqueTwoTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueTwoTwinRustAsync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OpaqueTwoTwinRustAsyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueTwoTwinSync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OpaqueTwoTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SimpleLogger
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSimpleLogger(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SimpleLoggerImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SimpleOpaqueExternalStructWithMethod
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSimpleOpaqueExternalStructWithMethod(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SimpleOpaqueExternalStructWithMethodImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StaticGetterOnlyTwinNormal
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StaticGetterOnlyTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StaticGetterOnlyTwinRustAsync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StaticGetterOnlyTwinRustAsyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StaticGetterOnlyTwinSync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StaticGetterOnlyTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructInMiscNoTwinExampleA
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleA(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructInMiscNoTwinExampleAImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructInMiscNoTwinExampleB
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleB(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructInMiscNoTwinExampleBImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructOneWithTraitForDynTwinNormal
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitForDynTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructOneWithTraitForDynTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructOneWithTraitTwinNormal
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructOneWithTraitTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructOneWithTraitTwinSync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructOneWithTraitTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructTwoWithTraitForDynTwinNormal
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitForDynTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructTwoWithTraitForDynTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructTwoWithTraitTwinNormal
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructTwoWithTraitTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructTwoWithTraitTwinSync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructTwoWithTraitTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructWithGoodAndOpaqueFieldWithoutOptionTwinNormalImpl
        .frbInternalSseDecode(
            sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncImpl
        .frbInternalSseDecode(
            sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldWithoutOptionTwinSync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructWithGoodAndOpaqueFieldWithoutOptionTwinSyncImpl
        .frbInternalSseDecode(
            sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithImplBlockInMultiFile
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithImplBlockInMultiFile(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructWithImplBlockInMultiFileImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithRustAutoOpaqueFieldWithManyDeriveInner
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithRustAutoOpaqueFieldWithManyDeriveInner(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructWithRustAutoOpaqueFieldWithManyDeriveInnerImpl
        .frbInternalSseDecode(
            sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithSimpleSetterTwinNormal
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithSimpleSetterTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructWithSimpleSetterTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  TypeForIgnore
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTypeForIgnore(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TypeForIgnoreImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  TypeForIgnoreAll
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTypeForIgnoreAll(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TypeForIgnoreAllImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ConstructorOpaqueStructTwinNormal
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueStructTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConstructorOpaqueStructTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ConstructorOpaqueSyncStructTwinNormal
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueSyncStructTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConstructorOpaqueSyncStructTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DeliberateFailSanityCheckTwinNormal
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDeliberateFailSanityCheckTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DeliberateFailSanityCheckTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DroppableTwinNormal
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DroppableTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DroppableTwinRustAsync
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DroppableTwinRustAsyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DroppableTwinSync
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DroppableTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ItemContainerSolutionOneTwinNormal
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerItemContainerSolutionOneTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ItemContainerSolutionOneTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LtSubStructTwinNormal
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtSubStructTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LtSubStructTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LtSubStructTwinSync
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtSubStructTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LtSubStructTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinNormal
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneSimpleTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinRustAsync
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneSimpleTwinRustAsyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinSync
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneSimpleTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructOneWithTraitForDynTwinNormal
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitForDynTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructOneWithTraitForDynTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructOneWithTraitTwinNormal
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructOneWithTraitTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructOneWithTraitTwinSync
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructOneWithTraitTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructTwoWithTraitForDynTwinNormal
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitForDynTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructTwoWithTraitForDynTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructTwoWithTraitTwinNormal
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructTwoWithTraitTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructTwoWithTraitTwinSync
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructTwoWithTraitTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructWithGoodAndOpaqueFieldWithoutOptionTwinNormalImpl
        .frbInternalSseDecode(
            sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncImpl
        .frbInternalSseDecode(
            sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldWithoutOptionTwinSync
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructWithGoodAndOpaqueFieldWithoutOptionTwinSyncImpl
        .frbInternalSseDecode(
            sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithSimpleSetterTwinNormal
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithSimpleSetterTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructWithSimpleSetterTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  TypeForIgnoreAll
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTypeForIgnoreAll(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TypeForIgnoreAllImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ConstructorOpaqueStructTwinNormal
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueStructTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConstructorOpaqueStructTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ConstructorOpaqueSyncStructTwinNormal
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueSyncStructTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConstructorOpaqueSyncStructTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DeliberateFailSanityCheckTwinNormal
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDeliberateFailSanityCheckTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DeliberateFailSanityCheckTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DroppableTwinNormal
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DroppableTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DroppableTwinRustAsync
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DroppableTwinRustAsyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DroppableTwinSync
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DroppableTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ItemContainerSolutionOneTwinNormal
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerItemContainerSolutionOneTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ItemContainerSolutionOneTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LtOwnedStructTwinNormal
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtOwnedStructTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LtOwnedStructTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LtOwnedStructTwinSync
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtOwnedStructTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LtOwnedStructTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LtSubStructTwinNormal
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtSubStructTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LtSubStructTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LtSubStructTwinSync
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtSubStructTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LtSubStructTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MyAudioParamTwinNormal
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyAudioParamTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MyAudioParamTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MyImplTraitWithSelfTwinNormal
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyImplTraitWithSelfTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MyImplTraitWithSelfTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MyImplTraitWithSelfTwinSync
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyImplTraitWithSelfTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MyImplTraitWithSelfTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MyNodeTwinNormal
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyNodeTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MyNodeTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MyStructWithTryFromTwinNormal
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyStructWithTryFromTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MyStructWithTryFromTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleEnumTwinNormal
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneSimpleEnumTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleEnumTwinRustAsync
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneSimpleEnumTwinRustAsyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleEnumTwinSync
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneSimpleEnumTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinNormal
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneSimpleTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinRustAsync
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneSimpleTwinRustAsyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinSync
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneSimpleTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueStructWithDartCodeTwinNormal
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueStructWithDartCodeTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OpaqueStructWithDartCodeTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SimpleLogger
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSimpleLogger(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SimpleLoggerImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SimpleOpaqueExternalStructWithMethod
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSimpleOpaqueExternalStructWithMethod(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SimpleOpaqueExternalStructWithMethodImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructInMiscNoTwinExampleA
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleA(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructInMiscNoTwinExampleAImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructInMiscNoTwinExampleB
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleB(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructInMiscNoTwinExampleBImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructOneWithTraitForDynTwinNormal
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitForDynTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructOneWithTraitForDynTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructOneWithTraitTwinNormal
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructOneWithTraitTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructOneWithTraitTwinSync
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructOneWithTraitTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructTwoWithTraitForDynTwinNormal
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitForDynTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructTwoWithTraitForDynTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructTwoWithTraitTwinNormal
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructTwoWithTraitTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructTwoWithTraitTwinSync
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructTwoWithTraitTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructWithGoodAndOpaqueFieldWithoutOptionTwinNormalImpl
        .frbInternalSseDecode(
            sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncImpl
        .frbInternalSseDecode(
            sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldWithoutOptionTwinSync
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructWithGoodAndOpaqueFieldWithoutOptionTwinSyncImpl
        .frbInternalSseDecode(
            sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithImplBlockInMultiFile
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithImplBlockInMultiFile(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructWithImplBlockInMultiFileImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithSimpleSetterTwinNormal
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithSimpleSetterTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructWithSimpleSetterTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  TypeForIgnore
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTypeForIgnore(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TypeForIgnoreImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  TypeForIgnoreAll
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTypeForIgnoreAll(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TypeForIgnoreAllImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_Backtrace(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return inner;
  }

  @protected
  int sse_decode_CastedPrimitive_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_64(deserializer);
    return inner.toInt();
  }

  @protected
  int sse_decode_CastedPrimitive_isize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_isize(deserializer);
    return inner.toInt();
  }

  @protected
  int sse_decode_CastedPrimitive_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_u_64(deserializer);
    return inner.toInt();
  }

  @protected
  int sse_decode_CastedPrimitive_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_usize(deserializer);
    return inner.toInt();
  }

  @protected
  String sse_decode_Char(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return inner;
  }

  @protected
  Duration sse_decode_Chrono_Duration(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_64(deserializer);
    return Duration(microseconds: inner.toInt());
  }

  @protected
  DateTime sse_decode_Chrono_Local(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_64(deserializer);
    return DateTime.fromMicrosecondsSinceEpoch(inner.toInt(), isUtc: false);
  }

  @protected
  DateTime sse_decode_Chrono_Naive(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_64(deserializer);
    return DateTime.fromMicrosecondsSinceEpoch(inner.toInt(), isUtc: true);
  }

  @protected
  DateTime sse_decode_Chrono_Utc(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_64(deserializer);
    return DateTime.fromMicrosecondsSinceEpoch(inner.toInt(), isUtc: true);
  }

  @protected
  InternetAddress
      sse_decode_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIpv4Addr(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return InternetAddress(inner);
  }

  @protected
  int sse_decode_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageWithCustomSerializerTwinNormal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return int.parse(inner);
  }

  @protected
  Object sse_decode_DartOpaque(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_isize(deserializer);
    return decodeDartOpaque(inner, generalizedFrbRustBinding);
  }

  @protected
  ObjectArray1 sse_decode_DartOpaque_array_1(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_DartOpaque(deserializer);
    return ObjectArray1(inner);
  }

  @protected
  SimpleTraitForDynTwinNormal sse_decode_DynTrait_SimpleTraitForDynTwinNormal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  BigInt sse_decode_I128(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return BigInt.parse(inner);
  }

  @protected
  LtNestedTypeWithLifetimeTwinNormal
      sse_decode_Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtNestedTypeWithLifetimeTwinNormalstatic(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtNestedTypeWithLifetimeTwinNormalstatic(
            deserializer);
    return inner;
  }

  @protected
  LtNestedTypeWithLifetimeTwinSync
      sse_decode_Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtNestedTypeWithLifetimeTwinSyncstatic(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtNestedTypeWithLifetimeTwinSyncstatic(
            deserializer);
    return inner;
  }

  @protected
  LtTypeWithLifetimeTwinNormal
      sse_decode_Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithLifetimeTwinNormalstatic(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithLifetimeTwinNormalstatic(
            deserializer);
    return inner;
  }

  @protected
  LtTypeWithLifetimeTwinSync
      sse_decode_Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithLifetimeTwinSyncstatic(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithLifetimeTwinSyncstatic(
            deserializer);
    return inner;
  }

  @protected
  LtTypeWithMultiDepTwinNormal
      sse_decode_Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithMultiDepTwinNormalstatic(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithMultiDepTwinNormalstatic(
            deserializer);
    return inner;
  }

  @protected
  LtTypeWithMultiDepTwinSync
      sse_decode_Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithMultiDepTwinSyncstatic(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithMultiDepTwinSyncstatic(
            deserializer);
    return inner;
  }

  @protected
  LtNestedTypeWithLifetimeTwinNormal
      sse_decode_Lifetimeable_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtNestedTypeWithLifetimeTwinNormalstatic(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtNestedTypeWithLifetimeTwinNormalstatic(
            deserializer);
    return inner;
  }

  @protected
  LtNestedTypeWithLifetimeTwinSync
      sse_decode_Lifetimeable_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtNestedTypeWithLifetimeTwinSyncstatic(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtNestedTypeWithLifetimeTwinSyncstatic(
            deserializer);
    return inner;
  }

  @protected
  LtTypeWithLifetimeTwinNormal
      sse_decode_Lifetimeable_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithLifetimeTwinNormalstatic(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithLifetimeTwinNormalstatic(
            deserializer);
    return inner;
  }

  @protected
  LtTypeWithLifetimeTwinSync
      sse_decode_Lifetimeable_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithLifetimeTwinSyncstatic(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithLifetimeTwinSyncstatic(
            deserializer);
    return inner;
  }

  @protected
  LtTypeWithMultiDepTwinNormal
      sse_decode_Lifetimeable_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithMultiDepTwinNormalstatic(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithMultiDepTwinNormalstatic(
            deserializer);
    return inner;
  }

  @protected
  LtTypeWithMultiDepTwinSync
      sse_decode_Lifetimeable_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithMultiDepTwinSyncstatic(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithMultiDepTwinSyncstatic(
            deserializer);
    return inner;
  }

  @protected
  Map<String, String>
      sse_decode_Map_String_String_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_string(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, String>
      sse_decode_Map_String_String_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_string(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, String>
      sse_decode_Map_String_String_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_string(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, String> sse_decode_Map_String_String_None(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_string(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, EnumSimpleTwinNormal>
      sse_decode_Map_String_enum_simple_twin_normal_None(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_list_record_string_enum_simple_twin_normal(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, EnumSimpleTwinRustAsync>
      sse_decode_Map_String_enum_simple_twin_rust_async_None(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_list_record_string_enum_simple_twin_rust_async(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, EnumSimpleTwinSync>
      sse_decode_Map_String_enum_simple_twin_sync_None(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_list_record_string_enum_simple_twin_sync(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, HashMapValue> sse_decode_Map_String_hash_map_value_None(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_hash_map_value(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, KitchenSinkTwinNormal>
      sse_decode_Map_String_kitchen_sink_twin_normal_None(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_list_record_string_kitchen_sink_twin_normal(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, KitchenSinkTwinRustAsync>
      sse_decode_Map_String_kitchen_sink_twin_rust_async_None(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_kitchen_sink_twin_rust_async(
        deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, KitchenSinkTwinSync>
      sse_decode_Map_String_kitchen_sink_twin_sync_None(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_list_record_string_kitchen_sink_twin_sync(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, Uint8List> sse_decode_Map_String_list_prim_u_8_strict_None(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_list_record_string_list_prim_u_8_strict(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, MySize> sse_decode_Map_String_my_size_None(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_my_size(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BigInt> sse_decode_Map_i_32_I128_None(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_i_32_i_128(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, String> sse_decode_Map_i_32_String_None(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_i_32_string(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BigInt> sse_decode_Map_i_32_U128_None(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_i_32_u_128(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BasicGeneralEnumTwinNormal>
      sse_decode_Map_i_32_basic_general_enum_twin_normal_None(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_i_32_basic_general_enum_twin_normal(
        deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BasicGeneralEnumTwinRustAsync>
      sse_decode_Map_i_32_basic_general_enum_twin_rust_async_None(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_i_32_basic_general_enum_twin_rust_async(
        deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BasicGeneralEnumTwinSync>
      sse_decode_Map_i_32_basic_general_enum_twin_sync_None(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_list_record_i_32_basic_general_enum_twin_sync(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BasicPrimitiveEnumTwinNormal>
      sse_decode_Map_i_32_basic_primitive_enum_twin_normal_None(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_i_32_basic_primitive_enum_twin_normal(
        deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BasicPrimitiveEnumTwinRustAsync>
      sse_decode_Map_i_32_basic_primitive_enum_twin_rust_async_None(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_list_record_i_32_basic_primitive_enum_twin_rust_async(
            deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BasicPrimitiveEnumTwinSync>
      sse_decode_Map_i_32_basic_primitive_enum_twin_sync_None(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_i_32_basic_primitive_enum_twin_sync(
        deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BasicStructTwinNormal>
      sse_decode_Map_i_32_basic_struct_twin_normal_None(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_list_record_i_32_basic_struct_twin_normal(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BasicStructTwinRustAsync>
      sse_decode_Map_i_32_basic_struct_twin_rust_async_None(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_list_record_i_32_basic_struct_twin_rust_async(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BasicStructTwinSync> sse_decode_Map_i_32_basic_struct_twin_sync_None(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_list_record_i_32_basic_struct_twin_sync(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, bool> sse_decode_Map_i_32_bool_None(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_i_32_bool(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, double> sse_decode_Map_i_32_f_32_None(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_i_32_f_32(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, double> sse_decode_Map_i_32_f_64_None(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_i_32_f_64(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, int> sse_decode_Map_i_32_i_16_None(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_i_32_i_16(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, int> sse_decode_Map_i_32_i_32_None(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_i_32_i_32(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, PlatformInt64> sse_decode_Map_i_32_i_64_None(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_i_32_i_64(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, int> sse_decode_Map_i_32_i_8_None(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_i_32_i_8(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, PlatformInt64> sse_decode_Map_i_32_isize_None(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_i_32_isize(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, Uint8List> sse_decode_Map_i_32_list_prim_u_8_strict_None(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_i_32_list_prim_u_8_strict(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, int> sse_decode_Map_i_32_u_16_None(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_i_32_u_16(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, int> sse_decode_Map_i_32_u_32_None(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_i_32_u_32(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BigInt> sse_decode_Map_i_32_u_64_None(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_i_32_u_64(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, int> sse_decode_Map_i_32_u_8_None(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_i_32_u_8(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BigInt> sse_decode_Map_i_32_usize_None(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_i_32_usize(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, ApplicationMode> sse_decode_Map_u_8_application_mode_None(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_u_8_application_mode(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  MyAudioParamTwinNormal
      sse_decode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_my_audio_param_twin_normal_proxy_enum(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  MyAudioParamTwinNormal
      sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyNodeTwinNormal_param_one_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  MyAudioParamTwinNormal
      sse_decode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyNodeTwinNormal_param_two_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  BoxDartDebugTwinNormal sse_decode_RustOpaque_BoxdynDartDebugTwinNormal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BoxDartDebugTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxDartDebugTwinRustAsync sse_decode_RustOpaque_BoxdynDartDebugTwinRustAsync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BoxDartDebugTwinRustAsyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxDartDebugTwinSync sse_decode_RustOpaque_BoxdynDartDebugTwinSync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BoxDartDebugTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbOpaqueReturnTwinNormal sse_decode_RustOpaque_FrbOpaqueReturnTwinNormal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbOpaqueReturnTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbOpaqueReturnTwinRustAsync
      sse_decode_RustOpaque_FrbOpaqueReturnTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbOpaqueReturnTwinRustAsyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbOpaqueReturnTwinSync sse_decode_RustOpaque_FrbOpaqueReturnTwinSync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbOpaqueReturnTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbOpaqueSyncReturnTwinNormal
      sse_decode_RustOpaque_FrbOpaqueSyncReturnTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbOpaqueSyncReturnTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  HideDataAnotherTwinNormal sse_decode_RustOpaque_HideDataAnotherTwinNormal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return HideDataAnotherTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  HideDataTwinNormal sse_decode_RustOpaque_HideDataTwinNormal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return HideDataTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  HideDataTwinNormalArray2 sse_decode_RustOpaque_HideDataTwinNormal_array_2(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_RustOpaque_HideDataTwinNormal(deserializer);
    return HideDataTwinNormalArray2(inner);
  }

  @protected
  HideDataTwinRustAsync sse_decode_RustOpaque_HideDataTwinRustAsync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return HideDataTwinRustAsyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  HideDataTwinRustAsyncArray2
      sse_decode_RustOpaque_HideDataTwinRustAsync_array_2(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_RustOpaque_HideDataTwinRustAsync(deserializer);
    return HideDataTwinRustAsyncArray2(inner);
  }

  @protected
  HideDataTwinSync sse_decode_RustOpaque_HideDataTwinSync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return HideDataTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  HideDataTwinSyncArray2 sse_decode_RustOpaque_HideDataTwinSync_array_2(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_RustOpaque_HideDataTwinSync(deserializer);
    return HideDataTwinSyncArray2(inner);
  }

  @protected
  MutexHideDataTwinNormal sse_decode_RustOpaque_MutexHideDataTwinNormal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MutexHideDataTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MutexHideDataTwinRustAsync sse_decode_RustOpaque_MutexHideDataTwinRustAsync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MutexHideDataTwinRustAsyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MutexHideDataTwinSync sse_decode_RustOpaque_MutexHideDataTwinSync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MutexHideDataTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneDataTwinNormal sse_decode_RustOpaque_NonCloneDataTwinNormal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneDataTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneDataTwinRustAsync sse_decode_RustOpaque_NonCloneDataTwinRustAsync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneDataTwinRustAsyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneDataTwinSync sse_decode_RustOpaque_NonCloneDataTwinSync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneDataTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RwLockHideDataTwinNormal sse_decode_RustOpaque_RwLockHideDataTwinNormal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RwLockHideDataTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RwLockHideDataTwinRustAsync sse_decode_RustOpaque_RwLockHideDataTwinRustAsync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RwLockHideDataTwinRustAsyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RwLockHideDataTwinSync sse_decode_RustOpaque_RwLockHideDataTwinSync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RwLockHideDataTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxAnyMyDartTypeRename
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynAnySendSyncstatic(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BoxAnyMyDartTypeRenameImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxFnStringString
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynFnStringStringSendSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BoxFnStringStringImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxMyTraitTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinNormalSendSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BoxMyTraitTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxMyTraitTwinRustAsync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinRustAsyncSendSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BoxMyTraitTwinRustAsyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxMyTraitTwinSync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinSyncSendSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BoxMyTraitTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ConstructorOpaqueStructTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueStructTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConstructorOpaqueStructTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ConstructorOpaqueSyncStructTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueSyncStructTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConstructorOpaqueSyncStructTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  CustomHasherTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CustomHasherTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  CustomHasherTwinRustAsync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CustomHasherTwinRustAsyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  CustomHasherTwinSync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CustomHasherTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DeliberateFailSanityCheckTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDeliberateFailSanityCheckTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DeliberateFailSanityCheckTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DroppableTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DroppableTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DroppableTwinRustAsync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DroppableTwinRustAsyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DroppableTwinSync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DroppableTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  EnumWithGoodAndOpaqueWithoutOptionTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EnumWithGoodAndOpaqueWithoutOptionTwinNormalImpl
        .frbInternalSseDecode(
            sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  EnumWithGoodAndOpaqueWithoutOptionTwinRustAsync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncImpl
        .frbInternalSseDecode(
            sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  EnumWithGoodAndOpaqueWithoutOptionTwinSync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EnumWithGoodAndOpaqueWithoutOptionTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ItemContainerSolutionOneTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerItemContainerSolutionOneTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ItemContainerSolutionOneTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LtNestedTypeWithLifetimeTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtNestedTypeWithLifetimeTwinNormalstatic(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LtNestedTypeWithLifetimeTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LtNestedTypeWithLifetimeTwinSync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtNestedTypeWithLifetimeTwinSyncstatic(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LtNestedTypeWithLifetimeTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LtTypeWithLifetimeTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithLifetimeTwinNormalstatic(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LtTypeWithLifetimeTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LtTypeWithLifetimeTwinSync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithLifetimeTwinSyncstatic(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LtTypeWithLifetimeTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LtTypeWithMultiDepTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithMultiDepTwinNormalstatic(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LtTypeWithMultiDepTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LtTypeWithMultiDepTwinSync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithMultiDepTwinSyncstatic(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LtTypeWithMultiDepTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LtOwnedStructTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtOwnedStructTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LtOwnedStructTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LtOwnedStructTwinSync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtOwnedStructTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LtOwnedStructTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LtSubStructTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtSubStructTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LtSubStructTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LtSubStructTwinSync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtSubStructTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LtSubStructTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MyAudioParamTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyAudioParamTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MyAudioParamTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MyImplTraitWithSelfTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyImplTraitWithSelfTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MyImplTraitWithSelfTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MyImplTraitWithSelfTwinSync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyImplTraitWithSelfTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MyImplTraitWithSelfTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MyNodeTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyNodeTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MyNodeTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MyStructWithTryFromTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyStructWithTryFromTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MyStructWithTryFromTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneDataRaw
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneDataRaw(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneDataRawImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleEnumTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneSimpleEnumTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleEnumTwinRustAsync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneSimpleEnumTwinRustAsyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleEnumTwinSync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneSimpleEnumTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneSimpleTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinRustAsync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneSimpleTwinRustAsyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinSync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneSimpleTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueItemTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueItemTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OpaqueItemTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueOneTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OpaqueOneTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueOneTwinRustAsync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OpaqueOneTwinRustAsyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueOneTwinSync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OpaqueOneTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueStructWithDartCodeTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueStructWithDartCodeTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OpaqueStructWithDartCodeTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueTwoTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OpaqueTwoTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueTwoTwinRustAsync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OpaqueTwoTwinRustAsyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueTwoTwinSync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OpaqueTwoTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SimpleLogger
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSimpleLogger(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SimpleLoggerImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SimpleOpaqueExternalStructWithMethod
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSimpleOpaqueExternalStructWithMethod(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SimpleOpaqueExternalStructWithMethodImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StaticGetterOnlyTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StaticGetterOnlyTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StaticGetterOnlyTwinRustAsync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StaticGetterOnlyTwinRustAsyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StaticGetterOnlyTwinSync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StaticGetterOnlyTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructInMiscNoTwinExampleA
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleA(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructInMiscNoTwinExampleAImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructInMiscNoTwinExampleB
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleB(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructInMiscNoTwinExampleBImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructOneWithTraitForDynTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitForDynTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructOneWithTraitForDynTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructOneWithTraitTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructOneWithTraitTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructOneWithTraitTwinSync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructOneWithTraitTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructTwoWithTraitForDynTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitForDynTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructTwoWithTraitForDynTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructTwoWithTraitTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructTwoWithTraitTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructTwoWithTraitTwinSync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructTwoWithTraitTwinSyncImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructWithGoodAndOpaqueFieldWithoutOptionTwinNormalImpl
        .frbInternalSseDecode(
            sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncImpl
        .frbInternalSseDecode(
            sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldWithoutOptionTwinSync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructWithGoodAndOpaqueFieldWithoutOptionTwinSyncImpl
        .frbInternalSseDecode(
            sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithImplBlockInMultiFile
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithImplBlockInMultiFile(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructWithImplBlockInMultiFileImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithRustAutoOpaqueFieldWithManyDeriveInner
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithRustAutoOpaqueFieldWithManyDeriveInner(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructWithRustAutoOpaqueFieldWithManyDeriveInnerImpl
        .frbInternalSseDecode(
            sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithSimpleSetterTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithSimpleSetterTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructWithSimpleSetterTwinNormalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  TypeForIgnore
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTypeForIgnore(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TypeForIgnoreImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  TypeForIgnoreAll
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTypeForIgnoreAll(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TypeForIgnoreAllImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  I32 sse_decode_RustOpaque_i32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return I32Impl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Set<String>
      sse_decode_Set_String_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_String(deserializer);
    return Set.from(inner);
  }

  @protected
  Set<String>
      sse_decode_Set_String_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_String(deserializer);
    return Set.from(inner);
  }

  @protected
  Set<String>
      sse_decode_Set_String_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_String(deserializer);
    return Set.from(inner);
  }

  @protected
  Set<String> sse_decode_Set_String_None(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_String(deserializer);
    return Set.from(inner);
  }

  @protected
  Set<ApplicationMode> sse_decode_Set_application_mode_None(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_application_mode(deserializer);
    return Set.from(inner);
  }

  @protected
  Set<int> sse_decode_Set_i_32_None(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_i_32_strict(deserializer);
    return Set.from(inner);
  }

  @protected
  RustStreamSink<NonCloneSimpleTwinNormal>
      sse_decode_StreamSink_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<NonCloneSimpleTwinRustAsync>
      sse_decode_StreamSink_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<NonCloneSimpleTwinSync>
      sse_decode_StreamSink_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<Map<int, ApplicationMode>>
      sse_decode_StreamSink_Map_u_8_application_mode_None_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<Set<ApplicationMode>>
      sse_decode_StreamSink_Set_application_mode_None_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<String> sse_decode_StreamSink_String_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<ApplicationMode> sse_decode_StreamSink_application_mode_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<ApplicationModeArray2>
      sse_decode_StreamSink_application_mode_array_2_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<ApplicationSettings>
      sse_decode_StreamSink_application_settings_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<EventTwinNormal> sse_decode_StreamSink_event_twin_normal_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<EventTwinRustAsync>
      sse_decode_StreamSink_event_twin_rust_async_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<int> sse_decode_StreamSink_i_32_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<List<ApplicationMode>>
      sse_decode_StreamSink_list_application_mode_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<List<ApplicationSettings>>
      sse_decode_StreamSink_list_application_settings_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<Log2TwinNormal> sse_decode_StreamSink_log_2_twin_normal_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<Log2TwinRustAsync>
      sse_decode_StreamSink_log_2_twin_rust_async_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<Log2TwinSync> sse_decode_StreamSink_log_2_twin_sync_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<LogTwinNormal> sse_decode_StreamSink_log_twin_normal_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<LogTwinRustAsync>
      sse_decode_StreamSink_log_twin_rust_async_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<MirrorStructTwinNormal>
      sse_decode_StreamSink_mirror_struct_twin_normal_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<MirrorStructTwinRustAsync>
      sse_decode_StreamSink_mirror_struct_twin_rust_async_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<MirrorStructTwinSync>
      sse_decode_StreamSink_mirror_struct_twin_sync_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<MyStreamEntryTwinNormal>
      sse_decode_StreamSink_my_stream_entry_twin_normal_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<MyStreamEntryTwinRustAsync>
      sse_decode_StreamSink_my_stream_entry_twin_rust_async_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<ApplicationMode?>
      sse_decode_StreamSink_opt_box_autoadd_application_mode_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<(ApplicationSettings, RawStringEnumMirrored)>
      sse_decode_StreamSink_record_application_settings_raw_string_enum_mirrored_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<int> sse_decode_StreamSink_u_32_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<U8Array2> sse_decode_StreamSink_u_8_array_2_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  BigInt sse_decode_U128(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return BigInt.parse(inner);
  }

  @protected
  UuidValue sse_decode_Uuid(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return UuidValue.fromByteList(inner);
  }

  @protected
  ATwinNormal sse_decode_a_twin_normal(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_String(deserializer);
    return ATwinNormal(a: var_a);
  }

  @protected
  ATwinRustAsync sse_decode_a_twin_rust_async(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_String(deserializer);
    return ATwinRustAsync(a: var_a);
  }

  @protected
  ATwinSync sse_decode_a_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_String(deserializer);
    return ATwinSync(a: var_a);
  }

  @protected
  AbcTwinNormal sse_decode_abc_twin_normal(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_autoadd_a_twin_normal(deserializer);
        return AbcTwinNormal_A(var_field0);
      case 1:
        var var_field0 = sse_decode_box_autoadd_b_twin_normal(deserializer);
        return AbcTwinNormal_B(var_field0);
      case 2:
        var var_field0 = sse_decode_box_autoadd_c_twin_normal(deserializer);
        return AbcTwinNormal_C(var_field0);
      case 3:
        var var_field0 = sse_decode_i_32(deserializer);
        return AbcTwinNormal_JustInt(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  AbcTwinRustAsync sse_decode_abc_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_autoadd_a_twin_rust_async(deserializer);
        return AbcTwinRustAsync_A(var_field0);
      case 1:
        var var_field0 = sse_decode_box_autoadd_b_twin_rust_async(deserializer);
        return AbcTwinRustAsync_B(var_field0);
      case 2:
        var var_field0 = sse_decode_box_autoadd_c_twin_rust_async(deserializer);
        return AbcTwinRustAsync_C(var_field0);
      case 3:
        var var_field0 = sse_decode_i_32(deserializer);
        return AbcTwinRustAsync_JustInt(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  AbcTwinSync sse_decode_abc_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_autoadd_a_twin_sync(deserializer);
        return AbcTwinSync_A(var_field0);
      case 1:
        var var_field0 = sse_decode_box_autoadd_b_twin_sync(deserializer);
        return AbcTwinSync_B(var_field0);
      case 2:
        var var_field0 = sse_decode_box_autoadd_c_twin_sync(deserializer);
        return AbcTwinSync_C(var_field0);
      case 3:
        var var_field0 = sse_decode_i_32(deserializer);
        return AbcTwinSync_JustInt(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  AnotherMacroStructTwinNormal sse_decode_another_macro_struct_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_data = sse_decode_i_32(deserializer);
    var var_nonFinalData = sse_decode_i_32(deserializer);
    return AnotherMacroStructTwinNormal(
        data: var_data, nonFinalData: var_nonFinalData);
  }

  @protected
  AnotherTwinNormal sse_decode_another_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_String(deserializer);
    return AnotherTwinNormal(a: var_a);
  }

  @protected
  AnotherTwinRustAsync sse_decode_another_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_String(deserializer);
    return AnotherTwinRustAsync(a: var_a);
  }

  @protected
  AnotherTwinSync sse_decode_another_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_String(deserializer);
    return AnotherTwinSync(a: var_a);
  }

  @protected
  ApplicationEnv sse_decode_application_env(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_vars = sse_decode_list_application_env_var(deserializer);
    return ApplicationEnv(vars: var_vars);
  }

  @protected
  ApplicationEnvVar sse_decode_application_env_var(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_bool(deserializer);
    return ApplicationEnvVar(field0: var_field0, field1: var_field1);
  }

  @protected
  ApplicationMessage sse_decode_application_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return ApplicationMessage_DisplayMessage(var_field0);
      case 1:
        var var_x = sse_decode_i_32(deserializer);
        var var_y = sse_decode_i_32(deserializer);
        return ApplicationMessage_RenderPixel(x: var_x, y: var_y);
      case 2:
        return ApplicationMessage_Exit();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  ApplicationMode sse_decode_application_mode(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return ApplicationMode.values[inner];
  }

  @protected
  ApplicationModeArray2 sse_decode_application_mode_array_2(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_application_mode(deserializer);
    return ApplicationModeArray2(inner);
  }

  @protected
  ApplicationSettings sse_decode_application_settings(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_version = sse_decode_String(deserializer);
    var var_mode = sse_decode_application_mode(deserializer);
    var var_env = sse_decode_box_application_env(deserializer);
    var var_envOptional =
        sse_decode_opt_box_autoadd_application_env(deserializer);
    return ApplicationSettings(
        name: var_name,
        version: var_version,
        mode: var_mode,
        env: var_env,
        envOptional: var_envOptional);
  }

  @protected
  AttributeTwinNormal sse_decode_attribute_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_key = sse_decode_String(deserializer);
    var var_value = sse_decode_String(deserializer);
    return AttributeTwinNormal(key: var_key, value: var_value);
  }

  @protected
  AttributeTwinRustAsync sse_decode_attribute_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_key = sse_decode_String(deserializer);
    var var_value = sse_decode_String(deserializer);
    return AttributeTwinRustAsync(key: var_key, value: var_value);
  }

  @protected
  AttributeTwinSync sse_decode_attribute_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_key = sse_decode_String(deserializer);
    var var_value = sse_decode_String(deserializer);
    return AttributeTwinSync(key: var_key, value: var_value);
  }

  @protected
  Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyAudioParamTwinNormalProxyEnum
      sse_decode_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_my_audio_param_twin_normal_proxy_enum(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 =
            sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyNodeTwinNormal(
                deserializer);
        return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyAudioParamTwinNormalProxyEnum_Variant0(
            var_field0);
      case 1:
        var var_field0 =
            sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyNodeTwinNormal(
                deserializer);
        return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyAudioParamTwinNormalProxyEnum_Variant1(
            var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  BTwinNormal sse_decode_b_twin_normal(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_b = sse_decode_i_32(deserializer);
    return BTwinNormal(b: var_b);
  }

  @protected
  BTwinRustAsync sse_decode_b_twin_rust_async(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_b = sse_decode_i_32(deserializer);
    return BTwinRustAsync(b: var_b);
  }

  @protected
  BTwinSync sse_decode_b_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_b = sse_decode_i_32(deserializer);
    return BTwinSync(b: var_b);
  }

  @protected
  BasicGeneralEnumTwinNormal sse_decode_basic_general_enum_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field = sse_decode_String(deserializer);
        return BasicGeneralEnumTwinNormal_Apple(field: var_field);
      case 1:
        return BasicGeneralEnumTwinNormal_Orange();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  BasicGeneralEnumTwinRustAsync sse_decode_basic_general_enum_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field = sse_decode_String(deserializer);
        return BasicGeneralEnumTwinRustAsync_Apple(field: var_field);
      case 1:
        return BasicGeneralEnumTwinRustAsync_Orange();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  BasicGeneralEnumTwinSync sse_decode_basic_general_enum_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field = sse_decode_String(deserializer);
        return BasicGeneralEnumTwinSync_Apple(field: var_field);
      case 1:
        return BasicGeneralEnumTwinSync_Orange();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  BasicPrimitiveEnumTwinNormal sse_decode_basic_primitive_enum_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return BasicPrimitiveEnumTwinNormal.values[inner];
  }

  @protected
  BasicPrimitiveEnumTwinRustAsync
      sse_decode_basic_primitive_enum_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return BasicPrimitiveEnumTwinRustAsync.values[inner];
  }

  @protected
  BasicPrimitiveEnumTwinSync sse_decode_basic_primitive_enum_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return BasicPrimitiveEnumTwinSync.values[inner];
  }

  @protected
  BasicStructTwinNormal sse_decode_basic_struct_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_apple = sse_decode_opt_String(deserializer);
    var var_orange = sse_decode_opt_box_autoadd_i_32(deserializer);
    return BasicStructTwinNormal(apple: var_apple, orange: var_orange);
  }

  @protected
  BasicStructTwinRustAsync sse_decode_basic_struct_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_apple = sse_decode_opt_String(deserializer);
    var var_orange = sse_decode_opt_box_autoadd_i_32(deserializer);
    return BasicStructTwinRustAsync(apple: var_apple, orange: var_orange);
  }

  @protected
  BasicStructTwinSync sse_decode_basic_struct_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_apple = sse_decode_opt_String(deserializer);
    var var_orange = sse_decode_opt_box_autoadd_i_32(deserializer);
    return BasicStructTwinSync(apple: var_apple, orange: var_orange);
  }

  @protected
  BenchmarkBinaryTreeTwinNormal sse_decode_benchmark_binary_tree_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_left =
        sse_decode_opt_box_benchmark_binary_tree_twin_normal(deserializer);
    var var_right =
        sse_decode_opt_box_benchmark_binary_tree_twin_normal(deserializer);
    return BenchmarkBinaryTreeTwinNormal(
        name: var_name, left: var_left, right: var_right);
  }

  @protected
  BenchmarkBinaryTreeTwinRustAsync
      sse_decode_benchmark_binary_tree_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_left =
        sse_decode_opt_box_benchmark_binary_tree_twin_rust_async(deserializer);
    var var_right =
        sse_decode_opt_box_benchmark_binary_tree_twin_rust_async(deserializer);
    return BenchmarkBinaryTreeTwinRustAsync(
        name: var_name, left: var_left, right: var_right);
  }

  @protected
  BenchmarkBinaryTreeTwinSync sse_decode_benchmark_binary_tree_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_left =
        sse_decode_opt_box_benchmark_binary_tree_twin_sync(deserializer);
    var var_right =
        sse_decode_opt_box_benchmark_binary_tree_twin_sync(deserializer);
    return BenchmarkBinaryTreeTwinSync(
        name: var_name, left: var_left, right: var_right);
  }

  @protected
  BenchmarkBlobTwinNormal sse_decode_benchmark_blob_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_first = sse_decode_list_prim_u_8_strict(deserializer);
    var var_second = sse_decode_list_prim_u_8_strict(deserializer);
    var var_third = sse_decode_list_prim_u_8_strict(deserializer);
    return BenchmarkBlobTwinNormal(
        first: var_first, second: var_second, third: var_third);
  }

  @protected
  BenchmarkBlobTwinRustAsync sse_decode_benchmark_blob_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_first = sse_decode_list_prim_u_8_strict(deserializer);
    var var_second = sse_decode_list_prim_u_8_strict(deserializer);
    var var_third = sse_decode_list_prim_u_8_strict(deserializer);
    return BenchmarkBlobTwinRustAsync(
        first: var_first, second: var_second, third: var_third);
  }

  @protected
  BenchmarkBlobTwinSync sse_decode_benchmark_blob_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_first = sse_decode_list_prim_u_8_strict(deserializer);
    var var_second = sse_decode_list_prim_u_8_strict(deserializer);
    var var_third = sse_decode_list_prim_u_8_strict(deserializer);
    return BenchmarkBlobTwinSync(
        first: var_first, second: var_second, third: var_third);
  }

  @protected
  BigBuffersTwinNormal sse_decode_big_buffers_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_int64 = sse_decode_list_prim_i_64_strict(deserializer);
    var var_uint64 = sse_decode_list_prim_u_64_strict(deserializer);
    return BigBuffersTwinNormal(int64: var_int64, uint64: var_uint64);
  }

  @protected
  BigBuffersTwinRustAsync sse_decode_big_buffers_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_int64 = sse_decode_list_prim_i_64_strict(deserializer);
    var var_uint64 = sse_decode_list_prim_u_64_strict(deserializer);
    return BigBuffersTwinRustAsync(int64: var_int64, uint64: var_uint64);
  }

  @protected
  BigBuffersTwinSync sse_decode_big_buffers_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_int64 = sse_decode_list_prim_i_64_strict(deserializer);
    var var_uint64 = sse_decode_list_prim_u_64_strict(deserializer);
    return BigBuffersTwinSync(int64: var_int64, uint64: var_uint64);
  }

  @protected
  BlobTwinNormal sse_decode_blob_twin_normal(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_u_8_array_1600(deserializer);
    return BlobTwinNormal(field0: var_field0);
  }

  @protected
  BlobTwinRustAsync sse_decode_blob_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_u_8_array_1600(deserializer);
    return BlobTwinRustAsync(field0: var_field0);
  }

  @protected
  BlobTwinSync sse_decode_blob_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_u_8_array_1600(deserializer);
    return BlobTwinSync(field0: var_field0);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  ApplicationEnv sse_decode_box_application_env(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_application_env(deserializer));
  }

  @protected
  NonCloneSimpleTwinNormal
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
        deserializer));
  }

  @protected
  NonCloneSimpleTwinRustAsync
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
        deserializer));
  }

  @protected
  NonCloneSimpleTwinSync
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
        deserializer));
  }

  @protected
  Duration sse_decode_box_autoadd_Chrono_Duration(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Chrono_Duration(deserializer));
  }

  @protected
  DateTime sse_decode_box_autoadd_Chrono_Naive(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Chrono_Naive(deserializer));
  }

  @protected
  DateTime sse_decode_box_autoadd_Chrono_Utc(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Chrono_Utc(deserializer));
  }

  @protected
  Object sse_decode_box_autoadd_DartOpaque(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_DartOpaque(deserializer));
  }

  @protected
  HideDataAnotherTwinNormal
      sse_decode_box_autoadd_RustOpaque_HideDataAnotherTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_RustOpaque_HideDataAnotherTwinNormal(deserializer));
  }

  @protected
  HideDataTwinNormal sse_decode_box_autoadd_RustOpaque_HideDataTwinNormal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_RustOpaque_HideDataTwinNormal(deserializer));
  }

  @protected
  HideDataTwinRustAsync sse_decode_box_autoadd_RustOpaque_HideDataTwinRustAsync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_RustOpaque_HideDataTwinRustAsync(deserializer));
  }

  @protected
  HideDataTwinSync sse_decode_box_autoadd_RustOpaque_HideDataTwinSync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_RustOpaque_HideDataTwinSync(deserializer));
  }

  @protected
  ATwinNormal sse_decode_box_autoadd_a_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_a_twin_normal(deserializer));
  }

  @protected
  ATwinRustAsync sse_decode_box_autoadd_a_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_a_twin_rust_async(deserializer));
  }

  @protected
  ATwinSync sse_decode_box_autoadd_a_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_a_twin_sync(deserializer));
  }

  @protected
  AbcTwinNormal sse_decode_box_autoadd_abc_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_abc_twin_normal(deserializer));
  }

  @protected
  AbcTwinRustAsync sse_decode_box_autoadd_abc_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_abc_twin_rust_async(deserializer));
  }

  @protected
  AbcTwinSync sse_decode_box_autoadd_abc_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_abc_twin_sync(deserializer));
  }

  @protected
  ApplicationEnv sse_decode_box_autoadd_application_env(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_application_env(deserializer));
  }

  @protected
  ApplicationMode sse_decode_box_autoadd_application_mode(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_application_mode(deserializer));
  }

  @protected
  ApplicationSettings sse_decode_box_autoadd_application_settings(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_application_settings(deserializer));
  }

  @protected
  AttributeTwinNormal sse_decode_box_autoadd_attribute_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_attribute_twin_normal(deserializer));
  }

  @protected
  AttributeTwinRustAsync sse_decode_box_autoadd_attribute_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_attribute_twin_rust_async(deserializer));
  }

  @protected
  AttributeTwinSync sse_decode_box_autoadd_attribute_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_attribute_twin_sync(deserializer));
  }

  @protected
  Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyAudioParamTwinNormalProxyEnum
      sse_decode_box_autoadd_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_my_audio_param_twin_normal_proxy_enum(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_my_audio_param_twin_normal_proxy_enum(
        deserializer));
  }

  @protected
  BTwinNormal sse_decode_box_autoadd_b_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_b_twin_normal(deserializer));
  }

  @protected
  BTwinRustAsync sse_decode_box_autoadd_b_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_b_twin_rust_async(deserializer));
  }

  @protected
  BTwinSync sse_decode_box_autoadd_b_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_b_twin_sync(deserializer));
  }

  @protected
  BasicGeneralEnumTwinNormal
      sse_decode_box_autoadd_basic_general_enum_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_basic_general_enum_twin_normal(deserializer));
  }

  @protected
  BasicGeneralEnumTwinRustAsync
      sse_decode_box_autoadd_basic_general_enum_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_basic_general_enum_twin_rust_async(deserializer));
  }

  @protected
  BasicGeneralEnumTwinSync sse_decode_box_autoadd_basic_general_enum_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_basic_general_enum_twin_sync(deserializer));
  }

  @protected
  BasicPrimitiveEnumTwinNormal
      sse_decode_box_autoadd_basic_primitive_enum_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_basic_primitive_enum_twin_normal(deserializer));
  }

  @protected
  BasicPrimitiveEnumTwinRustAsync
      sse_decode_box_autoadd_basic_primitive_enum_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_basic_primitive_enum_twin_rust_async(deserializer));
  }

  @protected
  BasicPrimitiveEnumTwinSync
      sse_decode_box_autoadd_basic_primitive_enum_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_basic_primitive_enum_twin_sync(deserializer));
  }

  @protected
  BasicStructTwinNormal sse_decode_box_autoadd_basic_struct_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_basic_struct_twin_normal(deserializer));
  }

  @protected
  BasicStructTwinRustAsync sse_decode_box_autoadd_basic_struct_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_basic_struct_twin_rust_async(deserializer));
  }

  @protected
  BasicStructTwinSync sse_decode_box_autoadd_basic_struct_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_basic_struct_twin_sync(deserializer));
  }

  @protected
  BenchmarkBinaryTreeTwinNormal
      sse_decode_box_autoadd_benchmark_binary_tree_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_benchmark_binary_tree_twin_normal(deserializer));
  }

  @protected
  BenchmarkBinaryTreeTwinRustAsync
      sse_decode_box_autoadd_benchmark_binary_tree_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_benchmark_binary_tree_twin_rust_async(deserializer));
  }

  @protected
  BenchmarkBinaryTreeTwinSync
      sse_decode_box_autoadd_benchmark_binary_tree_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_benchmark_binary_tree_twin_sync(deserializer));
  }

  @protected
  BenchmarkBlobTwinNormal sse_decode_box_autoadd_benchmark_blob_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_benchmark_blob_twin_normal(deserializer));
  }

  @protected
  BenchmarkBlobTwinRustAsync
      sse_decode_box_autoadd_benchmark_blob_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_benchmark_blob_twin_rust_async(deserializer));
  }

  @protected
  BenchmarkBlobTwinSync sse_decode_box_autoadd_benchmark_blob_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_benchmark_blob_twin_sync(deserializer));
  }

  @protected
  bool sse_decode_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bool(deserializer));
  }

  @protected
  CTwinNormal sse_decode_box_autoadd_c_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_c_twin_normal(deserializer));
  }

  @protected
  CTwinRustAsync sse_decode_box_autoadd_c_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_c_twin_rust_async(deserializer));
  }

  @protected
  CTwinSync sse_decode_box_autoadd_c_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_c_twin_sync(deserializer));
  }

  @protected
  ConcatenateWithTwinNormal sse_decode_box_autoadd_concatenate_with_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_concatenate_with_twin_normal(deserializer));
  }

  @protected
  ConcatenateWithTwinRustAsync
      sse_decode_box_autoadd_concatenate_with_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_concatenate_with_twin_rust_async(deserializer));
  }

  @protected
  ConcatenateWithTwinSync sse_decode_box_autoadd_concatenate_with_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_concatenate_with_twin_sync(deserializer));
  }

  @protected
  CustomNestedError2TwinNormal
      sse_decode_box_autoadd_custom_nested_error_2_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_custom_nested_error_2_twin_normal(deserializer));
  }

  @protected
  CustomNestedError2TwinRustAsync
      sse_decode_box_autoadd_custom_nested_error_2_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_custom_nested_error_2_twin_rust_async(deserializer));
  }

  @protected
  CustomNestedError2TwinSync
      sse_decode_box_autoadd_custom_nested_error_2_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_custom_nested_error_2_twin_sync(deserializer));
  }

  @protected
  CustomNestedErrorInnerTwinNormal
      sse_decode_box_autoadd_custom_nested_error_inner_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_custom_nested_error_inner_twin_normal(deserializer));
  }

  @protected
  CustomNestedErrorInnerTwinRustAsync
      sse_decode_box_autoadd_custom_nested_error_inner_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_custom_nested_error_inner_twin_rust_async(deserializer));
  }

  @protected
  CustomNestedErrorInnerTwinSync
      sse_decode_box_autoadd_custom_nested_error_inner_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_custom_nested_error_inner_twin_sync(deserializer));
  }

  @protected
  CustomNestedErrorOuterTwinNormal
      sse_decode_box_autoadd_custom_nested_error_outer_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_custom_nested_error_outer_twin_normal(deserializer));
  }

  @protected
  CustomNestedErrorOuterTwinRustAsync
      sse_decode_box_autoadd_custom_nested_error_outer_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_custom_nested_error_outer_twin_rust_async(deserializer));
  }

  @protected
  CustomNestedErrorOuterTwinSync
      sse_decode_box_autoadd_custom_nested_error_outer_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_custom_nested_error_outer_twin_sync(deserializer));
  }

  @protected
  CustomStructErrorTwinNormal
      sse_decode_box_autoadd_custom_struct_error_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_custom_struct_error_twin_normal(deserializer));
  }

  @protected
  CustomStructErrorTwinRustAsync
      sse_decode_box_autoadd_custom_struct_error_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_custom_struct_error_twin_rust_async(deserializer));
  }

  @protected
  CustomStructErrorTwinSync
      sse_decode_box_autoadd_custom_struct_error_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_custom_struct_error_twin_sync(deserializer));
  }

  @protected
  CustomStructTwinNormal sse_decode_box_autoadd_custom_struct_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_custom_struct_twin_normal(deserializer));
  }

  @protected
  CustomStructTwinRustAsync
      sse_decode_box_autoadd_custom_struct_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_custom_struct_twin_rust_async(deserializer));
  }

  @protected
  CustomStructTwinSync sse_decode_box_autoadd_custom_struct_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_custom_struct_twin_sync(deserializer));
  }

  @protected
  CustomizedTwinNormal sse_decode_box_autoadd_customized_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_customized_twin_normal(deserializer));
  }

  @protected
  CustomizedTwinRustAsync sse_decode_box_autoadd_customized_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_customized_twin_rust_async(deserializer));
  }

  @protected
  CustomizedTwinSync sse_decode_box_autoadd_customized_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_customized_twin_sync(deserializer));
  }

  @protected
  DartOpaqueNestedTwinNormal
      sse_decode_box_autoadd_dart_opaque_nested_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_dart_opaque_nested_twin_normal(deserializer));
  }

  @protected
  DartOpaqueNestedTwinRustAsync
      sse_decode_box_autoadd_dart_opaque_nested_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_dart_opaque_nested_twin_rust_async(deserializer));
  }

  @protected
  DartOpaqueNestedTwinSync sse_decode_box_autoadd_dart_opaque_nested_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_dart_opaque_nested_twin_sync(deserializer));
  }

  @protected
  ElementTwinNormal sse_decode_box_autoadd_element_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_element_twin_normal(deserializer));
  }

  @protected
  ElementTwinRustAsync sse_decode_box_autoadd_element_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_element_twin_rust_async(deserializer));
  }

  @protected
  ElementTwinSync sse_decode_box_autoadd_element_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_element_twin_sync(deserializer));
  }

  @protected
  EmptyTwinNormal sse_decode_box_autoadd_empty_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_empty_twin_normal(deserializer));
  }

  @protected
  EmptyTwinRustAsync sse_decode_box_autoadd_empty_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_empty_twin_rust_async(deserializer));
  }

  @protected
  EmptyTwinSync sse_decode_box_autoadd_empty_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_empty_twin_sync(deserializer));
  }

  @protected
  EnumDartOpaqueTwinNormal sse_decode_box_autoadd_enum_dart_opaque_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_enum_dart_opaque_twin_normal(deserializer));
  }

  @protected
  EnumDartOpaqueTwinRustAsync
      sse_decode_box_autoadd_enum_dart_opaque_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_enum_dart_opaque_twin_rust_async(deserializer));
  }

  @protected
  EnumDartOpaqueTwinSync sse_decode_box_autoadd_enum_dart_opaque_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_enum_dart_opaque_twin_sync(deserializer));
  }

  @protected
  EnumOpaqueTwinNormal sse_decode_box_autoadd_enum_opaque_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_enum_opaque_twin_normal(deserializer));
  }

  @protected
  EnumOpaqueTwinRustAsync sse_decode_box_autoadd_enum_opaque_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_enum_opaque_twin_rust_async(deserializer));
  }

  @protected
  EnumOpaqueTwinSync sse_decode_box_autoadd_enum_opaque_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_enum_opaque_twin_sync(deserializer));
  }

  @protected
  EnumWithGoodAndOpaqueTwinNormal
      sse_decode_box_autoadd_enum_with_good_and_opaque_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_enum_with_good_and_opaque_twin_normal(deserializer));
  }

  @protected
  EnumWithGoodAndOpaqueTwinRustAsync
      sse_decode_box_autoadd_enum_with_good_and_opaque_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_enum_with_good_and_opaque_twin_rust_async(deserializer));
  }

  @protected
  EnumWithGoodAndOpaqueTwinSync
      sse_decode_box_autoadd_enum_with_good_and_opaque_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_enum_with_good_and_opaque_twin_sync(deserializer));
  }

  @protected
  EnumWithItemMixedTwinNormal
      sse_decode_box_autoadd_enum_with_item_mixed_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_enum_with_item_mixed_twin_normal(deserializer));
  }

  @protected
  EnumWithItemMixedTwinRustAsync
      sse_decode_box_autoadd_enum_with_item_mixed_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_enum_with_item_mixed_twin_rust_async(deserializer));
  }

  @protected
  EnumWithItemMixedTwinSync
      sse_decode_box_autoadd_enum_with_item_mixed_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_enum_with_item_mixed_twin_sync(deserializer));
  }

  @protected
  EnumWithItemStructTwinNormal
      sse_decode_box_autoadd_enum_with_item_struct_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_enum_with_item_struct_twin_normal(deserializer));
  }

  @protected
  EnumWithItemStructTwinRustAsync
      sse_decode_box_autoadd_enum_with_item_struct_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_enum_with_item_struct_twin_rust_async(deserializer));
  }

  @protected
  EnumWithItemStructTwinSync
      sse_decode_box_autoadd_enum_with_item_struct_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_enum_with_item_struct_twin_sync(deserializer));
  }

  @protected
  EnumWithItemTupleTwinNormal
      sse_decode_box_autoadd_enum_with_item_tuple_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_enum_with_item_tuple_twin_normal(deserializer));
  }

  @protected
  EnumWithItemTupleTwinRustAsync
      sse_decode_box_autoadd_enum_with_item_tuple_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_enum_with_item_tuple_twin_rust_async(deserializer));
  }

  @protected
  EnumWithItemTupleTwinSync
      sse_decode_box_autoadd_enum_with_item_tuple_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_enum_with_item_tuple_twin_sync(deserializer));
  }

  @protected
  EventTwinNormal sse_decode_box_autoadd_event_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_event_twin_normal(deserializer));
  }

  @protected
  EventTwinRustAsync sse_decode_box_autoadd_event_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_event_twin_rust_async(deserializer));
  }

  @protected
  ExoticOptionalsTwinNormal sse_decode_box_autoadd_exotic_optionals_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_exotic_optionals_twin_normal(deserializer));
  }

  @protected
  ExoticOptionalsTwinRustAsync
      sse_decode_box_autoadd_exotic_optionals_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_exotic_optionals_twin_rust_async(deserializer));
  }

  @protected
  ExoticOptionalsTwinSync sse_decode_box_autoadd_exotic_optionals_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_exotic_optionals_twin_sync(deserializer));
  }

  @protected
  double sse_decode_box_autoadd_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_f_32(deserializer));
  }

  @protected
  double sse_decode_box_autoadd_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_f_64(deserializer));
  }

  @protected
  FeatureChronoTwinNormal sse_decode_box_autoadd_feature_chrono_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_feature_chrono_twin_normal(deserializer));
  }

  @protected
  FeatureChronoTwinRustAsync
      sse_decode_box_autoadd_feature_chrono_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_feature_chrono_twin_rust_async(deserializer));
  }

  @protected
  FeatureChronoTwinSync sse_decode_box_autoadd_feature_chrono_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_feature_chrono_twin_sync(deserializer));
  }

  @protected
  FeatureUuidTwinNormal sse_decode_box_autoadd_feature_uuid_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_feature_uuid_twin_normal(deserializer));
  }

  @protected
  FeatureUuidTwinRustAsync sse_decode_box_autoadd_feature_uuid_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_feature_uuid_twin_rust_async(deserializer));
  }

  @protected
  FeatureUuidTwinSync sse_decode_box_autoadd_feature_uuid_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_feature_uuid_twin_sync(deserializer));
  }

  @protected
  FeedIdTwinNormal sse_decode_box_autoadd_feed_id_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_feed_id_twin_normal(deserializer));
  }

  @protected
  FeedIdTwinRustAsync sse_decode_box_autoadd_feed_id_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_feed_id_twin_rust_async(deserializer));
  }

  @protected
  FeedIdTwinSync sse_decode_box_autoadd_feed_id_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_feed_id_twin_sync(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_i_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_i_16(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_i_32(deserializer));
  }

  @protected
  PlatformInt64 sse_decode_box_autoadd_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_i_64(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_i_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_i_8(deserializer));
  }

  @protected
  PlatformInt64 sse_decode_box_autoadd_isize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_isize(deserializer));
  }

  @protected
  ItemContainerSolutionTwoTwinNormal
      sse_decode_box_autoadd_item_container_solution_two_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_item_container_solution_two_twin_normal(deserializer));
  }

  @protected
  KitchenSinkTwinNormal sse_decode_box_autoadd_kitchen_sink_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_kitchen_sink_twin_normal(deserializer));
  }

  @protected
  KitchenSinkTwinRustAsync sse_decode_box_autoadd_kitchen_sink_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_kitchen_sink_twin_rust_async(deserializer));
  }

  @protected
  KitchenSinkTwinSync sse_decode_box_autoadd_kitchen_sink_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_kitchen_sink_twin_sync(deserializer));
  }

  @protected
  ListOfNestedRawStringMirrored
      sse_decode_box_autoadd_list_of_nested_raw_string_mirrored(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_list_of_nested_raw_string_mirrored(deserializer));
  }

  @protected
  MacroStruct sse_decode_box_autoadd_macro_struct(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_macro_struct(deserializer));
  }

  @protected
  MeasureTwinNormal sse_decode_box_autoadd_measure_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_measure_twin_normal(deserializer));
  }

  @protected
  MeasureTwinRustAsync sse_decode_box_autoadd_measure_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_measure_twin_rust_async(deserializer));
  }

  @protected
  MeasureTwinSync sse_decode_box_autoadd_measure_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_measure_twin_sync(deserializer));
  }

  @protected
  MessageIdTwinNormal sse_decode_box_autoadd_message_id_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_message_id_twin_normal(deserializer));
  }

  @protected
  MessageIdTwinRustAsync sse_decode_box_autoadd_message_id_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_message_id_twin_rust_async(deserializer));
  }

  @protected
  MessageIdTwinSync sse_decode_box_autoadd_message_id_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_message_id_twin_sync(deserializer));
  }

  @protected
  MyCallableTwinNormal sse_decode_box_autoadd_my_callable_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_my_callable_twin_normal(deserializer));
  }

  @protected
  MyCallableTwinRustAsync sse_decode_box_autoadd_my_callable_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_my_callable_twin_rust_async(deserializer));
  }

  @protected
  MyCallableTwinSync sse_decode_box_autoadd_my_callable_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_my_callable_twin_sync(deserializer));
  }

  @protected
  MyEnumWithJsonSerializableTwinNormal
      sse_decode_box_autoadd_my_enum_with_json_serializable_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_my_enum_with_json_serializable_twin_normal(
        deserializer));
  }

  @protected
  MyNestedStructTwinNormal sse_decode_box_autoadd_my_nested_struct_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_my_nested_struct_twin_normal(deserializer));
  }

  @protected
  MyNestedStructTwinRustAsync
      sse_decode_box_autoadd_my_nested_struct_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_my_nested_struct_twin_rust_async(deserializer));
  }

  @protected
  MyNestedStructTwinSync sse_decode_box_autoadd_my_nested_struct_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_my_nested_struct_twin_sync(deserializer));
  }

  @protected
  MySize sse_decode_box_autoadd_my_size(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_my_size(deserializer));
  }

  @protected
  MyStruct sse_decode_box_autoadd_my_struct(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_my_struct(deserializer));
  }

  @protected
  MyStructContainingStreamSinkTwinNormal
      sse_decode_box_autoadd_my_struct_containing_stream_sink_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_my_struct_containing_stream_sink_twin_normal(
        deserializer));
  }

  @protected
  MyStructContainingStreamSinkTwinRustAsync
      sse_decode_box_autoadd_my_struct_containing_stream_sink_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_my_struct_containing_stream_sink_twin_rust_async(
        deserializer));
  }

  @protected
  MyStructWithJsonSerializableTwinNormal
      sse_decode_box_autoadd_my_struct_with_json_serializable_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_my_struct_with_json_serializable_twin_normal(
        deserializer));
  }

  @protected
  MyStructWithSync sse_decode_box_autoadd_my_struct_with_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_my_struct_with_sync(deserializer));
  }

  @protected
  MyTreeNodeTwinNormal sse_decode_box_autoadd_my_tree_node_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_my_tree_node_twin_normal(deserializer));
  }

  @protected
  MyTreeNodeTwinRustAsync sse_decode_box_autoadd_my_tree_node_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_my_tree_node_twin_rust_async(deserializer));
  }

  @protected
  MyTreeNodeTwinSync sse_decode_box_autoadd_my_tree_node_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_my_tree_node_twin_sync(deserializer));
  }

  @protected
  NestedRawStringMirrored sse_decode_box_autoadd_nested_raw_string_mirrored(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_nested_raw_string_mirrored(deserializer));
  }

  @protected
  NewTypeIntTwinNormal sse_decode_box_autoadd_new_type_int_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_new_type_int_twin_normal(deserializer));
  }

  @protected
  NewTypeIntTwinRustAsync sse_decode_box_autoadd_new_type_int_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_new_type_int_twin_rust_async(deserializer));
  }

  @protected
  NewTypeIntTwinSync sse_decode_box_autoadd_new_type_int_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_new_type_int_twin_sync(deserializer));
  }

  @protected
  NonOpaqueStructContainingIpv4Addr
      sse_decode_box_autoadd_non_opaque_struct_containing_ipv_4_addr(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_non_opaque_struct_containing_ipv_4_addr(deserializer));
  }

  @protected
  NoteTwinNormal sse_decode_box_autoadd_note_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_note_twin_normal(deserializer));
  }

  @protected
  NoteTwinRustAsync sse_decode_box_autoadd_note_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_note_twin_rust_async(deserializer));
  }

  @protected
  NoteTwinSync sse_decode_box_autoadd_note_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_note_twin_sync(deserializer));
  }

  @protected
  Numbers sse_decode_box_autoadd_numbers(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_numbers(deserializer));
  }

  @protected
  OpaqueNestedTwinNormal sse_decode_box_autoadd_opaque_nested_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_opaque_nested_twin_normal(deserializer));
  }

  @protected
  OpaqueNestedTwinRustAsync
      sse_decode_box_autoadd_opaque_nested_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_opaque_nested_twin_rust_async(deserializer));
  }

  @protected
  OpaqueNestedTwinSync sse_decode_box_autoadd_opaque_nested_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_opaque_nested_twin_sync(deserializer));
  }

  @protected
  OptVecsTwinNormal sse_decode_box_autoadd_opt_vecs_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_opt_vecs_twin_normal(deserializer));
  }

  @protected
  OptVecsTwinRustAsync sse_decode_box_autoadd_opt_vecs_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_opt_vecs_twin_rust_async(deserializer));
  }

  @protected
  OptVecsTwinSync sse_decode_box_autoadd_opt_vecs_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_opt_vecs_twin_sync(deserializer));
  }

  @protected
  RawStringMirrored sse_decode_box_autoadd_raw_string_mirrored(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_raw_string_mirrored(deserializer));
  }

  @protected
  (String, int) sse_decode_box_autoadd_record_string_i_32(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_record_string_i_32(deserializer));
  }

  @protected
  Sequences sse_decode_box_autoadd_sequences(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_sequences(deserializer));
  }

  @protected
  SimpleEnumTwinNormal sse_decode_box_autoadd_simple_enum_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_simple_enum_twin_normal(deserializer));
  }

  @protected
  SimpleEnumTwinRustAsync sse_decode_box_autoadd_simple_enum_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_simple_enum_twin_rust_async(deserializer));
  }

  @protected
  SimpleEnumTwinSync sse_decode_box_autoadd_simple_enum_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_simple_enum_twin_sync(deserializer));
  }

  @protected
  SimpleStructForBorrowTwinNormal
      sse_decode_box_autoadd_simple_struct_for_borrow_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_simple_struct_for_borrow_twin_normal(deserializer));
  }

  @protected
  SimpleStructForBorrowTwinRustAsync
      sse_decode_box_autoadd_simple_struct_for_borrow_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_simple_struct_for_borrow_twin_rust_async(deserializer));
  }

  @protected
  SimpleStructForBorrowTwinSync
      sse_decode_box_autoadd_simple_struct_for_borrow_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_simple_struct_for_borrow_twin_sync(deserializer));
  }

  @protected
  SimpleStructTwinNormal sse_decode_box_autoadd_simple_struct_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_simple_struct_twin_normal(deserializer));
  }

  @protected
  SimpleStructTwinRustAsync
      sse_decode_box_autoadd_simple_struct_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_simple_struct_twin_rust_async(deserializer));
  }

  @protected
  SimpleStructTwinSync sse_decode_box_autoadd_simple_struct_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_simple_struct_twin_sync(deserializer));
  }

  @protected
  SimpleTraitForDynTwinNormalImplementor
      sse_decode_box_autoadd_simple_trait_for_dyn_twin_normal_implementor(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_simple_trait_for_dyn_twin_normal_implementor(
        deserializer));
  }

  @protected
  SimpleTranslatableExternalStructWithMethod
      sse_decode_box_autoadd_simple_translatable_external_struct_with_method(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_simple_translatable_external_struct_with_method(
        deserializer));
  }

  @protected
  SomeStructTwinNormal sse_decode_box_autoadd_some_struct_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_some_struct_twin_normal(deserializer));
  }

  @protected
  SomeStructTwinRustAsync sse_decode_box_autoadd_some_struct_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_some_struct_twin_rust_async(deserializer));
  }

  @protected
  SomeStructTwinSync sse_decode_box_autoadd_some_struct_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_some_struct_twin_sync(deserializer));
  }

  @protected
  StructInLowerLevel sse_decode_box_autoadd_struct_in_lower_level(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_in_lower_level(deserializer));
  }

  @protected
  StructWithCastedPrimitiveTwinNormal
      sse_decode_box_autoadd_struct_with_casted_primitive_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_casted_primitive_twin_normal(deserializer));
  }

  @protected
  StructWithCommentsTwinNormal
      sse_decode_box_autoadd_struct_with_comments_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_comments_twin_normal(deserializer));
  }

  @protected
  StructWithCommentsTwinRustAsync
      sse_decode_box_autoadd_struct_with_comments_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_comments_twin_rust_async(deserializer));
  }

  @protected
  StructWithCommentsTwinSync
      sse_decode_box_autoadd_struct_with_comments_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_comments_twin_sync(deserializer));
  }

  @protected
  StructWithCustomNameMethodTwinNormal
      sse_decode_box_autoadd_struct_with_custom_name_method_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_custom_name_method_twin_normal(
        deserializer));
  }

  @protected
  StructWithDartKeywordFieldTwinNormal
      sse_decode_box_autoadd_struct_with_dart_keyword_field_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_dart_keyword_field_twin_normal(
        deserializer));
  }

  @protected
  StructWithDartKeywordFieldTwinRustAsync
      sse_decode_box_autoadd_struct_with_dart_keyword_field_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_dart_keyword_field_twin_rust_async(
        deserializer));
  }

  @protected
  StructWithDartKeywordFieldTwinSync
      sse_decode_box_autoadd_struct_with_dart_keyword_field_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_dart_keyword_field_twin_sync(deserializer));
  }

  @protected
  StructWithEnumTwinNormal sse_decode_box_autoadd_struct_with_enum_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_enum_twin_normal(deserializer));
  }

  @protected
  StructWithEnumTwinRustAsync
      sse_decode_box_autoadd_struct_with_enum_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_enum_twin_rust_async(deserializer));
  }

  @protected
  StructWithEnumTwinSync sse_decode_box_autoadd_struct_with_enum_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_enum_twin_sync(deserializer));
  }

  @protected
  StructWithExplicitAutoOpaqueFieldTwinNormal
      sse_decode_box_autoadd_struct_with_explicit_auto_opaque_field_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_explicit_auto_opaque_field_twin_normal(
        deserializer));
  }

  @protected
  StructWithExplicitAutoOpaqueFieldTwinRustAsync
      sse_decode_box_autoadd_struct_with_explicit_auto_opaque_field_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_explicit_auto_opaque_field_twin_rust_async(
        deserializer));
  }

  @protected
  StructWithExplicitAutoOpaqueFieldTwinSync
      sse_decode_box_autoadd_struct_with_explicit_auto_opaque_field_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_explicit_auto_opaque_field_twin_sync(
        deserializer));
  }

  @protected
  StructWithFieldRenameTwinNormal
      sse_decode_box_autoadd_struct_with_field_rename_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_field_rename_twin_normal(deserializer));
  }

  @protected
  StructWithFieldRenameTwinRustAsync
      sse_decode_box_autoadd_struct_with_field_rename_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_field_rename_twin_rust_async(deserializer));
  }

  @protected
  StructWithFieldRenameTwinSync
      sse_decode_box_autoadd_struct_with_field_rename_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_field_rename_twin_sync(deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinNormal
      sse_decode_box_autoadd_struct_with_good_and_opaque_field_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_good_and_opaque_field_twin_normal(
        deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinRustAsync
      sse_decode_box_autoadd_struct_with_good_and_opaque_field_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_good_and_opaque_field_twin_rust_async(
        deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinSync
      sse_decode_box_autoadd_struct_with_good_and_opaque_field_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_good_and_opaque_field_twin_sync(
        deserializer));
  }

  @protected
  StructWithImplBlockInAnotherFileDependency
      sse_decode_box_autoadd_struct_with_impl_block_in_another_file_dependency(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_impl_block_in_another_file_dependency(
        deserializer));
  }

  @protected
  StructWithOneFieldTwinNormal
      sse_decode_box_autoadd_struct_with_one_field_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_one_field_twin_normal(deserializer));
  }

  @protected
  StructWithOneFieldTwinRustAsync
      sse_decode_box_autoadd_struct_with_one_field_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_one_field_twin_rust_async(deserializer));
  }

  @protected
  StructWithOneFieldTwinSync
      sse_decode_box_autoadd_struct_with_one_field_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_one_field_twin_sync(deserializer));
  }

  @protected
  StructWithRustAutoOpaqueFieldWithManyDerive
      sse_decode_box_autoadd_struct_with_rust_auto_opaque_field_with_many_derive(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_rust_auto_opaque_field_with_many_derive(
        deserializer));
  }

  @protected
  StructWithRustAutoOpaqueWithNonCloneData
      sse_decode_box_autoadd_struct_with_rust_auto_opaque_with_non_clone_data(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_rust_auto_opaque_with_non_clone_data(
        deserializer));
  }

  @protected
  StructWithTwoFieldTwinNormal
      sse_decode_box_autoadd_struct_with_two_field_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_two_field_twin_normal(deserializer));
  }

  @protected
  StructWithTwoFieldTwinRustAsync
      sse_decode_box_autoadd_struct_with_two_field_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_two_field_twin_rust_async(deserializer));
  }

  @protected
  StructWithTwoFieldTwinSync
      sse_decode_box_autoadd_struct_with_two_field_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_two_field_twin_sync(deserializer));
  }

  @protected
  StructWithZeroFieldTwinNormal
      sse_decode_box_autoadd_struct_with_zero_field_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_zero_field_twin_normal(deserializer));
  }

  @protected
  StructWithZeroFieldTwinRustAsync
      sse_decode_box_autoadd_struct_with_zero_field_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_zero_field_twin_rust_async(deserializer));
  }

  @protected
  StructWithZeroFieldTwinSync
      sse_decode_box_autoadd_struct_with_zero_field_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_zero_field_twin_sync(deserializer));
  }

  @protected
  SumWithTwinNormal sse_decode_box_autoadd_sum_with_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_sum_with_twin_normal(deserializer));
  }

  @protected
  SumWithTwinRustAsync sse_decode_box_autoadd_sum_with_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_sum_with_twin_rust_async(deserializer));
  }

  @protected
  SumWithTwinSync sse_decode_box_autoadd_sum_with_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_sum_with_twin_sync(deserializer));
  }

  @protected
  TestIdTwinNormal sse_decode_box_autoadd_test_id_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_test_id_twin_normal(deserializer));
  }

  @protected
  TestIdTwinRustAsync sse_decode_box_autoadd_test_id_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_test_id_twin_rust_async(deserializer));
  }

  @protected
  TestIdTwinSync sse_decode_box_autoadd_test_id_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_test_id_twin_sync(deserializer));
  }

  @protected
  TranslatableStructWithDartCodeTwinNormal
      sse_decode_box_autoadd_translatable_struct_with_dart_code_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_translatable_struct_with_dart_code_twin_normal(
        deserializer));
  }

  @protected
  TupleStructWithOneFieldTwinNormal
      sse_decode_box_autoadd_tuple_struct_with_one_field_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_tuple_struct_with_one_field_twin_normal(deserializer));
  }

  @protected
  TupleStructWithOneFieldTwinRustAsync
      sse_decode_box_autoadd_tuple_struct_with_one_field_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_tuple_struct_with_one_field_twin_rust_async(
        deserializer));
  }

  @protected
  TupleStructWithOneFieldTwinSync
      sse_decode_box_autoadd_tuple_struct_with_one_field_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_tuple_struct_with_one_field_twin_sync(deserializer));
  }

  @protected
  TupleStructWithTwoFieldTwinNormal
      sse_decode_box_autoadd_tuple_struct_with_two_field_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_tuple_struct_with_two_field_twin_normal(deserializer));
  }

  @protected
  TupleStructWithTwoFieldTwinRustAsync
      sse_decode_box_autoadd_tuple_struct_with_two_field_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_tuple_struct_with_two_field_twin_rust_async(
        deserializer));
  }

  @protected
  TupleStructWithTwoFieldTwinSync
      sse_decode_box_autoadd_tuple_struct_with_two_field_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_tuple_struct_with_two_field_twin_sync(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_16(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_32(deserializer));
  }

  @protected
  BigInt sse_decode_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_64(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_8(deserializer));
  }

  @protected
  UserIdTwinNormal sse_decode_box_autoadd_user_id_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_user_id_twin_normal(deserializer));
  }

  @protected
  UserIdTwinRustAsync sse_decode_box_autoadd_user_id_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_user_id_twin_rust_async(deserializer));
  }

  @protected
  UserIdTwinSync sse_decode_box_autoadd_user_id_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_user_id_twin_sync(deserializer));
  }

  @protected
  BigInt sse_decode_box_autoadd_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_usize(deserializer));
  }

  @protected
  WeekdaysTwinNormal sse_decode_box_autoadd_weekdays_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_weekdays_twin_normal(deserializer));
  }

  @protected
  WeekdaysTwinRustAsync sse_decode_box_autoadd_weekdays_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_weekdays_twin_rust_async(deserializer));
  }

  @protected
  WeekdaysTwinSync sse_decode_box_autoadd_weekdays_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_weekdays_twin_sync(deserializer));
  }

  @protected
  BenchmarkBinaryTreeTwinNormal
      sse_decode_box_benchmark_binary_tree_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_benchmark_binary_tree_twin_normal(deserializer));
  }

  @protected
  BenchmarkBinaryTreeTwinRustAsync
      sse_decode_box_benchmark_binary_tree_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_benchmark_binary_tree_twin_rust_async(deserializer));
  }

  @protected
  BenchmarkBinaryTreeTwinSync sse_decode_box_benchmark_binary_tree_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_benchmark_binary_tree_twin_sync(deserializer));
  }

  @protected
  BlobTwinNormal sse_decode_box_blob_twin_normal(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_blob_twin_normal(deserializer));
  }

  @protected
  BlobTwinRustAsync sse_decode_box_blob_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_blob_twin_rust_async(deserializer));
  }

  @protected
  BlobTwinSync sse_decode_box_blob_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_blob_twin_sync(deserializer));
  }

  @protected
  bool sse_decode_box_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bool(deserializer));
  }

  @protected
  DistanceTwinNormal sse_decode_box_distance_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_distance_twin_normal(deserializer));
  }

  @protected
  DistanceTwinRustAsync sse_decode_box_distance_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_distance_twin_rust_async(deserializer));
  }

  @protected
  DistanceTwinSync sse_decode_box_distance_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_distance_twin_sync(deserializer));
  }

  @protected
  ExoticOptionalsTwinNormal sse_decode_box_exotic_optionals_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_exotic_optionals_twin_normal(deserializer));
  }

  @protected
  ExoticOptionalsTwinRustAsync sse_decode_box_exotic_optionals_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_exotic_optionals_twin_rust_async(deserializer));
  }

  @protected
  ExoticOptionalsTwinSync sse_decode_box_exotic_optionals_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_exotic_optionals_twin_sync(deserializer));
  }

  @protected
  double sse_decode_box_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_f_64(deserializer));
  }

  @protected
  FeedIdTwinNormal sse_decode_box_feed_id_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_feed_id_twin_normal(deserializer));
  }

  @protected
  FeedIdTwinRustAsync sse_decode_box_feed_id_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_feed_id_twin_rust_async(deserializer));
  }

  @protected
  FeedIdTwinSync sse_decode_box_feed_id_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_feed_id_twin_sync(deserializer));
  }

  @protected
  int sse_decode_box_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_i_32(deserializer));
  }

  @protected
  PlatformInt64 sse_decode_box_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_i_64(deserializer));
  }

  @protected
  int sse_decode_box_i_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_i_8(deserializer));
  }

  @protected
  KitchenSinkTwinNormal sse_decode_box_kitchen_sink_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_kitchen_sink_twin_normal(deserializer));
  }

  @protected
  KitchenSinkTwinRustAsync sse_decode_box_kitchen_sink_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_kitchen_sink_twin_rust_async(deserializer));
  }

  @protected
  KitchenSinkTwinSync sse_decode_box_kitchen_sink_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_kitchen_sink_twin_sync(deserializer));
  }

  @protected
  MySize sse_decode_box_my_size(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_my_size(deserializer));
  }

  @protected
  SpeedTwinNormal sse_decode_box_speed_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_speed_twin_normal(deserializer));
  }

  @protected
  SpeedTwinRustAsync sse_decode_box_speed_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_speed_twin_rust_async(deserializer));
  }

  @protected
  SpeedTwinSync sse_decode_box_speed_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_speed_twin_sync(deserializer));
  }

  @protected
  int sse_decode_box_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_8(deserializer));
  }

  @protected
  U8Array1600 sse_decode_box_u_8_array_1600(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_8_array_1600(deserializer));
  }

  @protected
  U8Array8 sse_decode_box_u_8_array_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_8_array_8(deserializer));
  }

  @protected
  WeekdaysTwinNormal sse_decode_box_weekdays_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_weekdays_twin_normal(deserializer));
  }

  @protected
  WeekdaysTwinRustAsync sse_decode_box_weekdays_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_weekdays_twin_rust_async(deserializer));
  }

  @protected
  WeekdaysTwinSync sse_decode_box_weekdays_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_weekdays_twin_sync(deserializer));
  }

  @protected
  CTwinNormal sse_decode_c_twin_normal(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_c = sse_decode_bool(deserializer);
    return CTwinNormal(c: var_c);
  }

  @protected
  CTwinRustAsync sse_decode_c_twin_rust_async(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_c = sse_decode_bool(deserializer);
    return CTwinRustAsync(c: var_c);
  }

  @protected
  CTwinSync sse_decode_c_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_c = sse_decode_bool(deserializer);
    return CTwinSync(c: var_c);
  }

  @protected
  ConcatenateWithTwinNormal sse_decode_concatenate_with_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_String(deserializer);
    return ConcatenateWithTwinNormal(a: var_a);
  }

  @protected
  ConcatenateWithTwinRustAsync sse_decode_concatenate_with_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_String(deserializer);
    return ConcatenateWithTwinRustAsync(a: var_a);
  }

  @protected
  ConcatenateWithTwinSync sse_decode_concatenate_with_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_String(deserializer);
    return ConcatenateWithTwinSync(a: var_a);
  }

  @protected
  ConstructorTranslatableStructTwinNormal
      sse_decode_constructor_translatable_struct_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_one = sse_decode_String(deserializer);
    return ConstructorTranslatableStructTwinNormal(one: var_one);
  }

  @protected
  ConstructorTranslatableSyncStructTwinNormal
      sse_decode_constructor_translatable_sync_struct_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_one = sse_decode_String(deserializer);
    return ConstructorTranslatableSyncStructTwinNormal.raw(one: var_one);
  }

  @protected
  ContainsMirroredSubStructTwinNormal
      sse_decode_contains_mirrored_sub_struct_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_test = sse_decode_raw_string_mirrored(deserializer);
    var var_test2 = sse_decode_another_twin_normal(deserializer);
    return ContainsMirroredSubStructTwinNormal(
        test: var_test, test2: var_test2);
  }

  @protected
  ContainsMirroredSubStructTwinRustAsync
      sse_decode_contains_mirrored_sub_struct_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_test = sse_decode_raw_string_mirrored(deserializer);
    var var_test2 = sse_decode_another_twin_rust_async(deserializer);
    return ContainsMirroredSubStructTwinRustAsync(
        test: var_test, test2: var_test2);
  }

  @protected
  ContainsMirroredSubStructTwinSync
      sse_decode_contains_mirrored_sub_struct_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_test = sse_decode_raw_string_mirrored(deserializer);
    var var_test2 = sse_decode_another_twin_sync(deserializer);
    return ContainsMirroredSubStructTwinSync(test: var_test, test2: var_test2);
  }

  @protected
  CustomEnumErrorTwinNormal sse_decode_custom_enum_error_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_message = sse_decode_String(deserializer);
        var var_backtrace = sse_decode_Backtrace(deserializer);
        return CustomEnumErrorTwinNormal_One(
            message: var_message, backtrace: var_backtrace);
      case 1:
        var var_message = sse_decode_u_32(deserializer);
        var var_backtrace = sse_decode_Backtrace(deserializer);
        return CustomEnumErrorTwinNormal_Two(
            message: var_message, backtrace: var_backtrace);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomEnumErrorTwinRustAsync sse_decode_custom_enum_error_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_message = sse_decode_String(deserializer);
        var var_backtrace = sse_decode_Backtrace(deserializer);
        return CustomEnumErrorTwinRustAsync_One(
            message: var_message, backtrace: var_backtrace);
      case 1:
        var var_message = sse_decode_u_32(deserializer);
        var var_backtrace = sse_decode_Backtrace(deserializer);
        return CustomEnumErrorTwinRustAsync_Two(
            message: var_message, backtrace: var_backtrace);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomEnumErrorTwinSync sse_decode_custom_enum_error_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_message = sse_decode_String(deserializer);
        var var_backtrace = sse_decode_Backtrace(deserializer);
        return CustomEnumErrorTwinSync_One(
            message: var_message, backtrace: var_backtrace);
      case 1:
        var var_message = sse_decode_u_32(deserializer);
        var var_backtrace = sse_decode_Backtrace(deserializer);
        return CustomEnumErrorTwinSync_Two(
            message: var_message, backtrace: var_backtrace);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomErrorTwinNormal sse_decode_custom_error_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_e = sse_decode_String(deserializer);
        var var_backtrace = sse_decode_Backtrace(deserializer);
        return CustomErrorTwinNormal_Error0(e: var_e, backtrace: var_backtrace);
      case 1:
        var var_e = sse_decode_u_32(deserializer);
        var var_backtrace = sse_decode_Backtrace(deserializer);
        return CustomErrorTwinNormal_Error1(e: var_e, backtrace: var_backtrace);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomErrorTwinRustAsync sse_decode_custom_error_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_e = sse_decode_String(deserializer);
        var var_backtrace = sse_decode_Backtrace(deserializer);
        return CustomErrorTwinRustAsync_Error0(
            e: var_e, backtrace: var_backtrace);
      case 1:
        var var_e = sse_decode_u_32(deserializer);
        var var_backtrace = sse_decode_Backtrace(deserializer);
        return CustomErrorTwinRustAsync_Error1(
            e: var_e, backtrace: var_backtrace);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomErrorTwinSync sse_decode_custom_error_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_e = sse_decode_String(deserializer);
        var var_backtrace = sse_decode_Backtrace(deserializer);
        return CustomErrorTwinSync_Error0(e: var_e, backtrace: var_backtrace);
      case 1:
        var var_e = sse_decode_u_32(deserializer);
        var var_backtrace = sse_decode_Backtrace(deserializer);
        return CustomErrorTwinSync_Error1(e: var_e, backtrace: var_backtrace);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomNestedError1TwinNormal sse_decode_custom_nested_error_1_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return CustomNestedError1TwinNormal_CustomNested1(var_field0);
      case 1:
        var var_field0 =
            sse_decode_box_autoadd_custom_nested_error_2_twin_normal(
                deserializer);
        return CustomNestedError1TwinNormal_ErrorNested(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomNestedError1TwinRustAsync
      sse_decode_custom_nested_error_1_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return CustomNestedError1TwinRustAsync_CustomNested1(var_field0);
      case 1:
        var var_field0 =
            sse_decode_box_autoadd_custom_nested_error_2_twin_rust_async(
                deserializer);
        return CustomNestedError1TwinRustAsync_ErrorNested(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomNestedError1TwinSync sse_decode_custom_nested_error_1_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return CustomNestedError1TwinSync_CustomNested1(var_field0);
      case 1:
        var var_field0 = sse_decode_box_autoadd_custom_nested_error_2_twin_sync(
            deserializer);
        return CustomNestedError1TwinSync_ErrorNested(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomNestedError2TwinNormal sse_decode_custom_nested_error_2_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return CustomNestedError2TwinNormal_CustomNested2(var_field0);
      case 1:
        var var_field0 = sse_decode_u_32(deserializer);
        return CustomNestedError2TwinNormal_CustomNested2Number(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomNestedError2TwinRustAsync
      sse_decode_custom_nested_error_2_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return CustomNestedError2TwinRustAsync_CustomNested2(var_field0);
      case 1:
        var var_field0 = sse_decode_u_32(deserializer);
        return CustomNestedError2TwinRustAsync_CustomNested2Number(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomNestedError2TwinSync sse_decode_custom_nested_error_2_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return CustomNestedError2TwinSync_CustomNested2(var_field0);
      case 1:
        var var_field0 = sse_decode_u_32(deserializer);
        return CustomNestedError2TwinSync_CustomNested2Number(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomNestedErrorInnerTwinNormal
      sse_decode_custom_nested_error_inner_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return CustomNestedErrorInnerTwinNormal_Three(var_field0);
      case 1:
        var var_field0 = sse_decode_u_32(deserializer);
        return CustomNestedErrorInnerTwinNormal_Four(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomNestedErrorInnerTwinRustAsync
      sse_decode_custom_nested_error_inner_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return CustomNestedErrorInnerTwinRustAsync_Three(var_field0);
      case 1:
        var var_field0 = sse_decode_u_32(deserializer);
        return CustomNestedErrorInnerTwinRustAsync_Four(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomNestedErrorInnerTwinSync sse_decode_custom_nested_error_inner_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return CustomNestedErrorInnerTwinSync_Three(var_field0);
      case 1:
        var var_field0 = sse_decode_u_32(deserializer);
        return CustomNestedErrorInnerTwinSync_Four(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomNestedErrorOuterTwinNormal
      sse_decode_custom_nested_error_outer_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return CustomNestedErrorOuterTwinNormal_One(var_field0);
      case 1:
        var var_field0 =
            sse_decode_box_autoadd_custom_nested_error_inner_twin_normal(
                deserializer);
        return CustomNestedErrorOuterTwinNormal_Two(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomNestedErrorOuterTwinRustAsync
      sse_decode_custom_nested_error_outer_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return CustomNestedErrorOuterTwinRustAsync_One(var_field0);
      case 1:
        var var_field0 =
            sse_decode_box_autoadd_custom_nested_error_inner_twin_rust_async(
                deserializer);
        return CustomNestedErrorOuterTwinRustAsync_Two(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomNestedErrorOuterTwinSync sse_decode_custom_nested_error_outer_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return CustomNestedErrorOuterTwinSync_One(var_field0);
      case 1:
        var var_field0 =
            sse_decode_box_autoadd_custom_nested_error_inner_twin_sync(
                deserializer);
        return CustomNestedErrorOuterTwinSync_Two(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomStructErrorAnotherTwinNormal
      sse_decode_custom_struct_error_another_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_message = sse_decode_String(deserializer);
    return CustomStructErrorAnotherTwinNormal(message: var_message);
  }

  @protected
  CustomStructErrorAnotherTwinRustAsync
      sse_decode_custom_struct_error_another_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_message = sse_decode_String(deserializer);
    return CustomStructErrorAnotherTwinRustAsync(message: var_message);
  }

  @protected
  CustomStructErrorAnotherTwinSync
      sse_decode_custom_struct_error_another_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_message = sse_decode_String(deserializer);
    return CustomStructErrorAnotherTwinSync(message: var_message);
  }

  @protected
  CustomStructErrorTwinNormal sse_decode_custom_struct_error_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_String(deserializer);
    return CustomStructErrorTwinNormal(a: var_a);
  }

  @protected
  CustomStructErrorTwinRustAsync sse_decode_custom_struct_error_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_String(deserializer);
    return CustomStructErrorTwinRustAsync(a: var_a);
  }

  @protected
  CustomStructErrorTwinSync sse_decode_custom_struct_error_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_String(deserializer);
    return CustomStructErrorTwinSync(a: var_a);
  }

  @protected
  CustomStructTwinNormal sse_decode_custom_struct_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_message = sse_decode_String(deserializer);
    return CustomStructTwinNormal(message: var_message);
  }

  @protected
  CustomStructTwinRustAsync sse_decode_custom_struct_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_message = sse_decode_String(deserializer);
    return CustomStructTwinRustAsync(message: var_message);
  }

  @protected
  CustomStructTwinSync sse_decode_custom_struct_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_message = sse_decode_String(deserializer);
    return CustomStructTwinSync(message: var_message);
  }

  @protected
  CustomizedTwinNormal sse_decode_customized_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_finalField = sse_decode_String(deserializer);
    var var_nonFinalField = sse_decode_opt_String(deserializer);
    return CustomizedTwinNormal(
        finalField: var_finalField, nonFinalField: var_nonFinalField);
  }

  @protected
  CustomizedTwinRustAsync sse_decode_customized_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_finalField = sse_decode_String(deserializer);
    var var_nonFinalField = sse_decode_opt_String(deserializer);
    return CustomizedTwinRustAsync(
        finalField: var_finalField, nonFinalField: var_nonFinalField);
  }

  @protected
  CustomizedTwinSync sse_decode_customized_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_finalField = sse_decode_String(deserializer);
    var var_nonFinalField = sse_decode_opt_String(deserializer);
    return CustomizedTwinSync(
        finalField: var_finalField, nonFinalField: var_nonFinalField);
  }

  @protected
  DartOpaqueNestedTwinNormal sse_decode_dart_opaque_nested_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_first = sse_decode_DartOpaque(deserializer);
    var var_second = sse_decode_DartOpaque(deserializer);
    return DartOpaqueNestedTwinNormal(first: var_first, second: var_second);
  }

  @protected
  DartOpaqueNestedTwinRustAsync sse_decode_dart_opaque_nested_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_first = sse_decode_DartOpaque(deserializer);
    var var_second = sse_decode_DartOpaque(deserializer);
    return DartOpaqueNestedTwinRustAsync(first: var_first, second: var_second);
  }

  @protected
  DartOpaqueNestedTwinSync sse_decode_dart_opaque_nested_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_first = sse_decode_DartOpaque(deserializer);
    var var_second = sse_decode_DartOpaque(deserializer);
    return DartOpaqueNestedTwinSync(first: var_first, second: var_second);
  }

  @protected
  DemoStructForRustCallDartTwinNormal
      sse_decode_demo_struct_for_rust_call_dart_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    return DemoStructForRustCallDartTwinNormal(name: var_name);
  }

  @protected
  DemoStructForRustCallDartTwinRustAsync
      sse_decode_demo_struct_for_rust_call_dart_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    return DemoStructForRustCallDartTwinRustAsync(name: var_name);
  }

  @protected
  DistanceTwinNormal sse_decode_distance_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return DistanceTwinNormal_Unknown();
      case 1:
        var var_field0 = sse_decode_f_64(deserializer);
        return DistanceTwinNormal_Map(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  DistanceTwinRustAsync sse_decode_distance_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return DistanceTwinRustAsync_Unknown();
      case 1:
        var var_field0 = sse_decode_f_64(deserializer);
        return DistanceTwinRustAsync_Map(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  DistanceTwinSync sse_decode_distance_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return DistanceTwinSync_Unknown();
      case 1:
        var var_field0 = sse_decode_f_64(deserializer);
        return DistanceTwinSync_Map(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  ElementTwinNormal sse_decode_element_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_tag = sse_decode_opt_String(deserializer);
    var var_text = sse_decode_opt_String(deserializer);
    var var_attributes =
        sse_decode_opt_list_attribute_twin_normal(deserializer);
    var var_children = sse_decode_opt_list_element_twin_normal(deserializer);
    return ElementTwinNormal(
        tag: var_tag,
        text: var_text,
        attributes: var_attributes,
        children: var_children);
  }

  @protected
  ElementTwinRustAsync sse_decode_element_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_tag = sse_decode_opt_String(deserializer);
    var var_text = sse_decode_opt_String(deserializer);
    var var_attributes =
        sse_decode_opt_list_attribute_twin_rust_async(deserializer);
    var var_children =
        sse_decode_opt_list_element_twin_rust_async(deserializer);
    return ElementTwinRustAsync(
        tag: var_tag,
        text: var_text,
        attributes: var_attributes,
        children: var_children);
  }

  @protected
  ElementTwinSync sse_decode_element_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_tag = sse_decode_opt_String(deserializer);
    var var_text = sse_decode_opt_String(deserializer);
    var var_attributes = sse_decode_opt_list_attribute_twin_sync(deserializer);
    var var_children = sse_decode_opt_list_element_twin_sync(deserializer);
    return ElementTwinSync(
        tag: var_tag,
        text: var_text,
        attributes: var_attributes,
        children: var_children);
  }

  @protected
  EmptyTwinNormal sse_decode_empty_twin_normal(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EmptyTwinNormal();
  }

  @protected
  EmptyTwinRustAsync sse_decode_empty_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EmptyTwinRustAsync();
  }

  @protected
  EmptyTwinSync sse_decode_empty_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EmptyTwinSync();
  }

  @protected
  EnumDartOpaqueTwinNormal sse_decode_enum_dart_opaque_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_i_32(deserializer);
        return EnumDartOpaqueTwinNormal_Primitive(var_field0);
      case 1:
        var var_field0 = sse_decode_DartOpaque(deserializer);
        return EnumDartOpaqueTwinNormal_Opaque(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumDartOpaqueTwinRustAsync sse_decode_enum_dart_opaque_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_i_32(deserializer);
        return EnumDartOpaqueTwinRustAsync_Primitive(var_field0);
      case 1:
        var var_field0 = sse_decode_DartOpaque(deserializer);
        return EnumDartOpaqueTwinRustAsync_Opaque(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumDartOpaqueTwinSync sse_decode_enum_dart_opaque_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_i_32(deserializer);
        return EnumDartOpaqueTwinSync_Primitive(var_field0);
      case 1:
        var var_field0 = sse_decode_DartOpaque(deserializer);
        return EnumDartOpaqueTwinSync_Opaque(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumOpaqueTwinNormal sse_decode_enum_opaque_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_RustOpaque_HideDataTwinNormal(deserializer);
        return EnumOpaqueTwinNormal_Struct(var_field0);
      case 1:
        var var_field0 = sse_decode_RustOpaque_i32(deserializer);
        return EnumOpaqueTwinNormal_Primitive(var_field0);
      case 2:
        var var_field0 =
            sse_decode_RustOpaque_BoxdynDartDebugTwinNormal(deserializer);
        return EnumOpaqueTwinNormal_TraitObj(var_field0);
      case 3:
        var var_field0 =
            sse_decode_RustOpaque_MutexHideDataTwinNormal(deserializer);
        return EnumOpaqueTwinNormal_Mutex(var_field0);
      case 4:
        var var_field0 =
            sse_decode_RustOpaque_RwLockHideDataTwinNormal(deserializer);
        return EnumOpaqueTwinNormal_RwLock(var_field0);
      case 5:
        return EnumOpaqueTwinNormal_Nothing();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumOpaqueTwinNormalArray5 sse_decode_enum_opaque_twin_normal_array_5(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_enum_opaque_twin_normal(deserializer);
    return EnumOpaqueTwinNormalArray5(inner);
  }

  @protected
  EnumOpaqueTwinRustAsync sse_decode_enum_opaque_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 =
            sse_decode_RustOpaque_HideDataTwinRustAsync(deserializer);
        return EnumOpaqueTwinRustAsync_Struct(var_field0);
      case 1:
        var var_field0 = sse_decode_RustOpaque_i32(deserializer);
        return EnumOpaqueTwinRustAsync_Primitive(var_field0);
      case 2:
        var var_field0 =
            sse_decode_RustOpaque_BoxdynDartDebugTwinRustAsync(deserializer);
        return EnumOpaqueTwinRustAsync_TraitObj(var_field0);
      case 3:
        var var_field0 =
            sse_decode_RustOpaque_MutexHideDataTwinRustAsync(deserializer);
        return EnumOpaqueTwinRustAsync_Mutex(var_field0);
      case 4:
        var var_field0 =
            sse_decode_RustOpaque_RwLockHideDataTwinRustAsync(deserializer);
        return EnumOpaqueTwinRustAsync_RwLock(var_field0);
      case 5:
        return EnumOpaqueTwinRustAsync_Nothing();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumOpaqueTwinRustAsyncArray5 sse_decode_enum_opaque_twin_rust_async_array_5(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_enum_opaque_twin_rust_async(deserializer);
    return EnumOpaqueTwinRustAsyncArray5(inner);
  }

  @protected
  EnumOpaqueTwinSync sse_decode_enum_opaque_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_RustOpaque_HideDataTwinSync(deserializer);
        return EnumOpaqueTwinSync_Struct(var_field0);
      case 1:
        var var_field0 = sse_decode_RustOpaque_i32(deserializer);
        return EnumOpaqueTwinSync_Primitive(var_field0);
      case 2:
        var var_field0 =
            sse_decode_RustOpaque_BoxdynDartDebugTwinSync(deserializer);
        return EnumOpaqueTwinSync_TraitObj(var_field0);
      case 3:
        var var_field0 =
            sse_decode_RustOpaque_MutexHideDataTwinSync(deserializer);
        return EnumOpaqueTwinSync_Mutex(var_field0);
      case 4:
        var var_field0 =
            sse_decode_RustOpaque_RwLockHideDataTwinSync(deserializer);
        return EnumOpaqueTwinSync_RwLock(var_field0);
      case 5:
        return EnumOpaqueTwinSync_Nothing();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumOpaqueTwinSyncArray5 sse_decode_enum_opaque_twin_sync_array_5(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_enum_opaque_twin_sync(deserializer);
    return EnumOpaqueTwinSyncArray5(inner);
  }

  @protected
  EnumSimpleTwinNormal sse_decode_enum_simple_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return EnumSimpleTwinNormal.values[inner];
  }

  @protected
  EnumSimpleTwinRustAsync sse_decode_enum_simple_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return EnumSimpleTwinRustAsync.values[inner];
  }

  @protected
  EnumSimpleTwinSync sse_decode_enum_simple_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return EnumSimpleTwinSync.values[inner];
  }

  @protected
  EnumWithDiscriminantTwinNormal sse_decode_enum_with_discriminant_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return EnumWithDiscriminantTwinNormal.values[inner];
  }

  @protected
  EnumWithDiscriminantTwinRustAsync
      sse_decode_enum_with_discriminant_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return EnumWithDiscriminantTwinRustAsync.values[inner];
  }

  @protected
  EnumWithDiscriminantTwinSync sse_decode_enum_with_discriminant_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return EnumWithDiscriminantTwinSync.values[inner];
  }

  @protected
  EnumWithGoodAndOpaqueTwinNormal
      sse_decode_enum_with_good_and_opaque_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return EnumWithGoodAndOpaqueTwinNormal_Good(var_field0);
      case 1:
        var var_field0 =
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
                deserializer);
        return EnumWithGoodAndOpaqueTwinNormal_Opaque(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumWithGoodAndOpaqueTwinRustAsync
      sse_decode_enum_with_good_and_opaque_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return EnumWithGoodAndOpaqueTwinRustAsync_Good(var_field0);
      case 1:
        var var_field0 =
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
                deserializer);
        return EnumWithGoodAndOpaqueTwinRustAsync_Opaque(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumWithGoodAndOpaqueTwinSync sse_decode_enum_with_good_and_opaque_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return EnumWithGoodAndOpaqueTwinSync_Good(var_field0);
      case 1:
        var var_field0 =
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
                deserializer);
        return EnumWithGoodAndOpaqueTwinSync_Opaque(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumWithItemMixedTwinNormal sse_decode_enum_with_item_mixed_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return EnumWithItemMixedTwinNormal_A();
      case 1:
        var var_field0 = sse_decode_list_prim_u_8_strict(deserializer);
        return EnumWithItemMixedTwinNormal_B(var_field0);
      case 2:
        var var_cField = sse_decode_String(deserializer);
        return EnumWithItemMixedTwinNormal_C(cField: var_cField);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumWithItemMixedTwinRustAsync
      sse_decode_enum_with_item_mixed_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return EnumWithItemMixedTwinRustAsync_A();
      case 1:
        var var_field0 = sse_decode_list_prim_u_8_strict(deserializer);
        return EnumWithItemMixedTwinRustAsync_B(var_field0);
      case 2:
        var var_cField = sse_decode_String(deserializer);
        return EnumWithItemMixedTwinRustAsync_C(cField: var_cField);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumWithItemMixedTwinSync sse_decode_enum_with_item_mixed_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return EnumWithItemMixedTwinSync_A();
      case 1:
        var var_field0 = sse_decode_list_prim_u_8_strict(deserializer);
        return EnumWithItemMixedTwinSync_B(var_field0);
      case 2:
        var var_cField = sse_decode_String(deserializer);
        return EnumWithItemMixedTwinSync_C(cField: var_cField);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumWithItemStructTwinNormal sse_decode_enum_with_item_struct_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_aField = sse_decode_list_prim_u_8_strict(deserializer);
        return EnumWithItemStructTwinNormal_A(aField: var_aField);
      case 1:
        var var_bField = sse_decode_list_prim_i_32_strict(deserializer);
        return EnumWithItemStructTwinNormal_B(bField: var_bField);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumWithItemStructTwinRustAsync
      sse_decode_enum_with_item_struct_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_aField = sse_decode_list_prim_u_8_strict(deserializer);
        return EnumWithItemStructTwinRustAsync_A(aField: var_aField);
      case 1:
        var var_bField = sse_decode_list_prim_i_32_strict(deserializer);
        return EnumWithItemStructTwinRustAsync_B(bField: var_bField);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumWithItemStructTwinSync sse_decode_enum_with_item_struct_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_aField = sse_decode_list_prim_u_8_strict(deserializer);
        return EnumWithItemStructTwinSync_A(aField: var_aField);
      case 1:
        var var_bField = sse_decode_list_prim_i_32_strict(deserializer);
        return EnumWithItemStructTwinSync_B(bField: var_bField);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumWithItemTupleTwinNormal sse_decode_enum_with_item_tuple_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_list_prim_u_8_strict(deserializer);
        return EnumWithItemTupleTwinNormal_A(var_field0);
      case 1:
        var var_field0 = sse_decode_i_32(deserializer);
        return EnumWithItemTupleTwinNormal_B(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumWithItemTupleTwinRustAsync
      sse_decode_enum_with_item_tuple_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_list_prim_u_8_strict(deserializer);
        return EnumWithItemTupleTwinRustAsync_A(var_field0);
      case 1:
        var var_field0 = sse_decode_i_32(deserializer);
        return EnumWithItemTupleTwinRustAsync_B(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumWithItemTupleTwinSync sse_decode_enum_with_item_tuple_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_list_prim_u_8_strict(deserializer);
        return EnumWithItemTupleTwinSync_A(var_field0);
      case 1:
        var var_field0 = sse_decode_i_32(deserializer);
        return EnumWithItemTupleTwinSync_B(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EventTwinNormal sse_decode_event_twin_normal(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_address = sse_decode_String(deserializer);
    var var_payload = sse_decode_String(deserializer);
    return EventTwinNormal(address: var_address, payload: var_payload);
  }

  @protected
  EventTwinRustAsync sse_decode_event_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_address = sse_decode_String(deserializer);
    var var_payload = sse_decode_String(deserializer);
    return EventTwinRustAsync(address: var_address, payload: var_payload);
  }

  @protected
  ExoticOptionalsTwinNormal sse_decode_exotic_optionals_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_int32 = sse_decode_opt_box_autoadd_i_32(deserializer);
    var var_int64 = sse_decode_opt_box_autoadd_i_64(deserializer);
    var var_float64 = sse_decode_opt_box_autoadd_f_64(deserializer);
    var var_boolean = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_zerocopy = sse_decode_opt_list_prim_u_8_strict(deserializer);
    var var_int8List = sse_decode_opt_list_prim_i_8_strict(deserializer);
    var var_uint8List = sse_decode_opt_list_prim_u_8_strict(deserializer);
    var var_int32List = sse_decode_opt_list_prim_i_32_strict(deserializer);
    var var_float32List = sse_decode_opt_list_prim_f_32_strict(deserializer);
    var var_float64List = sse_decode_opt_list_prim_f_64_strict(deserializer);
    var var_attributes =
        sse_decode_opt_list_attribute_twin_normal(deserializer);
    var var_attributesNullable =
        sse_decode_list_opt_box_autoadd_attribute_twin_normal(deserializer);
    var var_nullableAttributes =
        sse_decode_opt_list_opt_box_autoadd_attribute_twin_normal(deserializer);
    var var_newtypeint =
        sse_decode_opt_box_autoadd_new_type_int_twin_normal(deserializer);
    return ExoticOptionalsTwinNormal(
        int32: var_int32,
        int64: var_int64,
        float64: var_float64,
        boolean: var_boolean,
        zerocopy: var_zerocopy,
        int8List: var_int8List,
        uint8List: var_uint8List,
        int32List: var_int32List,
        float32List: var_float32List,
        float64List: var_float64List,
        attributes: var_attributes,
        attributesNullable: var_attributesNullable,
        nullableAttributes: var_nullableAttributes,
        newtypeint: var_newtypeint);
  }

  @protected
  ExoticOptionalsTwinRustAsync sse_decode_exotic_optionals_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_int32 = sse_decode_opt_box_autoadd_i_32(deserializer);
    var var_int64 = sse_decode_opt_box_autoadd_i_64(deserializer);
    var var_float64 = sse_decode_opt_box_autoadd_f_64(deserializer);
    var var_boolean = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_zerocopy = sse_decode_opt_list_prim_u_8_strict(deserializer);
    var var_int8List = sse_decode_opt_list_prim_i_8_strict(deserializer);
    var var_uint8List = sse_decode_opt_list_prim_u_8_strict(deserializer);
    var var_int32List = sse_decode_opt_list_prim_i_32_strict(deserializer);
    var var_float32List = sse_decode_opt_list_prim_f_32_strict(deserializer);
    var var_float64List = sse_decode_opt_list_prim_f_64_strict(deserializer);
    var var_attributes =
        sse_decode_opt_list_attribute_twin_rust_async(deserializer);
    var var_attributesNullable =
        sse_decode_list_opt_box_autoadd_attribute_twin_rust_async(deserializer);
    var var_nullableAttributes =
        sse_decode_opt_list_opt_box_autoadd_attribute_twin_rust_async(
            deserializer);
    var var_newtypeint =
        sse_decode_opt_box_autoadd_new_type_int_twin_rust_async(deserializer);
    return ExoticOptionalsTwinRustAsync(
        int32: var_int32,
        int64: var_int64,
        float64: var_float64,
        boolean: var_boolean,
        zerocopy: var_zerocopy,
        int8List: var_int8List,
        uint8List: var_uint8List,
        int32List: var_int32List,
        float32List: var_float32List,
        float64List: var_float64List,
        attributes: var_attributes,
        attributesNullable: var_attributesNullable,
        nullableAttributes: var_nullableAttributes,
        newtypeint: var_newtypeint);
  }

  @protected
  ExoticOptionalsTwinSync sse_decode_exotic_optionals_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_int32 = sse_decode_opt_box_autoadd_i_32(deserializer);
    var var_int64 = sse_decode_opt_box_autoadd_i_64(deserializer);
    var var_float64 = sse_decode_opt_box_autoadd_f_64(deserializer);
    var var_boolean = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_zerocopy = sse_decode_opt_list_prim_u_8_strict(deserializer);
    var var_int8List = sse_decode_opt_list_prim_i_8_strict(deserializer);
    var var_uint8List = sse_decode_opt_list_prim_u_8_strict(deserializer);
    var var_int32List = sse_decode_opt_list_prim_i_32_strict(deserializer);
    var var_float32List = sse_decode_opt_list_prim_f_32_strict(deserializer);
    var var_float64List = sse_decode_opt_list_prim_f_64_strict(deserializer);
    var var_attributes = sse_decode_opt_list_attribute_twin_sync(deserializer);
    var var_attributesNullable =
        sse_decode_list_opt_box_autoadd_attribute_twin_sync(deserializer);
    var var_nullableAttributes =
        sse_decode_opt_list_opt_box_autoadd_attribute_twin_sync(deserializer);
    var var_newtypeint =
        sse_decode_opt_box_autoadd_new_type_int_twin_sync(deserializer);
    return ExoticOptionalsTwinSync(
        int32: var_int32,
        int64: var_int64,
        float64: var_float64,
        boolean: var_boolean,
        zerocopy: var_zerocopy,
        int8List: var_int8List,
        uint8List: var_uint8List,
        int32List: var_int32List,
        float32List: var_float32List,
        float64List: var_float64List,
        attributes: var_attributes,
        attributesNullable: var_attributesNullable,
        nullableAttributes: var_nullableAttributes,
        newtypeint: var_newtypeint);
  }

  @protected
  double sse_decode_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat32();
  }

  @protected
  F32Array3 sse_decode_f_32_array_3(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_f_32_strict(deserializer);
    return F32Array3(inner);
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  F64Array16 sse_decode_f_64_array_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_f_64_strict(deserializer);
    return F64Array16(inner);
  }

  @protected
  FeatureChronoTwinNormal sse_decode_feature_chrono_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_utc = sse_decode_Chrono_Utc(deserializer);
    var var_local = sse_decode_Chrono_Local(deserializer);
    var var_duration = sse_decode_Chrono_Duration(deserializer);
    var var_naive = sse_decode_Chrono_Naive(deserializer);
    return FeatureChronoTwinNormal(
        utc: var_utc,
        local: var_local,
        duration: var_duration,
        naive: var_naive);
  }

  @protected
  FeatureChronoTwinRustAsync sse_decode_feature_chrono_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_utc = sse_decode_Chrono_Utc(deserializer);
    var var_local = sse_decode_Chrono_Local(deserializer);
    var var_duration = sse_decode_Chrono_Duration(deserializer);
    var var_naive = sse_decode_Chrono_Naive(deserializer);
    return FeatureChronoTwinRustAsync(
        utc: var_utc,
        local: var_local,
        duration: var_duration,
        naive: var_naive);
  }

  @protected
  FeatureChronoTwinSync sse_decode_feature_chrono_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_utc = sse_decode_Chrono_Utc(deserializer);
    var var_local = sse_decode_Chrono_Local(deserializer);
    var var_duration = sse_decode_Chrono_Duration(deserializer);
    var var_naive = sse_decode_Chrono_Naive(deserializer);
    return FeatureChronoTwinSync(
        utc: var_utc,
        local: var_local,
        duration: var_duration,
        naive: var_naive);
  }

  @protected
  FeatureUuidTwinNormal sse_decode_feature_uuid_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_one = sse_decode_Uuid(deserializer);
    return FeatureUuidTwinNormal(one: var_one);
  }

  @protected
  FeatureUuidTwinRustAsync sse_decode_feature_uuid_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_one = sse_decode_Uuid(deserializer);
    return FeatureUuidTwinRustAsync(one: var_one);
  }

  @protected
  FeatureUuidTwinSync sse_decode_feature_uuid_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_one = sse_decode_Uuid(deserializer);
    return FeatureUuidTwinSync(one: var_one);
  }

  @protected
  FeedIdTwinNormal sse_decode_feed_id_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_u_8_array_8(deserializer);
    return FeedIdTwinNormal(field0: var_field0);
  }

  @protected
  FeedIdTwinRustAsync sse_decode_feed_id_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_u_8_array_8(deserializer);
    return FeedIdTwinRustAsync(field0: var_field0);
  }

  @protected
  FeedIdTwinSync sse_decode_feed_id_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_u_8_array_8(deserializer);
    return FeedIdTwinSync(field0: var_field0);
  }

  @protected
  HashMapValue sse_decode_hash_map_value(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_inner = sse_decode_String(deserializer);
    return HashMapValue(inner: var_inner);
  }

  @protected
  int sse_decode_i_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt16();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  I32Array2 sse_decode_i_32_array_2(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_i_32_strict(deserializer);
    return I32Array2(inner);
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  int sse_decode_i_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt8();
  }

  @protected
  PlatformInt64 sse_decode_isize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  ItemContainerSolutionTwoTwinNormal
      sse_decode_item_container_solution_two_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_items =
        sse_decode_list_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueItemTwinNormal(
            deserializer);
    return ItemContainerSolutionTwoTwinNormal(name: var_name, items: var_items);
  }

  @protected
  KitchenSinkTwinNormal sse_decode_kitchen_sink_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return KitchenSinkTwinNormal_Empty();
      case 1:
        var var_int32 = sse_decode_i_32(deserializer);
        var var_float64 = sse_decode_f_64(deserializer);
        var var_boolean = sse_decode_bool(deserializer);
        return KitchenSinkTwinNormal_Primitives(
            int32: var_int32, float64: var_float64, boolean: var_boolean);
      case 2:
        var var_field0 = sse_decode_i_32(deserializer);
        var var_field1 = sse_decode_box_kitchen_sink_twin_normal(deserializer);
        return KitchenSinkTwinNormal_Nested(var_field0, var_field1);
      case 3:
        var var_field0 = sse_decode_opt_box_autoadd_i_32(deserializer);
        var var_field1 = sse_decode_opt_box_autoadd_i_32(deserializer);
        return KitchenSinkTwinNormal_Optional(var_field0, var_field1);
      case 4:
        var var_field0 = sse_decode_list_prim_u_8_strict(deserializer);
        return KitchenSinkTwinNormal_Buffer(var_field0);
      case 5:
        var var_field0 = sse_decode_weekdays_twin_normal(deserializer);
        return KitchenSinkTwinNormal_Enums(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  KitchenSinkTwinRustAsync sse_decode_kitchen_sink_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return KitchenSinkTwinRustAsync_Empty();
      case 1:
        var var_int32 = sse_decode_i_32(deserializer);
        var var_float64 = sse_decode_f_64(deserializer);
        var var_boolean = sse_decode_bool(deserializer);
        return KitchenSinkTwinRustAsync_Primitives(
            int32: var_int32, float64: var_float64, boolean: var_boolean);
      case 2:
        var var_field0 = sse_decode_i_32(deserializer);
        var var_field1 =
            sse_decode_box_kitchen_sink_twin_rust_async(deserializer);
        return KitchenSinkTwinRustAsync_Nested(var_field0, var_field1);
      case 3:
        var var_field0 = sse_decode_opt_box_autoadd_i_32(deserializer);
        var var_field1 = sse_decode_opt_box_autoadd_i_32(deserializer);
        return KitchenSinkTwinRustAsync_Optional(var_field0, var_field1);
      case 4:
        var var_field0 = sse_decode_list_prim_u_8_strict(deserializer);
        return KitchenSinkTwinRustAsync_Buffer(var_field0);
      case 5:
        var var_field0 = sse_decode_weekdays_twin_rust_async(deserializer);
        return KitchenSinkTwinRustAsync_Enums(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  KitchenSinkTwinSync sse_decode_kitchen_sink_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return KitchenSinkTwinSync_Empty();
      case 1:
        var var_int32 = sse_decode_i_32(deserializer);
        var var_float64 = sse_decode_f_64(deserializer);
        var var_boolean = sse_decode_bool(deserializer);
        return KitchenSinkTwinSync_Primitives(
            int32: var_int32, float64: var_float64, boolean: var_boolean);
      case 2:
        var var_field0 = sse_decode_i_32(deserializer);
        var var_field1 = sse_decode_box_kitchen_sink_twin_sync(deserializer);
        return KitchenSinkTwinSync_Nested(var_field0, var_field1);
      case 3:
        var var_field0 = sse_decode_opt_box_autoadd_i_32(deserializer);
        var var_field1 = sse_decode_opt_box_autoadd_i_32(deserializer);
        return KitchenSinkTwinSync_Optional(var_field0, var_field1);
      case 4:
        var var_field0 = sse_decode_list_prim_u_8_strict(deserializer);
        return KitchenSinkTwinSync_Buffer(var_field0);
      case 5:
        var var_field0 = sse_decode_weekdays_twin_sync(deserializer);
        return KitchenSinkTwinSync_Enums(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  List<OpaqueItemTwinNormal>
      sse_decode_list_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueItemTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <OpaqueItemTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueItemTwinNormal(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<NonCloneSimpleTwinNormal>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <NonCloneSimpleTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<NonCloneSimpleTwinRustAsync>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <NonCloneSimpleTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<NonCloneSimpleTwinSync>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <NonCloneSimpleTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<OpaqueItemTwinNormal>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueItemTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <OpaqueItemTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueItemTwinNormal(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<Duration> sse_decode_list_Chrono_Duration(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Duration>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_Chrono_Duration(deserializer));
    }
    return ans_;
  }

  @protected
  List<DateTime> sse_decode_list_Chrono_Local(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <DateTime>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_Chrono_Local(deserializer));
    }
    return ans_;
  }

  @protected
  List<DateTime> sse_decode_list_Chrono_Naive(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <DateTime>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_Chrono_Naive(deserializer));
    }
    return ans_;
  }

  @protected
  List<Object> sse_decode_list_DartOpaque(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Object>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_DartOpaque(deserializer));
    }
    return ans_;
  }

  @protected
  List<HideDataTwinNormal> sse_decode_list_RustOpaque_HideDataTwinNormal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <HideDataTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_RustOpaque_HideDataTwinNormal(deserializer));
    }
    return ans_;
  }

  @protected
  List<HideDataTwinRustAsync> sse_decode_list_RustOpaque_HideDataTwinRustAsync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <HideDataTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_RustOpaque_HideDataTwinRustAsync(deserializer));
    }
    return ans_;
  }

  @protected
  List<HideDataTwinSync> sse_decode_list_RustOpaque_HideDataTwinSync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <HideDataTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_RustOpaque_HideDataTwinSync(deserializer));
    }
    return ans_;
  }

  @protected
  List<RustStreamSink<int>> sse_decode_list_StreamSink_i_32_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <RustStreamSink<int>>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_StreamSink_i_32_Sse(deserializer));
    }
    return ans_;
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<UuidValue> sse_decode_list_Uuid(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <UuidValue>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_Uuid(deserializer));
    }
    return ans_;
  }

  @protected
  List<ApplicationEnvVar> sse_decode_list_application_env_var(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ApplicationEnvVar>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_application_env_var(deserializer));
    }
    return ans_;
  }

  @protected
  List<ApplicationMode> sse_decode_list_application_mode(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ApplicationMode>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_application_mode(deserializer));
    }
    return ans_;
  }

  @protected
  List<ApplicationSettings> sse_decode_list_application_settings(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ApplicationSettings>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_application_settings(deserializer));
    }
    return ans_;
  }

  @protected
  List<AttributeTwinNormal> sse_decode_list_attribute_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <AttributeTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_attribute_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<AttributeTwinRustAsync> sse_decode_list_attribute_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <AttributeTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_attribute_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<AttributeTwinSync> sse_decode_list_attribute_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <AttributeTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_attribute_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<BasicGeneralEnumTwinNormal>
      sse_decode_list_basic_general_enum_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <BasicGeneralEnumTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_basic_general_enum_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<BasicGeneralEnumTwinRustAsync>
      sse_decode_list_basic_general_enum_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <BasicGeneralEnumTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_basic_general_enum_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<BasicGeneralEnumTwinSync> sse_decode_list_basic_general_enum_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <BasicGeneralEnumTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_basic_general_enum_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<BasicPrimitiveEnumTwinNormal>
      sse_decode_list_basic_primitive_enum_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <BasicPrimitiveEnumTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_basic_primitive_enum_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<BasicPrimitiveEnumTwinRustAsync>
      sse_decode_list_basic_primitive_enum_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <BasicPrimitiveEnumTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_basic_primitive_enum_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<BasicPrimitiveEnumTwinSync>
      sse_decode_list_basic_primitive_enum_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <BasicPrimitiveEnumTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_basic_primitive_enum_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<BasicStructTwinNormal> sse_decode_list_basic_struct_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <BasicStructTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_basic_struct_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<BasicStructTwinRustAsync> sse_decode_list_basic_struct_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <BasicStructTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_basic_struct_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<BasicStructTwinSync> sse_decode_list_basic_struct_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <BasicStructTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_basic_struct_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<bool> sse_decode_list_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <bool>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_bool(deserializer));
    }
    return ans_;
  }

  @protected
  List<ElementTwinNormal> sse_decode_list_element_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ElementTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_element_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<ElementTwinRustAsync> sse_decode_list_element_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ElementTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_element_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<ElementTwinSync> sse_decode_list_element_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ElementTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_element_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<EnumOpaqueTwinNormal> sse_decode_list_enum_opaque_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <EnumOpaqueTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_enum_opaque_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<EnumOpaqueTwinRustAsync> sse_decode_list_enum_opaque_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <EnumOpaqueTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_enum_opaque_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<EnumOpaqueTwinSync> sse_decode_list_enum_opaque_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <EnumOpaqueTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_enum_opaque_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<Uint8List> sse_decode_list_list_prim_u_8_strict(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Uint8List>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_list_prim_u_8_strict(deserializer));
    }
    return ans_;
  }

  @protected
  List<MyEnum> sse_decode_list_my_enum(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <MyEnum>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_my_enum(deserializer));
    }
    return ans_;
  }

  @protected
  List<MySize> sse_decode_list_my_size(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <MySize>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_my_size(deserializer));
    }
    return ans_;
  }

  @protected
  List<MyTreeNodeTwinNormal> sse_decode_list_my_tree_node_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <MyTreeNodeTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_my_tree_node_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<MyTreeNodeTwinRustAsync> sse_decode_list_my_tree_node_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <MyTreeNodeTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_my_tree_node_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<MyTreeNodeTwinSync> sse_decode_list_my_tree_node_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <MyTreeNodeTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_my_tree_node_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<NestedRawStringMirrored> sse_decode_list_nested_raw_string_mirrored(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <NestedRawStringMirrored>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_nested_raw_string_mirrored(deserializer));
    }
    return ans_;
  }

  @protected
  ListOfNestedRawStringMirrored sse_decode_list_of_nested_raw_string_mirrored(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_raw = sse_decode_list_nested_raw_string_mirrored(deserializer);
    return ListOfNestedRawStringMirrored(raw: var_raw);
  }

  @protected
  List<String?> sse_decode_list_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_opt_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<AttributeTwinNormal?>
      sse_decode_list_opt_box_autoadd_attribute_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <AttributeTwinNormal?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_opt_box_autoadd_attribute_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<AttributeTwinRustAsync?>
      sse_decode_list_opt_box_autoadd_attribute_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <AttributeTwinRustAsync?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_opt_box_autoadd_attribute_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<AttributeTwinSync?> sse_decode_list_opt_box_autoadd_attribute_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <AttributeTwinSync?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_opt_box_autoadd_attribute_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<int?> sse_decode_list_opt_box_autoadd_i_32(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <int?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_opt_box_autoadd_i_32(deserializer));
    }
    return ans_;
  }

  @protected
  List<WeekdaysTwinNormal?>
      sse_decode_list_opt_box_autoadd_weekdays_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <WeekdaysTwinNormal?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_opt_box_autoadd_weekdays_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<WeekdaysTwinRustAsync?>
      sse_decode_list_opt_box_autoadd_weekdays_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <WeekdaysTwinRustAsync?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_opt_box_autoadd_weekdays_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<WeekdaysTwinSync?> sse_decode_list_opt_box_autoadd_weekdays_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <WeekdaysTwinSync?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_opt_box_autoadd_weekdays_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<Int32List?> sse_decode_list_opt_list_prim_i_32_strict(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Int32List?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_opt_list_prim_i_32_strict(deserializer));
    }
    return ans_;
  }

  @protected
  List<PointTwinNormal> sse_decode_list_point_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <PointTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_point_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<PointTwinRustAsync> sse_decode_list_point_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <PointTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_point_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<PointTwinSync> sse_decode_list_point_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <PointTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_point_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<double> sse_decode_list_prim_f_32_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getFloat32List(len_);
  }

  @protected
  Float32List sse_decode_list_prim_f_32_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getFloat32List(len_);
  }

  @protected
  List<double> sse_decode_list_prim_f_64_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getFloat64List(len_);
  }

  @protected
  Float64List sse_decode_list_prim_f_64_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getFloat64List(len_);
  }

  @protected
  List<int> sse_decode_list_prim_i_16_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getInt16List(len_);
  }

  @protected
  Int16List sse_decode_list_prim_i_16_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getInt16List(len_);
  }

  @protected
  List<int> sse_decode_list_prim_i_32_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getInt32List(len_);
  }

  @protected
  Int32List sse_decode_list_prim_i_32_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getInt32List(len_);
  }

  @protected
  Int64List sse_decode_list_prim_i_64_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getInt64List(len_);
  }

  @protected
  List<int> sse_decode_list_prim_i_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getInt8List(len_);
  }

  @protected
  Int8List sse_decode_list_prim_i_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getInt8List(len_);
  }

  @protected
  List<int> sse_decode_list_prim_u_16_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint16List(len_);
  }

  @protected
  Uint16List sse_decode_list_prim_u_16_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint16List(len_);
  }

  @protected
  List<int> sse_decode_list_prim_u_32_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint32List(len_);
  }

  @protected
  Uint32List sse_decode_list_prim_u_32_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint32List(len_);
  }

  @protected
  Uint64List sse_decode_list_prim_u_64_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint64List(len_);
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<RawStringEnumMirrored> sse_decode_list_raw_string_enum_mirrored(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <RawStringEnumMirrored>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_raw_string_enum_mirrored(deserializer));
    }
    return ans_;
  }

  @protected
  List<RawStringMirrored> sse_decode_list_raw_string_mirrored(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <RawStringMirrored>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_raw_string_mirrored(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, BasicGeneralEnumTwinNormal)>
      sse_decode_list_record_i_32_basic_general_enum_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, BasicGeneralEnumTwinNormal)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_record_i_32_basic_general_enum_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, BasicGeneralEnumTwinRustAsync)>
      sse_decode_list_record_i_32_basic_general_enum_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, BasicGeneralEnumTwinRustAsync)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_basic_general_enum_twin_rust_async(
          deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, BasicGeneralEnumTwinSync)>
      sse_decode_list_record_i_32_basic_general_enum_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, BasicGeneralEnumTwinSync)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_record_i_32_basic_general_enum_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, BasicPrimitiveEnumTwinNormal)>
      sse_decode_list_record_i_32_basic_primitive_enum_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, BasicPrimitiveEnumTwinNormal)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_basic_primitive_enum_twin_normal(
          deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, BasicPrimitiveEnumTwinRustAsync)>
      sse_decode_list_record_i_32_basic_primitive_enum_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, BasicPrimitiveEnumTwinRustAsync)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_basic_primitive_enum_twin_rust_async(
          deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, BasicPrimitiveEnumTwinSync)>
      sse_decode_list_record_i_32_basic_primitive_enum_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, BasicPrimitiveEnumTwinSync)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_record_i_32_basic_primitive_enum_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, BasicStructTwinNormal)>
      sse_decode_list_record_i_32_basic_struct_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, BasicStructTwinNormal)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_basic_struct_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, BasicStructTwinRustAsync)>
      sse_decode_list_record_i_32_basic_struct_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, BasicStructTwinRustAsync)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_record_i_32_basic_struct_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, BasicStructTwinSync)>
      sse_decode_list_record_i_32_basic_struct_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, BasicStructTwinSync)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_basic_struct_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, bool)> sse_decode_list_record_i_32_bool(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, bool)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_bool(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, double)> sse_decode_list_record_i_32_f_32(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, double)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_f_32(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, double)> sse_decode_list_record_i_32_f_64(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, double)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_f_64(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, BigInt)> sse_decode_list_record_i_32_i_128(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, BigInt)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_i_128(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, int)> sse_decode_list_record_i_32_i_16(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, int)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_i_16(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, int)> sse_decode_list_record_i_32_i_32(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, int)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_i_32(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, PlatformInt64)> sse_decode_list_record_i_32_i_64(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, PlatformInt64)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_i_64(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, int)> sse_decode_list_record_i_32_i_8(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, int)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_i_8(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, PlatformInt64)> sse_decode_list_record_i_32_isize(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, PlatformInt64)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_isize(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, Uint8List)> sse_decode_list_record_i_32_list_prim_u_8_strict(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, Uint8List)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_list_prim_u_8_strict(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, String)> sse_decode_list_record_i_32_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, String)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_string(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, BigInt)> sse_decode_list_record_i_32_u_128(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, BigInt)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_u_128(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, int)> sse_decode_list_record_i_32_u_16(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, int)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_u_16(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, int)> sse_decode_list_record_i_32_u_32(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, int)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_u_32(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, BigInt)> sse_decode_list_record_i_32_u_64(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, BigInt)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_u_64(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, int)> sse_decode_list_record_i_32_u_8(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, int)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_u_8(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, BigInt)> sse_decode_list_record_i_32_usize(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, BigInt)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_usize(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, EnumSimpleTwinNormal)>
      sse_decode_list_record_string_enum_simple_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, EnumSimpleTwinNormal)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_enum_simple_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, EnumSimpleTwinRustAsync)>
      sse_decode_list_record_string_enum_simple_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, EnumSimpleTwinRustAsync)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_record_string_enum_simple_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, EnumSimpleTwinSync)>
      sse_decode_list_record_string_enum_simple_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, EnumSimpleTwinSync)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_enum_simple_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, HashMapValue)> sse_decode_list_record_string_hash_map_value(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, HashMapValue)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_hash_map_value(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, int)> sse_decode_list_record_string_i_32(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, int)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_i_32(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, KitchenSinkTwinNormal)>
      sse_decode_list_record_string_kitchen_sink_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, KitchenSinkTwinNormal)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_kitchen_sink_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, KitchenSinkTwinRustAsync)>
      sse_decode_list_record_string_kitchen_sink_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, KitchenSinkTwinRustAsync)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_record_string_kitchen_sink_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, KitchenSinkTwinSync)>
      sse_decode_list_record_string_kitchen_sink_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, KitchenSinkTwinSync)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_kitchen_sink_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, Uint8List)> sse_decode_list_record_string_list_prim_u_8_strict(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, Uint8List)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_list_prim_u_8_strict(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, MySize)> sse_decode_list_record_string_my_size(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, MySize)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_my_size(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, String)> sse_decode_list_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, String)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_string(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, ApplicationMode)> sse_decode_list_record_u_8_application_mode(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, ApplicationMode)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_u_8_application_mode(deserializer));
    }
    return ans_;
  }

  @protected
  List<SimpleStructTwinNormal> sse_decode_list_simple_struct_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <SimpleStructTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_simple_struct_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<SimpleStructTwinRustAsync> sse_decode_list_simple_struct_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <SimpleStructTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_simple_struct_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<SimpleStructTwinSync> sse_decode_list_simple_struct_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <SimpleStructTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_simple_struct_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<SumWithTwinNormal> sse_decode_list_sum_with_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <SumWithTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_sum_with_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<SumWithTwinRustAsync> sse_decode_list_sum_with_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <SumWithTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_sum_with_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<SumWithTwinSync> sse_decode_list_sum_with_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <SumWithTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_sum_with_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<TestIdTwinNormal> sse_decode_list_test_id_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TestIdTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_test_id_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<TestIdTwinRustAsync> sse_decode_list_test_id_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TestIdTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_test_id_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<TestIdTwinSync> sse_decode_list_test_id_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TestIdTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_test_id_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<WeekdaysTwinNormal> sse_decode_list_weekdays_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <WeekdaysTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_weekdays_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<WeekdaysTwinRustAsync> sse_decode_list_weekdays_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <WeekdaysTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_weekdays_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<WeekdaysTwinSync> sse_decode_list_weekdays_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <WeekdaysTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_weekdays_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  Log2TwinNormal sse_decode_log_2_twin_normal(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_key = sse_decode_u_32(deserializer);
    var var_value = sse_decode_String(deserializer);
    return Log2TwinNormal(key: var_key, value: var_value);
  }

  @protected
  Log2TwinRustAsync sse_decode_log_2_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_key = sse_decode_u_32(deserializer);
    var var_value = sse_decode_String(deserializer);
    return Log2TwinRustAsync(key: var_key, value: var_value);
  }

  @protected
  Log2TwinSync sse_decode_log_2_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_key = sse_decode_u_32(deserializer);
    var var_value = sse_decode_String(deserializer);
    return Log2TwinSync(key: var_key, value: var_value);
  }

  @protected
  LogTwinNormal sse_decode_log_twin_normal(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_key = sse_decode_u_32(deserializer);
    var var_value = sse_decode_u_32(deserializer);
    return LogTwinNormal(key: var_key, value: var_value);
  }

  @protected
  LogTwinRustAsync sse_decode_log_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_key = sse_decode_u_32(deserializer);
    var var_value = sse_decode_u_32(deserializer);
    return LogTwinRustAsync(key: var_key, value: var_value);
  }

  @protected
  MacroStruct sse_decode_macro_struct(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_data = sse_decode_i_32(deserializer);
    return MacroStruct(data: var_data);
  }

  @protected
  MeasureTwinNormal sse_decode_measure_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_speed_twin_normal(deserializer);
        return MeasureTwinNormal_Speed(var_field0);
      case 1:
        var var_field0 = sse_decode_box_distance_twin_normal(deserializer);
        return MeasureTwinNormal_Distance(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  MeasureTwinRustAsync sse_decode_measure_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_speed_twin_rust_async(deserializer);
        return MeasureTwinRustAsync_Speed(var_field0);
      case 1:
        var var_field0 = sse_decode_box_distance_twin_rust_async(deserializer);
        return MeasureTwinRustAsync_Distance(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  MeasureTwinSync sse_decode_measure_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_speed_twin_sync(deserializer);
        return MeasureTwinSync_Speed(var_field0);
      case 1:
        var var_field0 = sse_decode_box_distance_twin_sync(deserializer);
        return MeasureTwinSync_Distance(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  MessageIdTwinNormal sse_decode_message_id_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_u_8_array_32(deserializer);
    return MessageIdTwinNormal(field0: var_field0);
  }

  @protected
  MessageIdTwinRustAsync sse_decode_message_id_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_u_8_array_32(deserializer);
    return MessageIdTwinRustAsync(field0: var_field0);
  }

  @protected
  MessageIdTwinSync sse_decode_message_id_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_u_8_array_32(deserializer);
    return MessageIdTwinSync(field0: var_field0);
  }

  @protected
  MirrorStructTwinNormal sse_decode_mirror_struct_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_application_settings(deserializer);
    var var_b = sse_decode_my_struct(deserializer);
    var var_c = sse_decode_list_my_enum(deserializer);
    var var_d = sse_decode_list_application_settings(deserializer);
    return MirrorStructTwinNormal(a: var_a, b: var_b, c: var_c, d: var_d);
  }

  @protected
  MirrorStructTwinRustAsync sse_decode_mirror_struct_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_application_settings(deserializer);
    var var_b = sse_decode_my_struct(deserializer);
    var var_c = sse_decode_list_my_enum(deserializer);
    var var_d = sse_decode_list_application_settings(deserializer);
    return MirrorStructTwinRustAsync(a: var_a, b: var_b, c: var_c, d: var_d);
  }

  @protected
  MirrorStructTwinSync sse_decode_mirror_struct_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_application_settings(deserializer);
    var var_b = sse_decode_my_struct(deserializer);
    var var_c = sse_decode_list_my_enum(deserializer);
    var var_d = sse_decode_list_application_settings(deserializer);
    return MirrorStructTwinSync(a: var_a, b: var_b, c: var_c, d: var_d);
  }

  @protected
  MoreThanJustOneRawStringStructTwinNormal
      sse_decode_more_than_just_one_raw_string_struct_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_regular = sse_decode_String(deserializer);
    var var_type = sse_decode_String(deserializer);
    var var_async_ = sse_decode_bool(deserializer);
    var var_another = sse_decode_String(deserializer);
    return MoreThanJustOneRawStringStructTwinNormal(
        regular: var_regular,
        type: var_type,
        async_: var_async_,
        another: var_another);
  }

  @protected
  MoreThanJustOneRawStringStructTwinRustAsync
      sse_decode_more_than_just_one_raw_string_struct_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_regular = sse_decode_String(deserializer);
    var var_type = sse_decode_String(deserializer);
    var var_async_ = sse_decode_bool(deserializer);
    var var_another = sse_decode_String(deserializer);
    return MoreThanJustOneRawStringStructTwinRustAsync(
        regular: var_regular,
        type: var_type,
        async_: var_async_,
        another: var_another);
  }

  @protected
  MoreThanJustOneRawStringStructTwinSync
      sse_decode_more_than_just_one_raw_string_struct_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_regular = sse_decode_String(deserializer);
    var var_type = sse_decode_String(deserializer);
    var var_async_ = sse_decode_bool(deserializer);
    var var_another = sse_decode_String(deserializer);
    return MoreThanJustOneRawStringStructTwinSync(
        regular: var_regular,
        type: var_type,
        async_: var_async_,
        another: var_another);
  }

  @protected
  MyCallableTwinNormal sse_decode_my_callable_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_one = sse_decode_String(deserializer);
    return MyCallableTwinNormal(one: var_one);
  }

  @protected
  MyCallableTwinRustAsync sse_decode_my_callable_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_one = sse_decode_String(deserializer);
    return MyCallableTwinRustAsync(one: var_one);
  }

  @protected
  MyCallableTwinSync sse_decode_my_callable_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_one = sse_decode_String(deserializer);
    return MyCallableTwinSync(one: var_one);
  }

  @protected
  MyEnum sse_decode_my_enum(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return MyEnum.values[inner];
  }

  @protected
  MyEnumWithJsonSerializableTwinNormal
      sse_decode_my_enum_with_json_serializable_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return MyEnumWithJsonSerializableTwinNormal_Apple(var_field0);
      case 1:
        var var_a = sse_decode_i_32(deserializer);
        return MyEnumWithJsonSerializableTwinNormal_Orange(a: var_a);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  MyEnumWithoutFnWithUnignoreTwinNormal
      sse_decode_my_enum_without_fn_with_unignore_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return MyEnumWithoutFnWithUnignoreTwinNormal_One(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  MyNestedStructTwinNormal sse_decode_my_nested_struct_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_treeNode = sse_decode_my_tree_node_twin_normal(deserializer);
    var var_weekday = sse_decode_weekdays_twin_normal(deserializer);
    return MyNestedStructTwinNormal(
        treeNode: var_treeNode, weekday: var_weekday);
  }

  @protected
  MyNestedStructTwinRustAsync sse_decode_my_nested_struct_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_treeNode = sse_decode_my_tree_node_twin_rust_async(deserializer);
    var var_weekday = sse_decode_weekdays_twin_rust_async(deserializer);
    return MyNestedStructTwinRustAsync(
        treeNode: var_treeNode, weekday: var_weekday);
  }

  @protected
  MyNestedStructTwinSync sse_decode_my_nested_struct_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_treeNode = sse_decode_my_tree_node_twin_sync(deserializer);
    var var_weekday = sse_decode_weekdays_twin_sync(deserializer);
    return MyNestedStructTwinSync(treeNode: var_treeNode, weekday: var_weekday);
  }

  @protected
  MySize sse_decode_my_size(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_width = sse_decode_i_32(deserializer);
    var var_height = sse_decode_i_32(deserializer);
    return MySize(width: var_width, height: var_height);
  }

  @protected
  MyStreamEntryTwinNormal sse_decode_my_stream_entry_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_hello = sse_decode_String(deserializer);
    return MyStreamEntryTwinNormal(hello: var_hello);
  }

  @protected
  MyStreamEntryTwinRustAsync sse_decode_my_stream_entry_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_hello = sse_decode_String(deserializer);
    return MyStreamEntryTwinRustAsync(hello: var_hello);
  }

  @protected
  MyStruct sse_decode_my_struct(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_content = sse_decode_bool(deserializer);
    return MyStruct(content: var_content);
  }

  @protected
  MyStructContainingStreamSinkTwinNormal
      sse_decode_my_struct_containing_stream_sink_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_i_32(deserializer);
    var var_b = sse_decode_StreamSink_i_32_Sse(deserializer);
    return MyStructContainingStreamSinkTwinNormal(a: var_a, b: var_b);
  }

  @protected
  MyStructContainingStreamSinkTwinRustAsync
      sse_decode_my_struct_containing_stream_sink_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_i_32(deserializer);
    var var_b = sse_decode_StreamSink_i_32_Sse(deserializer);
    return MyStructContainingStreamSinkTwinRustAsync(a: var_a, b: var_b);
  }

  @protected
  MyStructWithJsonSerializableTwinNormal
      sse_decode_my_struct_with_json_serializable_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_fieldOne = sse_decode_String(deserializer);
    return MyStructWithJsonSerializableTwinNormal(fieldOne: var_fieldOne);
  }

  @protected
  MyStructWithSync sse_decode_my_struct_with_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MyStructWithSync();
  }

  @protected
  MyStructWithoutFnWithUnignoreTwinNormal
      sse_decode_my_struct_without_fn_with_unignore_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_String(deserializer);
    return MyStructWithoutFnWithUnignoreTwinNormal(a: var_a);
  }

  @protected
  MyStructWithoutFnWithUnignoreWithJsonSerializableTwinNormal
      sse_decode_my_struct_without_fn_with_unignore_with_json_serializable_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_String(deserializer);
    return MyStructWithoutFnWithUnignoreWithJsonSerializableTwinNormal(
        a: var_a);
  }

  @protected
  MyTreeNodeTwinNormal sse_decode_my_tree_node_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_valueI32 = sse_decode_i_32(deserializer);
    var var_valueVecU8 = sse_decode_list_prim_u_8_strict(deserializer);
    var var_valueBoolean = sse_decode_bool(deserializer);
    var var_children = sse_decode_list_my_tree_node_twin_normal(deserializer);
    return MyTreeNodeTwinNormal(
        valueI32: var_valueI32,
        valueVecU8: var_valueVecU8,
        valueBoolean: var_valueBoolean,
        children: var_children);
  }

  @protected
  MyTreeNodeTwinRustAsync sse_decode_my_tree_node_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_valueI32 = sse_decode_i_32(deserializer);
    var var_valueVecU8 = sse_decode_list_prim_u_8_strict(deserializer);
    var var_valueBoolean = sse_decode_bool(deserializer);
    var var_children =
        sse_decode_list_my_tree_node_twin_rust_async(deserializer);
    return MyTreeNodeTwinRustAsync(
        valueI32: var_valueI32,
        valueVecU8: var_valueVecU8,
        valueBoolean: var_valueBoolean,
        children: var_children);
  }

  @protected
  MyTreeNodeTwinSync sse_decode_my_tree_node_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_valueI32 = sse_decode_i_32(deserializer);
    var var_valueVecU8 = sse_decode_list_prim_u_8_strict(deserializer);
    var var_valueBoolean = sse_decode_bool(deserializer);
    var var_children = sse_decode_list_my_tree_node_twin_sync(deserializer);
    return MyTreeNodeTwinSync(
        valueI32: var_valueI32,
        valueVecU8: var_valueVecU8,
        valueBoolean: var_valueBoolean,
        children: var_children);
  }

  @protected
  NestedRawStringMirrored sse_decode_nested_raw_string_mirrored(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_raw = sse_decode_raw_string_mirrored(deserializer);
    return NestedRawStringMirrored(raw: var_raw);
  }

  @protected
  NewSimpleStruct sse_decode_new_simple_struct(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field = sse_decode_i_32(deserializer);
    return NewSimpleStruct(field: var_field);
  }

  @protected
  NewTypeIntTwinNormal sse_decode_new_type_int_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_64(deserializer);
    return NewTypeIntTwinNormal(field0: var_field0);
  }

  @protected
  NewTypeIntTwinRustAsync sse_decode_new_type_int_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_64(deserializer);
    return NewTypeIntTwinRustAsync(field0: var_field0);
  }

  @protected
  NewTypeIntTwinSync sse_decode_new_type_int_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_64(deserializer);
    return NewTypeIntTwinSync(field0: var_field0);
  }

  @protected
  NonOpaqueStructContainingIpv4Addr
      sse_decode_non_opaque_struct_containing_ipv_4_addr(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_inner =
        sse_decode_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIpv4Addr(
            deserializer);
    return NonOpaqueStructContainingIpv4Addr(inner: var_inner);
  }

  @protected
  NoteTwinNormal sse_decode_note_twin_normal(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_day = sse_decode_box_weekdays_twin_normal(deserializer);
    var var_body = sse_decode_String(deserializer);
    return NoteTwinNormal(day: var_day, body: var_body);
  }

  @protected
  NoteTwinRustAsync sse_decode_note_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_day = sse_decode_box_weekdays_twin_rust_async(deserializer);
    var var_body = sse_decode_String(deserializer);
    return NoteTwinRustAsync(day: var_day, body: var_body);
  }

  @protected
  NoteTwinSync sse_decode_note_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_day = sse_decode_box_weekdays_twin_sync(deserializer);
    var var_body = sse_decode_String(deserializer);
    return NoteTwinSync(day: var_day, body: var_body);
  }

  @protected
  Numbers sse_decode_numbers(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_list_prim_i_32_strict(deserializer);
    return Numbers(field0: var_field0);
  }

  @protected
  OldSimpleStruct sse_decode_old_simple_struct(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field = sse_decode_i_32(deserializer);
    return OldSimpleStruct(field: var_field);
  }

  @protected
  OpaqueNestedTwinNormal sse_decode_opaque_nested_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_first = sse_decode_RustOpaque_HideDataTwinNormal(deserializer);
    var var_second = sse_decode_RustOpaque_HideDataTwinNormal(deserializer);
    return OpaqueNestedTwinNormal(first: var_first, second: var_second);
  }

  @protected
  OpaqueNestedTwinRustAsync sse_decode_opaque_nested_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_first = sse_decode_RustOpaque_HideDataTwinRustAsync(deserializer);
    var var_second = sse_decode_RustOpaque_HideDataTwinRustAsync(deserializer);
    return OpaqueNestedTwinRustAsync(first: var_first, second: var_second);
  }

  @protected
  OpaqueNestedTwinSync sse_decode_opaque_nested_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_first = sse_decode_RustOpaque_HideDataTwinSync(deserializer);
    var var_second = sse_decode_RustOpaque_HideDataTwinSync(deserializer);
    return OpaqueNestedTwinSync(first: var_first, second: var_second);
  }

  @protected
  BigInt? sse_decode_opt_I128(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_I128(deserializer));
    } else {
      return null;
    }
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_U128(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_U128(deserializer));
    } else {
      return null;
    }
  }

  @protected
  NonCloneSimpleTwinNormal?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  NonCloneSimpleTwinRustAsync?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  NonCloneSimpleTwinSync?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  Duration? sse_decode_opt_box_autoadd_Chrono_Duration(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Chrono_Duration(deserializer));
    } else {
      return null;
    }
  }

  @protected
  DateTime? sse_decode_opt_box_autoadd_Chrono_Naive(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Chrono_Naive(deserializer));
    } else {
      return null;
    }
  }

  @protected
  DateTime? sse_decode_opt_box_autoadd_Chrono_Utc(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Chrono_Utc(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Object? sse_decode_opt_box_autoadd_DartOpaque(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_DartOpaque(deserializer));
    } else {
      return null;
    }
  }

  @protected
  HideDataAnotherTwinNormal?
      sse_decode_opt_box_autoadd_RustOpaque_HideDataAnotherTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_RustOpaque_HideDataAnotherTwinNormal(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  HideDataTwinNormal? sse_decode_opt_box_autoadd_RustOpaque_HideDataTwinNormal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_RustOpaque_HideDataTwinNormal(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  HideDataTwinRustAsync?
      sse_decode_opt_box_autoadd_RustOpaque_HideDataTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_RustOpaque_HideDataTwinRustAsync(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  HideDataTwinSync? sse_decode_opt_box_autoadd_RustOpaque_HideDataTwinSync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_RustOpaque_HideDataTwinSync(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ApplicationEnv? sse_decode_opt_box_autoadd_application_env(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_application_env(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ApplicationMode? sse_decode_opt_box_autoadd_application_mode(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_application_mode(deserializer));
    } else {
      return null;
    }
  }

  @protected
  AttributeTwinNormal? sse_decode_opt_box_autoadd_attribute_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_attribute_twin_normal(deserializer));
    } else {
      return null;
    }
  }

  @protected
  AttributeTwinRustAsync? sse_decode_opt_box_autoadd_attribute_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_attribute_twin_rust_async(deserializer));
    } else {
      return null;
    }
  }

  @protected
  AttributeTwinSync? sse_decode_opt_box_autoadd_attribute_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_attribute_twin_sync(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BasicGeneralEnumTwinNormal?
      sse_decode_opt_box_autoadd_basic_general_enum_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_basic_general_enum_twin_normal(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  BasicGeneralEnumTwinRustAsync?
      sse_decode_opt_box_autoadd_basic_general_enum_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_basic_general_enum_twin_rust_async(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  BasicGeneralEnumTwinSync?
      sse_decode_opt_box_autoadd_basic_general_enum_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_basic_general_enum_twin_sync(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  BasicPrimitiveEnumTwinNormal?
      sse_decode_opt_box_autoadd_basic_primitive_enum_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_basic_primitive_enum_twin_normal(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  BasicPrimitiveEnumTwinRustAsync?
      sse_decode_opt_box_autoadd_basic_primitive_enum_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_basic_primitive_enum_twin_rust_async(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  BasicPrimitiveEnumTwinSync?
      sse_decode_opt_box_autoadd_basic_primitive_enum_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_basic_primitive_enum_twin_sync(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  BasicStructTwinNormal? sse_decode_opt_box_autoadd_basic_struct_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_basic_struct_twin_normal(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BasicStructTwinRustAsync?
      sse_decode_opt_box_autoadd_basic_struct_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_basic_struct_twin_rust_async(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  BasicStructTwinSync? sse_decode_opt_box_autoadd_basic_struct_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_basic_struct_twin_sync(deserializer));
    } else {
      return null;
    }
  }

  @protected
  bool? sse_decode_opt_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_bool(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ElementTwinNormal? sse_decode_opt_box_autoadd_element_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_element_twin_normal(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ElementTwinRustAsync? sse_decode_opt_box_autoadd_element_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_element_twin_rust_async(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ElementTwinSync? sse_decode_opt_box_autoadd_element_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_element_twin_sync(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ExoticOptionalsTwinNormal?
      sse_decode_opt_box_autoadd_exotic_optionals_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_exotic_optionals_twin_normal(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  ExoticOptionalsTwinRustAsync?
      sse_decode_opt_box_autoadd_exotic_optionals_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_exotic_optionals_twin_rust_async(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  ExoticOptionalsTwinSync?
      sse_decode_opt_box_autoadd_exotic_optionals_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_exotic_optionals_twin_sync(deserializer));
    } else {
      return null;
    }
  }

  @protected
  double? sse_decode_opt_box_autoadd_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_f_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  double? sse_decode_opt_box_autoadd_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_f_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_i_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_i_16(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_i_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PlatformInt64? sse_decode_opt_box_autoadd_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_i_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_i_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_i_8(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PlatformInt64? sse_decode_opt_box_autoadd_isize(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_isize(deserializer));
    } else {
      return null;
    }
  }

  @protected
  MeasureTwinNormal? sse_decode_opt_box_autoadd_measure_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_measure_twin_normal(deserializer));
    } else {
      return null;
    }
  }

  @protected
  MeasureTwinRustAsync? sse_decode_opt_box_autoadd_measure_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_measure_twin_rust_async(deserializer));
    } else {
      return null;
    }
  }

  @protected
  MeasureTwinSync? sse_decode_opt_box_autoadd_measure_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_measure_twin_sync(deserializer));
    } else {
      return null;
    }
  }

  @protected
  NewTypeIntTwinNormal? sse_decode_opt_box_autoadd_new_type_int_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_new_type_int_twin_normal(deserializer));
    } else {
      return null;
    }
  }

  @protected
  NewTypeIntTwinRustAsync?
      sse_decode_opt_box_autoadd_new_type_int_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_new_type_int_twin_rust_async(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  NewTypeIntTwinSync? sse_decode_opt_box_autoadd_new_type_int_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_new_type_int_twin_sync(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (String, int)? sse_decode_opt_box_autoadd_record_string_i_32(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_record_string_i_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_16(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_8(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_box_autoadd_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_usize(deserializer));
    } else {
      return null;
    }
  }

  @protected
  WeekdaysTwinNormal? sse_decode_opt_box_autoadd_weekdays_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_weekdays_twin_normal(deserializer));
    } else {
      return null;
    }
  }

  @protected
  WeekdaysTwinRustAsync? sse_decode_opt_box_autoadd_weekdays_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_weekdays_twin_rust_async(deserializer));
    } else {
      return null;
    }
  }

  @protected
  WeekdaysTwinSync? sse_decode_opt_box_autoadd_weekdays_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_weekdays_twin_sync(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BenchmarkBinaryTreeTwinNormal?
      sse_decode_opt_box_benchmark_binary_tree_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_benchmark_binary_tree_twin_normal(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BenchmarkBinaryTreeTwinRustAsync?
      sse_decode_opt_box_benchmark_binary_tree_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_benchmark_binary_tree_twin_rust_async(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  BenchmarkBinaryTreeTwinSync?
      sse_decode_opt_box_benchmark_binary_tree_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_benchmark_binary_tree_twin_sync(deserializer));
    } else {
      return null;
    }
  }

  @protected
  bool? sse_decode_opt_box_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_bool(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ExoticOptionalsTwinNormal? sse_decode_opt_box_exotic_optionals_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_exotic_optionals_twin_normal(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ExoticOptionalsTwinRustAsync?
      sse_decode_opt_box_exotic_optionals_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_exotic_optionals_twin_rust_async(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ExoticOptionalsTwinSync? sse_decode_opt_box_exotic_optionals_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_exotic_optionals_twin_sync(deserializer));
    } else {
      return null;
    }
  }

  @protected
  double? sse_decode_opt_box_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_f_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_i_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PlatformInt64? sse_decode_opt_box_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_i_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_i_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_i_8(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_u_8(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<AttributeTwinNormal>? sse_decode_opt_list_attribute_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_attribute_twin_normal(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<AttributeTwinRustAsync>? sse_decode_opt_list_attribute_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_attribute_twin_rust_async(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<AttributeTwinSync>? sse_decode_opt_list_attribute_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_attribute_twin_sync(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<ElementTwinNormal>? sse_decode_opt_list_element_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_element_twin_normal(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<ElementTwinRustAsync>? sse_decode_opt_list_element_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_element_twin_rust_async(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<ElementTwinSync>? sse_decode_opt_list_element_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_element_twin_sync(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<AttributeTwinNormal?>?
      sse_decode_opt_list_opt_box_autoadd_attribute_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_opt_box_autoadd_attribute_twin_normal(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<AttributeTwinRustAsync?>?
      sse_decode_opt_list_opt_box_autoadd_attribute_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_opt_box_autoadd_attribute_twin_rust_async(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<AttributeTwinSync?>?
      sse_decode_opt_list_opt_box_autoadd_attribute_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_opt_box_autoadd_attribute_twin_sync(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  Float32List? sse_decode_opt_list_prim_f_32_strict(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_f_32_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Float64List? sse_decode_opt_list_prim_f_64_strict(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_f_64_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Int32List? sse_decode_opt_list_prim_i_32_strict(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_i_32_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Int8List? sse_decode_opt_list_prim_i_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_i_8_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Uint8List? sse_decode_opt_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_u_8_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  OptVecsTwinNormal sse_decode_opt_vecs_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_i32 = sse_decode_list_opt_box_autoadd_i_32(deserializer);
    var var_enums =
        sse_decode_list_opt_box_autoadd_weekdays_twin_normal(deserializer);
    var var_strings = sse_decode_list_opt_String(deserializer);
    var var_buffers = sse_decode_list_opt_list_prim_i_32_strict(deserializer);
    return OptVecsTwinNormal(
        i32: var_i32,
        enums: var_enums,
        strings: var_strings,
        buffers: var_buffers);
  }

  @protected
  OptVecsTwinRustAsync sse_decode_opt_vecs_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_i32 = sse_decode_list_opt_box_autoadd_i_32(deserializer);
    var var_enums =
        sse_decode_list_opt_box_autoadd_weekdays_twin_rust_async(deserializer);
    var var_strings = sse_decode_list_opt_String(deserializer);
    var var_buffers = sse_decode_list_opt_list_prim_i_32_strict(deserializer);
    return OptVecsTwinRustAsync(
        i32: var_i32,
        enums: var_enums,
        strings: var_strings,
        buffers: var_buffers);
  }

  @protected
  OptVecsTwinSync sse_decode_opt_vecs_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_i32 = sse_decode_list_opt_box_autoadd_i_32(deserializer);
    var var_enums =
        sse_decode_list_opt_box_autoadd_weekdays_twin_sync(deserializer);
    var var_strings = sse_decode_list_opt_String(deserializer);
    var var_buffers = sse_decode_list_opt_list_prim_i_32_strict(deserializer);
    return OptVecsTwinSync(
        i32: var_i32,
        enums: var_enums,
        strings: var_strings,
        buffers: var_buffers);
  }

  @protected
  PointTwinNormal sse_decode_point_twin_normal(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_x = sse_decode_f_32(deserializer);
    var var_y = sse_decode_f_32(deserializer);
    return PointTwinNormal(x: var_x, y: var_y);
  }

  @protected
  PointTwinNormalArray2 sse_decode_point_twin_normal_array_2(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_point_twin_normal(deserializer);
    return PointTwinNormalArray2(inner);
  }

  @protected
  PointTwinRustAsync sse_decode_point_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_x = sse_decode_f_32(deserializer);
    var var_y = sse_decode_f_32(deserializer);
    return PointTwinRustAsync(x: var_x, y: var_y);
  }

  @protected
  PointTwinRustAsyncArray2 sse_decode_point_twin_rust_async_array_2(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_point_twin_rust_async(deserializer);
    return PointTwinRustAsyncArray2(inner);
  }

  @protected
  PointTwinSync sse_decode_point_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_x = sse_decode_f_32(deserializer);
    var var_y = sse_decode_f_32(deserializer);
    return PointTwinSync(x: var_x, y: var_y);
  }

  @protected
  PointTwinSyncArray2 sse_decode_point_twin_sync_array_2(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_point_twin_sync(deserializer);
    return PointTwinSyncArray2(inner);
  }

  @protected
  RawStringEnumMirrored sse_decode_raw_string_enum_mirrored(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 =
            sse_decode_box_autoadd_raw_string_mirrored(deserializer);
        return RawStringEnumMirrored_Raw(var_field0);
      case 1:
        var var_field0 =
            sse_decode_box_autoadd_nested_raw_string_mirrored(deserializer);
        return RawStringEnumMirrored_Nested(var_field0);
      case 2:
        var var_field0 =
            sse_decode_box_autoadd_list_of_nested_raw_string_mirrored(
                deserializer);
        return RawStringEnumMirrored_ListOfNested(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  RawStringItemEnumTwinNormal sse_decode_raw_string_item_enum_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_regular = sse_decode_String(deserializer);
        return RawStringItemEnumTwinNormal_Regular(regular: var_regular);
      case 1:
        var var_type = sse_decode_String(deserializer);
        return RawStringItemEnumTwinNormal_Raw(type: var_type);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  RawStringItemEnumTwinRustAsync
      sse_decode_raw_string_item_enum_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_regular = sse_decode_String(deserializer);
        return RawStringItemEnumTwinRustAsync_Regular(regular: var_regular);
      case 1:
        var var_type = sse_decode_String(deserializer);
        return RawStringItemEnumTwinRustAsync_Raw(type: var_type);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  RawStringItemEnumTwinSync sse_decode_raw_string_item_enum_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_regular = sse_decode_String(deserializer);
        return RawStringItemEnumTwinSync_Regular(regular: var_regular);
      case 1:
        var var_type = sse_decode_String(deserializer);
        return RawStringItemEnumTwinSync_Raw(type: var_type);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  RawStringItemStructTwinNormal sse_decode_raw_string_item_struct_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_type = sse_decode_String(deserializer);
    return RawStringItemStructTwinNormal(type: var_type);
  }

  @protected
  RawStringItemStructTwinRustAsync
      sse_decode_raw_string_item_struct_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_type = sse_decode_String(deserializer);
    return RawStringItemStructTwinRustAsync(type: var_type);
  }

  @protected
  RawStringItemStructTwinSync sse_decode_raw_string_item_struct_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_type = sse_decode_String(deserializer);
    return RawStringItemStructTwinSync(type: var_type);
  }

  @protected
  RawStringMirrored sse_decode_raw_string_mirrored(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_value = sse_decode_String(deserializer);
    var var_type = sse_decode_String(deserializer);
    return RawStringMirrored(value: var_value, type: var_type);
  }

  @protected
  (ApplicationSettings, RawStringEnumMirrored)
      sse_decode_record_application_settings_raw_string_enum_mirrored(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_application_settings(deserializer);
    var var_field1 = sse_decode_raw_string_enum_mirrored(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (
    OpaqueOneTwinNormal,
    OpaqueTwoTwinNormal
  ) sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_one_twin_normal_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_two_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinNormal(
            deserializer);
    var var_field1 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinNormal(
            deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (
    OpaqueOneTwinRustAsync,
    OpaqueTwoTwinRustAsync
  ) sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_one_twin_rust_async_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_two_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinRustAsync(
            deserializer);
    var var_field1 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinRustAsync(
            deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (
    OpaqueOneTwinSync,
    OpaqueTwoTwinSync
  ) sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_one_twin_sync_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_two_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinSync(
            deserializer);
    var var_field1 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinSync(
            deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, BasicGeneralEnumTwinNormal)
      sse_decode_record_i_32_basic_general_enum_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_basic_general_enum_twin_normal(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, BasicGeneralEnumTwinRustAsync)
      sse_decode_record_i_32_basic_general_enum_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 =
        sse_decode_basic_general_enum_twin_rust_async(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, BasicGeneralEnumTwinSync)
      sse_decode_record_i_32_basic_general_enum_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_basic_general_enum_twin_sync(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, BasicPrimitiveEnumTwinNormal)
      sse_decode_record_i_32_basic_primitive_enum_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_basic_primitive_enum_twin_normal(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, BasicPrimitiveEnumTwinRustAsync)
      sse_decode_record_i_32_basic_primitive_enum_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 =
        sse_decode_basic_primitive_enum_twin_rust_async(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, BasicPrimitiveEnumTwinSync)
      sse_decode_record_i_32_basic_primitive_enum_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_basic_primitive_enum_twin_sync(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, BasicStructTwinNormal) sse_decode_record_i_32_basic_struct_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_basic_struct_twin_normal(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, BasicStructTwinRustAsync)
      sse_decode_record_i_32_basic_struct_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_basic_struct_twin_rust_async(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, BasicStructTwinSync) sse_decode_record_i_32_basic_struct_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_basic_struct_twin_sync(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, bool) sse_decode_record_i_32_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_bool(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, double) sse_decode_record_i_32_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_f_32(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, double) sse_decode_record_i_32_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_f_64(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, BigInt) sse_decode_record_i_32_i_128(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_I128(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, int) sse_decode_record_i_32_i_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_i_16(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, int) sse_decode_record_i_32_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_i_32(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, PlatformInt64) sse_decode_record_i_32_i_64(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_i_64(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, int) sse_decode_record_i_32_i_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_i_8(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, PlatformInt64) sse_decode_record_i_32_isize(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_isize(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, Uint8List) sse_decode_record_i_32_list_prim_u_8_strict(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_list_prim_u_8_strict(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, String) sse_decode_record_i_32_string(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, BigInt) sse_decode_record_i_32_u_128(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_U128(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, int) sse_decode_record_i_32_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_u_16(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, int) sse_decode_record_i_32_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_u_32(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, BigInt) sse_decode_record_i_32_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_u_64(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, int) sse_decode_record_i_32_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_u_8(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, BigInt) sse_decode_record_i_32_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_usize(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, EnumSimpleTwinNormal)
      sse_decode_record_string_enum_simple_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_enum_simple_twin_normal(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, EnumSimpleTwinRustAsync)
      sse_decode_record_string_enum_simple_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_enum_simple_twin_rust_async(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, EnumSimpleTwinSync) sse_decode_record_string_enum_simple_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_enum_simple_twin_sync(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, HashMapValue) sse_decode_record_string_hash_map_value(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_hash_map_value(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, int) sse_decode_record_string_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_i_32(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, KitchenSinkTwinNormal)
      sse_decode_record_string_kitchen_sink_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_kitchen_sink_twin_normal(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, KitchenSinkTwinRustAsync)
      sse_decode_record_string_kitchen_sink_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_kitchen_sink_twin_rust_async(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, KitchenSinkTwinSync) sse_decode_record_string_kitchen_sink_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_kitchen_sink_twin_sync(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, Uint8List) sse_decode_record_string_list_prim_u_8_strict(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_list_prim_u_8_strict(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, MySize) sse_decode_record_string_my_size(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_my_size(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, String) sse_decode_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, ApplicationMode) sse_decode_record_u_8_application_mode(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_u_8(deserializer);
    var var_field1 = sse_decode_application_mode(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  Sequences sse_decode_sequences(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_list_prim_i_32_strict(deserializer);
    return Sequences(field0: var_field0);
  }

  @protected
  SimpleEnumTwinNormal sse_decode_simple_enum_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return SimpleEnumTwinNormal_First();
      case 1:
        var var_field0 = sse_decode_String(deserializer);
        return SimpleEnumTwinNormal_Second(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  SimpleEnumTwinRustAsync sse_decode_simple_enum_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return SimpleEnumTwinRustAsync_First();
      case 1:
        var var_field0 = sse_decode_String(deserializer);
        return SimpleEnumTwinRustAsync_Second(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  SimpleEnumTwinSync sse_decode_simple_enum_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return SimpleEnumTwinSync_First();
      case 1:
        var var_field0 = sse_decode_String(deserializer);
        return SimpleEnumTwinSync_Second(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  SimplePrimitiveEnumTwinNormal sse_decode_simple_primitive_enum_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return SimplePrimitiveEnumTwinNormal.values[inner];
  }

  @protected
  SimplePrimitiveEnumTwinRustAsync
      sse_decode_simple_primitive_enum_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return SimplePrimitiveEnumTwinRustAsync.values[inner];
  }

  @protected
  SimplePrimitiveEnumTwinSync sse_decode_simple_primitive_enum_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return SimplePrimitiveEnumTwinSync.values[inner];
  }

  @protected
  SimpleStructForBorrowTwinNormal
      sse_decode_simple_struct_for_borrow_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_one = sse_decode_String(deserializer);
    return SimpleStructForBorrowTwinNormal(one: var_one);
  }

  @protected
  SimpleStructForBorrowTwinRustAsync
      sse_decode_simple_struct_for_borrow_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_one = sse_decode_String(deserializer);
    return SimpleStructForBorrowTwinRustAsync(one: var_one);
  }

  @protected
  SimpleStructForBorrowTwinSync sse_decode_simple_struct_for_borrow_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_one = sse_decode_String(deserializer);
    return SimpleStructForBorrowTwinSync(one: var_one);
  }

  @protected
  SimpleStructTwinNormal sse_decode_simple_struct_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_one = sse_decode_String(deserializer);
    return SimpleStructTwinNormal(one: var_one);
  }

  @protected
  SimpleStructTwinRustAsync sse_decode_simple_struct_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_one = sse_decode_String(deserializer);
    return SimpleStructTwinRustAsync(one: var_one);
  }

  @protected
  SimpleStructTwinSync sse_decode_simple_struct_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_one = sse_decode_String(deserializer);
    return SimpleStructTwinSync(one: var_one);
  }

  @protected
  SimpleTraitForDynTwinNormalImplementor
      sse_decode_simple_trait_for_dyn_twin_normal_implementor(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 =
            sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitForDynTwinNormal(
                deserializer);
        return SimpleTraitForDynTwinNormalImplementor_Variant0(var_field0);
      case 1:
        var var_field0 =
            sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitForDynTwinNormal(
                deserializer);
        return SimpleTraitForDynTwinNormalImplementor_Variant1(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  SimpleTranslatableExternalStructWithMethod
      sse_decode_simple_translatable_external_struct_with_method(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_String(deserializer);
    return SimpleTranslatableExternalStructWithMethod(a: var_a);
  }

  @protected
  SomeStructTwinNormal sse_decode_some_struct_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_value = sse_decode_u_32(deserializer);
    return SomeStructTwinNormal(value: var_value);
  }

  @protected
  SomeStructTwinRustAsync sse_decode_some_struct_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_value = sse_decode_u_32(deserializer);
    return SomeStructTwinRustAsync(value: var_value);
  }

  @protected
  SomeStructTwinSync sse_decode_some_struct_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_value = sse_decode_u_32(deserializer);
    return SomeStructTwinSync(value: var_value);
  }

  @protected
  SpeedTwinNormal sse_decode_speed_twin_normal(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return SpeedTwinNormal_Unknown();
      case 1:
        var var_field0 = sse_decode_f_64(deserializer);
        return SpeedTwinNormal_GPS(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  SpeedTwinRustAsync sse_decode_speed_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return SpeedTwinRustAsync_Unknown();
      case 1:
        var var_field0 = sse_decode_f_64(deserializer);
        return SpeedTwinRustAsync_GPS(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  SpeedTwinSync sse_decode_speed_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return SpeedTwinSync_Unknown();
      case 1:
        var var_field0 = sse_decode_f_64(deserializer);
        return SpeedTwinSync_GPS(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  StaticOnlyTwinNormal sse_decode_static_only_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_one = sse_decode_String(deserializer);
    return StaticOnlyTwinNormal(one: var_one);
  }

  @protected
  StaticOnlyTwinRustAsync sse_decode_static_only_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_one = sse_decode_String(deserializer);
    return StaticOnlyTwinRustAsync(one: var_one);
  }

  @protected
  StaticOnlyTwinSync sse_decode_static_only_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_one = sse_decode_String(deserializer);
    return StaticOnlyTwinSync(one: var_one);
  }

  @protected
  StructInLowerLevel sse_decode_struct_in_lower_level(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_inner = sse_decode_struct_in_upper_level(deserializer);
    return StructInLowerLevel(inner: var_inner);
  }

  @protected
  StructInUpperLevel sse_decode_struct_in_upper_level(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_upper = sse_decode_usize(deserializer);
    return StructInUpperLevel(upper: var_upper);
  }

  @protected
  StructWithCastedPrimitiveTwinNormal
      sse_decode_struct_with_casted_primitive_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_fieldI64 = sse_decode_CastedPrimitive_i_64(deserializer);
    var var_fieldU64 = sse_decode_CastedPrimitive_u_64(deserializer);
    var var_fieldI32 = sse_decode_i_32(deserializer);
    var var_fieldVecU8 = sse_decode_list_prim_u_8_strict(deserializer);
    return StructWithCastedPrimitiveTwinNormal(
        fieldI64: var_fieldI64,
        fieldU64: var_fieldU64,
        fieldI32: var_fieldI32,
        fieldVecU8: var_fieldVecU8);
  }

  @protected
  StructWithCommentsTwinNormal sse_decode_struct_with_comments_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_fieldWithComments = sse_decode_i_32(deserializer);
    return StructWithCommentsTwinNormal(
        fieldWithComments: var_fieldWithComments);
  }

  @protected
  StructWithCommentsTwinRustAsync
      sse_decode_struct_with_comments_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_fieldWithComments = sse_decode_i_32(deserializer);
    return StructWithCommentsTwinRustAsync(
        fieldWithComments: var_fieldWithComments);
  }

  @protected
  StructWithCommentsTwinSync sse_decode_struct_with_comments_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_fieldWithComments = sse_decode_i_32(deserializer);
    return StructWithCommentsTwinSync(fieldWithComments: var_fieldWithComments);
  }

  @protected
  StructWithCustomNameMethodTwinNormal
      sse_decode_struct_with_custom_name_method_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    return StructWithCustomNameMethodTwinNormal(field0: var_field0);
  }

  @protected
  StructWithDartKeywordFieldTwinNormal
      sse_decode_struct_with_dart_keyword_field_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_class_ = sse_decode_i_32(deserializer);
    var var_interface_ = sse_decode_i_64(deserializer);
    return StructWithDartKeywordFieldTwinNormal(
        class_: var_class_, interface_: var_interface_);
  }

  @protected
  StructWithDartKeywordFieldTwinRustAsync
      sse_decode_struct_with_dart_keyword_field_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_class_ = sse_decode_i_32(deserializer);
    var var_interface_ = sse_decode_i_64(deserializer);
    return StructWithDartKeywordFieldTwinRustAsync(
        class_: var_class_, interface_: var_interface_);
  }

  @protected
  StructWithDartKeywordFieldTwinSync
      sse_decode_struct_with_dart_keyword_field_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_class_ = sse_decode_i_32(deserializer);
    var var_interface_ = sse_decode_i_64(deserializer);
    return StructWithDartKeywordFieldTwinSync(
        class_: var_class_, interface_: var_interface_);
  }

  @protected
  StructWithEnumTwinNormal sse_decode_struct_with_enum_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_abc1 = sse_decode_abc_twin_normal(deserializer);
    var var_abc2 = sse_decode_abc_twin_normal(deserializer);
    return StructWithEnumTwinNormal(abc1: var_abc1, abc2: var_abc2);
  }

  @protected
  StructWithEnumTwinRustAsync sse_decode_struct_with_enum_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_abc1 = sse_decode_abc_twin_rust_async(deserializer);
    var var_abc2 = sse_decode_abc_twin_rust_async(deserializer);
    return StructWithEnumTwinRustAsync(abc1: var_abc1, abc2: var_abc2);
  }

  @protected
  StructWithEnumTwinSync sse_decode_struct_with_enum_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_abc1 = sse_decode_abc_twin_sync(deserializer);
    var var_abc2 = sse_decode_abc_twin_sync(deserializer);
    return StructWithEnumTwinSync(abc1: var_abc1, abc2: var_abc2);
  }

  @protected
  StructWithExplicitAutoOpaqueFieldTwinNormal
      sse_decode_struct_with_explicit_auto_opaque_field_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_autoOpaque =
        sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            deserializer);
    var var_normal = sse_decode_i_32(deserializer);
    return StructWithExplicitAutoOpaqueFieldTwinNormal(
        autoOpaque: var_autoOpaque, normal: var_normal);
  }

  @protected
  StructWithExplicitAutoOpaqueFieldTwinRustAsync
      sse_decode_struct_with_explicit_auto_opaque_field_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_autoOpaque =
        sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            deserializer);
    var var_normal = sse_decode_i_32(deserializer);
    return StructWithExplicitAutoOpaqueFieldTwinRustAsync(
        autoOpaque: var_autoOpaque, normal: var_normal);
  }

  @protected
  StructWithExplicitAutoOpaqueFieldTwinSync
      sse_decode_struct_with_explicit_auto_opaque_field_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_autoOpaque =
        sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            deserializer);
    var var_normal = sse_decode_i_32(deserializer);
    return StructWithExplicitAutoOpaqueFieldTwinSync(
        autoOpaque: var_autoOpaque, normal: var_normal);
  }

  @protected
  StructWithFieldRenameTwinNormal
      sse_decode_struct_with_field_rename_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_renamed_field = sse_decode_i_32(deserializer);
    return StructWithFieldRenameTwinNormal(renamed_field: var_renamed_field);
  }

  @protected
  StructWithFieldRenameTwinRustAsync
      sse_decode_struct_with_field_rename_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_renamed_field = sse_decode_i_32(deserializer);
    return StructWithFieldRenameTwinRustAsync(renamed_field: var_renamed_field);
  }

  @protected
  StructWithFieldRenameTwinSync sse_decode_struct_with_field_rename_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_renamed_field = sse_decode_i_32(deserializer);
    return StructWithFieldRenameTwinSync(renamed_field: var_renamed_field);
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinNormal
      sse_decode_struct_with_good_and_opaque_field_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_good = sse_decode_String(deserializer);
    var var_opaque =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            deserializer);
    var var_optionOpaque =
        sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            deserializer);
    return StructWithGoodAndOpaqueFieldTwinNormal(
        good: var_good, opaque: var_opaque, optionOpaque: var_optionOpaque);
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinRustAsync
      sse_decode_struct_with_good_and_opaque_field_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_good = sse_decode_String(deserializer);
    var var_opaque =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            deserializer);
    var var_optionOpaque =
        sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            deserializer);
    return StructWithGoodAndOpaqueFieldTwinRustAsync(
        good: var_good, opaque: var_opaque, optionOpaque: var_optionOpaque);
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinSync
      sse_decode_struct_with_good_and_opaque_field_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_good = sse_decode_String(deserializer);
    var var_opaque =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            deserializer);
    var var_optionOpaque =
        sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            deserializer);
    return StructWithGoodAndOpaqueFieldTwinSync(
        good: var_good, opaque: var_opaque, optionOpaque: var_optionOpaque);
  }

  @protected
  StructWithHashMap sse_decode_struct_with_hash_map(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_map = sse_decode_Map_String_hash_map_value_None(deserializer);
    return StructWithHashMap(map: var_map);
  }

  @protected
  StructWithImplBlockInAnotherFile
      sse_decode_struct_with_impl_block_in_another_file(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructWithImplBlockInAnotherFile();
  }

  @protected
  StructWithImplBlockInAnotherFileDependency
      sse_decode_struct_with_impl_block_in_another_file_dependency(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructWithImplBlockInAnotherFileDependency();
  }

  @protected
  StructWithOneFieldTwinNormal sse_decode_struct_with_one_field_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_i_32(deserializer);
    return StructWithOneFieldTwinNormal(a: var_a);
  }

  @protected
  StructWithOneFieldTwinRustAsync
      sse_decode_struct_with_one_field_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_i_32(deserializer);
    return StructWithOneFieldTwinRustAsync(a: var_a);
  }

  @protected
  StructWithOneFieldTwinSync sse_decode_struct_with_one_field_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_i_32(deserializer);
    return StructWithOneFieldTwinSync(a: var_a);
  }

  @protected
  StructWithRawNameField sse_decode_struct_with_raw_name_field(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_type = sse_decode_String(deserializer);
    return StructWithRawNameField(type: var_type);
  }

  @protected
  StructWithRustAutoOpaqueFieldWithManyDerive
      sse_decode_struct_with_rust_auto_opaque_field_with_many_derive(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_content =
        sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithRustAutoOpaqueFieldWithManyDeriveInner(
            deserializer);
    return StructWithRustAutoOpaqueFieldWithManyDerive(content: var_content);
  }

  @protected
  StructWithRustAutoOpaqueWithNonCloneData
      sse_decode_struct_with_rust_auto_opaque_with_non_clone_data(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_content =
        sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneDataRaw(
            deserializer);
    return StructWithRustAutoOpaqueWithNonCloneData(content: var_content);
  }

  @protected
  StructWithTwoFieldTwinNormal sse_decode_struct_with_two_field_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_i_32(deserializer);
    var var_b = sse_decode_i_32(deserializer);
    return StructWithTwoFieldTwinNormal(a: var_a, b: var_b);
  }

  @protected
  StructWithTwoFieldTwinRustAsync
      sse_decode_struct_with_two_field_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_i_32(deserializer);
    var var_b = sse_decode_i_32(deserializer);
    return StructWithTwoFieldTwinRustAsync(a: var_a, b: var_b);
  }

  @protected
  StructWithTwoFieldTwinSync sse_decode_struct_with_two_field_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_i_32(deserializer);
    var var_b = sse_decode_i_32(deserializer);
    return StructWithTwoFieldTwinSync(a: var_a, b: var_b);
  }

  @protected
  StructWithZeroFieldTwinNormal sse_decode_struct_with_zero_field_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructWithZeroFieldTwinNormal();
  }

  @protected
  StructWithZeroFieldTwinRustAsync
      sse_decode_struct_with_zero_field_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructWithZeroFieldTwinRustAsync();
  }

  @protected
  StructWithZeroFieldTwinSync sse_decode_struct_with_zero_field_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructWithZeroFieldTwinSync();
  }

  @protected
  SumWithTwinNormal sse_decode_sum_with_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_x = sse_decode_u_32(deserializer);
    return SumWithTwinNormal(x: var_x);
  }

  @protected
  SumWithTwinNormalArray3 sse_decode_sum_with_twin_normal_array_3(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_sum_with_twin_normal(deserializer);
    return SumWithTwinNormalArray3(inner);
  }

  @protected
  SumWithTwinRustAsync sse_decode_sum_with_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_x = sse_decode_u_32(deserializer);
    return SumWithTwinRustAsync(x: var_x);
  }

  @protected
  SumWithTwinRustAsyncArray3 sse_decode_sum_with_twin_rust_async_array_3(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_sum_with_twin_rust_async(deserializer);
    return SumWithTwinRustAsyncArray3(inner);
  }

  @protected
  SumWithTwinSync sse_decode_sum_with_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_x = sse_decode_u_32(deserializer);
    return SumWithTwinSync(x: var_x);
  }

  @protected
  SumWithTwinSyncArray3 sse_decode_sum_with_twin_sync_array_3(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_sum_with_twin_sync(deserializer);
    return SumWithTwinSyncArray3(inner);
  }

  @protected
  TestChronoTwinNormal sse_decode_test_chrono_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_dt = sse_decode_opt_box_autoadd_Chrono_Utc(deserializer);
    var var_dt2 = sse_decode_opt_box_autoadd_Chrono_Naive(deserializer);
    var var_du = sse_decode_opt_box_autoadd_Chrono_Duration(deserializer);
    return TestChronoTwinNormal(dt: var_dt, dt2: var_dt2, du: var_du);
  }

  @protected
  TestChronoTwinRustAsync sse_decode_test_chrono_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_dt = sse_decode_opt_box_autoadd_Chrono_Utc(deserializer);
    var var_dt2 = sse_decode_opt_box_autoadd_Chrono_Naive(deserializer);
    var var_du = sse_decode_opt_box_autoadd_Chrono_Duration(deserializer);
    return TestChronoTwinRustAsync(dt: var_dt, dt2: var_dt2, du: var_du);
  }

  @protected
  TestChronoTwinSync sse_decode_test_chrono_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_dt = sse_decode_opt_box_autoadd_Chrono_Utc(deserializer);
    var var_dt2 = sse_decode_opt_box_autoadd_Chrono_Naive(deserializer);
    var var_du = sse_decode_opt_box_autoadd_Chrono_Duration(deserializer);
    return TestChronoTwinSync(dt: var_dt, dt2: var_dt2, du: var_du);
  }

  @protected
  TestIdTwinNormal sse_decode_test_id_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32_array_2(deserializer);
    return TestIdTwinNormal(field0: var_field0);
  }

  @protected
  TestIdTwinNormalArray2 sse_decode_test_id_twin_normal_array_2(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_test_id_twin_normal(deserializer);
    return TestIdTwinNormalArray2(inner);
  }

  @protected
  TestIdTwinNormalArray4 sse_decode_test_id_twin_normal_array_4(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_test_id_twin_normal(deserializer);
    return TestIdTwinNormalArray4(inner);
  }

  @protected
  TestIdTwinRustAsync sse_decode_test_id_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32_array_2(deserializer);
    return TestIdTwinRustAsync(field0: var_field0);
  }

  @protected
  TestIdTwinRustAsyncArray2 sse_decode_test_id_twin_rust_async_array_2(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_test_id_twin_rust_async(deserializer);
    return TestIdTwinRustAsyncArray2(inner);
  }

  @protected
  TestIdTwinRustAsyncArray4 sse_decode_test_id_twin_rust_async_array_4(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_test_id_twin_rust_async(deserializer);
    return TestIdTwinRustAsyncArray4(inner);
  }

  @protected
  TestIdTwinSync sse_decode_test_id_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32_array_2(deserializer);
    return TestIdTwinSync(field0: var_field0);
  }

  @protected
  TestIdTwinSyncArray2 sse_decode_test_id_twin_sync_array_2(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_test_id_twin_sync(deserializer);
    return TestIdTwinSyncArray2(inner);
  }

  @protected
  TestIdTwinSyncArray4 sse_decode_test_id_twin_sync_array_4(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_test_id_twin_sync(deserializer);
    return TestIdTwinSyncArray4(inner);
  }

  @protected
  TestModelTwinNormal sse_decode_test_model_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_64(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_aliasEnum = sse_decode_my_enum(deserializer);
    var var_aliasStruct = sse_decode_my_struct(deserializer);
    return TestModelTwinNormal(
        id: var_id,
        name: var_name,
        aliasEnum: var_aliasEnum,
        aliasStruct: var_aliasStruct);
  }

  @protected
  TestModelTwinRustAsync sse_decode_test_model_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_64(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_aliasEnum = sse_decode_my_enum(deserializer);
    var var_aliasStruct = sse_decode_my_struct(deserializer);
    return TestModelTwinRustAsync(
        id: var_id,
        name: var_name,
        aliasEnum: var_aliasEnum,
        aliasStruct: var_aliasStruct);
  }

  @protected
  TestModelTwinSync sse_decode_test_model_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_64(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_aliasEnum = sse_decode_my_enum(deserializer);
    var var_aliasStruct = sse_decode_my_struct(deserializer);
    return TestModelTwinSync(
        id: var_id,
        name: var_name,
        aliasEnum: var_aliasEnum,
        aliasStruct: var_aliasStruct);
  }

  @protected
  TranslatableStructWithDartCodeTwinNormal
      sse_decode_translatable_struct_with_dart_code_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_i_32(deserializer);
    return TranslatableStructWithDartCodeTwinNormal(a: var_a);
  }

  @protected
  TupleStructWithOneFieldTwinNormal
      sse_decode_tuple_struct_with_one_field_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    return TupleStructWithOneFieldTwinNormal(field0: var_field0);
  }

  @protected
  TupleStructWithOneFieldTwinRustAsync
      sse_decode_tuple_struct_with_one_field_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    return TupleStructWithOneFieldTwinRustAsync(field0: var_field0);
  }

  @protected
  TupleStructWithOneFieldTwinSync
      sse_decode_tuple_struct_with_one_field_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    return TupleStructWithOneFieldTwinSync(field0: var_field0);
  }

  @protected
  TupleStructWithTwoFieldTwinNormal
      sse_decode_tuple_struct_with_two_field_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_i_32(deserializer);
    return TupleStructWithTwoFieldTwinNormal(
        field0: var_field0, field1: var_field1);
  }

  @protected
  TupleStructWithTwoFieldTwinRustAsync
      sse_decode_tuple_struct_with_two_field_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_i_32(deserializer);
    return TupleStructWithTwoFieldTwinRustAsync(
        field0: var_field0, field1: var_field1);
  }

  @protected
  TupleStructWithTwoFieldTwinSync
      sse_decode_tuple_struct_with_two_field_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_i_32(deserializer);
    return TupleStructWithTwoFieldTwinSync(
        field0: var_field0, field1: var_field1);
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  U8Array1600 sse_decode_u_8_array_1600(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return U8Array1600(inner);
  }

  @protected
  U8Array2 sse_decode_u_8_array_2(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return U8Array2(inner);
  }

  @protected
  U8Array32 sse_decode_u_8_array_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return U8Array32(inner);
  }

  @protected
  U8Array5 sse_decode_u_8_array_5(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return U8Array5(inner);
  }

  @protected
  U8Array8 sse_decode_u_8_array_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return U8Array8(inner);
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  UserIdTwinNormal sse_decode_user_id_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_value = sse_decode_u_32(deserializer);
    return UserIdTwinNormal(value: var_value);
  }

  @protected
  UserIdTwinRustAsync sse_decode_user_id_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_value = sse_decode_u_32(deserializer);
    return UserIdTwinRustAsync(value: var_value);
  }

  @protected
  UserIdTwinSync sse_decode_user_id_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_value = sse_decode_u_32(deserializer);
    return UserIdTwinSync(value: var_value);
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  VecOfPrimitivePackTwinNormal sse_decode_vec_of_primitive_pack_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_int8List = sse_decode_list_prim_i_8_strict(deserializer);
    var var_uint8List = sse_decode_list_prim_u_8_strict(deserializer);
    var var_int16List = sse_decode_list_prim_i_16_strict(deserializer);
    var var_uint16List = sse_decode_list_prim_u_16_strict(deserializer);
    var var_uint32List = sse_decode_list_prim_u_32_strict(deserializer);
    var var_int32List = sse_decode_list_prim_i_32_strict(deserializer);
    var var_uint64List = sse_decode_list_prim_u_64_strict(deserializer);
    var var_int64List = sse_decode_list_prim_i_64_strict(deserializer);
    var var_float32List = sse_decode_list_prim_f_32_strict(deserializer);
    var var_float64List = sse_decode_list_prim_f_64_strict(deserializer);
    var var_boolList = sse_decode_list_bool(deserializer);
    return VecOfPrimitivePackTwinNormal(
        int8List: var_int8List,
        uint8List: var_uint8List,
        int16List: var_int16List,
        uint16List: var_uint16List,
        uint32List: var_uint32List,
        int32List: var_int32List,
        uint64List: var_uint64List,
        int64List: var_int64List,
        float32List: var_float32List,
        float64List: var_float64List,
        boolList: var_boolList);
  }

  @protected
  VecOfPrimitivePackTwinRustAsync
      sse_decode_vec_of_primitive_pack_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_int8List = sse_decode_list_prim_i_8_strict(deserializer);
    var var_uint8List = sse_decode_list_prim_u_8_strict(deserializer);
    var var_int16List = sse_decode_list_prim_i_16_strict(deserializer);
    var var_uint16List = sse_decode_list_prim_u_16_strict(deserializer);
    var var_uint32List = sse_decode_list_prim_u_32_strict(deserializer);
    var var_int32List = sse_decode_list_prim_i_32_strict(deserializer);
    var var_uint64List = sse_decode_list_prim_u_64_strict(deserializer);
    var var_int64List = sse_decode_list_prim_i_64_strict(deserializer);
    var var_float32List = sse_decode_list_prim_f_32_strict(deserializer);
    var var_float64List = sse_decode_list_prim_f_64_strict(deserializer);
    var var_boolList = sse_decode_list_bool(deserializer);
    return VecOfPrimitivePackTwinRustAsync(
        int8List: var_int8List,
        uint8List: var_uint8List,
        int16List: var_int16List,
        uint16List: var_uint16List,
        uint32List: var_uint32List,
        int32List: var_int32List,
        uint64List: var_uint64List,
        int64List: var_int64List,
        float32List: var_float32List,
        float64List: var_float64List,
        boolList: var_boolList);
  }

  @protected
  VecOfPrimitivePackTwinSync sse_decode_vec_of_primitive_pack_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_int8List = sse_decode_list_prim_i_8_strict(deserializer);
    var var_uint8List = sse_decode_list_prim_u_8_strict(deserializer);
    var var_int16List = sse_decode_list_prim_i_16_strict(deserializer);
    var var_uint16List = sse_decode_list_prim_u_16_strict(deserializer);
    var var_uint32List = sse_decode_list_prim_u_32_strict(deserializer);
    var var_int32List = sse_decode_list_prim_i_32_strict(deserializer);
    var var_uint64List = sse_decode_list_prim_u_64_strict(deserializer);
    var var_int64List = sse_decode_list_prim_i_64_strict(deserializer);
    var var_float32List = sse_decode_list_prim_f_32_strict(deserializer);
    var var_float64List = sse_decode_list_prim_f_64_strict(deserializer);
    var var_boolList = sse_decode_list_bool(deserializer);
    return VecOfPrimitivePackTwinSync(
        int8List: var_int8List,
        uint8List: var_uint8List,
        int16List: var_int16List,
        uint16List: var_uint16List,
        uint32List: var_uint32List,
        int32List: var_int32List,
        uint64List: var_uint64List,
        int64List: var_int64List,
        float32List: var_float32List,
        float64List: var_float64List,
        boolList: var_boolList);
  }

  @protected
  WeekdaysTwinNormal sse_decode_weekdays_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return WeekdaysTwinNormal.values[inner];
  }

  @protected
  WeekdaysTwinRustAsync sse_decode_weekdays_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return WeekdaysTwinRustAsync.values[inner];
  }

  @protected
  WeekdaysTwinSync sse_decode_weekdays_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return WeekdaysTwinSync.values[inner];
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtNestedTypeWithLifetimeTwinNormalstatic(
          LtNestedTypeWithLifetimeTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtNestedTypeWithLifetimeTwinNormalstatic(
        self, serializer);
  }

  @protected
  void
      sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtNestedTypeWithLifetimeTwinSyncstatic(
          LtNestedTypeWithLifetimeTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtNestedTypeWithLifetimeTwinSyncstatic(
        self, serializer);
  }

  @protected
  void
      sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithLifetimeTwinNormalstatic(
          LtTypeWithLifetimeTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithLifetimeTwinNormalstatic(
        self, serializer);
  }

  @protected
  void
      sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithLifetimeTwinSyncstatic(
          LtTypeWithLifetimeTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithLifetimeTwinSyncstatic(
        self, serializer);
  }

  @protected
  void
      sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithMultiDepTwinNormalstatic(
          LtTypeWithMultiDepTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithMultiDepTwinNormalstatic(
        self, serializer);
  }

  @protected
  void
      sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithMultiDepTwinSyncstatic(
          LtTypeWithMultiDepTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithMultiDepTwinSyncstatic(
        self, serializer);
  }

  @protected
  void
      sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyNodeTwinNormal(
          MyNodeTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyNodeTwinNormal(
        self, serializer);
  }

  @protected
  void
      sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneDataRaw(
          NonCloneDataRaw self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneDataRaw(
        self, serializer);
  }

  @protected
  void
      sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          NonCloneSimpleTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
        self, serializer);
  }

  @protected
  void
      sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          NonCloneSimpleTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
        self, serializer);
  }

  @protected
  void
      sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          NonCloneSimpleTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
        self, serializer);
  }

  @protected
  void
      sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueItemTwinNormal(
          OpaqueItemTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueItemTwinNormal(
        self, serializer);
  }

  @protected
  void
      sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitForDynTwinNormal(
          StructOneWithTraitForDynTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitForDynTwinNormal(
        self, serializer);
  }

  @protected
  void
      sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitForDynTwinNormal(
          StructTwoWithTraitForDynTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitForDynTwinNormal(
        self, serializer);
  }

  @protected
  void
      sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithRustAutoOpaqueFieldWithManyDeriveInner(
          StructWithRustAutoOpaqueFieldWithManyDeriveInner self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithRustAutoOpaqueFieldWithManyDeriveInner(
        self, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynAnySendSyncstatic(
          BoxAnyMyDartTypeRename self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BoxAnyMyDartTypeRenameImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynFnStringStringSendSync(
          BoxFnStringString self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BoxFnStringStringImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinNormalSendSync(
          BoxMyTraitTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BoxMyTraitTwinNormalImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinRustAsyncSendSync(
          BoxMyTraitTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BoxMyTraitTwinRustAsyncImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinSyncSendSync(
          BoxMyTraitTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BoxMyTraitTwinSyncImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueStructTwinNormal(
          ConstructorOpaqueStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ConstructorOpaqueStructTwinNormalImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueSyncStructTwinNormal(
          ConstructorOpaqueSyncStructTwinNormal self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ConstructorOpaqueSyncStructTwinNormalImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinNormal(
          CustomHasherTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as CustomHasherTwinNormalImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinRustAsync(
          CustomHasherTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as CustomHasherTwinRustAsyncImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinSync(
          CustomHasherTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as CustomHasherTwinSyncImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDeliberateFailSanityCheckTwinNormal(
          DeliberateFailSanityCheckTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DeliberateFailSanityCheckTwinNormalImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinNormal(
          DroppableTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DroppableTwinNormalImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinRustAsync(
          DroppableTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DroppableTwinRustAsyncImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinSync(
          DroppableTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DroppableTwinSyncImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinNormal(
          EnumWithGoodAndOpaqueWithoutOptionTwinNormal self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as EnumWithGoodAndOpaqueWithoutOptionTwinNormalImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinRustAsync(
          EnumWithGoodAndOpaqueWithoutOptionTwinRustAsync self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinSync(
          EnumWithGoodAndOpaqueWithoutOptionTwinSync self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as EnumWithGoodAndOpaqueWithoutOptionTwinSyncImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerItemContainerSolutionOneTwinNormal(
          ItemContainerSolutionOneTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ItemContainerSolutionOneTwinNormalImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtOwnedStructTwinNormal(
          LtOwnedStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LtOwnedStructTwinNormalImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtOwnedStructTwinSync(
          LtOwnedStructTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LtOwnedStructTwinSyncImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtSubStructTwinNormal(
          LtSubStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LtSubStructTwinNormalImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtSubStructTwinSync(
          LtSubStructTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LtSubStructTwinSyncImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyAudioParamTwinNormal(
          MyAudioParamTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MyAudioParamTwinNormalImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyImplTraitWithSelfTwinNormal(
          MyImplTraitWithSelfTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MyImplTraitWithSelfTwinNormalImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyImplTraitWithSelfTwinSync(
          MyImplTraitWithSelfTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MyImplTraitWithSelfTwinSyncImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyNodeTwinNormal(
          MyNodeTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MyNodeTwinNormalImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyStructWithTryFromTwinNormal(
          MyStructWithTryFromTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MyStructWithTryFromTwinNormalImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinNormal(
          NonCloneSimpleEnumTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NonCloneSimpleEnumTwinNormalImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinRustAsync(
          NonCloneSimpleEnumTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NonCloneSimpleEnumTwinRustAsyncImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinSync(
          NonCloneSimpleEnumTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NonCloneSimpleEnumTwinSyncImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          NonCloneSimpleTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NonCloneSimpleTwinNormalImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          NonCloneSimpleTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NonCloneSimpleTwinRustAsyncImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          NonCloneSimpleTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NonCloneSimpleTwinSyncImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueItemTwinNormal(
          OpaqueItemTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OpaqueItemTwinNormalImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinNormal(
          OpaqueOneTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OpaqueOneTwinNormalImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinRustAsync(
          OpaqueOneTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OpaqueOneTwinRustAsyncImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinSync(
          OpaqueOneTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OpaqueOneTwinSyncImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueStructWithDartCodeTwinNormal(
          OpaqueStructWithDartCodeTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OpaqueStructWithDartCodeTwinNormalImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinNormal(
          OpaqueTwoTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OpaqueTwoTwinNormalImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinRustAsync(
          OpaqueTwoTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OpaqueTwoTwinRustAsyncImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinSync(
          OpaqueTwoTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OpaqueTwoTwinSyncImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSimpleLogger(
          SimpleLogger self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SimpleLoggerImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSimpleOpaqueExternalStructWithMethod(
          SimpleOpaqueExternalStructWithMethod self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SimpleOpaqueExternalStructWithMethodImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinNormal(
          StaticGetterOnlyTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StaticGetterOnlyTwinNormalImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinRustAsync(
          StaticGetterOnlyTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StaticGetterOnlyTwinRustAsyncImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinSync(
          StaticGetterOnlyTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StaticGetterOnlyTwinSyncImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleA(
          StructInMiscNoTwinExampleA self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructInMiscNoTwinExampleAImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleB(
          StructInMiscNoTwinExampleB self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructInMiscNoTwinExampleBImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitForDynTwinNormal(
          StructOneWithTraitForDynTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructOneWithTraitForDynTwinNormalImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitTwinNormal(
          StructOneWithTraitTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructOneWithTraitTwinNormalImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitTwinSync(
          StructOneWithTraitTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructOneWithTraitTwinSyncImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitForDynTwinNormal(
          StructTwoWithTraitForDynTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructTwoWithTraitForDynTwinNormalImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitTwinNormal(
          StructTwoWithTraitTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructTwoWithTraitTwinNormalImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitTwinSync(
          StructTwoWithTraitTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructTwoWithTraitTwinSyncImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinNormal(
          StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructWithGoodAndOpaqueFieldWithoutOptionTwinNormalImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync(
          StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinSync(
          StructWithGoodAndOpaqueFieldWithoutOptionTwinSync self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructWithGoodAndOpaqueFieldWithoutOptionTwinSyncImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithImplBlockInMultiFile(
          StructWithImplBlockInMultiFile self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructWithImplBlockInMultiFileImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithRustAutoOpaqueFieldWithManyDeriveInner(
          StructWithRustAutoOpaqueFieldWithManyDeriveInner self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructWithRustAutoOpaqueFieldWithManyDeriveInnerImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithSimpleSetterTwinNormal(
          StructWithSimpleSetterTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructWithSimpleSetterTwinNormalImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTypeForIgnore(
          TypeForIgnore self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TypeForIgnoreImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTypeForIgnoreAll(
          TypeForIgnoreAll self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TypeForIgnoreAllImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueStructTwinNormal(
          ConstructorOpaqueStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ConstructorOpaqueStructTwinNormalImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueSyncStructTwinNormal(
          ConstructorOpaqueSyncStructTwinNormal self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ConstructorOpaqueSyncStructTwinNormalImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDeliberateFailSanityCheckTwinNormal(
          DeliberateFailSanityCheckTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DeliberateFailSanityCheckTwinNormalImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinNormal(
          DroppableTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DroppableTwinNormalImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinRustAsync(
          DroppableTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DroppableTwinRustAsyncImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinSync(
          DroppableTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DroppableTwinSyncImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerItemContainerSolutionOneTwinNormal(
          ItemContainerSolutionOneTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ItemContainerSolutionOneTwinNormalImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtSubStructTwinNormal(
          LtSubStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LtSubStructTwinNormalImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtSubStructTwinSync(
          LtSubStructTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LtSubStructTwinSyncImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          NonCloneSimpleTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NonCloneSimpleTwinNormalImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          NonCloneSimpleTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NonCloneSimpleTwinRustAsyncImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          NonCloneSimpleTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NonCloneSimpleTwinSyncImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitForDynTwinNormal(
          StructOneWithTraitForDynTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructOneWithTraitForDynTwinNormalImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitTwinNormal(
          StructOneWithTraitTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructOneWithTraitTwinNormalImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitTwinSync(
          StructOneWithTraitTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructOneWithTraitTwinSyncImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitForDynTwinNormal(
          StructTwoWithTraitForDynTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructTwoWithTraitForDynTwinNormalImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitTwinNormal(
          StructTwoWithTraitTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructTwoWithTraitTwinNormalImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitTwinSync(
          StructTwoWithTraitTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructTwoWithTraitTwinSyncImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinNormal(
          StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructWithGoodAndOpaqueFieldWithoutOptionTwinNormalImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync(
          StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinSync(
          StructWithGoodAndOpaqueFieldWithoutOptionTwinSync self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructWithGoodAndOpaqueFieldWithoutOptionTwinSyncImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithSimpleSetterTwinNormal(
          StructWithSimpleSetterTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructWithSimpleSetterTwinNormalImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTypeForIgnoreAll(
          TypeForIgnoreAll self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TypeForIgnoreAllImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueStructTwinNormal(
          ConstructorOpaqueStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ConstructorOpaqueStructTwinNormalImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueSyncStructTwinNormal(
          ConstructorOpaqueSyncStructTwinNormal self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ConstructorOpaqueSyncStructTwinNormalImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDeliberateFailSanityCheckTwinNormal(
          DeliberateFailSanityCheckTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DeliberateFailSanityCheckTwinNormalImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinNormal(
          DroppableTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DroppableTwinNormalImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinRustAsync(
          DroppableTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DroppableTwinRustAsyncImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinSync(
          DroppableTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DroppableTwinSyncImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerItemContainerSolutionOneTwinNormal(
          ItemContainerSolutionOneTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ItemContainerSolutionOneTwinNormalImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtOwnedStructTwinNormal(
          LtOwnedStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LtOwnedStructTwinNormalImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtOwnedStructTwinSync(
          LtOwnedStructTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LtOwnedStructTwinSyncImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtSubStructTwinNormal(
          LtSubStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LtSubStructTwinNormalImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtSubStructTwinSync(
          LtSubStructTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LtSubStructTwinSyncImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyAudioParamTwinNormal(
          MyAudioParamTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MyAudioParamTwinNormalImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyImplTraitWithSelfTwinNormal(
          MyImplTraitWithSelfTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MyImplTraitWithSelfTwinNormalImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyImplTraitWithSelfTwinSync(
          MyImplTraitWithSelfTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MyImplTraitWithSelfTwinSyncImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyNodeTwinNormal(
          MyNodeTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MyNodeTwinNormalImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyStructWithTryFromTwinNormal(
          MyStructWithTryFromTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MyStructWithTryFromTwinNormalImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinNormal(
          NonCloneSimpleEnumTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NonCloneSimpleEnumTwinNormalImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinRustAsync(
          NonCloneSimpleEnumTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NonCloneSimpleEnumTwinRustAsyncImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinSync(
          NonCloneSimpleEnumTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NonCloneSimpleEnumTwinSyncImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          NonCloneSimpleTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NonCloneSimpleTwinNormalImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          NonCloneSimpleTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NonCloneSimpleTwinRustAsyncImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          NonCloneSimpleTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NonCloneSimpleTwinSyncImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueStructWithDartCodeTwinNormal(
          OpaqueStructWithDartCodeTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OpaqueStructWithDartCodeTwinNormalImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSimpleLogger(
          SimpleLogger self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SimpleLoggerImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSimpleOpaqueExternalStructWithMethod(
          SimpleOpaqueExternalStructWithMethod self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SimpleOpaqueExternalStructWithMethodImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleA(
          StructInMiscNoTwinExampleA self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructInMiscNoTwinExampleAImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleB(
          StructInMiscNoTwinExampleB self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructInMiscNoTwinExampleBImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitForDynTwinNormal(
          StructOneWithTraitForDynTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructOneWithTraitForDynTwinNormalImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitTwinNormal(
          StructOneWithTraitTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructOneWithTraitTwinNormalImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitTwinSync(
          StructOneWithTraitTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructOneWithTraitTwinSyncImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitForDynTwinNormal(
          StructTwoWithTraitForDynTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructTwoWithTraitForDynTwinNormalImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitTwinNormal(
          StructTwoWithTraitTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructTwoWithTraitTwinNormalImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitTwinSync(
          StructTwoWithTraitTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructTwoWithTraitTwinSyncImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinNormal(
          StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructWithGoodAndOpaqueFieldWithoutOptionTwinNormalImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync(
          StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinSync(
          StructWithGoodAndOpaqueFieldWithoutOptionTwinSync self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructWithGoodAndOpaqueFieldWithoutOptionTwinSyncImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithImplBlockInMultiFile(
          StructWithImplBlockInMultiFile self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructWithImplBlockInMultiFileImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithSimpleSetterTwinNormal(
          StructWithSimpleSetterTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructWithSimpleSetterTwinNormalImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTypeForIgnore(
          TypeForIgnore self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TypeForIgnoreImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTypeForIgnoreAll(
          TypeForIgnoreAll self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TypeForIgnoreAllImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void sse_encode_Backtrace(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  void sse_encode_CastedPrimitive_i_64(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(sseEncodeCastedPrimitiveI64(self), serializer);
  }

  @protected
  void sse_encode_CastedPrimitive_isize(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_isize(sseEncodeCastedPrimitiveI64(self), serializer);
  }

  @protected
  void sse_encode_CastedPrimitive_u_64(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(sseEncodeCastedPrimitiveU64(self), serializer);
  }

  @protected
  void sse_encode_CastedPrimitive_usize(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(sseEncodeCastedPrimitiveU64(self), serializer);
  }

  @protected
  void sse_encode_Char(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self, serializer);
  }

  @protected
  void sse_encode_Chrono_Duration(Duration self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(PlatformInt64Util.from(self.inMicroseconds), serializer);
  }

  @protected
  void sse_encode_Chrono_Local(DateTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(
        PlatformInt64Util.from(self.microsecondsSinceEpoch), serializer);
  }

  @protected
  void sse_encode_Chrono_Naive(DateTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(
        PlatformInt64Util.from(self.microsecondsSinceEpoch), serializer);
  }

  @protected
  void sse_encode_Chrono_Utc(DateTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(
        PlatformInt64Util.from(self.microsecondsSinceEpoch), serializer);
  }

  @protected
  void
      sse_encode_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIpv4Addr(
          InternetAddress self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.address, serializer);
  }

  @protected
  void
      sse_encode_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageWithCustomSerializerTwinNormal(
          int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.toString(), serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs_DartOpaque_Output_unit_AnyhowException(
      FutureOr<void> Function(Object) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_DartOpaque_Output_unit_AnyhowException(self),
        serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs_String_Output_String_AnyhowException(
      FutureOr<String> Function(String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_String_Output_String_AnyhowException(self),
        serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs_String_Output_unit_AnyhowException(
      FutureOr<void> Function(String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_String_Output_unit_AnyhowException(self),
        serializer);
  }

  @protected
  void
      sse_encode_DartFn_Inputs_String_demo_struct_for_rust_call_dart_twin_normal_Output_unit_AnyhowException(
          FutureOr<void> Function(String, DemoStructForRustCallDartTwinNormal)
              self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_String_demo_struct_for_rust_call_dart_twin_normal_Output_unit_AnyhowException(
            self),
        serializer);
  }

  @protected
  void
      sse_encode_DartFn_Inputs_String_demo_struct_for_rust_call_dart_twin_rust_async_Output_unit_AnyhowException(
          FutureOr<void> Function(
                  String, DemoStructForRustCallDartTwinRustAsync)
              self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_String_demo_struct_for_rust_call_dart_twin_rust_async_Output_unit_AnyhowException(
            self),
        serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs__Output_DartOpaque_AnyhowException(
      FutureOr<Object> Function() self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs__Output_DartOpaque_AnyhowException(self),
        serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs__Output_String_AnyhowException(
      FutureOr<String> Function() self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs__Output_String_AnyhowException(self), serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs__Output_unit_AnyhowException(
      FutureOr<void> Function() self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs__Output_unit_AnyhowException(self), serializer);
  }

  @protected
  void
      sse_encode_DartFn_Inputs_demo_struct_for_rust_call_dart_twin_normal_Output_demo_struct_for_rust_call_dart_twin_normal_AnyhowException(
          FutureOr<DemoStructForRustCallDartTwinNormal> Function(
                  DemoStructForRustCallDartTwinNormal)
              self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_demo_struct_for_rust_call_dart_twin_normal_Output_demo_struct_for_rust_call_dart_twin_normal_AnyhowException(
            self),
        serializer);
  }

  @protected
  void
      sse_encode_DartFn_Inputs_demo_struct_for_rust_call_dart_twin_rust_async_Output_demo_struct_for_rust_call_dart_twin_rust_async_AnyhowException(
          FutureOr<DemoStructForRustCallDartTwinRustAsync> Function(
                  DemoStructForRustCallDartTwinRustAsync)
              self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_demo_struct_for_rust_call_dart_twin_rust_async_Output_demo_struct_for_rust_call_dart_twin_rust_async_AnyhowException(
            self),
        serializer);
  }

  @protected
  void sse_encode_DartOpaque(Object self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_isize(
        PlatformPointerUtil.ptrToPlatformInt64(encodeDartOpaque(
            self, portManager.dartHandlerPort, generalizedFrbRustBinding)),
        serializer);
  }

  @protected
  void sse_encode_DartOpaque_array_1(
      ObjectArray1 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_DartOpaque(self.inner, serializer);
  }

  @protected
  void sse_encode_DynTrait_SimpleTraitForDynTwinNormal(
      SimpleTraitForDynTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_simple_trait_for_dyn_twin_normal_implementor((() {
      if (self is StructOneWithTraitForDynTwinNormal) {
        return SimpleTraitForDynTwinNormalImplementor.variant0(self);
      }
      if (self is StructTwoWithTraitForDynTwinNormal) {
        return SimpleTraitForDynTwinNormalImplementor.variant1(self);
      }

      throw Exception('not reachable');
    })(), serializer);
  }

  @protected
  void sse_encode_I128(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.toString(), serializer);
  }

  @protected
  void
      sse_encode_Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtNestedTypeWithLifetimeTwinNormalstatic(
          LtNestedTypeWithLifetimeTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtNestedTypeWithLifetimeTwinNormalstatic(
        self, serializer);
  }

  @protected
  void
      sse_encode_Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtNestedTypeWithLifetimeTwinSyncstatic(
          LtNestedTypeWithLifetimeTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtNestedTypeWithLifetimeTwinSyncstatic(
        self, serializer);
  }

  @protected
  void
      sse_encode_Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithLifetimeTwinNormalstatic(
          LtTypeWithLifetimeTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithLifetimeTwinNormalstatic(
        self, serializer);
  }

  @protected
  void
      sse_encode_Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithLifetimeTwinSyncstatic(
          LtTypeWithLifetimeTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithLifetimeTwinSyncstatic(
        self, serializer);
  }

  @protected
  void
      sse_encode_Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithMultiDepTwinNormalstatic(
          LtTypeWithMultiDepTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithMultiDepTwinNormalstatic(
        self, serializer);
  }

  @protected
  void
      sse_encode_Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithMultiDepTwinSyncstatic(
          LtTypeWithMultiDepTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithMultiDepTwinSyncstatic(
        self, serializer);
  }

  @protected
  void
      sse_encode_Lifetimeable_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtNestedTypeWithLifetimeTwinNormalstatic(
          LtNestedTypeWithLifetimeTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtNestedTypeWithLifetimeTwinNormalstatic(
        self, serializer);
  }

  @protected
  void
      sse_encode_Lifetimeable_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtNestedTypeWithLifetimeTwinSyncstatic(
          LtNestedTypeWithLifetimeTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtNestedTypeWithLifetimeTwinSyncstatic(
        self, serializer);
  }

  @protected
  void
      sse_encode_Lifetimeable_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithLifetimeTwinNormalstatic(
          LtTypeWithLifetimeTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithLifetimeTwinNormalstatic(
        self, serializer);
  }

  @protected
  void
      sse_encode_Lifetimeable_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithLifetimeTwinSyncstatic(
          LtTypeWithLifetimeTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithLifetimeTwinSyncstatic(
        self, serializer);
  }

  @protected
  void
      sse_encode_Lifetimeable_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithMultiDepTwinNormalstatic(
          LtTypeWithMultiDepTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithMultiDepTwinNormalstatic(
        self, serializer);
  }

  @protected
  void
      sse_encode_Lifetimeable_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtTypeWithMultiDepTwinSyncstatic(
          LtTypeWithMultiDepTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithMultiDepTwinSyncstatic(
        self, serializer);
  }

  @protected
  void
      sse_encode_Map_String_String_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinNormal(
          Map<String, String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_string(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void
      sse_encode_Map_String_String_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinRustAsync(
          Map<String, String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_string(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void
      sse_encode_Map_String_String_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinSync(
          Map<String, String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_string(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_String_String_None(
      Map<String, String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_string(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_String_enum_simple_twin_normal_None(
      Map<String, EnumSimpleTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_enum_simple_twin_normal(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_String_enum_simple_twin_rust_async_None(
      Map<String, EnumSimpleTwinRustAsync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_enum_simple_twin_rust_async(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_String_enum_simple_twin_sync_None(
      Map<String, EnumSimpleTwinSync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_enum_simple_twin_sync(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_String_hash_map_value_None(
      Map<String, HashMapValue> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_hash_map_value(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_String_kitchen_sink_twin_normal_None(
      Map<String, KitchenSinkTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_kitchen_sink_twin_normal(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_String_kitchen_sink_twin_rust_async_None(
      Map<String, KitchenSinkTwinRustAsync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_kitchen_sink_twin_rust_async(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_String_kitchen_sink_twin_sync_None(
      Map<String, KitchenSinkTwinSync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_kitchen_sink_twin_sync(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_String_list_prim_u_8_strict_None(
      Map<String, Uint8List> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_list_prim_u_8_strict(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_String_my_size_None(
      Map<String, MySize> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_my_size(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_I128_None(
      Map<int, BigInt> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_i_128(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_String_None(
      Map<int, String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_string(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_U128_None(
      Map<int, BigInt> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_u_128(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_basic_general_enum_twin_normal_None(
      Map<int, BasicGeneralEnumTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_basic_general_enum_twin_normal(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_basic_general_enum_twin_rust_async_None(
      Map<int, BasicGeneralEnumTwinRustAsync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_basic_general_enum_twin_rust_async(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_basic_general_enum_twin_sync_None(
      Map<int, BasicGeneralEnumTwinSync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_basic_general_enum_twin_sync(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_basic_primitive_enum_twin_normal_None(
      Map<int, BasicPrimitiveEnumTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_basic_primitive_enum_twin_normal(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_basic_primitive_enum_twin_rust_async_None(
      Map<int, BasicPrimitiveEnumTwinRustAsync> self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_basic_primitive_enum_twin_rust_async(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_basic_primitive_enum_twin_sync_None(
      Map<int, BasicPrimitiveEnumTwinSync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_basic_primitive_enum_twin_sync(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_basic_struct_twin_normal_None(
      Map<int, BasicStructTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_basic_struct_twin_normal(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_basic_struct_twin_rust_async_None(
      Map<int, BasicStructTwinRustAsync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_basic_struct_twin_rust_async(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_basic_struct_twin_sync_None(
      Map<int, BasicStructTwinSync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_basic_struct_twin_sync(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_bool_None(
      Map<int, bool> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_bool(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_f_32_None(
      Map<int, double> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_f_32(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_f_64_None(
      Map<int, double> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_f_64(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_i_16_None(
      Map<int, int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_i_16(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_i_32_None(
      Map<int, int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_i_32(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_i_64_None(
      Map<int, PlatformInt64> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_i_64(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_i_8_None(
      Map<int, int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_i_8(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_isize_None(
      Map<int, PlatformInt64> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_isize(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_list_prim_u_8_strict_None(
      Map<int, Uint8List> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_list_prim_u_8_strict(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_u_16_None(
      Map<int, int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_u_16(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_u_32_None(
      Map<int, int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_u_32(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_u_64_None(
      Map<int, BigInt> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_u_64(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_u_8_None(
      Map<int, int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_u_8(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_usize_None(
      Map<int, BigInt> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_usize(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_u_8_application_mode_None(
      Map<int, ApplicationMode> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_u_8_application_mode(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void
      sse_encode_ProxyEnum_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_my_audio_param_twin_normal_proxy_enum(
          MyAudioParamTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_my_audio_param_twin_normal_proxy_enum(
        (() {
      if (self
          is MyAudioParamTwinNormalProxyVariantMyNodeTwinNormalParamOneTwinNormal) {
        return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyAudioParamTwinNormalProxyEnum
            .variant0(self._upstream);
      }
      if (self
          is MyAudioParamTwinNormalProxyVariantMyNodeTwinNormalParamTwoTwinNormal) {
        return Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyAudioParamTwinNormalProxyEnum
            .variant1(self._upstream);
      }

      throw Exception('not reachable');
    })(), serializer);
  }

  @protected
  void
      sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyNodeTwinNormal_param_one_twin_normal(
          MyAudioParamTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  void
      sse_encode_ProxyVariant_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyNodeTwinNormal_param_two_twin_normal(
          MyAudioParamTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  void sse_encode_RustOpaque_BoxdynDartDebugTwinNormal(
      BoxDartDebugTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BoxDartDebugTwinNormalImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_BoxdynDartDebugTwinRustAsync(
      BoxDartDebugTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BoxDartDebugTwinRustAsyncImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_BoxdynDartDebugTwinSync(
      BoxDartDebugTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BoxDartDebugTwinSyncImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_FrbOpaqueReturnTwinNormal(
      FrbOpaqueReturnTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbOpaqueReturnTwinNormalImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_FrbOpaqueReturnTwinRustAsync(
      FrbOpaqueReturnTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbOpaqueReturnTwinRustAsyncImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_FrbOpaqueReturnTwinSync(
      FrbOpaqueReturnTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbOpaqueReturnTwinSyncImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_FrbOpaqueSyncReturnTwinNormal(
      FrbOpaqueSyncReturnTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FrbOpaqueSyncReturnTwinNormalImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_HideDataAnotherTwinNormal(
      HideDataAnotherTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as HideDataAnotherTwinNormalImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_HideDataTwinNormal(
      HideDataTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as HideDataTwinNormalImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_HideDataTwinNormal_array_2(
      HideDataTwinNormalArray2 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_RustOpaque_HideDataTwinNormal(self.inner, serializer);
  }

  @protected
  void sse_encode_RustOpaque_HideDataTwinRustAsync(
      HideDataTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as HideDataTwinRustAsyncImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_HideDataTwinRustAsync_array_2(
      HideDataTwinRustAsyncArray2 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_RustOpaque_HideDataTwinRustAsync(self.inner, serializer);
  }

  @protected
  void sse_encode_RustOpaque_HideDataTwinSync(
      HideDataTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as HideDataTwinSyncImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_HideDataTwinSync_array_2(
      HideDataTwinSyncArray2 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_RustOpaque_HideDataTwinSync(self.inner, serializer);
  }

  @protected
  void sse_encode_RustOpaque_MutexHideDataTwinNormal(
      MutexHideDataTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MutexHideDataTwinNormalImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_MutexHideDataTwinRustAsync(
      MutexHideDataTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MutexHideDataTwinRustAsyncImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_MutexHideDataTwinSync(
      MutexHideDataTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MutexHideDataTwinSyncImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_NonCloneDataTwinNormal(
      NonCloneDataTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NonCloneDataTwinNormalImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_NonCloneDataTwinRustAsync(
      NonCloneDataTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NonCloneDataTwinRustAsyncImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_NonCloneDataTwinSync(
      NonCloneDataTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NonCloneDataTwinSyncImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_RwLockHideDataTwinNormal(
      RwLockHideDataTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as RwLockHideDataTwinNormalImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_RwLockHideDataTwinRustAsync(
      RwLockHideDataTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as RwLockHideDataTwinRustAsyncImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_RwLockHideDataTwinSync(
      RwLockHideDataTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as RwLockHideDataTwinSyncImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynAnySendSyncstatic(
          BoxAnyMyDartTypeRename self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BoxAnyMyDartTypeRenameImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynFnStringStringSendSync(
          BoxFnStringString self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BoxFnStringStringImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinNormalSendSync(
          BoxMyTraitTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BoxMyTraitTwinNormalImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinRustAsyncSendSync(
          BoxMyTraitTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BoxMyTraitTwinRustAsyncImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinSyncSendSync(
          BoxMyTraitTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BoxMyTraitTwinSyncImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueStructTwinNormal(
          ConstructorOpaqueStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ConstructorOpaqueStructTwinNormalImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueSyncStructTwinNormal(
          ConstructorOpaqueSyncStructTwinNormal self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ConstructorOpaqueSyncStructTwinNormalImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinNormal(
          CustomHasherTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as CustomHasherTwinNormalImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinRustAsync(
          CustomHasherTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as CustomHasherTwinRustAsyncImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinSync(
          CustomHasherTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as CustomHasherTwinSyncImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDeliberateFailSanityCheckTwinNormal(
          DeliberateFailSanityCheckTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DeliberateFailSanityCheckTwinNormalImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinNormal(
          DroppableTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DroppableTwinNormalImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinRustAsync(
          DroppableTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DroppableTwinRustAsyncImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinSync(
          DroppableTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DroppableTwinSyncImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinNormal(
          EnumWithGoodAndOpaqueWithoutOptionTwinNormal self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as EnumWithGoodAndOpaqueWithoutOptionTwinNormalImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinRustAsync(
          EnumWithGoodAndOpaqueWithoutOptionTwinRustAsync self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinSync(
          EnumWithGoodAndOpaqueWithoutOptionTwinSync self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as EnumWithGoodAndOpaqueWithoutOptionTwinSyncImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerItemContainerSolutionOneTwinNormal(
          ItemContainerSolutionOneTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ItemContainerSolutionOneTwinNormalImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtNestedTypeWithLifetimeTwinNormalstatic(
          LtNestedTypeWithLifetimeTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LtNestedTypeWithLifetimeTwinNormalImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtNestedTypeWithLifetimeTwinSyncstatic(
          LtNestedTypeWithLifetimeTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LtNestedTypeWithLifetimeTwinSyncImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithLifetimeTwinNormalstatic(
          LtTypeWithLifetimeTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LtTypeWithLifetimeTwinNormalImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithLifetimeTwinSyncstatic(
          LtTypeWithLifetimeTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LtTypeWithLifetimeTwinSyncImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithMultiDepTwinNormalstatic(
          LtTypeWithMultiDepTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LtTypeWithMultiDepTwinNormalImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableLtTypeWithMultiDepTwinSyncstatic(
          LtTypeWithMultiDepTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LtTypeWithMultiDepTwinSyncImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtOwnedStructTwinNormal(
          LtOwnedStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LtOwnedStructTwinNormalImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtOwnedStructTwinSync(
          LtOwnedStructTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LtOwnedStructTwinSyncImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtSubStructTwinNormal(
          LtSubStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LtSubStructTwinNormalImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLtSubStructTwinSync(
          LtSubStructTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LtSubStructTwinSyncImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyAudioParamTwinNormal(
          MyAudioParamTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MyAudioParamTwinNormalImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyImplTraitWithSelfTwinNormal(
          MyImplTraitWithSelfTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MyImplTraitWithSelfTwinNormalImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyImplTraitWithSelfTwinSync(
          MyImplTraitWithSelfTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MyImplTraitWithSelfTwinSyncImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyNodeTwinNormal(
          MyNodeTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MyNodeTwinNormalImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyStructWithTryFromTwinNormal(
          MyStructWithTryFromTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MyStructWithTryFromTwinNormalImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneDataRaw(
          NonCloneDataRaw self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NonCloneDataRawImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinNormal(
          NonCloneSimpleEnumTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NonCloneSimpleEnumTwinNormalImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinRustAsync(
          NonCloneSimpleEnumTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NonCloneSimpleEnumTwinRustAsyncImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinSync(
          NonCloneSimpleEnumTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NonCloneSimpleEnumTwinSyncImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          NonCloneSimpleTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NonCloneSimpleTwinNormalImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          NonCloneSimpleTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NonCloneSimpleTwinRustAsyncImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          NonCloneSimpleTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NonCloneSimpleTwinSyncImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueItemTwinNormal(
          OpaqueItemTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OpaqueItemTwinNormalImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinNormal(
          OpaqueOneTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OpaqueOneTwinNormalImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinRustAsync(
          OpaqueOneTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OpaqueOneTwinRustAsyncImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinSync(
          OpaqueOneTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OpaqueOneTwinSyncImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueStructWithDartCodeTwinNormal(
          OpaqueStructWithDartCodeTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OpaqueStructWithDartCodeTwinNormalImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinNormal(
          OpaqueTwoTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OpaqueTwoTwinNormalImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinRustAsync(
          OpaqueTwoTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OpaqueTwoTwinRustAsyncImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinSync(
          OpaqueTwoTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OpaqueTwoTwinSyncImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSimpleLogger(
          SimpleLogger self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SimpleLoggerImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSimpleOpaqueExternalStructWithMethod(
          SimpleOpaqueExternalStructWithMethod self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SimpleOpaqueExternalStructWithMethodImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinNormal(
          StaticGetterOnlyTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StaticGetterOnlyTwinNormalImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinRustAsync(
          StaticGetterOnlyTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StaticGetterOnlyTwinRustAsyncImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinSync(
          StaticGetterOnlyTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StaticGetterOnlyTwinSyncImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleA(
          StructInMiscNoTwinExampleA self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructInMiscNoTwinExampleAImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleB(
          StructInMiscNoTwinExampleB self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructInMiscNoTwinExampleBImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitForDynTwinNormal(
          StructOneWithTraitForDynTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructOneWithTraitForDynTwinNormalImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitTwinNormal(
          StructOneWithTraitTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructOneWithTraitTwinNormalImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitTwinSync(
          StructOneWithTraitTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructOneWithTraitTwinSyncImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitForDynTwinNormal(
          StructTwoWithTraitForDynTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructTwoWithTraitForDynTwinNormalImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitTwinNormal(
          StructTwoWithTraitTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructTwoWithTraitTwinNormalImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitTwinSync(
          StructTwoWithTraitTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructTwoWithTraitTwinSyncImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinNormal(
          StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructWithGoodAndOpaqueFieldWithoutOptionTwinNormalImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync(
          StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinSync(
          StructWithGoodAndOpaqueFieldWithoutOptionTwinSync self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructWithGoodAndOpaqueFieldWithoutOptionTwinSyncImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithImplBlockInMultiFile(
          StructWithImplBlockInMultiFile self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructWithImplBlockInMultiFileImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithRustAutoOpaqueFieldWithManyDeriveInner(
          StructWithRustAutoOpaqueFieldWithManyDeriveInner self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructWithRustAutoOpaqueFieldWithManyDeriveInnerImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithSimpleSetterTwinNormal(
          StructWithSimpleSetterTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StructWithSimpleSetterTwinNormalImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTypeForIgnore(
          TypeForIgnore self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TypeForIgnoreImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTypeForIgnoreAll(
          TypeForIgnoreAll self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TypeForIgnoreAllImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_i32(I32 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as I32Impl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_Set_String_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinNormal(
          Set<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_String(self.toList(), serializer);
  }

  @protected
  void
      sse_encode_Set_String_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinRustAsync(
          Set<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_String(self.toList(), serializer);
  }

  @protected
  void
      sse_encode_Set_String_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCustomHasherTwinSync(
          Set<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_String(self.toList(), serializer);
  }

  @protected
  void sse_encode_Set_String_None(Set<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_String(self.toList(), serializer);
  }

  @protected
  void sse_encode_Set_application_mode_None(
      Set<ApplicationMode> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_application_mode(self.toList(), serializer);
  }

  @protected
  void sse_encode_Set_i_32_None(Set<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_i_32_strict(
        Int32List.fromList(self.toList()), serializer);
  }

  @protected
  void
      sse_encode_StreamSink_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal_Sse(
          RustStreamSink<NonCloneSimpleTwinNormal> self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void
      sse_encode_StreamSink_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync_Sse(
          RustStreamSink<NonCloneSimpleTwinRustAsync> self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void
      sse_encode_StreamSink_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync_Sse(
          RustStreamSink<NonCloneSimpleTwinSync> self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_Map_u_8_application_mode_None_Sse(
      RustStreamSink<Map<int, ApplicationMode>> self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_Map_u_8_application_mode_None,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_Set_application_mode_None_Sse(
      RustStreamSink<Set<ApplicationMode>> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_Set_application_mode_None,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_String_Sse(
      RustStreamSink<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_application_mode_Sse(
      RustStreamSink<ApplicationMode> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_application_mode,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_application_mode_array_2_Sse(
      RustStreamSink<ApplicationModeArray2> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_application_mode_array_2,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_application_settings_Sse(
      RustStreamSink<ApplicationSettings> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_application_settings,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_event_twin_normal_Sse(
      RustStreamSink<EventTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_event_twin_normal,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_event_twin_rust_async_Sse(
      RustStreamSink<EventTwinRustAsync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_event_twin_rust_async,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_i_32_Sse(
      RustStreamSink<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_i_32,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_list_application_mode_Sse(
      RustStreamSink<List<ApplicationMode>> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_list_application_mode,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_list_application_settings_Sse(
      RustStreamSink<List<ApplicationSettings>> self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_list_application_settings,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_log_2_twin_normal_Sse(
      RustStreamSink<Log2TwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_log_2_twin_normal,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_log_2_twin_rust_async_Sse(
      RustStreamSink<Log2TwinRustAsync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_log_2_twin_rust_async,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_log_2_twin_sync_Sse(
      RustStreamSink<Log2TwinSync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_log_2_twin_sync,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_log_twin_normal_Sse(
      RustStreamSink<LogTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_log_twin_normal,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_log_twin_rust_async_Sse(
      RustStreamSink<LogTwinRustAsync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_log_twin_rust_async,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_mirror_struct_twin_normal_Sse(
      RustStreamSink<MirrorStructTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_mirror_struct_twin_normal,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_mirror_struct_twin_rust_async_Sse(
      RustStreamSink<MirrorStructTwinRustAsync> self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_mirror_struct_twin_rust_async,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_mirror_struct_twin_sync_Sse(
      RustStreamSink<MirrorStructTwinSync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_mirror_struct_twin_sync,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_my_stream_entry_twin_normal_Sse(
      RustStreamSink<MyStreamEntryTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_my_stream_entry_twin_normal,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_my_stream_entry_twin_rust_async_Sse(
      RustStreamSink<MyStreamEntryTwinRustAsync> self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_my_stream_entry_twin_rust_async,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_opt_box_autoadd_application_mode_Sse(
      RustStreamSink<ApplicationMode?> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_application_mode,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void
      sse_encode_StreamSink_record_application_settings_raw_string_enum_mirrored_Sse(
          RustStreamSink<(ApplicationSettings, RawStringEnumMirrored)> self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_application_settings_raw_string_enum_mirrored,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_u_32_Sse(
      RustStreamSink<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_u_32,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_u_8_array_2_Sse(
      RustStreamSink<U8Array2> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_u_8_array_2,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_U128(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.toString(), serializer);
  }

  @protected
  void sse_encode_Uuid(UuidValue self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.toBytes(), serializer);
  }

  @protected
  void sse_encode_a_twin_normal(ATwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.a, serializer);
  }

  @protected
  void sse_encode_a_twin_rust_async(
      ATwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.a, serializer);
  }

  @protected
  void sse_encode_a_twin_sync(ATwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.a, serializer);
  }

  @protected
  void sse_encode_abc_twin_normal(
      AbcTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case AbcTwinNormal_A(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_a_twin_normal(field0, serializer);
      case AbcTwinNormal_B(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_b_twin_normal(field0, serializer);
      case AbcTwinNormal_C(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_box_autoadd_c_twin_normal(field0, serializer);
      case AbcTwinNormal_JustInt(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_i_32(field0, serializer);
    }
  }

  @protected
  void sse_encode_abc_twin_rust_async(
      AbcTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case AbcTwinRustAsync_A(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_a_twin_rust_async(field0, serializer);
      case AbcTwinRustAsync_B(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_b_twin_rust_async(field0, serializer);
      case AbcTwinRustAsync_C(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_box_autoadd_c_twin_rust_async(field0, serializer);
      case AbcTwinRustAsync_JustInt(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_i_32(field0, serializer);
    }
  }

  @protected
  void sse_encode_abc_twin_sync(AbcTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case AbcTwinSync_A(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_a_twin_sync(field0, serializer);
      case AbcTwinSync_B(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_b_twin_sync(field0, serializer);
      case AbcTwinSync_C(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_box_autoadd_c_twin_sync(field0, serializer);
      case AbcTwinSync_JustInt(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_i_32(field0, serializer);
    }
  }

  @protected
  void sse_encode_another_macro_struct_twin_normal(
      AnotherMacroStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.data, serializer);
    sse_encode_i_32(self.nonFinalData, serializer);
  }

  @protected
  void sse_encode_another_twin_normal(
      AnotherTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.a, serializer);
  }

  @protected
  void sse_encode_another_twin_rust_async(
      AnotherTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.a, serializer);
  }

  @protected
  void sse_encode_another_twin_sync(
      AnotherTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.a, serializer);
  }

  @protected
  void sse_encode_application_env(
      ApplicationEnv self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_application_env_var(self.vars, serializer);
  }

  @protected
  void sse_encode_application_env_var(
      ApplicationEnvVar self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.field0, serializer);
    sse_encode_bool(self.field1, serializer);
  }

  @protected
  void sse_encode_application_message(
      ApplicationMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case ApplicationMessage_DisplayMessage(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case ApplicationMessage_RenderPixel(x: final x, y: final y):
        sse_encode_i_32(1, serializer);
        sse_encode_i_32(x, serializer);
        sse_encode_i_32(y, serializer);
      case ApplicationMessage_Exit():
        sse_encode_i_32(2, serializer);
    }
  }

  @protected
  void sse_encode_application_mode(
      ApplicationMode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_application_mode_array_2(
      ApplicationModeArray2 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_application_mode(self.inner, serializer);
  }

  @protected
  void sse_encode_application_settings(
      ApplicationSettings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.version, serializer);
    sse_encode_application_mode(self.mode, serializer);
    sse_encode_box_application_env(self.env, serializer);
    sse_encode_opt_box_autoadd_application_env(self.envOptional, serializer);
  }

  @protected
  void sse_encode_attribute_twin_normal(
      AttributeTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.key, serializer);
    sse_encode_String(self.value, serializer);
  }

  @protected
  void sse_encode_attribute_twin_rust_async(
      AttributeTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.key, serializer);
    sse_encode_String(self.value, serializer);
  }

  @protected
  void sse_encode_attribute_twin_sync(
      AttributeTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.key, serializer);
    sse_encode_String(self.value, serializer);
  }

  @protected
  void sse_encode_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_my_audio_param_twin_normal_proxy_enum(
      Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyAudioParamTwinNormalProxyEnum
          self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyAudioParamTwinNormalProxyEnum_Variant0(
          field0: final field0
        ):
        sse_encode_i_32(0, serializer);
        sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyNodeTwinNormal(
            field0, serializer);
      case Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyAudioParamTwinNormalProxyEnum_Variant1(
          field0: final field0
        ):
        sse_encode_i_32(1, serializer);
        sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyNodeTwinNormal(
            field0, serializer);
    }
  }

  @protected
  void sse_encode_b_twin_normal(BTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.b, serializer);
  }

  @protected
  void sse_encode_b_twin_rust_async(
      BTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.b, serializer);
  }

  @protected
  void sse_encode_b_twin_sync(BTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.b, serializer);
  }

  @protected
  void sse_encode_basic_general_enum_twin_normal(
      BasicGeneralEnumTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case BasicGeneralEnumTwinNormal_Apple(field: final field):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field, serializer);
      case BasicGeneralEnumTwinNormal_Orange():
        sse_encode_i_32(1, serializer);
    }
  }

  @protected
  void sse_encode_basic_general_enum_twin_rust_async(
      BasicGeneralEnumTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case BasicGeneralEnumTwinRustAsync_Apple(field: final field):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field, serializer);
      case BasicGeneralEnumTwinRustAsync_Orange():
        sse_encode_i_32(1, serializer);
    }
  }

  @protected
  void sse_encode_basic_general_enum_twin_sync(
      BasicGeneralEnumTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case BasicGeneralEnumTwinSync_Apple(field: final field):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field, serializer);
      case BasicGeneralEnumTwinSync_Orange():
        sse_encode_i_32(1, serializer);
    }
  }

  @protected
  void sse_encode_basic_primitive_enum_twin_normal(
      BasicPrimitiveEnumTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_basic_primitive_enum_twin_rust_async(
      BasicPrimitiveEnumTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_basic_primitive_enum_twin_sync(
      BasicPrimitiveEnumTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_basic_struct_twin_normal(
      BasicStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.apple, serializer);
    sse_encode_opt_box_autoadd_i_32(self.orange, serializer);
  }

  @protected
  void sse_encode_basic_struct_twin_rust_async(
      BasicStructTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.apple, serializer);
    sse_encode_opt_box_autoadd_i_32(self.orange, serializer);
  }

  @protected
  void sse_encode_basic_struct_twin_sync(
      BasicStructTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.apple, serializer);
    sse_encode_opt_box_autoadd_i_32(self.orange, serializer);
  }

  @protected
  void sse_encode_benchmark_binary_tree_twin_normal(
      BenchmarkBinaryTreeTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_opt_box_benchmark_binary_tree_twin_normal(self.left, serializer);
    sse_encode_opt_box_benchmark_binary_tree_twin_normal(
        self.right, serializer);
  }

  @protected
  void sse_encode_benchmark_binary_tree_twin_rust_async(
      BenchmarkBinaryTreeTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_opt_box_benchmark_binary_tree_twin_rust_async(
        self.left, serializer);
    sse_encode_opt_box_benchmark_binary_tree_twin_rust_async(
        self.right, serializer);
  }

  @protected
  void sse_encode_benchmark_binary_tree_twin_sync(
      BenchmarkBinaryTreeTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_opt_box_benchmark_binary_tree_twin_sync(self.left, serializer);
    sse_encode_opt_box_benchmark_binary_tree_twin_sync(self.right, serializer);
  }

  @protected
  void sse_encode_benchmark_blob_twin_normal(
      BenchmarkBlobTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.first, serializer);
    sse_encode_list_prim_u_8_strict(self.second, serializer);
    sse_encode_list_prim_u_8_strict(self.third, serializer);
  }

  @protected
  void sse_encode_benchmark_blob_twin_rust_async(
      BenchmarkBlobTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.first, serializer);
    sse_encode_list_prim_u_8_strict(self.second, serializer);
    sse_encode_list_prim_u_8_strict(self.third, serializer);
  }

  @protected
  void sse_encode_benchmark_blob_twin_sync(
      BenchmarkBlobTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.first, serializer);
    sse_encode_list_prim_u_8_strict(self.second, serializer);
    sse_encode_list_prim_u_8_strict(self.third, serializer);
  }

  @protected
  void sse_encode_big_buffers_twin_normal(
      BigBuffersTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_i_64_strict(self.int64, serializer);
    sse_encode_list_prim_u_64_strict(self.uint64, serializer);
  }

  @protected
  void sse_encode_big_buffers_twin_rust_async(
      BigBuffersTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_i_64_strict(self.int64, serializer);
    sse_encode_list_prim_u_64_strict(self.uint64, serializer);
  }

  @protected
  void sse_encode_big_buffers_twin_sync(
      BigBuffersTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_i_64_strict(self.int64, serializer);
    sse_encode_list_prim_u_64_strict(self.uint64, serializer);
  }

  @protected
  void sse_encode_blob_twin_normal(
      BlobTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8_array_1600(self.field0, serializer);
  }

  @protected
  void sse_encode_blob_twin_rust_async(
      BlobTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8_array_1600(self.field0, serializer);
  }

  @protected
  void sse_encode_blob_twin_sync(BlobTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8_array_1600(self.field0, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_application_env(
      ApplicationEnv self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_application_env(self, serializer);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          NonCloneSimpleTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
        self, serializer);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          NonCloneSimpleTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
        self, serializer);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          NonCloneSimpleTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
        self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_Chrono_Duration(
      Duration self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Chrono_Duration(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_Chrono_Naive(
      DateTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Chrono_Naive(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_Chrono_Utc(
      DateTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Chrono_Utc(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_DartOpaque(
      Object self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_RustOpaque_HideDataAnotherTwinNormal(
      HideDataAnotherTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_HideDataAnotherTwinNormal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_RustOpaque_HideDataTwinNormal(
      HideDataTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_HideDataTwinNormal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_RustOpaque_HideDataTwinRustAsync(
      HideDataTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_HideDataTwinRustAsync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_RustOpaque_HideDataTwinSync(
      HideDataTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_HideDataTwinSync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_a_twin_normal(
      ATwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_a_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_a_twin_rust_async(
      ATwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_a_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_a_twin_sync(
      ATwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_a_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_abc_twin_normal(
      AbcTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_abc_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_abc_twin_rust_async(
      AbcTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_abc_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_abc_twin_sync(
      AbcTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_abc_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_application_env(
      ApplicationEnv self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_application_env(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_application_mode(
      ApplicationMode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_application_mode(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_application_settings(
      ApplicationSettings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_application_settings(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_attribute_twin_normal(
      AttributeTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_attribute_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_attribute_twin_rust_async(
      AttributeTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_attribute_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_attribute_twin_sync(
      AttributeTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_attribute_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_my_audio_param_twin_normal_proxy_enum(
      Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyAudioParamTwinNormalProxyEnum
          self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_auto_ref_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_my_audio_param_twin_normal_proxy_enum(
        self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_b_twin_normal(
      BTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_b_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_b_twin_rust_async(
      BTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_b_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_b_twin_sync(
      BTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_b_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_basic_general_enum_twin_normal(
      BasicGeneralEnumTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_basic_general_enum_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_basic_general_enum_twin_rust_async(
      BasicGeneralEnumTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_basic_general_enum_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_basic_general_enum_twin_sync(
      BasicGeneralEnumTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_basic_general_enum_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_basic_primitive_enum_twin_normal(
      BasicPrimitiveEnumTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_basic_primitive_enum_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_basic_primitive_enum_twin_rust_async(
      BasicPrimitiveEnumTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_basic_primitive_enum_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_basic_primitive_enum_twin_sync(
      BasicPrimitiveEnumTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_basic_primitive_enum_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_basic_struct_twin_normal(
      BasicStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_basic_struct_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_basic_struct_twin_rust_async(
      BasicStructTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_basic_struct_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_basic_struct_twin_sync(
      BasicStructTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_basic_struct_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_benchmark_binary_tree_twin_normal(
      BenchmarkBinaryTreeTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_benchmark_binary_tree_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_benchmark_binary_tree_twin_rust_async(
      BenchmarkBinaryTreeTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_benchmark_binary_tree_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_benchmark_binary_tree_twin_sync(
      BenchmarkBinaryTreeTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_benchmark_binary_tree_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_benchmark_blob_twin_normal(
      BenchmarkBlobTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_benchmark_blob_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_benchmark_blob_twin_rust_async(
      BenchmarkBlobTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_benchmark_blob_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_benchmark_blob_twin_sync(
      BenchmarkBlobTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_benchmark_blob_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_c_twin_normal(
      CTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_c_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_c_twin_rust_async(
      CTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_c_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_c_twin_sync(
      CTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_c_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_concatenate_with_twin_normal(
      ConcatenateWithTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_concatenate_with_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_concatenate_with_twin_rust_async(
      ConcatenateWithTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_concatenate_with_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_concatenate_with_twin_sync(
      ConcatenateWithTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_concatenate_with_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_custom_nested_error_2_twin_normal(
      CustomNestedError2TwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_custom_nested_error_2_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_custom_nested_error_2_twin_rust_async(
      CustomNestedError2TwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_custom_nested_error_2_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_custom_nested_error_2_twin_sync(
      CustomNestedError2TwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_custom_nested_error_2_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_custom_nested_error_inner_twin_normal(
      CustomNestedErrorInnerTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_custom_nested_error_inner_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_custom_nested_error_inner_twin_rust_async(
      CustomNestedErrorInnerTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_custom_nested_error_inner_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_custom_nested_error_inner_twin_sync(
      CustomNestedErrorInnerTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_custom_nested_error_inner_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_custom_nested_error_outer_twin_normal(
      CustomNestedErrorOuterTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_custom_nested_error_outer_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_custom_nested_error_outer_twin_rust_async(
      CustomNestedErrorOuterTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_custom_nested_error_outer_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_custom_nested_error_outer_twin_sync(
      CustomNestedErrorOuterTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_custom_nested_error_outer_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_custom_struct_error_twin_normal(
      CustomStructErrorTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_custom_struct_error_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_custom_struct_error_twin_rust_async(
      CustomStructErrorTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_custom_struct_error_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_custom_struct_error_twin_sync(
      CustomStructErrorTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_custom_struct_error_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_custom_struct_twin_normal(
      CustomStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_custom_struct_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_custom_struct_twin_rust_async(
      CustomStructTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_custom_struct_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_custom_struct_twin_sync(
      CustomStructTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_custom_struct_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_customized_twin_normal(
      CustomizedTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_customized_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_customized_twin_rust_async(
      CustomizedTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_customized_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_customized_twin_sync(
      CustomizedTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_customized_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_dart_opaque_nested_twin_normal(
      DartOpaqueNestedTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_dart_opaque_nested_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_dart_opaque_nested_twin_rust_async(
      DartOpaqueNestedTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_dart_opaque_nested_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_dart_opaque_nested_twin_sync(
      DartOpaqueNestedTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_dart_opaque_nested_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_element_twin_normal(
      ElementTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_element_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_element_twin_rust_async(
      ElementTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_element_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_element_twin_sync(
      ElementTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_element_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_empty_twin_normal(
      EmptyTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_empty_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_empty_twin_rust_async(
      EmptyTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_empty_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_empty_twin_sync(
      EmptyTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_empty_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_dart_opaque_twin_normal(
      EnumDartOpaqueTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_enum_dart_opaque_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_dart_opaque_twin_rust_async(
      EnumDartOpaqueTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_enum_dart_opaque_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_dart_opaque_twin_sync(
      EnumDartOpaqueTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_enum_dart_opaque_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_opaque_twin_normal(
      EnumOpaqueTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_enum_opaque_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_opaque_twin_rust_async(
      EnumOpaqueTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_enum_opaque_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_opaque_twin_sync(
      EnumOpaqueTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_enum_opaque_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_with_good_and_opaque_twin_normal(
      EnumWithGoodAndOpaqueTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_enum_with_good_and_opaque_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_with_good_and_opaque_twin_rust_async(
      EnumWithGoodAndOpaqueTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_enum_with_good_and_opaque_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_with_good_and_opaque_twin_sync(
      EnumWithGoodAndOpaqueTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_enum_with_good_and_opaque_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_with_item_mixed_twin_normal(
      EnumWithItemMixedTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_enum_with_item_mixed_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_with_item_mixed_twin_rust_async(
      EnumWithItemMixedTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_enum_with_item_mixed_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_with_item_mixed_twin_sync(
      EnumWithItemMixedTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_enum_with_item_mixed_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_with_item_struct_twin_normal(
      EnumWithItemStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_enum_with_item_struct_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_with_item_struct_twin_rust_async(
      EnumWithItemStructTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_enum_with_item_struct_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_with_item_struct_twin_sync(
      EnumWithItemStructTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_enum_with_item_struct_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_with_item_tuple_twin_normal(
      EnumWithItemTupleTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_enum_with_item_tuple_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_with_item_tuple_twin_rust_async(
      EnumWithItemTupleTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_enum_with_item_tuple_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_with_item_tuple_twin_sync(
      EnumWithItemTupleTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_enum_with_item_tuple_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_event_twin_normal(
      EventTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_event_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_event_twin_rust_async(
      EventTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_event_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_exotic_optionals_twin_normal(
      ExoticOptionalsTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_exotic_optionals_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_exotic_optionals_twin_rust_async(
      ExoticOptionalsTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_exotic_optionals_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_exotic_optionals_twin_sync(
      ExoticOptionalsTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_exotic_optionals_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_f_32(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_32(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_feature_chrono_twin_normal(
      FeatureChronoTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_feature_chrono_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_feature_chrono_twin_rust_async(
      FeatureChronoTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_feature_chrono_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_feature_chrono_twin_sync(
      FeatureChronoTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_feature_chrono_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_feature_uuid_twin_normal(
      FeatureUuidTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_feature_uuid_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_feature_uuid_twin_rust_async(
      FeatureUuidTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_feature_uuid_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_feature_uuid_twin_sync(
      FeatureUuidTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_feature_uuid_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_feed_id_twin_normal(
      FeedIdTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_feed_id_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_feed_id_twin_rust_async(
      FeedIdTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_feed_id_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_feed_id_twin_sync(
      FeedIdTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_feed_id_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_i_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_16(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_i_64(
      PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_i_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_8(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_isize(
      PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_isize(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_item_container_solution_two_twin_normal(
      ItemContainerSolutionTwoTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_item_container_solution_two_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_kitchen_sink_twin_normal(
      KitchenSinkTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_kitchen_sink_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_kitchen_sink_twin_rust_async(
      KitchenSinkTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_kitchen_sink_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_kitchen_sink_twin_sync(
      KitchenSinkTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_kitchen_sink_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_list_of_nested_raw_string_mirrored(
      ListOfNestedRawStringMirrored self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_of_nested_raw_string_mirrored(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_macro_struct(
      MacroStruct self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_macro_struct(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_measure_twin_normal(
      MeasureTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_measure_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_measure_twin_rust_async(
      MeasureTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_measure_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_measure_twin_sync(
      MeasureTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_measure_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_message_id_twin_normal(
      MessageIdTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_message_id_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_message_id_twin_rust_async(
      MessageIdTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_message_id_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_message_id_twin_sync(
      MessageIdTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_message_id_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_my_callable_twin_normal(
      MyCallableTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_my_callable_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_my_callable_twin_rust_async(
      MyCallableTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_my_callable_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_my_callable_twin_sync(
      MyCallableTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_my_callable_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_my_enum_with_json_serializable_twin_normal(
      MyEnumWithJsonSerializableTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_my_enum_with_json_serializable_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_my_nested_struct_twin_normal(
      MyNestedStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_my_nested_struct_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_my_nested_struct_twin_rust_async(
      MyNestedStructTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_my_nested_struct_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_my_nested_struct_twin_sync(
      MyNestedStructTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_my_nested_struct_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_my_size(MySize self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_my_size(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_my_struct(
      MyStruct self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_my_struct(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_my_struct_containing_stream_sink_twin_normal(
      MyStructContainingStreamSinkTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_my_struct_containing_stream_sink_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_my_struct_containing_stream_sink_twin_rust_async(
      MyStructContainingStreamSinkTwinRustAsync self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_my_struct_containing_stream_sink_twin_rust_async(
        self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_my_struct_with_json_serializable_twin_normal(
      MyStructWithJsonSerializableTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_my_struct_with_json_serializable_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_my_struct_with_sync(
      MyStructWithSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_my_struct_with_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_my_tree_node_twin_normal(
      MyTreeNodeTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_my_tree_node_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_my_tree_node_twin_rust_async(
      MyTreeNodeTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_my_tree_node_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_my_tree_node_twin_sync(
      MyTreeNodeTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_my_tree_node_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_nested_raw_string_mirrored(
      NestedRawStringMirrored self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_nested_raw_string_mirrored(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_new_type_int_twin_normal(
      NewTypeIntTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_new_type_int_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_new_type_int_twin_rust_async(
      NewTypeIntTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_new_type_int_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_new_type_int_twin_sync(
      NewTypeIntTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_new_type_int_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_non_opaque_struct_containing_ipv_4_addr(
      NonOpaqueStructContainingIpv4Addr self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_non_opaque_struct_containing_ipv_4_addr(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_note_twin_normal(
      NoteTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_note_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_note_twin_rust_async(
      NoteTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_note_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_note_twin_sync(
      NoteTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_note_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_numbers(Numbers self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_numbers(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_opaque_nested_twin_normal(
      OpaqueNestedTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opaque_nested_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_opaque_nested_twin_rust_async(
      OpaqueNestedTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opaque_nested_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_opaque_nested_twin_sync(
      OpaqueNestedTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opaque_nested_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_opt_vecs_twin_normal(
      OptVecsTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_vecs_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_opt_vecs_twin_rust_async(
      OptVecsTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_vecs_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_opt_vecs_twin_sync(
      OptVecsTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_vecs_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_raw_string_mirrored(
      RawStringMirrored self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_raw_string_mirrored(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_record_string_i_32(
      (String, int) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_record_string_i_32(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_sequences(
      Sequences self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_sequences(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_simple_enum_twin_normal(
      SimpleEnumTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_simple_enum_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_simple_enum_twin_rust_async(
      SimpleEnumTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_simple_enum_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_simple_enum_twin_sync(
      SimpleEnumTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_simple_enum_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_simple_struct_for_borrow_twin_normal(
      SimpleStructForBorrowTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_simple_struct_for_borrow_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_simple_struct_for_borrow_twin_rust_async(
      SimpleStructForBorrowTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_simple_struct_for_borrow_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_simple_struct_for_borrow_twin_sync(
      SimpleStructForBorrowTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_simple_struct_for_borrow_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_simple_struct_twin_normal(
      SimpleStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_simple_struct_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_simple_struct_twin_rust_async(
      SimpleStructTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_simple_struct_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_simple_struct_twin_sync(
      SimpleStructTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_simple_struct_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_simple_trait_for_dyn_twin_normal_implementor(
      SimpleTraitForDynTwinNormalImplementor self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_simple_trait_for_dyn_twin_normal_implementor(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_simple_translatable_external_struct_with_method(
      SimpleTranslatableExternalStructWithMethod self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_simple_translatable_external_struct_with_method(
        self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_some_struct_twin_normal(
      SomeStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_some_struct_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_some_struct_twin_rust_async(
      SomeStructTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_some_struct_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_some_struct_twin_sync(
      SomeStructTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_some_struct_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_in_lower_level(
      StructInLowerLevel self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_in_lower_level(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_casted_primitive_twin_normal(
      StructWithCastedPrimitiveTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_casted_primitive_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_comments_twin_normal(
      StructWithCommentsTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_comments_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_comments_twin_rust_async(
      StructWithCommentsTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_comments_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_comments_twin_sync(
      StructWithCommentsTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_comments_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_custom_name_method_twin_normal(
      StructWithCustomNameMethodTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_custom_name_method_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_dart_keyword_field_twin_normal(
      StructWithDartKeywordFieldTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_dart_keyword_field_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_dart_keyword_field_twin_rust_async(
      StructWithDartKeywordFieldTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_dart_keyword_field_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_dart_keyword_field_twin_sync(
      StructWithDartKeywordFieldTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_dart_keyword_field_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_enum_twin_normal(
      StructWithEnumTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_enum_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_enum_twin_rust_async(
      StructWithEnumTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_enum_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_enum_twin_sync(
      StructWithEnumTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_enum_twin_sync(self, serializer);
  }

  @protected
  void
      sse_encode_box_autoadd_struct_with_explicit_auto_opaque_field_twin_normal(
          StructWithExplicitAutoOpaqueFieldTwinNormal self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_explicit_auto_opaque_field_twin_normal(
        self, serializer);
  }

  @protected
  void
      sse_encode_box_autoadd_struct_with_explicit_auto_opaque_field_twin_rust_async(
          StructWithExplicitAutoOpaqueFieldTwinRustAsync self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_explicit_auto_opaque_field_twin_rust_async(
        self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_explicit_auto_opaque_field_twin_sync(
      StructWithExplicitAutoOpaqueFieldTwinSync self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_explicit_auto_opaque_field_twin_sync(
        self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_field_rename_twin_normal(
      StructWithFieldRenameTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_field_rename_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_field_rename_twin_rust_async(
      StructWithFieldRenameTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_field_rename_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_field_rename_twin_sync(
      StructWithFieldRenameTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_field_rename_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_good_and_opaque_field_twin_normal(
      StructWithGoodAndOpaqueFieldTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_good_and_opaque_field_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_good_and_opaque_field_twin_rust_async(
      StructWithGoodAndOpaqueFieldTwinRustAsync self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_good_and_opaque_field_twin_rust_async(
        self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_good_and_opaque_field_twin_sync(
      StructWithGoodAndOpaqueFieldTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_good_and_opaque_field_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_impl_block_in_another_file_dependency(
      StructWithImplBlockInAnotherFileDependency self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_impl_block_in_another_file_dependency(
        self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_one_field_twin_normal(
      StructWithOneFieldTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_one_field_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_one_field_twin_rust_async(
      StructWithOneFieldTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_one_field_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_one_field_twin_sync(
      StructWithOneFieldTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_one_field_twin_sync(self, serializer);
  }

  @protected
  void
      sse_encode_box_autoadd_struct_with_rust_auto_opaque_field_with_many_derive(
          StructWithRustAutoOpaqueFieldWithManyDerive self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_rust_auto_opaque_field_with_many_derive(
        self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_rust_auto_opaque_with_non_clone_data(
      StructWithRustAutoOpaqueWithNonCloneData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_rust_auto_opaque_with_non_clone_data(
        self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_two_field_twin_normal(
      StructWithTwoFieldTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_two_field_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_two_field_twin_rust_async(
      StructWithTwoFieldTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_two_field_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_two_field_twin_sync(
      StructWithTwoFieldTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_two_field_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_zero_field_twin_normal(
      StructWithZeroFieldTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_zero_field_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_zero_field_twin_rust_async(
      StructWithZeroFieldTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_zero_field_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_zero_field_twin_sync(
      StructWithZeroFieldTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_zero_field_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_sum_with_twin_normal(
      SumWithTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_sum_with_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_sum_with_twin_rust_async(
      SumWithTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_sum_with_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_sum_with_twin_sync(
      SumWithTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_sum_with_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_test_id_twin_normal(
      TestIdTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_test_id_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_test_id_twin_rust_async(
      TestIdTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_test_id_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_test_id_twin_sync(
      TestIdTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_test_id_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_translatable_struct_with_dart_code_twin_normal(
      TranslatableStructWithDartCodeTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_translatable_struct_with_dart_code_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_tuple_struct_with_one_field_twin_normal(
      TupleStructWithOneFieldTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_tuple_struct_with_one_field_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_tuple_struct_with_one_field_twin_rust_async(
      TupleStructWithOneFieldTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_tuple_struct_with_one_field_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_tuple_struct_with_one_field_twin_sync(
      TupleStructWithOneFieldTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_tuple_struct_with_one_field_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_tuple_struct_with_two_field_twin_normal(
      TupleStructWithTwoFieldTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_tuple_struct_with_two_field_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_tuple_struct_with_two_field_twin_rust_async(
      TupleStructWithTwoFieldTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_tuple_struct_with_two_field_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_tuple_struct_with_two_field_twin_sync(
      TupleStructWithTwoFieldTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_tuple_struct_with_two_field_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_16(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_user_id_twin_normal(
      UserIdTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_user_id_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_user_id_twin_rust_async(
      UserIdTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_user_id_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_user_id_twin_sync(
      UserIdTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_user_id_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_weekdays_twin_normal(
      WeekdaysTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_weekdays_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_weekdays_twin_rust_async(
      WeekdaysTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_weekdays_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_weekdays_twin_sync(
      WeekdaysTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_weekdays_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_benchmark_binary_tree_twin_normal(
      BenchmarkBinaryTreeTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_benchmark_binary_tree_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_benchmark_binary_tree_twin_rust_async(
      BenchmarkBinaryTreeTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_benchmark_binary_tree_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_benchmark_binary_tree_twin_sync(
      BenchmarkBinaryTreeTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_benchmark_binary_tree_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_blob_twin_normal(
      BlobTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_blob_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_blob_twin_rust_async(
      BlobTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_blob_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_blob_twin_sync(
      BlobTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_blob_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self, serializer);
  }

  @protected
  void sse_encode_box_distance_twin_normal(
      DistanceTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_distance_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_distance_twin_rust_async(
      DistanceTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_distance_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_distance_twin_sync(
      DistanceTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_distance_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_exotic_optionals_twin_normal(
      ExoticOptionalsTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_exotic_optionals_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_exotic_optionals_twin_rust_async(
      ExoticOptionalsTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_exotic_optionals_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_exotic_optionals_twin_sync(
      ExoticOptionalsTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_exotic_optionals_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_64(self, serializer);
  }

  @protected
  void sse_encode_box_feed_id_twin_normal(
      FeedIdTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_feed_id_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_feed_id_twin_rust_async(
      FeedIdTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_feed_id_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_feed_id_twin_sync(
      FeedIdTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_feed_id_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self, serializer);
  }

  @protected
  void sse_encode_box_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self, serializer);
  }

  @protected
  void sse_encode_box_i_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_8(self, serializer);
  }

  @protected
  void sse_encode_box_kitchen_sink_twin_normal(
      KitchenSinkTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_kitchen_sink_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_kitchen_sink_twin_rust_async(
      KitchenSinkTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_kitchen_sink_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_kitchen_sink_twin_sync(
      KitchenSinkTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_kitchen_sink_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_my_size(MySize self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_my_size(self, serializer);
  }

  @protected
  void sse_encode_box_speed_twin_normal(
      SpeedTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_speed_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_speed_twin_rust_async(
      SpeedTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_speed_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_speed_twin_sync(
      SpeedTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_speed_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self, serializer);
  }

  @protected
  void sse_encode_box_u_8_array_1600(
      U8Array1600 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8_array_1600(self, serializer);
  }

  @protected
  void sse_encode_box_u_8_array_8(U8Array8 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8_array_8(self, serializer);
  }

  @protected
  void sse_encode_box_weekdays_twin_normal(
      WeekdaysTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_weekdays_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_weekdays_twin_rust_async(
      WeekdaysTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_weekdays_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_weekdays_twin_sync(
      WeekdaysTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_weekdays_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_c_twin_normal(CTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.c, serializer);
  }

  @protected
  void sse_encode_c_twin_rust_async(
      CTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.c, serializer);
  }

  @protected
  void sse_encode_c_twin_sync(CTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.c, serializer);
  }

  @protected
  void sse_encode_concatenate_with_twin_normal(
      ConcatenateWithTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.a, serializer);
  }

  @protected
  void sse_encode_concatenate_with_twin_rust_async(
      ConcatenateWithTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.a, serializer);
  }

  @protected
  void sse_encode_concatenate_with_twin_sync(
      ConcatenateWithTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.a, serializer);
  }

  @protected
  void sse_encode_constructor_translatable_struct_twin_normal(
      ConstructorTranslatableStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.one, serializer);
  }

  @protected
  void sse_encode_constructor_translatable_sync_struct_twin_normal(
      ConstructorTranslatableSyncStructTwinNormal self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.one, serializer);
  }

  @protected
  void sse_encode_contains_mirrored_sub_struct_twin_normal(
      ContainsMirroredSubStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_raw_string_mirrored(self.test, serializer);
    sse_encode_another_twin_normal(self.test2, serializer);
  }

  @protected
  void sse_encode_contains_mirrored_sub_struct_twin_rust_async(
      ContainsMirroredSubStructTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_raw_string_mirrored(self.test, serializer);
    sse_encode_another_twin_rust_async(self.test2, serializer);
  }

  @protected
  void sse_encode_contains_mirrored_sub_struct_twin_sync(
      ContainsMirroredSubStructTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_raw_string_mirrored(self.test, serializer);
    sse_encode_another_twin_sync(self.test2, serializer);
  }

  @protected
  void sse_encode_custom_enum_error_twin_normal(
      CustomEnumErrorTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case CustomEnumErrorTwinNormal_One(
          message: final message,
          backtrace: final backtrace
        ):
        sse_encode_i_32(0, serializer);
        sse_encode_String(message, serializer);
        sse_encode_Backtrace(backtrace, serializer);
      case CustomEnumErrorTwinNormal_Two(
          message: final message,
          backtrace: final backtrace
        ):
        sse_encode_i_32(1, serializer);
        sse_encode_u_32(message, serializer);
        sse_encode_Backtrace(backtrace, serializer);
    }
  }

  @protected
  void sse_encode_custom_enum_error_twin_rust_async(
      CustomEnumErrorTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case CustomEnumErrorTwinRustAsync_One(
          message: final message,
          backtrace: final backtrace
        ):
        sse_encode_i_32(0, serializer);
        sse_encode_String(message, serializer);
        sse_encode_Backtrace(backtrace, serializer);
      case CustomEnumErrorTwinRustAsync_Two(
          message: final message,
          backtrace: final backtrace
        ):
        sse_encode_i_32(1, serializer);
        sse_encode_u_32(message, serializer);
        sse_encode_Backtrace(backtrace, serializer);
    }
  }

  @protected
  void sse_encode_custom_enum_error_twin_sync(
      CustomEnumErrorTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case CustomEnumErrorTwinSync_One(
          message: final message,
          backtrace: final backtrace
        ):
        sse_encode_i_32(0, serializer);
        sse_encode_String(message, serializer);
        sse_encode_Backtrace(backtrace, serializer);
      case CustomEnumErrorTwinSync_Two(
          message: final message,
          backtrace: final backtrace
        ):
        sse_encode_i_32(1, serializer);
        sse_encode_u_32(message, serializer);
        sse_encode_Backtrace(backtrace, serializer);
    }
  }

  @protected
  void sse_encode_custom_error_twin_normal(
      CustomErrorTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case CustomErrorTwinNormal_Error0(e: final e, backtrace: final backtrace):
        sse_encode_i_32(0, serializer);
        sse_encode_String(e, serializer);
        sse_encode_Backtrace(backtrace, serializer);
      case CustomErrorTwinNormal_Error1(e: final e, backtrace: final backtrace):
        sse_encode_i_32(1, serializer);
        sse_encode_u_32(e, serializer);
        sse_encode_Backtrace(backtrace, serializer);
    }
  }

  @protected
  void sse_encode_custom_error_twin_rust_async(
      CustomErrorTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case CustomErrorTwinRustAsync_Error0(
          e: final e,
          backtrace: final backtrace
        ):
        sse_encode_i_32(0, serializer);
        sse_encode_String(e, serializer);
        sse_encode_Backtrace(backtrace, serializer);
      case CustomErrorTwinRustAsync_Error1(
          e: final e,
          backtrace: final backtrace
        ):
        sse_encode_i_32(1, serializer);
        sse_encode_u_32(e, serializer);
        sse_encode_Backtrace(backtrace, serializer);
    }
  }

  @protected
  void sse_encode_custom_error_twin_sync(
      CustomErrorTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case CustomErrorTwinSync_Error0(e: final e, backtrace: final backtrace):
        sse_encode_i_32(0, serializer);
        sse_encode_String(e, serializer);
        sse_encode_Backtrace(backtrace, serializer);
      case CustomErrorTwinSync_Error1(e: final e, backtrace: final backtrace):
        sse_encode_i_32(1, serializer);
        sse_encode_u_32(e, serializer);
        sse_encode_Backtrace(backtrace, serializer);
    }
  }

  @protected
  void sse_encode_custom_nested_error_1_twin_normal(
      CustomNestedError1TwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case CustomNestedError1TwinNormal_CustomNested1(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case CustomNestedError1TwinNormal_ErrorNested(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_custom_nested_error_2_twin_normal(
            field0, serializer);
    }
  }

  @protected
  void sse_encode_custom_nested_error_1_twin_rust_async(
      CustomNestedError1TwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case CustomNestedError1TwinRustAsync_CustomNested1(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case CustomNestedError1TwinRustAsync_ErrorNested(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_custom_nested_error_2_twin_rust_async(
            field0, serializer);
    }
  }

  @protected
  void sse_encode_custom_nested_error_1_twin_sync(
      CustomNestedError1TwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case CustomNestedError1TwinSync_CustomNested1(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case CustomNestedError1TwinSync_ErrorNested(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_custom_nested_error_2_twin_sync(
            field0, serializer);
    }
  }

  @protected
  void sse_encode_custom_nested_error_2_twin_normal(
      CustomNestedError2TwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case CustomNestedError2TwinNormal_CustomNested2(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case CustomNestedError2TwinNormal_CustomNested2Number(
          field0: final field0
        ):
        sse_encode_i_32(1, serializer);
        sse_encode_u_32(field0, serializer);
    }
  }

  @protected
  void sse_encode_custom_nested_error_2_twin_rust_async(
      CustomNestedError2TwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case CustomNestedError2TwinRustAsync_CustomNested2(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case CustomNestedError2TwinRustAsync_CustomNested2Number(
          field0: final field0
        ):
        sse_encode_i_32(1, serializer);
        sse_encode_u_32(field0, serializer);
    }
  }

  @protected
  void sse_encode_custom_nested_error_2_twin_sync(
      CustomNestedError2TwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case CustomNestedError2TwinSync_CustomNested2(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case CustomNestedError2TwinSync_CustomNested2Number(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_u_32(field0, serializer);
    }
  }

  @protected
  void sse_encode_custom_nested_error_inner_twin_normal(
      CustomNestedErrorInnerTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case CustomNestedErrorInnerTwinNormal_Three(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case CustomNestedErrorInnerTwinNormal_Four(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_u_32(field0, serializer);
    }
  }

  @protected
  void sse_encode_custom_nested_error_inner_twin_rust_async(
      CustomNestedErrorInnerTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case CustomNestedErrorInnerTwinRustAsync_Three(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case CustomNestedErrorInnerTwinRustAsync_Four(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_u_32(field0, serializer);
    }
  }

  @protected
  void sse_encode_custom_nested_error_inner_twin_sync(
      CustomNestedErrorInnerTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case CustomNestedErrorInnerTwinSync_Three(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case CustomNestedErrorInnerTwinSync_Four(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_u_32(field0, serializer);
    }
  }

  @protected
  void sse_encode_custom_nested_error_outer_twin_normal(
      CustomNestedErrorOuterTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case CustomNestedErrorOuterTwinNormal_One(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case CustomNestedErrorOuterTwinNormal_Two(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_custom_nested_error_inner_twin_normal(
            field0, serializer);
    }
  }

  @protected
  void sse_encode_custom_nested_error_outer_twin_rust_async(
      CustomNestedErrorOuterTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case CustomNestedErrorOuterTwinRustAsync_One(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case CustomNestedErrorOuterTwinRustAsync_Two(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_custom_nested_error_inner_twin_rust_async(
            field0, serializer);
    }
  }

  @protected
  void sse_encode_custom_nested_error_outer_twin_sync(
      CustomNestedErrorOuterTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case CustomNestedErrorOuterTwinSync_One(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case CustomNestedErrorOuterTwinSync_Two(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_custom_nested_error_inner_twin_sync(
            field0, serializer);
    }
  }

  @protected
  void sse_encode_custom_struct_error_another_twin_normal(
      CustomStructErrorAnotherTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_custom_struct_error_another_twin_rust_async(
      CustomStructErrorAnotherTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_custom_struct_error_another_twin_sync(
      CustomStructErrorAnotherTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_custom_struct_error_twin_normal(
      CustomStructErrorTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.a, serializer);
  }

  @protected
  void sse_encode_custom_struct_error_twin_rust_async(
      CustomStructErrorTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.a, serializer);
  }

  @protected
  void sse_encode_custom_struct_error_twin_sync(
      CustomStructErrorTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.a, serializer);
  }

  @protected
  void sse_encode_custom_struct_twin_normal(
      CustomStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_custom_struct_twin_rust_async(
      CustomStructTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_custom_struct_twin_sync(
      CustomStructTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_customized_twin_normal(
      CustomizedTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.finalField, serializer);
    sse_encode_opt_String(self.nonFinalField, serializer);
  }

  @protected
  void sse_encode_customized_twin_rust_async(
      CustomizedTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.finalField, serializer);
    sse_encode_opt_String(self.nonFinalField, serializer);
  }

  @protected
  void sse_encode_customized_twin_sync(
      CustomizedTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.finalField, serializer);
    sse_encode_opt_String(self.nonFinalField, serializer);
  }

  @protected
  void sse_encode_dart_opaque_nested_twin_normal(
      DartOpaqueNestedTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(self.first, serializer);
    sse_encode_DartOpaque(self.second, serializer);
  }

  @protected
  void sse_encode_dart_opaque_nested_twin_rust_async(
      DartOpaqueNestedTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(self.first, serializer);
    sse_encode_DartOpaque(self.second, serializer);
  }

  @protected
  void sse_encode_dart_opaque_nested_twin_sync(
      DartOpaqueNestedTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(self.first, serializer);
    sse_encode_DartOpaque(self.second, serializer);
  }

  @protected
  void sse_encode_demo_struct_for_rust_call_dart_twin_normal(
      DemoStructForRustCallDartTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
  }

  @protected
  void sse_encode_demo_struct_for_rust_call_dart_twin_rust_async(
      DemoStructForRustCallDartTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
  }

  @protected
  void sse_encode_distance_twin_normal(
      DistanceTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case DistanceTwinNormal_Unknown():
        sse_encode_i_32(0, serializer);
      case DistanceTwinNormal_Map(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_f_64(field0, serializer);
    }
  }

  @protected
  void sse_encode_distance_twin_rust_async(
      DistanceTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case DistanceTwinRustAsync_Unknown():
        sse_encode_i_32(0, serializer);
      case DistanceTwinRustAsync_Map(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_f_64(field0, serializer);
    }
  }

  @protected
  void sse_encode_distance_twin_sync(
      DistanceTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case DistanceTwinSync_Unknown():
        sse_encode_i_32(0, serializer);
      case DistanceTwinSync_Map(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_f_64(field0, serializer);
    }
  }

  @protected
  void sse_encode_element_twin_normal(
      ElementTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.tag, serializer);
    sse_encode_opt_String(self.text, serializer);
    sse_encode_opt_list_attribute_twin_normal(self.attributes, serializer);
    sse_encode_opt_list_element_twin_normal(self.children, serializer);
  }

  @protected
  void sse_encode_element_twin_rust_async(
      ElementTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.tag, serializer);
    sse_encode_opt_String(self.text, serializer);
    sse_encode_opt_list_attribute_twin_rust_async(self.attributes, serializer);
    sse_encode_opt_list_element_twin_rust_async(self.children, serializer);
  }

  @protected
  void sse_encode_element_twin_sync(
      ElementTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.tag, serializer);
    sse_encode_opt_String(self.text, serializer);
    sse_encode_opt_list_attribute_twin_sync(self.attributes, serializer);
    sse_encode_opt_list_element_twin_sync(self.children, serializer);
  }

  @protected
  void sse_encode_empty_twin_normal(
      EmptyTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_empty_twin_rust_async(
      EmptyTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_empty_twin_sync(
      EmptyTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_enum_dart_opaque_twin_normal(
      EnumDartOpaqueTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case EnumDartOpaqueTwinNormal_Primitive(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_i_32(field0, serializer);
      case EnumDartOpaqueTwinNormal_Opaque(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_DartOpaque(field0, serializer);
    }
  }

  @protected
  void sse_encode_enum_dart_opaque_twin_rust_async(
      EnumDartOpaqueTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case EnumDartOpaqueTwinRustAsync_Primitive(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_i_32(field0, serializer);
      case EnumDartOpaqueTwinRustAsync_Opaque(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_DartOpaque(field0, serializer);
    }
  }

  @protected
  void sse_encode_enum_dart_opaque_twin_sync(
      EnumDartOpaqueTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case EnumDartOpaqueTwinSync_Primitive(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_i_32(field0, serializer);
      case EnumDartOpaqueTwinSync_Opaque(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_DartOpaque(field0, serializer);
    }
  }

  @protected
  void sse_encode_enum_opaque_twin_normal(
      EnumOpaqueTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case EnumOpaqueTwinNormal_Struct(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_RustOpaque_HideDataTwinNormal(field0, serializer);
      case EnumOpaqueTwinNormal_Primitive(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_RustOpaque_i32(field0, serializer);
      case EnumOpaqueTwinNormal_TraitObj(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_RustOpaque_BoxdynDartDebugTwinNormal(field0, serializer);
      case EnumOpaqueTwinNormal_Mutex(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_RustOpaque_MutexHideDataTwinNormal(field0, serializer);
      case EnumOpaqueTwinNormal_RwLock(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_RustOpaque_RwLockHideDataTwinNormal(field0, serializer);
      case EnumOpaqueTwinNormal_Nothing():
        sse_encode_i_32(5, serializer);
    }
  }

  @protected
  void sse_encode_enum_opaque_twin_normal_array_5(
      EnumOpaqueTwinNormalArray5 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_enum_opaque_twin_normal(self.inner, serializer);
  }

  @protected
  void sse_encode_enum_opaque_twin_rust_async(
      EnumOpaqueTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case EnumOpaqueTwinRustAsync_Struct(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_RustOpaque_HideDataTwinRustAsync(field0, serializer);
      case EnumOpaqueTwinRustAsync_Primitive(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_RustOpaque_i32(field0, serializer);
      case EnumOpaqueTwinRustAsync_TraitObj(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_RustOpaque_BoxdynDartDebugTwinRustAsync(field0, serializer);
      case EnumOpaqueTwinRustAsync_Mutex(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_RustOpaque_MutexHideDataTwinRustAsync(field0, serializer);
      case EnumOpaqueTwinRustAsync_RwLock(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_RustOpaque_RwLockHideDataTwinRustAsync(field0, serializer);
      case EnumOpaqueTwinRustAsync_Nothing():
        sse_encode_i_32(5, serializer);
    }
  }

  @protected
  void sse_encode_enum_opaque_twin_rust_async_array_5(
      EnumOpaqueTwinRustAsyncArray5 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_enum_opaque_twin_rust_async(self.inner, serializer);
  }

  @protected
  void sse_encode_enum_opaque_twin_sync(
      EnumOpaqueTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case EnumOpaqueTwinSync_Struct(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_RustOpaque_HideDataTwinSync(field0, serializer);
      case EnumOpaqueTwinSync_Primitive(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_RustOpaque_i32(field0, serializer);
      case EnumOpaqueTwinSync_TraitObj(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_RustOpaque_BoxdynDartDebugTwinSync(field0, serializer);
      case EnumOpaqueTwinSync_Mutex(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_RustOpaque_MutexHideDataTwinSync(field0, serializer);
      case EnumOpaqueTwinSync_RwLock(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_RustOpaque_RwLockHideDataTwinSync(field0, serializer);
      case EnumOpaqueTwinSync_Nothing():
        sse_encode_i_32(5, serializer);
    }
  }

  @protected
  void sse_encode_enum_opaque_twin_sync_array_5(
      EnumOpaqueTwinSyncArray5 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_enum_opaque_twin_sync(self.inner, serializer);
  }

  @protected
  void sse_encode_enum_simple_twin_normal(
      EnumSimpleTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_enum_simple_twin_rust_async(
      EnumSimpleTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_enum_simple_twin_sync(
      EnumSimpleTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_enum_with_discriminant_twin_normal(
      EnumWithDiscriminantTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_enum_with_discriminant_twin_rust_async(
      EnumWithDiscriminantTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_enum_with_discriminant_twin_sync(
      EnumWithDiscriminantTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_enum_with_good_and_opaque_twin_normal(
      EnumWithGoodAndOpaqueTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case EnumWithGoodAndOpaqueTwinNormal_Good(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case EnumWithGoodAndOpaqueTwinNormal_Opaque(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            field0, serializer);
    }
  }

  @protected
  void sse_encode_enum_with_good_and_opaque_twin_rust_async(
      EnumWithGoodAndOpaqueTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case EnumWithGoodAndOpaqueTwinRustAsync_Good(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case EnumWithGoodAndOpaqueTwinRustAsync_Opaque(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            field0, serializer);
    }
  }

  @protected
  void sse_encode_enum_with_good_and_opaque_twin_sync(
      EnumWithGoodAndOpaqueTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case EnumWithGoodAndOpaqueTwinSync_Good(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case EnumWithGoodAndOpaqueTwinSync_Opaque(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            field0, serializer);
    }
  }

  @protected
  void sse_encode_enum_with_item_mixed_twin_normal(
      EnumWithItemMixedTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case EnumWithItemMixedTwinNormal_A():
        sse_encode_i_32(0, serializer);
      case EnumWithItemMixedTwinNormal_B(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_list_prim_u_8_strict(field0, serializer);
      case EnumWithItemMixedTwinNormal_C(cField: final cField):
        sse_encode_i_32(2, serializer);
        sse_encode_String(cField, serializer);
    }
  }

  @protected
  void sse_encode_enum_with_item_mixed_twin_rust_async(
      EnumWithItemMixedTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case EnumWithItemMixedTwinRustAsync_A():
        sse_encode_i_32(0, serializer);
      case EnumWithItemMixedTwinRustAsync_B(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_list_prim_u_8_strict(field0, serializer);
      case EnumWithItemMixedTwinRustAsync_C(cField: final cField):
        sse_encode_i_32(2, serializer);
        sse_encode_String(cField, serializer);
    }
  }

  @protected
  void sse_encode_enum_with_item_mixed_twin_sync(
      EnumWithItemMixedTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case EnumWithItemMixedTwinSync_A():
        sse_encode_i_32(0, serializer);
      case EnumWithItemMixedTwinSync_B(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_list_prim_u_8_strict(field0, serializer);
      case EnumWithItemMixedTwinSync_C(cField: final cField):
        sse_encode_i_32(2, serializer);
        sse_encode_String(cField, serializer);
    }
  }

  @protected
  void sse_encode_enum_with_item_struct_twin_normal(
      EnumWithItemStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case EnumWithItemStructTwinNormal_A(aField: final aField):
        sse_encode_i_32(0, serializer);
        sse_encode_list_prim_u_8_strict(aField, serializer);
      case EnumWithItemStructTwinNormal_B(bField: final bField):
        sse_encode_i_32(1, serializer);
        sse_encode_list_prim_i_32_strict(bField, serializer);
    }
  }

  @protected
  void sse_encode_enum_with_item_struct_twin_rust_async(
      EnumWithItemStructTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case EnumWithItemStructTwinRustAsync_A(aField: final aField):
        sse_encode_i_32(0, serializer);
        sse_encode_list_prim_u_8_strict(aField, serializer);
      case EnumWithItemStructTwinRustAsync_B(bField: final bField):
        sse_encode_i_32(1, serializer);
        sse_encode_list_prim_i_32_strict(bField, serializer);
    }
  }

  @protected
  void sse_encode_enum_with_item_struct_twin_sync(
      EnumWithItemStructTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case EnumWithItemStructTwinSync_A(aField: final aField):
        sse_encode_i_32(0, serializer);
        sse_encode_list_prim_u_8_strict(aField, serializer);
      case EnumWithItemStructTwinSync_B(bField: final bField):
        sse_encode_i_32(1, serializer);
        sse_encode_list_prim_i_32_strict(bField, serializer);
    }
  }

  @protected
  void sse_encode_enum_with_item_tuple_twin_normal(
      EnumWithItemTupleTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case EnumWithItemTupleTwinNormal_A(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_list_prim_u_8_strict(field0, serializer);
      case EnumWithItemTupleTwinNormal_B(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_i_32(field0, serializer);
    }
  }

  @protected
  void sse_encode_enum_with_item_tuple_twin_rust_async(
      EnumWithItemTupleTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case EnumWithItemTupleTwinRustAsync_A(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_list_prim_u_8_strict(field0, serializer);
      case EnumWithItemTupleTwinRustAsync_B(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_i_32(field0, serializer);
    }
  }

  @protected
  void sse_encode_enum_with_item_tuple_twin_sync(
      EnumWithItemTupleTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case EnumWithItemTupleTwinSync_A(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_list_prim_u_8_strict(field0, serializer);
      case EnumWithItemTupleTwinSync_B(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_i_32(field0, serializer);
    }
  }

  @protected
  void sse_encode_event_twin_normal(
      EventTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.address, serializer);
    sse_encode_String(self.payload, serializer);
  }

  @protected
  void sse_encode_event_twin_rust_async(
      EventTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.address, serializer);
    sse_encode_String(self.payload, serializer);
  }

  @protected
  void sse_encode_exotic_optionals_twin_normal(
      ExoticOptionalsTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_i_32(self.int32, serializer);
    sse_encode_opt_box_autoadd_i_64(self.int64, serializer);
    sse_encode_opt_box_autoadd_f_64(self.float64, serializer);
    sse_encode_opt_box_autoadd_bool(self.boolean, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.zerocopy, serializer);
    sse_encode_opt_list_prim_i_8_strict(self.int8List, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.uint8List, serializer);
    sse_encode_opt_list_prim_i_32_strict(self.int32List, serializer);
    sse_encode_opt_list_prim_f_32_strict(self.float32List, serializer);
    sse_encode_opt_list_prim_f_64_strict(self.float64List, serializer);
    sse_encode_opt_list_attribute_twin_normal(self.attributes, serializer);
    sse_encode_list_opt_box_autoadd_attribute_twin_normal(
        self.attributesNullable, serializer);
    sse_encode_opt_list_opt_box_autoadd_attribute_twin_normal(
        self.nullableAttributes, serializer);
    sse_encode_opt_box_autoadd_new_type_int_twin_normal(
        self.newtypeint, serializer);
  }

  @protected
  void sse_encode_exotic_optionals_twin_rust_async(
      ExoticOptionalsTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_i_32(self.int32, serializer);
    sse_encode_opt_box_autoadd_i_64(self.int64, serializer);
    sse_encode_opt_box_autoadd_f_64(self.float64, serializer);
    sse_encode_opt_box_autoadd_bool(self.boolean, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.zerocopy, serializer);
    sse_encode_opt_list_prim_i_8_strict(self.int8List, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.uint8List, serializer);
    sse_encode_opt_list_prim_i_32_strict(self.int32List, serializer);
    sse_encode_opt_list_prim_f_32_strict(self.float32List, serializer);
    sse_encode_opt_list_prim_f_64_strict(self.float64List, serializer);
    sse_encode_opt_list_attribute_twin_rust_async(self.attributes, serializer);
    sse_encode_list_opt_box_autoadd_attribute_twin_rust_async(
        self.attributesNullable, serializer);
    sse_encode_opt_list_opt_box_autoadd_attribute_twin_rust_async(
        self.nullableAttributes, serializer);
    sse_encode_opt_box_autoadd_new_type_int_twin_rust_async(
        self.newtypeint, serializer);
  }

  @protected
  void sse_encode_exotic_optionals_twin_sync(
      ExoticOptionalsTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_i_32(self.int32, serializer);
    sse_encode_opt_box_autoadd_i_64(self.int64, serializer);
    sse_encode_opt_box_autoadd_f_64(self.float64, serializer);
    sse_encode_opt_box_autoadd_bool(self.boolean, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.zerocopy, serializer);
    sse_encode_opt_list_prim_i_8_strict(self.int8List, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.uint8List, serializer);
    sse_encode_opt_list_prim_i_32_strict(self.int32List, serializer);
    sse_encode_opt_list_prim_f_32_strict(self.float32List, serializer);
    sse_encode_opt_list_prim_f_64_strict(self.float64List, serializer);
    sse_encode_opt_list_attribute_twin_sync(self.attributes, serializer);
    sse_encode_list_opt_box_autoadd_attribute_twin_sync(
        self.attributesNullable, serializer);
    sse_encode_opt_list_opt_box_autoadd_attribute_twin_sync(
        self.nullableAttributes, serializer);
    sse_encode_opt_box_autoadd_new_type_int_twin_sync(
        self.newtypeint, serializer);
  }

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat32(self);
  }

  @protected
  void sse_encode_f_32_array_3(F32Array3 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_f_32_strict(self.inner, serializer);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_f_64_array_16(F64Array16 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_f_64_strict(self.inner, serializer);
  }

  @protected
  void sse_encode_feature_chrono_twin_normal(
      FeatureChronoTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Chrono_Utc(self.utc, serializer);
    sse_encode_Chrono_Local(self.local, serializer);
    sse_encode_Chrono_Duration(self.duration, serializer);
    sse_encode_Chrono_Naive(self.naive, serializer);
  }

  @protected
  void sse_encode_feature_chrono_twin_rust_async(
      FeatureChronoTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Chrono_Utc(self.utc, serializer);
    sse_encode_Chrono_Local(self.local, serializer);
    sse_encode_Chrono_Duration(self.duration, serializer);
    sse_encode_Chrono_Naive(self.naive, serializer);
  }

  @protected
  void sse_encode_feature_chrono_twin_sync(
      FeatureChronoTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Chrono_Utc(self.utc, serializer);
    sse_encode_Chrono_Local(self.local, serializer);
    sse_encode_Chrono_Duration(self.duration, serializer);
    sse_encode_Chrono_Naive(self.naive, serializer);
  }

  @protected
  void sse_encode_feature_uuid_twin_normal(
      FeatureUuidTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Uuid(self.one, serializer);
  }

  @protected
  void sse_encode_feature_uuid_twin_rust_async(
      FeatureUuidTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Uuid(self.one, serializer);
  }

  @protected
  void sse_encode_feature_uuid_twin_sync(
      FeatureUuidTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Uuid(self.one, serializer);
  }

  @protected
  void sse_encode_feed_id_twin_normal(
      FeedIdTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8_array_8(self.field0, serializer);
  }

  @protected
  void sse_encode_feed_id_twin_rust_async(
      FeedIdTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8_array_8(self.field0, serializer);
  }

  @protected
  void sse_encode_feed_id_twin_sync(
      FeedIdTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8_array_8(self.field0, serializer);
  }

  @protected
  void sse_encode_hash_map_value(HashMapValue self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.inner, serializer);
  }

  @protected
  void sse_encode_i_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt16(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_32_array_2(I32Array2 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_i_32_strict(self.inner, serializer);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_i_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt8(self);
  }

  @protected
  void sse_encode_isize(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_item_container_solution_two_twin_normal(
      ItemContainerSolutionTwoTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_list_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueItemTwinNormal(
        self.items, serializer);
  }

  @protected
  void sse_encode_kitchen_sink_twin_normal(
      KitchenSinkTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case KitchenSinkTwinNormal_Empty():
        sse_encode_i_32(0, serializer);
      case KitchenSinkTwinNormal_Primitives(
          int32: final int32,
          float64: final float64,
          boolean: final boolean
        ):
        sse_encode_i_32(1, serializer);
        sse_encode_i_32(int32, serializer);
        sse_encode_f_64(float64, serializer);
        sse_encode_bool(boolean, serializer);
      case KitchenSinkTwinNormal_Nested(
          field0: final field0,
          field1: final field1
        ):
        sse_encode_i_32(2, serializer);
        sse_encode_i_32(field0, serializer);
        sse_encode_box_kitchen_sink_twin_normal(field1, serializer);
      case KitchenSinkTwinNormal_Optional(
          field0: final field0,
          field1: final field1
        ):
        sse_encode_i_32(3, serializer);
        sse_encode_opt_box_autoadd_i_32(field0, serializer);
        sse_encode_opt_box_autoadd_i_32(field1, serializer);
      case KitchenSinkTwinNormal_Buffer(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_list_prim_u_8_strict(field0, serializer);
      case KitchenSinkTwinNormal_Enums(field0: final field0):
        sse_encode_i_32(5, serializer);
        sse_encode_weekdays_twin_normal(field0, serializer);
    }
  }

  @protected
  void sse_encode_kitchen_sink_twin_rust_async(
      KitchenSinkTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case KitchenSinkTwinRustAsync_Empty():
        sse_encode_i_32(0, serializer);
      case KitchenSinkTwinRustAsync_Primitives(
          int32: final int32,
          float64: final float64,
          boolean: final boolean
        ):
        sse_encode_i_32(1, serializer);
        sse_encode_i_32(int32, serializer);
        sse_encode_f_64(float64, serializer);
        sse_encode_bool(boolean, serializer);
      case KitchenSinkTwinRustAsync_Nested(
          field0: final field0,
          field1: final field1
        ):
        sse_encode_i_32(2, serializer);
        sse_encode_i_32(field0, serializer);
        sse_encode_box_kitchen_sink_twin_rust_async(field1, serializer);
      case KitchenSinkTwinRustAsync_Optional(
          field0: final field0,
          field1: final field1
        ):
        sse_encode_i_32(3, serializer);
        sse_encode_opt_box_autoadd_i_32(field0, serializer);
        sse_encode_opt_box_autoadd_i_32(field1, serializer);
      case KitchenSinkTwinRustAsync_Buffer(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_list_prim_u_8_strict(field0, serializer);
      case KitchenSinkTwinRustAsync_Enums(field0: final field0):
        sse_encode_i_32(5, serializer);
        sse_encode_weekdays_twin_rust_async(field0, serializer);
    }
  }

  @protected
  void sse_encode_kitchen_sink_twin_sync(
      KitchenSinkTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case KitchenSinkTwinSync_Empty():
        sse_encode_i_32(0, serializer);
      case KitchenSinkTwinSync_Primitives(
          int32: final int32,
          float64: final float64,
          boolean: final boolean
        ):
        sse_encode_i_32(1, serializer);
        sse_encode_i_32(int32, serializer);
        sse_encode_f_64(float64, serializer);
        sse_encode_bool(boolean, serializer);
      case KitchenSinkTwinSync_Nested(
          field0: final field0,
          field1: final field1
        ):
        sse_encode_i_32(2, serializer);
        sse_encode_i_32(field0, serializer);
        sse_encode_box_kitchen_sink_twin_sync(field1, serializer);
      case KitchenSinkTwinSync_Optional(
          field0: final field0,
          field1: final field1
        ):
        sse_encode_i_32(3, serializer);
        sse_encode_opt_box_autoadd_i_32(field0, serializer);
        sse_encode_opt_box_autoadd_i_32(field1, serializer);
      case KitchenSinkTwinSync_Buffer(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_list_prim_u_8_strict(field0, serializer);
      case KitchenSinkTwinSync_Enums(field0: final field0):
        sse_encode_i_32(5, serializer);
        sse_encode_weekdays_twin_sync(field0, serializer);
    }
  }

  @protected
  void
      sse_encode_list_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueItemTwinNormal(
          List<OpaqueItemTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueItemTwinNormal(
          item, serializer);
    }
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          List<NonCloneSimpleTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          item, serializer);
    }
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          List<NonCloneSimpleTwinRustAsync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          item, serializer);
    }
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          List<NonCloneSimpleTwinSync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          item, serializer);
    }
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueItemTwinNormal(
          List<OpaqueItemTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueItemTwinNormal(
          item, serializer);
    }
  }

  @protected
  void sse_encode_list_Chrono_Duration(
      List<Duration> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Chrono_Duration(item, serializer);
    }
  }

  @protected
  void sse_encode_list_Chrono_Local(
      List<DateTime> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Chrono_Local(item, serializer);
    }
  }

  @protected
  void sse_encode_list_Chrono_Naive(
      List<DateTime> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Chrono_Naive(item, serializer);
    }
  }

  @protected
  void sse_encode_list_DartOpaque(List<Object> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_DartOpaque(item, serializer);
    }
  }

  @protected
  void sse_encode_list_RustOpaque_HideDataTwinNormal(
      List<HideDataTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_RustOpaque_HideDataTwinNormal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_RustOpaque_HideDataTwinRustAsync(
      List<HideDataTwinRustAsync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_RustOpaque_HideDataTwinRustAsync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_RustOpaque_HideDataTwinSync(
      List<HideDataTwinSync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_RustOpaque_HideDataTwinSync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_StreamSink_i_32_Sse(
      List<RustStreamSink<int>> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_StreamSink_i_32_Sse(item, serializer);
    }
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_Uuid(List<UuidValue> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Uuid(item, serializer);
    }
  }

  @protected
  void sse_encode_list_application_env_var(
      List<ApplicationEnvVar> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_application_env_var(item, serializer);
    }
  }

  @protected
  void sse_encode_list_application_mode(
      List<ApplicationMode> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_application_mode(item, serializer);
    }
  }

  @protected
  void sse_encode_list_application_settings(
      List<ApplicationSettings> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_application_settings(item, serializer);
    }
  }

  @protected
  void sse_encode_list_attribute_twin_normal(
      List<AttributeTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_attribute_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_attribute_twin_rust_async(
      List<AttributeTwinRustAsync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_attribute_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_attribute_twin_sync(
      List<AttributeTwinSync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_attribute_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_basic_general_enum_twin_normal(
      List<BasicGeneralEnumTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_basic_general_enum_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_basic_general_enum_twin_rust_async(
      List<BasicGeneralEnumTwinRustAsync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_basic_general_enum_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_basic_general_enum_twin_sync(
      List<BasicGeneralEnumTwinSync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_basic_general_enum_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_basic_primitive_enum_twin_normal(
      List<BasicPrimitiveEnumTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_basic_primitive_enum_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_basic_primitive_enum_twin_rust_async(
      List<BasicPrimitiveEnumTwinRustAsync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_basic_primitive_enum_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_basic_primitive_enum_twin_sync(
      List<BasicPrimitiveEnumTwinSync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_basic_primitive_enum_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_basic_struct_twin_normal(
      List<BasicStructTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_basic_struct_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_basic_struct_twin_rust_async(
      List<BasicStructTwinRustAsync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_basic_struct_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_basic_struct_twin_sync(
      List<BasicStructTwinSync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_basic_struct_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_bool(List<bool> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_bool(item, serializer);
    }
  }

  @protected
  void sse_encode_list_element_twin_normal(
      List<ElementTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_element_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_element_twin_rust_async(
      List<ElementTwinRustAsync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_element_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_element_twin_sync(
      List<ElementTwinSync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_element_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_enum_opaque_twin_normal(
      List<EnumOpaqueTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_enum_opaque_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_enum_opaque_twin_rust_async(
      List<EnumOpaqueTwinRustAsync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_enum_opaque_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_enum_opaque_twin_sync(
      List<EnumOpaqueTwinSync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_enum_opaque_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_list_prim_u_8_strict(
      List<Uint8List> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_list_prim_u_8_strict(item, serializer);
    }
  }

  @protected
  void sse_encode_list_my_enum(List<MyEnum> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_my_enum(item, serializer);
    }
  }

  @protected
  void sse_encode_list_my_size(List<MySize> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_my_size(item, serializer);
    }
  }

  @protected
  void sse_encode_list_my_tree_node_twin_normal(
      List<MyTreeNodeTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_my_tree_node_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_my_tree_node_twin_rust_async(
      List<MyTreeNodeTwinRustAsync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_my_tree_node_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_my_tree_node_twin_sync(
      List<MyTreeNodeTwinSync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_my_tree_node_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_nested_raw_string_mirrored(
      List<NestedRawStringMirrored> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_nested_raw_string_mirrored(item, serializer);
    }
  }

  @protected
  void sse_encode_list_of_nested_raw_string_mirrored(
      ListOfNestedRawStringMirrored self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_nested_raw_string_mirrored(self.raw, serializer);
  }

  @protected
  void sse_encode_list_opt_String(
      List<String?> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_opt_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_opt_box_autoadd_attribute_twin_normal(
      List<AttributeTwinNormal?> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_opt_box_autoadd_attribute_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_opt_box_autoadd_attribute_twin_rust_async(
      List<AttributeTwinRustAsync?> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_opt_box_autoadd_attribute_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_opt_box_autoadd_attribute_twin_sync(
      List<AttributeTwinSync?> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_opt_box_autoadd_attribute_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_opt_box_autoadd_i_32(
      List<int?> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_opt_box_autoadd_i_32(item, serializer);
    }
  }

  @protected
  void sse_encode_list_opt_box_autoadd_weekdays_twin_normal(
      List<WeekdaysTwinNormal?> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_opt_box_autoadd_weekdays_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_opt_box_autoadd_weekdays_twin_rust_async(
      List<WeekdaysTwinRustAsync?> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_opt_box_autoadd_weekdays_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_opt_box_autoadd_weekdays_twin_sync(
      List<WeekdaysTwinSync?> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_opt_box_autoadd_weekdays_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_opt_list_prim_i_32_strict(
      List<Int32List?> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_opt_list_prim_i_32_strict(item, serializer);
    }
  }

  @protected
  void sse_encode_list_point_twin_normal(
      List<PointTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_point_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_point_twin_rust_async(
      List<PointTwinRustAsync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_point_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_point_twin_sync(
      List<PointTwinSync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_point_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_f_32_loose(
      List<double> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putFloat32List(
        self is Float32List ? self : Float32List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_f_32_strict(
      Float32List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putFloat32List(self);
  }

  @protected
  void sse_encode_list_prim_f_64_loose(
      List<double> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putFloat64List(
        self is Float64List ? self : Float64List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_f_64_strict(
      Float64List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putFloat64List(self);
  }

  @protected
  void sse_encode_list_prim_i_16_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putInt16List(self is Int16List ? self : Int16List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_i_16_strict(
      Int16List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putInt16List(self);
  }

  @protected
  void sse_encode_list_prim_i_32_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putInt32List(self is Int32List ? self : Int32List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_i_32_strict(
      Int32List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putInt32List(self);
  }

  @protected
  void sse_encode_list_prim_i_64_strict(
      Int64List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putInt64List(self);
  }

  @protected
  void sse_encode_list_prim_i_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putInt8List(self is Int8List ? self : Int8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_i_8_strict(
      Int8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putInt8List(self);
  }

  @protected
  void sse_encode_list_prim_u_16_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint16List(self is Uint16List ? self : Uint16List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_16_strict(
      Uint16List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint16List(self);
  }

  @protected
  void sse_encode_list_prim_u_32_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint32List(self is Uint32List ? self : Uint32List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_32_strict(
      Uint32List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint32List(self);
  }

  @protected
  void sse_encode_list_prim_u_64_strict(
      Uint64List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint64List(self);
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_raw_string_enum_mirrored(
      List<RawStringEnumMirrored> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_raw_string_enum_mirrored(item, serializer);
    }
  }

  @protected
  void sse_encode_list_raw_string_mirrored(
      List<RawStringMirrored> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_raw_string_mirrored(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_basic_general_enum_twin_normal(
      List<(int, BasicGeneralEnumTwinNormal)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_basic_general_enum_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_basic_general_enum_twin_rust_async(
      List<(int, BasicGeneralEnumTwinRustAsync)> self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_basic_general_enum_twin_rust_async(
          item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_basic_general_enum_twin_sync(
      List<(int, BasicGeneralEnumTwinSync)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_basic_general_enum_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_basic_primitive_enum_twin_normal(
      List<(int, BasicPrimitiveEnumTwinNormal)> self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_basic_primitive_enum_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_basic_primitive_enum_twin_rust_async(
      List<(int, BasicPrimitiveEnumTwinRustAsync)> self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_basic_primitive_enum_twin_rust_async(
          item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_basic_primitive_enum_twin_sync(
      List<(int, BasicPrimitiveEnumTwinSync)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_basic_primitive_enum_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_basic_struct_twin_normal(
      List<(int, BasicStructTwinNormal)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_basic_struct_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_basic_struct_twin_rust_async(
      List<(int, BasicStructTwinRustAsync)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_basic_struct_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_basic_struct_twin_sync(
      List<(int, BasicStructTwinSync)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_basic_struct_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_bool(
      List<(int, bool)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_bool(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_f_32(
      List<(int, double)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_f_32(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_f_64(
      List<(int, double)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_f_64(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_i_128(
      List<(int, BigInt)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_i_128(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_i_16(
      List<(int, int)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_i_16(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_i_32(
      List<(int, int)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_i_32(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_i_64(
      List<(int, PlatformInt64)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_i_64(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_i_8(
      List<(int, int)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_i_8(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_isize(
      List<(int, PlatformInt64)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_isize(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_list_prim_u_8_strict(
      List<(int, Uint8List)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_list_prim_u_8_strict(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_string(
      List<(int, String)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_string(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_u_128(
      List<(int, BigInt)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_u_128(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_u_16(
      List<(int, int)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_u_16(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_u_32(
      List<(int, int)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_u_32(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_u_64(
      List<(int, BigInt)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_u_64(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_u_8(
      List<(int, int)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_u_8(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_usize(
      List<(int, BigInt)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_usize(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_enum_simple_twin_normal(
      List<(String, EnumSimpleTwinNormal)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_enum_simple_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_enum_simple_twin_rust_async(
      List<(String, EnumSimpleTwinRustAsync)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_enum_simple_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_enum_simple_twin_sync(
      List<(String, EnumSimpleTwinSync)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_enum_simple_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_hash_map_value(
      List<(String, HashMapValue)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_hash_map_value(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_i_32(
      List<(String, int)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_i_32(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_kitchen_sink_twin_normal(
      List<(String, KitchenSinkTwinNormal)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_kitchen_sink_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_kitchen_sink_twin_rust_async(
      List<(String, KitchenSinkTwinRustAsync)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_kitchen_sink_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_kitchen_sink_twin_sync(
      List<(String, KitchenSinkTwinSync)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_kitchen_sink_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_list_prim_u_8_strict(
      List<(String, Uint8List)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_list_prim_u_8_strict(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_my_size(
      List<(String, MySize)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_my_size(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_string(
      List<(String, String)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_string(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_u_8_application_mode(
      List<(int, ApplicationMode)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_u_8_application_mode(item, serializer);
    }
  }

  @protected
  void sse_encode_list_simple_struct_twin_normal(
      List<SimpleStructTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_simple_struct_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_simple_struct_twin_rust_async(
      List<SimpleStructTwinRustAsync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_simple_struct_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_simple_struct_twin_sync(
      List<SimpleStructTwinSync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_simple_struct_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_sum_with_twin_normal(
      List<SumWithTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_sum_with_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_sum_with_twin_rust_async(
      List<SumWithTwinRustAsync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_sum_with_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_sum_with_twin_sync(
      List<SumWithTwinSync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_sum_with_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_test_id_twin_normal(
      List<TestIdTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_test_id_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_test_id_twin_rust_async(
      List<TestIdTwinRustAsync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_test_id_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_test_id_twin_sync(
      List<TestIdTwinSync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_test_id_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_weekdays_twin_normal(
      List<WeekdaysTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_weekdays_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_weekdays_twin_rust_async(
      List<WeekdaysTwinRustAsync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_weekdays_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_weekdays_twin_sync(
      List<WeekdaysTwinSync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_weekdays_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_log_2_twin_normal(
      Log2TwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.key, serializer);
    sse_encode_String(self.value, serializer);
  }

  @protected
  void sse_encode_log_2_twin_rust_async(
      Log2TwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.key, serializer);
    sse_encode_String(self.value, serializer);
  }

  @protected
  void sse_encode_log_2_twin_sync(Log2TwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.key, serializer);
    sse_encode_String(self.value, serializer);
  }

  @protected
  void sse_encode_log_twin_normal(
      LogTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.key, serializer);
    sse_encode_u_32(self.value, serializer);
  }

  @protected
  void sse_encode_log_twin_rust_async(
      LogTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.key, serializer);
    sse_encode_u_32(self.value, serializer);
  }

  @protected
  void sse_encode_macro_struct(MacroStruct self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.data, serializer);
  }

  @protected
  void sse_encode_measure_twin_normal(
      MeasureTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case MeasureTwinNormal_Speed(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_speed_twin_normal(field0, serializer);
      case MeasureTwinNormal_Distance(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_distance_twin_normal(field0, serializer);
    }
  }

  @protected
  void sse_encode_measure_twin_rust_async(
      MeasureTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case MeasureTwinRustAsync_Speed(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_speed_twin_rust_async(field0, serializer);
      case MeasureTwinRustAsync_Distance(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_distance_twin_rust_async(field0, serializer);
    }
  }

  @protected
  void sse_encode_measure_twin_sync(
      MeasureTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case MeasureTwinSync_Speed(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_speed_twin_sync(field0, serializer);
      case MeasureTwinSync_Distance(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_distance_twin_sync(field0, serializer);
    }
  }

  @protected
  void sse_encode_message_id_twin_normal(
      MessageIdTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8_array_32(self.field0, serializer);
  }

  @protected
  void sse_encode_message_id_twin_rust_async(
      MessageIdTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8_array_32(self.field0, serializer);
  }

  @protected
  void sse_encode_message_id_twin_sync(
      MessageIdTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8_array_32(self.field0, serializer);
  }

  @protected
  void sse_encode_mirror_struct_twin_normal(
      MirrorStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_application_settings(self.a, serializer);
    sse_encode_my_struct(self.b, serializer);
    sse_encode_list_my_enum(self.c, serializer);
    sse_encode_list_application_settings(self.d, serializer);
  }

  @protected
  void sse_encode_mirror_struct_twin_rust_async(
      MirrorStructTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_application_settings(self.a, serializer);
    sse_encode_my_struct(self.b, serializer);
    sse_encode_list_my_enum(self.c, serializer);
    sse_encode_list_application_settings(self.d, serializer);
  }

  @protected
  void sse_encode_mirror_struct_twin_sync(
      MirrorStructTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_application_settings(self.a, serializer);
    sse_encode_my_struct(self.b, serializer);
    sse_encode_list_my_enum(self.c, serializer);
    sse_encode_list_application_settings(self.d, serializer);
  }

  @protected
  void sse_encode_more_than_just_one_raw_string_struct_twin_normal(
      MoreThanJustOneRawStringStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.regular, serializer);
    sse_encode_String(self.type, serializer);
    sse_encode_bool(self.async_, serializer);
    sse_encode_String(self.another, serializer);
  }

  @protected
  void sse_encode_more_than_just_one_raw_string_struct_twin_rust_async(
      MoreThanJustOneRawStringStructTwinRustAsync self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.regular, serializer);
    sse_encode_String(self.type, serializer);
    sse_encode_bool(self.async_, serializer);
    sse_encode_String(self.another, serializer);
  }

  @protected
  void sse_encode_more_than_just_one_raw_string_struct_twin_sync(
      MoreThanJustOneRawStringStructTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.regular, serializer);
    sse_encode_String(self.type, serializer);
    sse_encode_bool(self.async_, serializer);
    sse_encode_String(self.another, serializer);
  }

  @protected
  void sse_encode_my_callable_twin_normal(
      MyCallableTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.one, serializer);
  }

  @protected
  void sse_encode_my_callable_twin_rust_async(
      MyCallableTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.one, serializer);
  }

  @protected
  void sse_encode_my_callable_twin_sync(
      MyCallableTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.one, serializer);
  }

  @protected
  void sse_encode_my_enum(MyEnum self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_my_enum_with_json_serializable_twin_normal(
      MyEnumWithJsonSerializableTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case MyEnumWithJsonSerializableTwinNormal_Apple(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case MyEnumWithJsonSerializableTwinNormal_Orange(a: final a):
        sse_encode_i_32(1, serializer);
        sse_encode_i_32(a, serializer);
    }
  }

  @protected
  void sse_encode_my_enum_without_fn_with_unignore_twin_normal(
      MyEnumWithoutFnWithUnignoreTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case MyEnumWithoutFnWithUnignoreTwinNormal_One(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
    }
  }

  @protected
  void sse_encode_my_nested_struct_twin_normal(
      MyNestedStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_my_tree_node_twin_normal(self.treeNode, serializer);
    sse_encode_weekdays_twin_normal(self.weekday, serializer);
  }

  @protected
  void sse_encode_my_nested_struct_twin_rust_async(
      MyNestedStructTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_my_tree_node_twin_rust_async(self.treeNode, serializer);
    sse_encode_weekdays_twin_rust_async(self.weekday, serializer);
  }

  @protected
  void sse_encode_my_nested_struct_twin_sync(
      MyNestedStructTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_my_tree_node_twin_sync(self.treeNode, serializer);
    sse_encode_weekdays_twin_sync(self.weekday, serializer);
  }

  @protected
  void sse_encode_my_size(MySize self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.width, serializer);
    sse_encode_i_32(self.height, serializer);
  }

  @protected
  void sse_encode_my_stream_entry_twin_normal(
      MyStreamEntryTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.hello, serializer);
  }

  @protected
  void sse_encode_my_stream_entry_twin_rust_async(
      MyStreamEntryTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.hello, serializer);
  }

  @protected
  void sse_encode_my_struct(MyStruct self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.content, serializer);
  }

  @protected
  void sse_encode_my_struct_containing_stream_sink_twin_normal(
      MyStructContainingStreamSinkTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.a, serializer);
    sse_encode_StreamSink_i_32_Sse(self.b, serializer);
  }

  @protected
  void sse_encode_my_struct_containing_stream_sink_twin_rust_async(
      MyStructContainingStreamSinkTwinRustAsync self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.a, serializer);
    sse_encode_StreamSink_i_32_Sse(self.b, serializer);
  }

  @protected
  void sse_encode_my_struct_with_json_serializable_twin_normal(
      MyStructWithJsonSerializableTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.fieldOne, serializer);
  }

  @protected
  void sse_encode_my_struct_with_sync(
      MyStructWithSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_my_struct_without_fn_with_unignore_twin_normal(
      MyStructWithoutFnWithUnignoreTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.a, serializer);
  }

  @protected
  void
      sse_encode_my_struct_without_fn_with_unignore_with_json_serializable_twin_normal(
          MyStructWithoutFnWithUnignoreWithJsonSerializableTwinNormal self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.a, serializer);
  }

  @protected
  void sse_encode_my_tree_node_twin_normal(
      MyTreeNodeTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.valueI32, serializer);
    sse_encode_list_prim_u_8_strict(self.valueVecU8, serializer);
    sse_encode_bool(self.valueBoolean, serializer);
    sse_encode_list_my_tree_node_twin_normal(self.children, serializer);
  }

  @protected
  void sse_encode_my_tree_node_twin_rust_async(
      MyTreeNodeTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.valueI32, serializer);
    sse_encode_list_prim_u_8_strict(self.valueVecU8, serializer);
    sse_encode_bool(self.valueBoolean, serializer);
    sse_encode_list_my_tree_node_twin_rust_async(self.children, serializer);
  }

  @protected
  void sse_encode_my_tree_node_twin_sync(
      MyTreeNodeTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.valueI32, serializer);
    sse_encode_list_prim_u_8_strict(self.valueVecU8, serializer);
    sse_encode_bool(self.valueBoolean, serializer);
    sse_encode_list_my_tree_node_twin_sync(self.children, serializer);
  }

  @protected
  void sse_encode_nested_raw_string_mirrored(
      NestedRawStringMirrored self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_raw_string_mirrored(self.raw, serializer);
  }

  @protected
  void sse_encode_new_simple_struct(
      NewSimpleStruct self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.field, serializer);
  }

  @protected
  void sse_encode_new_type_int_twin_normal(
      NewTypeIntTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.field0, serializer);
  }

  @protected
  void sse_encode_new_type_int_twin_rust_async(
      NewTypeIntTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.field0, serializer);
  }

  @protected
  void sse_encode_new_type_int_twin_sync(
      NewTypeIntTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.field0, serializer);
  }

  @protected
  void sse_encode_non_opaque_struct_containing_ipv_4_addr(
      NonOpaqueStructContainingIpv4Addr self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIpv4Addr(
        self.inner, serializer);
  }

  @protected
  void sse_encode_note_twin_normal(
      NoteTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_box_weekdays_twin_normal(self.day, serializer);
    sse_encode_String(self.body, serializer);
  }

  @protected
  void sse_encode_note_twin_rust_async(
      NoteTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_box_weekdays_twin_rust_async(self.day, serializer);
    sse_encode_String(self.body, serializer);
  }

  @protected
  void sse_encode_note_twin_sync(NoteTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_box_weekdays_twin_sync(self.day, serializer);
    sse_encode_String(self.body, serializer);
  }

  @protected
  void sse_encode_numbers(Numbers self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_i_32_strict(self.field0, serializer);
  }

  @protected
  void sse_encode_old_simple_struct(
      OldSimpleStruct self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.field, serializer);
  }

  @protected
  void sse_encode_opaque_nested_twin_normal(
      OpaqueNestedTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_HideDataTwinNormal(self.first, serializer);
    sse_encode_RustOpaque_HideDataTwinNormal(self.second, serializer);
  }

  @protected
  void sse_encode_opaque_nested_twin_rust_async(
      OpaqueNestedTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_HideDataTwinRustAsync(self.first, serializer);
    sse_encode_RustOpaque_HideDataTwinRustAsync(self.second, serializer);
  }

  @protected
  void sse_encode_opaque_nested_twin_sync(
      OpaqueNestedTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_HideDataTwinSync(self.first, serializer);
    sse_encode_RustOpaque_HideDataTwinSync(self.second, serializer);
  }

  @protected
  void sse_encode_opt_I128(BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_I128(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_U128(BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_U128(self, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          NonCloneSimpleTwinNormal? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          self, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          NonCloneSimpleTwinRustAsync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          self, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          NonCloneSimpleTwinSync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_Chrono_Duration(
      Duration? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Chrono_Duration(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_Chrono_Naive(
      DateTime? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Chrono_Naive(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_Chrono_Utc(
      DateTime? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Chrono_Utc(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_DartOpaque(
      Object? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_DartOpaque(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_RustOpaque_HideDataAnotherTwinNormal(
      HideDataAnotherTwinNormal? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_RustOpaque_HideDataAnotherTwinNormal(
          self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_RustOpaque_HideDataTwinNormal(
      HideDataTwinNormal? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_RustOpaque_HideDataTwinNormal(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_RustOpaque_HideDataTwinRustAsync(
      HideDataTwinRustAsync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_RustOpaque_HideDataTwinRustAsync(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_RustOpaque_HideDataTwinSync(
      HideDataTwinSync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_RustOpaque_HideDataTwinSync(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_application_env(
      ApplicationEnv? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_application_env(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_application_mode(
      ApplicationMode? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_application_mode(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_attribute_twin_normal(
      AttributeTwinNormal? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_attribute_twin_normal(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_attribute_twin_rust_async(
      AttributeTwinRustAsync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_attribute_twin_rust_async(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_attribute_twin_sync(
      AttributeTwinSync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_attribute_twin_sync(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_basic_general_enum_twin_normal(
      BasicGeneralEnumTwinNormal? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_basic_general_enum_twin_normal(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_basic_general_enum_twin_rust_async(
      BasicGeneralEnumTwinRustAsync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_basic_general_enum_twin_rust_async(
          self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_basic_general_enum_twin_sync(
      BasicGeneralEnumTwinSync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_basic_general_enum_twin_sync(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_basic_primitive_enum_twin_normal(
      BasicPrimitiveEnumTwinNormal? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_basic_primitive_enum_twin_normal(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_basic_primitive_enum_twin_rust_async(
      BasicPrimitiveEnumTwinRustAsync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_basic_primitive_enum_twin_rust_async(
          self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_basic_primitive_enum_twin_sync(
      BasicPrimitiveEnumTwinSync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_basic_primitive_enum_twin_sync(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_basic_struct_twin_normal(
      BasicStructTwinNormal? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_basic_struct_twin_normal(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_basic_struct_twin_rust_async(
      BasicStructTwinRustAsync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_basic_struct_twin_rust_async(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_basic_struct_twin_sync(
      BasicStructTwinSync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_basic_struct_twin_sync(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_bool(bool? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_bool(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_element_twin_normal(
      ElementTwinNormal? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_element_twin_normal(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_element_twin_rust_async(
      ElementTwinRustAsync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_element_twin_rust_async(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_element_twin_sync(
      ElementTwinSync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_element_twin_sync(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_exotic_optionals_twin_normal(
      ExoticOptionalsTwinNormal? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_exotic_optionals_twin_normal(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_exotic_optionals_twin_rust_async(
      ExoticOptionalsTwinRustAsync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_exotic_optionals_twin_rust_async(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_exotic_optionals_twin_sync(
      ExoticOptionalsTwinSync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_exotic_optionals_twin_sync(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_f_32(double? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_f_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_f_64(double? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_f_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_i_16(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_i_16(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_i_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_i_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_i_64(
      PlatformInt64? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_i_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_i_8(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_i_8(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_isize(
      PlatformInt64? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_isize(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_measure_twin_normal(
      MeasureTwinNormal? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_measure_twin_normal(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_measure_twin_rust_async(
      MeasureTwinRustAsync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_measure_twin_rust_async(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_measure_twin_sync(
      MeasureTwinSync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_measure_twin_sync(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_new_type_int_twin_normal(
      NewTypeIntTwinNormal? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_new_type_int_twin_normal(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_new_type_int_twin_rust_async(
      NewTypeIntTwinRustAsync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_new_type_int_twin_rust_async(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_new_type_int_twin_sync(
      NewTypeIntTwinSync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_new_type_int_twin_sync(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_record_string_i_32(
      (String, int)? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_record_string_i_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_16(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_16(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_64(BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_8(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_8(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_usize(
      BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_usize(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_weekdays_twin_normal(
      WeekdaysTwinNormal? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_weekdays_twin_normal(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_weekdays_twin_rust_async(
      WeekdaysTwinRustAsync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_weekdays_twin_rust_async(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_weekdays_twin_sync(
      WeekdaysTwinSync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_weekdays_twin_sync(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_benchmark_binary_tree_twin_normal(
      BenchmarkBinaryTreeTwinNormal? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_benchmark_binary_tree_twin_normal(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_benchmark_binary_tree_twin_rust_async(
      BenchmarkBinaryTreeTwinRustAsync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_benchmark_binary_tree_twin_rust_async(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_benchmark_binary_tree_twin_sync(
      BenchmarkBinaryTreeTwinSync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_benchmark_binary_tree_twin_sync(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_bool(bool? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_bool(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_exotic_optionals_twin_normal(
      ExoticOptionalsTwinNormal? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_exotic_optionals_twin_normal(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_exotic_optionals_twin_rust_async(
      ExoticOptionalsTwinRustAsync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_exotic_optionals_twin_rust_async(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_exotic_optionals_twin_sync(
      ExoticOptionalsTwinSync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_exotic_optionals_twin_sync(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_f_64(double? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_f_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_i_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_i_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_i_64(PlatformInt64? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_i_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_i_8(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_i_8(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_u_8(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_u_8(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_attribute_twin_normal(
      List<AttributeTwinNormal>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_attribute_twin_normal(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_attribute_twin_rust_async(
      List<AttributeTwinRustAsync>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_attribute_twin_rust_async(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_attribute_twin_sync(
      List<AttributeTwinSync>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_attribute_twin_sync(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_element_twin_normal(
      List<ElementTwinNormal>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_element_twin_normal(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_element_twin_rust_async(
      List<ElementTwinRustAsync>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_element_twin_rust_async(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_element_twin_sync(
      List<ElementTwinSync>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_element_twin_sync(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_opt_box_autoadd_attribute_twin_normal(
      List<AttributeTwinNormal?>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_opt_box_autoadd_attribute_twin_normal(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_opt_box_autoadd_attribute_twin_rust_async(
      List<AttributeTwinRustAsync?>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_opt_box_autoadd_attribute_twin_rust_async(
          self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_opt_box_autoadd_attribute_twin_sync(
      List<AttributeTwinSync?>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_opt_box_autoadd_attribute_twin_sync(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_f_32_strict(
      Float32List? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_f_32_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_f_64_strict(
      Float64List? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_f_64_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_i_32_strict(
      Int32List? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_i_32_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_i_8_strict(
      Int8List? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_i_8_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_u_8_strict(
      Uint8List? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_u_8_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_vecs_twin_normal(
      OptVecsTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_opt_box_autoadd_i_32(self.i32, serializer);
    sse_encode_list_opt_box_autoadd_weekdays_twin_normal(
        self.enums, serializer);
    sse_encode_list_opt_String(self.strings, serializer);
    sse_encode_list_opt_list_prim_i_32_strict(self.buffers, serializer);
  }

  @protected
  void sse_encode_opt_vecs_twin_rust_async(
      OptVecsTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_opt_box_autoadd_i_32(self.i32, serializer);
    sse_encode_list_opt_box_autoadd_weekdays_twin_rust_async(
        self.enums, serializer);
    sse_encode_list_opt_String(self.strings, serializer);
    sse_encode_list_opt_list_prim_i_32_strict(self.buffers, serializer);
  }

  @protected
  void sse_encode_opt_vecs_twin_sync(
      OptVecsTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_opt_box_autoadd_i_32(self.i32, serializer);
    sse_encode_list_opt_box_autoadd_weekdays_twin_sync(self.enums, serializer);
    sse_encode_list_opt_String(self.strings, serializer);
    sse_encode_list_opt_list_prim_i_32_strict(self.buffers, serializer);
  }

  @protected
  void sse_encode_point_twin_normal(
      PointTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_32(self.x, serializer);
    sse_encode_f_32(self.y, serializer);
  }

  @protected
  void sse_encode_point_twin_normal_array_2(
      PointTwinNormalArray2 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_point_twin_normal(self.inner, serializer);
  }

  @protected
  void sse_encode_point_twin_rust_async(
      PointTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_32(self.x, serializer);
    sse_encode_f_32(self.y, serializer);
  }

  @protected
  void sse_encode_point_twin_rust_async_array_2(
      PointTwinRustAsyncArray2 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_point_twin_rust_async(self.inner, serializer);
  }

  @protected
  void sse_encode_point_twin_sync(
      PointTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_32(self.x, serializer);
    sse_encode_f_32(self.y, serializer);
  }

  @protected
  void sse_encode_point_twin_sync_array_2(
      PointTwinSyncArray2 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_point_twin_sync(self.inner, serializer);
  }

  @protected
  void sse_encode_raw_string_enum_mirrored(
      RawStringEnumMirrored self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case RawStringEnumMirrored_Raw(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_raw_string_mirrored(field0, serializer);
      case RawStringEnumMirrored_Nested(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_nested_raw_string_mirrored(field0, serializer);
      case RawStringEnumMirrored_ListOfNested(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_box_autoadd_list_of_nested_raw_string_mirrored(
            field0, serializer);
    }
  }

  @protected
  void sse_encode_raw_string_item_enum_twin_normal(
      RawStringItemEnumTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case RawStringItemEnumTwinNormal_Regular(regular: final regular):
        sse_encode_i_32(0, serializer);
        sse_encode_String(regular, serializer);
      case RawStringItemEnumTwinNormal_Raw(type: final type):
        sse_encode_i_32(1, serializer);
        sse_encode_String(type, serializer);
    }
  }

  @protected
  void sse_encode_raw_string_item_enum_twin_rust_async(
      RawStringItemEnumTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case RawStringItemEnumTwinRustAsync_Regular(regular: final regular):
        sse_encode_i_32(0, serializer);
        sse_encode_String(regular, serializer);
      case RawStringItemEnumTwinRustAsync_Raw(type: final type):
        sse_encode_i_32(1, serializer);
        sse_encode_String(type, serializer);
    }
  }

  @protected
  void sse_encode_raw_string_item_enum_twin_sync(
      RawStringItemEnumTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case RawStringItemEnumTwinSync_Regular(regular: final regular):
        sse_encode_i_32(0, serializer);
        sse_encode_String(regular, serializer);
      case RawStringItemEnumTwinSync_Raw(type: final type):
        sse_encode_i_32(1, serializer);
        sse_encode_String(type, serializer);
    }
  }

  @protected
  void sse_encode_raw_string_item_struct_twin_normal(
      RawStringItemStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.type, serializer);
  }

  @protected
  void sse_encode_raw_string_item_struct_twin_rust_async(
      RawStringItemStructTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.type, serializer);
  }

  @protected
  void sse_encode_raw_string_item_struct_twin_sync(
      RawStringItemStructTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.type, serializer);
  }

  @protected
  void sse_encode_raw_string_mirrored(
      RawStringMirrored self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.value, serializer);
    sse_encode_String(self.type, serializer);
  }

  @protected
  void sse_encode_record_application_settings_raw_string_enum_mirrored(
      (ApplicationSettings, RawStringEnumMirrored) self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_application_settings(self.$1, serializer);
    sse_encode_raw_string_enum_mirrored(self.$2, serializer);
  }

  @protected
  void
      sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_one_twin_normal_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_two_twin_normal(
          (OpaqueOneTwinNormal, OpaqueTwoTwinNormal) self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinNormal(
        self.$1, serializer);
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinNormal(
        self.$2, serializer);
  }

  @protected
  void
      sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_one_twin_rust_async_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_two_twin_rust_async(
          (OpaqueOneTwinRustAsync, OpaqueTwoTwinRustAsync) self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinRustAsync(
        self.$1, serializer);
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinRustAsync(
        self.$2, serializer);
  }

  @protected
  void
      sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_one_twin_sync_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_two_twin_sync(
          (OpaqueOneTwinSync, OpaqueTwoTwinSync) self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinSync(
        self.$1, serializer);
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinSync(
        self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_basic_general_enum_twin_normal(
      (int, BasicGeneralEnumTwinNormal) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_basic_general_enum_twin_normal(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_basic_general_enum_twin_rust_async(
      (int, BasicGeneralEnumTwinRustAsync) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_basic_general_enum_twin_rust_async(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_basic_general_enum_twin_sync(
      (int, BasicGeneralEnumTwinSync) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_basic_general_enum_twin_sync(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_basic_primitive_enum_twin_normal(
      (int, BasicPrimitiveEnumTwinNormal) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_basic_primitive_enum_twin_normal(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_basic_primitive_enum_twin_rust_async(
      (int, BasicPrimitiveEnumTwinRustAsync) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_basic_primitive_enum_twin_rust_async(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_basic_primitive_enum_twin_sync(
      (int, BasicPrimitiveEnumTwinSync) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_basic_primitive_enum_twin_sync(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_basic_struct_twin_normal(
      (int, BasicStructTwinNormal) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_basic_struct_twin_normal(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_basic_struct_twin_rust_async(
      (int, BasicStructTwinRustAsync) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_basic_struct_twin_rust_async(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_basic_struct_twin_sync(
      (int, BasicStructTwinSync) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_basic_struct_twin_sync(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_bool((int, bool) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_bool(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_f_32(
      (int, double) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_f_32(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_f_64(
      (int, double) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_f_64(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_i_128(
      (int, BigInt) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_I128(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_i_16((int, int) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_i_16(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_i_32((int, int) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_i_32(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_i_64(
      (int, PlatformInt64) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_i_64(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_i_8((int, int) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_i_8(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_isize(
      (int, PlatformInt64) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_isize(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_list_prim_u_8_strict(
      (int, Uint8List) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_list_prim_u_8_strict(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_string(
      (int, String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_u_128(
      (int, BigInt) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_U128(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_u_16((int, int) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_u_16(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_u_32((int, int) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_u_32(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_u_64(
      (int, BigInt) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_u_64(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_u_8((int, int) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_u_8(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_usize(
      (int, BigInt) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_usize(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_enum_simple_twin_normal(
      (String, EnumSimpleTwinNormal) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_enum_simple_twin_normal(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_enum_simple_twin_rust_async(
      (String, EnumSimpleTwinRustAsync) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_enum_simple_twin_rust_async(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_enum_simple_twin_sync(
      (String, EnumSimpleTwinSync) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_enum_simple_twin_sync(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_hash_map_value(
      (String, HashMapValue) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_hash_map_value(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_i_32(
      (String, int) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_i_32(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_kitchen_sink_twin_normal(
      (String, KitchenSinkTwinNormal) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_kitchen_sink_twin_normal(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_kitchen_sink_twin_rust_async(
      (String, KitchenSinkTwinRustAsync) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_kitchen_sink_twin_rust_async(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_kitchen_sink_twin_sync(
      (String, KitchenSinkTwinSync) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_kitchen_sink_twin_sync(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_list_prim_u_8_strict(
      (String, Uint8List) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_list_prim_u_8_strict(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_my_size(
      (String, MySize) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_my_size(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_string(
      (String, String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_record_u_8_application_mode(
      (int, ApplicationMode) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self.$1, serializer);
    sse_encode_application_mode(self.$2, serializer);
  }

  @protected
  void sse_encode_sequences(Sequences self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_i_32_strict(self.field0, serializer);
  }

  @protected
  void sse_encode_simple_enum_twin_normal(
      SimpleEnumTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case SimpleEnumTwinNormal_First():
        sse_encode_i_32(0, serializer);
      case SimpleEnumTwinNormal_Second(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_String(field0, serializer);
    }
  }

  @protected
  void sse_encode_simple_enum_twin_rust_async(
      SimpleEnumTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case SimpleEnumTwinRustAsync_First():
        sse_encode_i_32(0, serializer);
      case SimpleEnumTwinRustAsync_Second(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_String(field0, serializer);
    }
  }

  @protected
  void sse_encode_simple_enum_twin_sync(
      SimpleEnumTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case SimpleEnumTwinSync_First():
        sse_encode_i_32(0, serializer);
      case SimpleEnumTwinSync_Second(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_String(field0, serializer);
    }
  }

  @protected
  void sse_encode_simple_primitive_enum_twin_normal(
      SimplePrimitiveEnumTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_simple_primitive_enum_twin_rust_async(
      SimplePrimitiveEnumTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_simple_primitive_enum_twin_sync(
      SimplePrimitiveEnumTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_simple_struct_for_borrow_twin_normal(
      SimpleStructForBorrowTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.one, serializer);
  }

  @protected
  void sse_encode_simple_struct_for_borrow_twin_rust_async(
      SimpleStructForBorrowTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.one, serializer);
  }

  @protected
  void sse_encode_simple_struct_for_borrow_twin_sync(
      SimpleStructForBorrowTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.one, serializer);
  }

  @protected
  void sse_encode_simple_struct_twin_normal(
      SimpleStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.one, serializer);
  }

  @protected
  void sse_encode_simple_struct_twin_rust_async(
      SimpleStructTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.one, serializer);
  }

  @protected
  void sse_encode_simple_struct_twin_sync(
      SimpleStructTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.one, serializer);
  }

  @protected
  void sse_encode_simple_trait_for_dyn_twin_normal_implementor(
      SimpleTraitForDynTwinNormalImplementor self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case SimpleTraitForDynTwinNormalImplementor_Variant0(
          field0: final field0
        ):
        sse_encode_i_32(0, serializer);
        sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructOneWithTraitForDynTwinNormal(
            field0, serializer);
      case SimpleTraitForDynTwinNormalImplementor_Variant1(
          field0: final field0
        ):
        sse_encode_i_32(1, serializer);
        sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructTwoWithTraitForDynTwinNormal(
            field0, serializer);
    }
  }

  @protected
  void sse_encode_simple_translatable_external_struct_with_method(
      SimpleTranslatableExternalStructWithMethod self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.a, serializer);
  }

  @protected
  void sse_encode_some_struct_twin_normal(
      SomeStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.value, serializer);
  }

  @protected
  void sse_encode_some_struct_twin_rust_async(
      SomeStructTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.value, serializer);
  }

  @protected
  void sse_encode_some_struct_twin_sync(
      SomeStructTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.value, serializer);
  }

  @protected
  void sse_encode_speed_twin_normal(
      SpeedTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case SpeedTwinNormal_Unknown():
        sse_encode_i_32(0, serializer);
      case SpeedTwinNormal_GPS(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_f_64(field0, serializer);
    }
  }

  @protected
  void sse_encode_speed_twin_rust_async(
      SpeedTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case SpeedTwinRustAsync_Unknown():
        sse_encode_i_32(0, serializer);
      case SpeedTwinRustAsync_GPS(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_f_64(field0, serializer);
    }
  }

  @protected
  void sse_encode_speed_twin_sync(
      SpeedTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case SpeedTwinSync_Unknown():
        sse_encode_i_32(0, serializer);
      case SpeedTwinSync_GPS(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_f_64(field0, serializer);
    }
  }

  @protected
  void sse_encode_static_only_twin_normal(
      StaticOnlyTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.one, serializer);
  }

  @protected
  void sse_encode_static_only_twin_rust_async(
      StaticOnlyTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.one, serializer);
  }

  @protected
  void sse_encode_static_only_twin_sync(
      StaticOnlyTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.one, serializer);
  }

  @protected
  void sse_encode_struct_in_lower_level(
      StructInLowerLevel self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_in_upper_level(self.inner, serializer);
  }

  @protected
  void sse_encode_struct_in_upper_level(
      StructInUpperLevel self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.upper, serializer);
  }

  @protected
  void sse_encode_struct_with_casted_primitive_twin_normal(
      StructWithCastedPrimitiveTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_CastedPrimitive_i_64(self.fieldI64, serializer);
    sse_encode_CastedPrimitive_u_64(self.fieldU64, serializer);
    sse_encode_i_32(self.fieldI32, serializer);
    sse_encode_list_prim_u_8_strict(self.fieldVecU8, serializer);
  }

  @protected
  void sse_encode_struct_with_comments_twin_normal(
      StructWithCommentsTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.fieldWithComments, serializer);
  }

  @protected
  void sse_encode_struct_with_comments_twin_rust_async(
      StructWithCommentsTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.fieldWithComments, serializer);
  }

  @protected
  void sse_encode_struct_with_comments_twin_sync(
      StructWithCommentsTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.fieldWithComments, serializer);
  }

  @protected
  void sse_encode_struct_with_custom_name_method_twin_normal(
      StructWithCustomNameMethodTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.field0, serializer);
  }

  @protected
  void sse_encode_struct_with_dart_keyword_field_twin_normal(
      StructWithDartKeywordFieldTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.class_, serializer);
    sse_encode_i_64(self.interface_, serializer);
  }

  @protected
  void sse_encode_struct_with_dart_keyword_field_twin_rust_async(
      StructWithDartKeywordFieldTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.class_, serializer);
    sse_encode_i_64(self.interface_, serializer);
  }

  @protected
  void sse_encode_struct_with_dart_keyword_field_twin_sync(
      StructWithDartKeywordFieldTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.class_, serializer);
    sse_encode_i_64(self.interface_, serializer);
  }

  @protected
  void sse_encode_struct_with_enum_twin_normal(
      StructWithEnumTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_abc_twin_normal(self.abc1, serializer);
    sse_encode_abc_twin_normal(self.abc2, serializer);
  }

  @protected
  void sse_encode_struct_with_enum_twin_rust_async(
      StructWithEnumTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_abc_twin_rust_async(self.abc1, serializer);
    sse_encode_abc_twin_rust_async(self.abc2, serializer);
  }

  @protected
  void sse_encode_struct_with_enum_twin_sync(
      StructWithEnumTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_abc_twin_sync(self.abc1, serializer);
    sse_encode_abc_twin_sync(self.abc2, serializer);
  }

  @protected
  void sse_encode_struct_with_explicit_auto_opaque_field_twin_normal(
      StructWithExplicitAutoOpaqueFieldTwinNormal self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
        self.autoOpaque, serializer);
    sse_encode_i_32(self.normal, serializer);
  }

  @protected
  void sse_encode_struct_with_explicit_auto_opaque_field_twin_rust_async(
      StructWithExplicitAutoOpaqueFieldTwinRustAsync self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
        self.autoOpaque, serializer);
    sse_encode_i_32(self.normal, serializer);
  }

  @protected
  void sse_encode_struct_with_explicit_auto_opaque_field_twin_sync(
      StructWithExplicitAutoOpaqueFieldTwinSync self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
        self.autoOpaque, serializer);
    sse_encode_i_32(self.normal, serializer);
  }

  @protected
  void sse_encode_struct_with_field_rename_twin_normal(
      StructWithFieldRenameTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.renamed_field, serializer);
  }

  @protected
  void sse_encode_struct_with_field_rename_twin_rust_async(
      StructWithFieldRenameTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.renamed_field, serializer);
  }

  @protected
  void sse_encode_struct_with_field_rename_twin_sync(
      StructWithFieldRenameTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.renamed_field, serializer);
  }

  @protected
  void sse_encode_struct_with_good_and_opaque_field_twin_normal(
      StructWithGoodAndOpaqueFieldTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.good, serializer);
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
        self.opaque, serializer);
    sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
        self.optionOpaque, serializer);
  }

  @protected
  void sse_encode_struct_with_good_and_opaque_field_twin_rust_async(
      StructWithGoodAndOpaqueFieldTwinRustAsync self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.good, serializer);
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
        self.opaque, serializer);
    sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
        self.optionOpaque, serializer);
  }

  @protected
  void sse_encode_struct_with_good_and_opaque_field_twin_sync(
      StructWithGoodAndOpaqueFieldTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.good, serializer);
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
        self.opaque, serializer);
    sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
        self.optionOpaque, serializer);
  }

  @protected
  void sse_encode_struct_with_hash_map(
      StructWithHashMap self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Map_String_hash_map_value_None(self.map, serializer);
  }

  @protected
  void sse_encode_struct_with_impl_block_in_another_file(
      StructWithImplBlockInAnotherFile self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_struct_with_impl_block_in_another_file_dependency(
      StructWithImplBlockInAnotherFileDependency self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_struct_with_one_field_twin_normal(
      StructWithOneFieldTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.a, serializer);
  }

  @protected
  void sse_encode_struct_with_one_field_twin_rust_async(
      StructWithOneFieldTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.a, serializer);
  }

  @protected
  void sse_encode_struct_with_one_field_twin_sync(
      StructWithOneFieldTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.a, serializer);
  }

  @protected
  void sse_encode_struct_with_raw_name_field(
      StructWithRawNameField self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.type, serializer);
  }

  @protected
  void sse_encode_struct_with_rust_auto_opaque_field_with_many_derive(
      StructWithRustAutoOpaqueFieldWithManyDerive self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithRustAutoOpaqueFieldWithManyDeriveInner(
        self.content, serializer);
  }

  @protected
  void sse_encode_struct_with_rust_auto_opaque_with_non_clone_data(
      StructWithRustAutoOpaqueWithNonCloneData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneDataRaw(
        self.content, serializer);
  }

  @protected
  void sse_encode_struct_with_two_field_twin_normal(
      StructWithTwoFieldTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.a, serializer);
    sse_encode_i_32(self.b, serializer);
  }

  @protected
  void sse_encode_struct_with_two_field_twin_rust_async(
      StructWithTwoFieldTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.a, serializer);
    sse_encode_i_32(self.b, serializer);
  }

  @protected
  void sse_encode_struct_with_two_field_twin_sync(
      StructWithTwoFieldTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.a, serializer);
    sse_encode_i_32(self.b, serializer);
  }

  @protected
  void sse_encode_struct_with_zero_field_twin_normal(
      StructWithZeroFieldTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_struct_with_zero_field_twin_rust_async(
      StructWithZeroFieldTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_struct_with_zero_field_twin_sync(
      StructWithZeroFieldTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_sum_with_twin_normal(
      SumWithTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.x, serializer);
  }

  @protected
  void sse_encode_sum_with_twin_normal_array_3(
      SumWithTwinNormalArray3 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_sum_with_twin_normal(self.inner, serializer);
  }

  @protected
  void sse_encode_sum_with_twin_rust_async(
      SumWithTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.x, serializer);
  }

  @protected
  void sse_encode_sum_with_twin_rust_async_array_3(
      SumWithTwinRustAsyncArray3 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_sum_with_twin_rust_async(self.inner, serializer);
  }

  @protected
  void sse_encode_sum_with_twin_sync(
      SumWithTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.x, serializer);
  }

  @protected
  void sse_encode_sum_with_twin_sync_array_3(
      SumWithTwinSyncArray3 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_sum_with_twin_sync(self.inner, serializer);
  }

  @protected
  void sse_encode_test_chrono_twin_normal(
      TestChronoTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_Chrono_Utc(self.dt, serializer);
    sse_encode_opt_box_autoadd_Chrono_Naive(self.dt2, serializer);
    sse_encode_opt_box_autoadd_Chrono_Duration(self.du, serializer);
  }

  @protected
  void sse_encode_test_chrono_twin_rust_async(
      TestChronoTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_Chrono_Utc(self.dt, serializer);
    sse_encode_opt_box_autoadd_Chrono_Naive(self.dt2, serializer);
    sse_encode_opt_box_autoadd_Chrono_Duration(self.du, serializer);
  }

  @protected
  void sse_encode_test_chrono_twin_sync(
      TestChronoTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_Chrono_Utc(self.dt, serializer);
    sse_encode_opt_box_autoadd_Chrono_Naive(self.dt2, serializer);
    sse_encode_opt_box_autoadd_Chrono_Duration(self.du, serializer);
  }

  @protected
  void sse_encode_test_id_twin_normal(
      TestIdTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32_array_2(self.field0, serializer);
  }

  @protected
  void sse_encode_test_id_twin_normal_array_2(
      TestIdTwinNormalArray2 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_test_id_twin_normal(self.inner, serializer);
  }

  @protected
  void sse_encode_test_id_twin_normal_array_4(
      TestIdTwinNormalArray4 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_test_id_twin_normal(self.inner, serializer);
  }

  @protected
  void sse_encode_test_id_twin_rust_async(
      TestIdTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32_array_2(self.field0, serializer);
  }

  @protected
  void sse_encode_test_id_twin_rust_async_array_2(
      TestIdTwinRustAsyncArray2 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_test_id_twin_rust_async(self.inner, serializer);
  }

  @protected
  void sse_encode_test_id_twin_rust_async_array_4(
      TestIdTwinRustAsyncArray4 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_test_id_twin_rust_async(self.inner, serializer);
  }

  @protected
  void sse_encode_test_id_twin_sync(
      TestIdTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32_array_2(self.field0, serializer);
  }

  @protected
  void sse_encode_test_id_twin_sync_array_2(
      TestIdTwinSyncArray2 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_test_id_twin_sync(self.inner, serializer);
  }

  @protected
  void sse_encode_test_id_twin_sync_array_4(
      TestIdTwinSyncArray4 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_test_id_twin_sync(self.inner, serializer);
  }

  @protected
  void sse_encode_test_model_twin_normal(
      TestModelTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_my_enum(self.aliasEnum, serializer);
    sse_encode_my_struct(self.aliasStruct, serializer);
  }

  @protected
  void sse_encode_test_model_twin_rust_async(
      TestModelTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_my_enum(self.aliasEnum, serializer);
    sse_encode_my_struct(self.aliasStruct, serializer);
  }

  @protected
  void sse_encode_test_model_twin_sync(
      TestModelTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_my_enum(self.aliasEnum, serializer);
    sse_encode_my_struct(self.aliasStruct, serializer);
  }

  @protected
  void sse_encode_translatable_struct_with_dart_code_twin_normal(
      TranslatableStructWithDartCodeTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.a, serializer);
  }

  @protected
  void sse_encode_tuple_struct_with_one_field_twin_normal(
      TupleStructWithOneFieldTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.field0, serializer);
  }

  @protected
  void sse_encode_tuple_struct_with_one_field_twin_rust_async(
      TupleStructWithOneFieldTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.field0, serializer);
  }

  @protected
  void sse_encode_tuple_struct_with_one_field_twin_sync(
      TupleStructWithOneFieldTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.field0, serializer);
  }

  @protected
  void sse_encode_tuple_struct_with_two_field_twin_normal(
      TupleStructWithTwoFieldTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.field0, serializer);
    sse_encode_i_32(self.field1, serializer);
  }

  @protected
  void sse_encode_tuple_struct_with_two_field_twin_rust_async(
      TupleStructWithTwoFieldTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.field0, serializer);
    sse_encode_i_32(self.field1, serializer);
  }

  @protected
  void sse_encode_tuple_struct_with_two_field_twin_sync(
      TupleStructWithTwoFieldTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.field0, serializer);
    sse_encode_i_32(self.field1, serializer);
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_u_8_array_1600(U8Array1600 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.inner, serializer);
  }

  @protected
  void sse_encode_u_8_array_2(U8Array2 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.inner, serializer);
  }

  @protected
  void sse_encode_u_8_array_32(U8Array32 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.inner, serializer);
  }

  @protected
  void sse_encode_u_8_array_5(U8Array5 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.inner, serializer);
  }

  @protected
  void sse_encode_u_8_array_8(U8Array8 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.inner, serializer);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_user_id_twin_normal(
      UserIdTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.value, serializer);
  }

  @protected
  void sse_encode_user_id_twin_rust_async(
      UserIdTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.value, serializer);
  }

  @protected
  void sse_encode_user_id_twin_sync(
      UserIdTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.value, serializer);
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_vec_of_primitive_pack_twin_normal(
      VecOfPrimitivePackTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_i_8_strict(self.int8List, serializer);
    sse_encode_list_prim_u_8_strict(self.uint8List, serializer);
    sse_encode_list_prim_i_16_strict(self.int16List, serializer);
    sse_encode_list_prim_u_16_strict(self.uint16List, serializer);
    sse_encode_list_prim_u_32_strict(self.uint32List, serializer);
    sse_encode_list_prim_i_32_strict(self.int32List, serializer);
    sse_encode_list_prim_u_64_strict(self.uint64List, serializer);
    sse_encode_list_prim_i_64_strict(self.int64List, serializer);
    sse_encode_list_prim_f_32_strict(self.float32List, serializer);
    sse_encode_list_prim_f_64_strict(self.float64List, serializer);
    sse_encode_list_bool(self.boolList, serializer);
  }

  @protected
  void sse_encode_vec_of_primitive_pack_twin_rust_async(
      VecOfPrimitivePackTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_i_8_strict(self.int8List, serializer);
    sse_encode_list_prim_u_8_strict(self.uint8List, serializer);
    sse_encode_list_prim_i_16_strict(self.int16List, serializer);
    sse_encode_list_prim_u_16_strict(self.uint16List, serializer);
    sse_encode_list_prim_u_32_strict(self.uint32List, serializer);
    sse_encode_list_prim_i_32_strict(self.int32List, serializer);
    sse_encode_list_prim_u_64_strict(self.uint64List, serializer);
    sse_encode_list_prim_i_64_strict(self.int64List, serializer);
    sse_encode_list_prim_f_32_strict(self.float32List, serializer);
    sse_encode_list_prim_f_64_strict(self.float64List, serializer);
    sse_encode_list_bool(self.boolList, serializer);
  }

  @protected
  void sse_encode_vec_of_primitive_pack_twin_sync(
      VecOfPrimitivePackTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_i_8_strict(self.int8List, serializer);
    sse_encode_list_prim_u_8_strict(self.uint8List, serializer);
    sse_encode_list_prim_i_16_strict(self.int16List, serializer);
    sse_encode_list_prim_u_16_strict(self.uint16List, serializer);
    sse_encode_list_prim_u_32_strict(self.uint32List, serializer);
    sse_encode_list_prim_i_32_strict(self.int32List, serializer);
    sse_encode_list_prim_u_64_strict(self.uint64List, serializer);
    sse_encode_list_prim_i_64_strict(self.int64List, serializer);
    sse_encode_list_prim_f_32_strict(self.float32List, serializer);
    sse_encode_list_prim_f_64_strict(self.float64List, serializer);
    sse_encode_list_bool(self.boolList, serializer);
  }

  @protected
  void sse_encode_weekdays_twin_normal(
      WeekdaysTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_weekdays_twin_rust_async(
      WeekdaysTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_weekdays_twin_sync(
      WeekdaysTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }
}

@freezed
sealed class Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyAudioParamTwinNormalProxyEnum
    with
        _$Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyAudioParamTwinNormalProxyEnum {
  const Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyAudioParamTwinNormalProxyEnum._();

  const factory Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyAudioParamTwinNormalProxyEnum.variant0(
    MyNodeTwinNormal field0,
  ) = Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyAudioParamTwinNormalProxyEnum_Variant0;
  const factory Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyAudioParamTwinNormalProxyEnum.variant1(
    MyNodeTwinNormal field0,
  ) = Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyAudioParamTwinNormalProxyEnum_Variant1;
}

@freezed
sealed class SimpleTraitForDynTwinNormalImplementor
    with _$SimpleTraitForDynTwinNormalImplementor {
  const SimpleTraitForDynTwinNormalImplementor._();

  const factory SimpleTraitForDynTwinNormalImplementor.variant0(
    StructOneWithTraitForDynTwinNormal field0,
  ) = SimpleTraitForDynTwinNormalImplementor_Variant0;
  const factory SimpleTraitForDynTwinNormalImplementor.variant1(
    StructTwoWithTraitForDynTwinNormal field0,
  ) = SimpleTraitForDynTwinNormalImplementor_Variant1;
}

@sealed
class BoxAnyMyDartTypeRenameImpl extends RustOpaque
    implements BoxAnyMyDartTypeRename {
  // Not to be used by end users
  BoxAnyMyDartTypeRenameImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  BoxAnyMyDartTypeRenameImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_BoxAnyMyDartTypeRename,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_BoxAnyMyDartTypeRename,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_BoxAnyMyDartTypeRenamePtr,
  );
}

@sealed
class BoxDartDebugTwinNormalImpl extends RustOpaque
    implements BoxDartDebugTwinNormal {
  // Not to be used by end users
  BoxDartDebugTwinNormalImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  BoxDartDebugTwinNormalImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_BoxDartDebugTwinNormal,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_BoxDartDebugTwinNormal,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_BoxDartDebugTwinNormalPtr,
  );
}

@sealed
class BoxDartDebugTwinRustAsyncImpl extends RustOpaque
    implements BoxDartDebugTwinRustAsync {
  // Not to be used by end users
  BoxDartDebugTwinRustAsyncImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  BoxDartDebugTwinRustAsyncImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_BoxDartDebugTwinRustAsync,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_BoxDartDebugTwinRustAsync,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_BoxDartDebugTwinRustAsyncPtr,
  );
}

@sealed
class BoxDartDebugTwinSyncImpl extends RustOpaque
    implements BoxDartDebugTwinSync {
  // Not to be used by end users
  BoxDartDebugTwinSyncImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  BoxDartDebugTwinSyncImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_BoxDartDebugTwinSync,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_BoxDartDebugTwinSync,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_BoxDartDebugTwinSyncPtr,
  );
}

@sealed
class BoxFnStringStringImpl extends RustOpaque implements BoxFnStringString {
  // Not to be used by end users
  BoxFnStringStringImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  BoxFnStringStringImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_BoxFnStringString,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_BoxFnStringString,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_BoxFnStringStringPtr,
  );
}

@sealed
class BoxMyTraitTwinNormalImpl extends RustOpaque
    implements BoxMyTraitTwinNormal {
  // Not to be used by end users
  BoxMyTraitTwinNormalImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  BoxMyTraitTwinNormalImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_BoxMyTraitTwinNormal,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_BoxMyTraitTwinNormal,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_BoxMyTraitTwinNormalPtr,
  );
}

@sealed
class BoxMyTraitTwinRustAsyncImpl extends RustOpaque
    implements BoxMyTraitTwinRustAsync {
  // Not to be used by end users
  BoxMyTraitTwinRustAsyncImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  BoxMyTraitTwinRustAsyncImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_BoxMyTraitTwinRustAsync,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_BoxMyTraitTwinRustAsync,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_BoxMyTraitTwinRustAsyncPtr,
  );
}

@sealed
class BoxMyTraitTwinSyncImpl extends RustOpaque implements BoxMyTraitTwinSync {
  // Not to be used by end users
  BoxMyTraitTwinSyncImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  BoxMyTraitTwinSyncImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_BoxMyTraitTwinSync,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_BoxMyTraitTwinSync,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_BoxMyTraitTwinSyncPtr,
  );
}

@sealed
class ConstructorOpaqueStructTwinNormalImpl extends RustOpaque
    implements ConstructorOpaqueStructTwinNormal {
  // Not to be used by end users
  ConstructorOpaqueStructTwinNormalImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ConstructorOpaqueStructTwinNormalImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_ConstructorOpaqueStructTwinNormal,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_ConstructorOpaqueStructTwinNormal,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_ConstructorOpaqueStructTwinNormalPtr,
  );

  String get one => RustLib.instance.api
          .crateApiConstructorConstructorOpaqueStructTwinNormalAutoAccessorGetOne(
        that: this,
      );

  set one(String one) => RustLib.instance.api
      .crateApiConstructorConstructorOpaqueStructTwinNormalAutoAccessorSetOne(
          that: this, one: one);

  void check() => RustLib.instance.api
          .crateApiConstructorConstructorOpaqueStructTwinNormalCheck(
        that: this,
      );
}

@sealed
class ConstructorOpaqueSyncStructTwinNormalImpl extends RustOpaque
    implements ConstructorOpaqueSyncStructTwinNormal {
  // Not to be used by end users
  ConstructorOpaqueSyncStructTwinNormalImpl.frbInternalDcoDecode(
      List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ConstructorOpaqueSyncStructTwinNormalImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_ConstructorOpaqueSyncStructTwinNormal,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_ConstructorOpaqueSyncStructTwinNormal,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_ConstructorOpaqueSyncStructTwinNormalPtr,
  );

  String get one => RustLib.instance.api
          .crateApiConstructorConstructorOpaqueSyncStructTwinNormalAutoAccessorGetOne(
        that: this,
      );

  set one(String one) => RustLib.instance.api
      .crateApiConstructorConstructorOpaqueSyncStructTwinNormalAutoAccessorSetOne(
          that: this, one: one);

  void check() => RustLib.instance.api
          .crateApiConstructorConstructorOpaqueSyncStructTwinNormalCheck(
        that: this,
      );
}

@sealed
class CustomHasherTwinNormalImpl extends RustOpaque
    implements CustomHasherTwinNormal {
  // Not to be used by end users
  CustomHasherTwinNormalImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  CustomHasherTwinNormalImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_CustomHasherTwinNormal,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_CustomHasherTwinNormal,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_CustomHasherTwinNormalPtr,
  );
}

@sealed
class CustomHasherTwinRustAsyncImpl extends RustOpaque
    implements CustomHasherTwinRustAsync {
  // Not to be used by end users
  CustomHasherTwinRustAsyncImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  CustomHasherTwinRustAsyncImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_CustomHasherTwinRustAsync,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_CustomHasherTwinRustAsync,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_CustomHasherTwinRustAsyncPtr,
  );
}

@sealed
class CustomHasherTwinSyncImpl extends RustOpaque
    implements CustomHasherTwinSync {
  // Not to be used by end users
  CustomHasherTwinSyncImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  CustomHasherTwinSyncImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_CustomHasherTwinSync,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_CustomHasherTwinSync,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_CustomHasherTwinSyncPtr,
  );
}

@sealed
class DeliberateFailSanityCheckTwinNormalImpl extends RustOpaque
    implements DeliberateFailSanityCheckTwinNormal {
  // Not to be used by end users
  DeliberateFailSanityCheckTwinNormalImpl.frbInternalDcoDecode(
      List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  DeliberateFailSanityCheckTwinNormalImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_DeliberateFailSanityCheckTwinNormal,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_DeliberateFailSanityCheckTwinNormal,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_DeliberateFailSanityCheckTwinNormalPtr,
  );

  Uint8List get deliberateBadFieldA => RustLib.instance.api
          .crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorGetDeliberateBadFieldA(
        that: this,
      );

  OpaqueItemTwinNormal get deliberateBadFieldB => RustLib.instance.api
          .crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorGetDeliberateBadFieldB(
        that: this,
      );

  List<OpaqueItemTwinNormal> get deliberateBadFieldC => RustLib.instance.api
          .crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorGetDeliberateBadFieldC(
        that: this,
      );

  String get goodFieldA => RustLib.instance.api
          .crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorGetGoodFieldA(
        that: this,
      );

  int get goodFieldB => RustLib.instance.api
          .crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorGetGoodFieldB(
        that: this,
      );

  OpaqueItemTwinNormal get goodFieldC => RustLib.instance.api
          .crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorGetGoodFieldC(
        that: this,
      );

  set deliberateBadFieldA(Uint8List deliberateBadFieldA) => RustLib.instance.api
      .crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorSetDeliberateBadFieldA(
          that: this, deliberateBadFieldA: deliberateBadFieldA);

  set deliberateBadFieldB(OpaqueItemTwinNormal deliberateBadFieldB) => RustLib
      .instance.api
      .crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorSetDeliberateBadFieldB(
          that: this, deliberateBadFieldB: deliberateBadFieldB);

  set deliberateBadFieldC(List<OpaqueItemTwinNormal> deliberateBadFieldC) =>
      RustLib.instance.api
          .crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorSetDeliberateBadFieldC(
              that: this, deliberateBadFieldC: deliberateBadFieldC);

  set goodFieldA(String goodFieldA) => RustLib.instance.api
      .crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorSetGoodFieldA(
          that: this, goodFieldA: goodFieldA);

  set goodFieldB(int goodFieldB) => RustLib.instance.api
      .crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorSetGoodFieldB(
          that: this, goodFieldB: goodFieldB);

  set goodFieldC(OpaqueItemTwinNormal goodFieldC) => RustLib.instance.api
      .crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalAutoAccessorSetGoodFieldC(
          that: this, goodFieldC: goodFieldC);
}

@sealed
class DroppableTwinNormalImpl extends RustOpaque
    implements DroppableTwinNormal {
  // Not to be used by end users
  DroppableTwinNormalImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  DroppableTwinNormalImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_DroppableTwinNormal,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_DroppableTwinNormal,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_DroppableTwinNormalPtr,
  );

  Stream<int> createStream() =>
      RustLib.instance.api.crateApiDroppingDroppableTwinNormalCreateStream(
        that: this,
      );

  Future<void> simpleMethodTwinNormal() => RustLib.instance.api
          .crateApiDroppingDroppableTwinNormalSimpleMethodTwinNormal(
        that: this,
      );
}

@sealed
class DroppableTwinRustAsyncImpl extends RustOpaque
    implements DroppableTwinRustAsync {
  // Not to be used by end users
  DroppableTwinRustAsyncImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  DroppableTwinRustAsyncImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_DroppableTwinRustAsync,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_DroppableTwinRustAsync,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_DroppableTwinRustAsyncPtr,
  );

  Stream<int> createStreamTwinRustAsync() => RustLib.instance.api
          .crateApiPseudoManualDroppingTwinRustAsyncDroppableTwinRustAsyncCreateStreamTwinRustAsync(
        that: this,
      );

  Future<void> simpleMethodTwinRustAsync() => RustLib.instance.api
          .crateApiPseudoManualDroppingTwinRustAsyncDroppableTwinRustAsyncSimpleMethodTwinRustAsync(
        that: this,
      );
}

@sealed
class DroppableTwinSyncImpl extends RustOpaque implements DroppableTwinSync {
  // Not to be used by end users
  DroppableTwinSyncImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  DroppableTwinSyncImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_DroppableTwinSync,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_DroppableTwinSync,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_DroppableTwinSyncPtr,
  );

  Stream<int> createStreamTwinSync() => RustLib.instance.api
          .crateApiPseudoManualDroppingTwinSyncDroppableTwinSyncCreateStreamTwinSync(
        that: this,
      );

  void simpleMethodTwinSync() => RustLib.instance.api
          .crateApiPseudoManualDroppingTwinSyncDroppableTwinSyncSimpleMethodTwinSync(
        that: this,
      );
}

@sealed
class EnumWithGoodAndOpaqueWithoutOptionTwinNormalImpl extends RustOpaque
    implements EnumWithGoodAndOpaqueWithoutOptionTwinNormal {
  // Not to be used by end users
  EnumWithGoodAndOpaqueWithoutOptionTwinNormalImpl.frbInternalDcoDecode(
      List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  EnumWithGoodAndOpaqueWithoutOptionTwinNormalImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinNormal,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinNormal,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinNormalPtr,
  );
}

@sealed
class EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncImpl extends RustOpaque
    implements EnumWithGoodAndOpaqueWithoutOptionTwinRustAsync {
  // Not to be used by end users
  EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncImpl.frbInternalDcoDecode(
      List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinRustAsync,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinRustAsync,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncPtr,
  );
}

@sealed
class EnumWithGoodAndOpaqueWithoutOptionTwinSyncImpl extends RustOpaque
    implements EnumWithGoodAndOpaqueWithoutOptionTwinSync {
  // Not to be used by end users
  EnumWithGoodAndOpaqueWithoutOptionTwinSyncImpl.frbInternalDcoDecode(
      List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  EnumWithGoodAndOpaqueWithoutOptionTwinSyncImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinSync,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinSync,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinSyncPtr,
  );
}

@sealed
class FrbOpaqueReturnTwinNormalImpl extends RustOpaque
    implements FrbOpaqueReturnTwinNormal {
  // Not to be used by end users
  FrbOpaqueReturnTwinNormalImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FrbOpaqueReturnTwinNormalImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_FrbOpaqueReturnTwinNormal,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_FrbOpaqueReturnTwinNormal,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_FrbOpaqueReturnTwinNormalPtr,
  );
}

@sealed
class FrbOpaqueReturnTwinRustAsyncImpl extends RustOpaque
    implements FrbOpaqueReturnTwinRustAsync {
  // Not to be used by end users
  FrbOpaqueReturnTwinRustAsyncImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FrbOpaqueReturnTwinRustAsyncImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_FrbOpaqueReturnTwinRustAsync,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_FrbOpaqueReturnTwinRustAsync,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_FrbOpaqueReturnTwinRustAsyncPtr,
  );
}

@sealed
class FrbOpaqueReturnTwinSyncImpl extends RustOpaque
    implements FrbOpaqueReturnTwinSync {
  // Not to be used by end users
  FrbOpaqueReturnTwinSyncImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FrbOpaqueReturnTwinSyncImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_FrbOpaqueReturnTwinSync,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_FrbOpaqueReturnTwinSync,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_FrbOpaqueReturnTwinSyncPtr,
  );
}

@sealed
class FrbOpaqueSyncReturnTwinNormalImpl extends RustOpaque
    implements FrbOpaqueSyncReturnTwinNormal {
  // Not to be used by end users
  FrbOpaqueSyncReturnTwinNormalImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FrbOpaqueSyncReturnTwinNormalImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_FrbOpaqueSyncReturnTwinNormal,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_FrbOpaqueSyncReturnTwinNormal,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_FrbOpaqueSyncReturnTwinNormalPtr,
  );
}

@sealed
class HideDataAnotherTwinNormalImpl extends RustOpaque
    implements HideDataAnotherTwinNormal {
  // Not to be used by end users
  HideDataAnotherTwinNormalImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  HideDataAnotherTwinNormalImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_HideDataAnotherTwinNormal,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_HideDataAnotherTwinNormal,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_HideDataAnotherTwinNormalPtr,
  );
}

@sealed
class HideDataTwinNormalImpl extends RustOpaque implements HideDataTwinNormal {
  // Not to be used by end users
  HideDataTwinNormalImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  HideDataTwinNormalImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_HideDataTwinNormal,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_HideDataTwinNormal,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_HideDataTwinNormalPtr,
  );
}

@sealed
class HideDataTwinRustAsyncImpl extends RustOpaque
    implements HideDataTwinRustAsync {
  // Not to be used by end users
  HideDataTwinRustAsyncImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  HideDataTwinRustAsyncImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_HideDataTwinRustAsync,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_HideDataTwinRustAsync,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_HideDataTwinRustAsyncPtr,
  );
}

@sealed
class HideDataTwinSyncImpl extends RustOpaque implements HideDataTwinSync {
  // Not to be used by end users
  HideDataTwinSyncImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  HideDataTwinSyncImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_HideDataTwinSync,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_HideDataTwinSync,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_HideDataTwinSyncPtr,
  );
}

@sealed
class I32Impl extends RustOpaque implements I32 {
  // Not to be used by end users
  I32Impl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  I32Impl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_I32,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_I32,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_I32Ptr,
  );
}

@sealed
class ItemContainerSolutionOneTwinNormalImpl extends RustOpaque
    implements ItemContainerSolutionOneTwinNormal {
  // Not to be used by end users
  ItemContainerSolutionOneTwinNormalImpl.frbInternalDcoDecode(
      List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ItemContainerSolutionOneTwinNormalImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_ItemContainerSolutionOneTwinNormal,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_ItemContainerSolutionOneTwinNormal,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_ItemContainerSolutionOneTwinNormalPtr,
  );

  String get name => RustLib.instance.api
          .crateApiMiscNoTwinExampleAItemContainerSolutionOneTwinNormalAutoAccessorGetName(
        that: this,
      );

  set name(String name) => RustLib.instance.api
      .crateApiMiscNoTwinExampleAItemContainerSolutionOneTwinNormalAutoAccessorSetName(
          that: this, name: name);

  Future<Int32List> getItemContentsTwinNormal() => RustLib.instance.api
          .crateApiMiscNoTwinExampleAItemContainerSolutionOneTwinNormalGetItemContentsTwinNormal(
        that: this,
      );
}

@sealed
class LtNestedTypeWithLifetimeTwinNormalImpl extends RustOpaque
    implements LtNestedTypeWithLifetimeTwinNormal {
  // Not to be used by end users
  LtNestedTypeWithLifetimeTwinNormalImpl.frbInternalDcoDecode(
      List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  LtNestedTypeWithLifetimeTwinNormalImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_LtNestedTypeWithLifetimeTwinNormal,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_LtNestedTypeWithLifetimeTwinNormal,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_LtNestedTypeWithLifetimeTwinNormalPtr,
  );

  Future<String> greetBorrowMutSelfTwinNormal() => RustLib.instance.api
          .crateApiLifetimeableLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtNestedTypeWithLifetimeTwinNormalstaticGreetBorrowMutSelfTwinNormal(
        that: this,
      );

  Future<String> greetBorrowSelfTwinNormal() => RustLib.instance.api
          .crateApiLifetimeableLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtNestedTypeWithLifetimeTwinNormalstaticGreetBorrowSelfTwinNormal(
        that: this,
      );
}

@sealed
class LtNestedTypeWithLifetimeTwinSyncImpl extends RustOpaque
    implements LtNestedTypeWithLifetimeTwinSync {
  // Not to be used by end users
  LtNestedTypeWithLifetimeTwinSyncImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  LtNestedTypeWithLifetimeTwinSyncImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_LtNestedTypeWithLifetimeTwinSync,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_LtNestedTypeWithLifetimeTwinSync,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_LtNestedTypeWithLifetimeTwinSyncPtr,
  );

  String greetBorrowMutSelfTwinSync() => RustLib.instance.api
          .crateApiPseudoManualLifetimeableTwinSyncLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtNestedTypeWithLifetimeTwinSyncstaticGreetBorrowMutSelfTwinSync(
        that: this,
      );

  String greetBorrowSelfTwinSync() => RustLib.instance.api
          .crateApiPseudoManualLifetimeableTwinSyncLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtNestedTypeWithLifetimeTwinSyncstaticGreetBorrowSelfTwinSync(
        that: this,
      );
}

@sealed
class LtOwnedStructTwinNormalImpl extends RustOpaque
    implements LtOwnedStructTwinNormal {
  // Not to be used by end users
  LtOwnedStructTwinNormalImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  LtOwnedStructTwinNormalImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_LtOwnedStructTwinNormal,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_LtOwnedStructTwinNormal,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_LtOwnedStructTwinNormalPtr,
  );

  /// `fn f(x: &'a T) -> S<'a>`
  Future<LtTypeWithLifetimeTwinNormal> computeTypeWithLifetimeTwinNormal() =>
      RustLib.instance.api
          .crateApiLifetimeableLtOwnedStructTwinNormalComputeTypeWithLifetimeTwinNormal(
        that: this,
      );

  /// The unrelated arg should not affect results
  Future<
      LtTypeWithLifetimeTwinNormal> computeWithUnrelatedBorrowedArgTwinNormal(
          {required LtOwnedStructTwinNormal unrelatedBorrowed,
          required LtOwnedStructTwinNormal unrelatedOwned}) =>
      RustLib.instance.api
          .crateApiLifetimeableLtOwnedStructTwinNormalComputeWithUnrelatedBorrowedArgTwinNormal(
              that: this,
              unrelatedBorrowed: unrelatedBorrowed,
              unrelatedOwned: unrelatedOwned);
}

@sealed
class LtOwnedStructTwinSyncImpl extends RustOpaque
    implements LtOwnedStructTwinSync {
  // Not to be used by end users
  LtOwnedStructTwinSyncImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  LtOwnedStructTwinSyncImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_LtOwnedStructTwinSync,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_LtOwnedStructTwinSync,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_LtOwnedStructTwinSyncPtr,
  );

  /// `fn f(x: &'a T) -> S<'a>`
  Future<LtTypeWithLifetimeTwinSync> computeTypeWithLifetimeTwinSync() =>
      RustLib.instance.api
          .crateApiPseudoManualLifetimeableTwinSyncLtOwnedStructTwinSyncComputeTypeWithLifetimeTwinSync(
        that: this,
      );

  /// The unrelated arg should not affect results
  Future<LtTypeWithLifetimeTwinSync> computeWithUnrelatedBorrowedArgTwinSync(
          {required LtOwnedStructTwinSync unrelatedBorrowed,
          required LtOwnedStructTwinSync unrelatedOwned}) =>
      RustLib.instance.api
          .crateApiPseudoManualLifetimeableTwinSyncLtOwnedStructTwinSyncComputeWithUnrelatedBorrowedArgTwinSync(
              that: this,
              unrelatedBorrowed: unrelatedBorrowed,
              unrelatedOwned: unrelatedOwned);
}

@sealed
class LtSubStructTwinNormalImpl extends RustOpaque
    implements LtSubStructTwinNormal {
  // Not to be used by end users
  LtSubStructTwinNormalImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  LtSubStructTwinNormalImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_LtSubStructTwinNormal,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_LtSubStructTwinNormal,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_LtSubStructTwinNormalPtr,
  );

  Future<String> greetBorrowMutSelfTwinNormal() => RustLib.instance.api
          .crateApiLifetimeableLtSubStructTwinNormalGreetBorrowMutSelfTwinNormal(
        that: this,
      );

  Future<String> greetBorrowSelfTwinNormal() => RustLib.instance.api
          .crateApiLifetimeableLtSubStructTwinNormalGreetBorrowSelfTwinNormal(
        that: this,
      );
}

@sealed
class LtSubStructTwinSyncImpl extends RustOpaque
    implements LtSubStructTwinSync {
  // Not to be used by end users
  LtSubStructTwinSyncImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  LtSubStructTwinSyncImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_LtSubStructTwinSync,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_LtSubStructTwinSync,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_LtSubStructTwinSyncPtr,
  );

  String greetBorrowMutSelfTwinSync() => RustLib.instance.api
          .crateApiPseudoManualLifetimeableTwinSyncLtSubStructTwinSyncGreetBorrowMutSelfTwinSync(
        that: this,
      );

  String greetBorrowSelfTwinSync() => RustLib.instance.api
          .crateApiPseudoManualLifetimeableTwinSyncLtSubStructTwinSyncGreetBorrowSelfTwinSync(
        that: this,
      );
}

@sealed
class LtTypeWithLifetimeTwinNormalImpl extends RustOpaque
    implements LtTypeWithLifetimeTwinNormal {
  // Not to be used by end users
  LtTypeWithLifetimeTwinNormalImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  LtTypeWithLifetimeTwinNormalImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_LtTypeWithLifetimeTwinNormal,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_LtTypeWithLifetimeTwinNormal,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_LtTypeWithLifetimeTwinNormalPtr,
  );

  /// Input lifetimeable and output another lifetimeable
  Future<LtNestedTypeWithLifetimeTwinNormal>
      computeNestedTypeWithLifetimeTwinNormal() => RustLib.instance.api
              .crateApiLifetimeableLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithLifetimeTwinNormalstaticComputeNestedTypeWithLifetimeTwinNormal(
            that: this,
          );

  /// `&mut T` where T is lifetimeable
  Future<String> greetBorrowMutSelfTwinNormal() => RustLib.instance.api
          .crateApiLifetimeableLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithLifetimeTwinNormalstaticGreetBorrowMutSelfTwinNormal(
        that: this,
      );

  /// `&T` where T is lifetimeable
  Future<String> greetBorrowSelfTwinNormal() => RustLib.instance.api
          .crateApiLifetimeableLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithLifetimeTwinNormalstaticGreetBorrowSelfTwinNormal(
        that: this,
      );
}

@sealed
class LtTypeWithLifetimeTwinSyncImpl extends RustOpaque
    implements LtTypeWithLifetimeTwinSync {
  // Not to be used by end users
  LtTypeWithLifetimeTwinSyncImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  LtTypeWithLifetimeTwinSyncImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_LtTypeWithLifetimeTwinSync,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_LtTypeWithLifetimeTwinSync,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_LtTypeWithLifetimeTwinSyncPtr,
  );

  /// Input lifetimeable and output another lifetimeable
  Future<LtNestedTypeWithLifetimeTwinSync>
      computeNestedTypeWithLifetimeTwinSync() => RustLib.instance.api
              .crateApiPseudoManualLifetimeableTwinSyncLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithLifetimeTwinSyncstaticComputeNestedTypeWithLifetimeTwinSync(
            that: this,
          );

  /// `&mut T` where T is lifetimeable
  String greetBorrowMutSelfTwinSync() => RustLib.instance.api
          .crateApiPseudoManualLifetimeableTwinSyncLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithLifetimeTwinSyncstaticGreetBorrowMutSelfTwinSync(
        that: this,
      );

  /// `&T` where T is lifetimeable
  String greetBorrowSelfTwinSync() => RustLib.instance.api
          .crateApiPseudoManualLifetimeableTwinSyncLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithLifetimeTwinSyncstaticGreetBorrowSelfTwinSync(
        that: this,
      );
}

@sealed
class LtTypeWithMultiDepTwinNormalImpl extends RustOpaque
    implements LtTypeWithMultiDepTwinNormal {
  // Not to be used by end users
  LtTypeWithMultiDepTwinNormalImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  LtTypeWithMultiDepTwinNormalImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_LtTypeWithMultiDepTwinNormal,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_LtTypeWithMultiDepTwinNormal,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_LtTypeWithMultiDepTwinNormalPtr,
  );

  Future<List<String>> greetBorrowMutSelfTwinNormal() => RustLib.instance.api
          .crateApiLifetimeableLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithMultiDepTwinNormalstaticGreetBorrowMutSelfTwinNormal(
        that: this,
      );

  Future<List<String>> greetBorrowSelfTwinNormal() => RustLib.instance.api
          .crateApiLifetimeableLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithMultiDepTwinNormalstaticGreetBorrowSelfTwinNormal(
        that: this,
      );
}

@sealed
class LtTypeWithMultiDepTwinSyncImpl extends RustOpaque
    implements LtTypeWithMultiDepTwinSync {
  // Not to be used by end users
  LtTypeWithMultiDepTwinSyncImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  LtTypeWithMultiDepTwinSyncImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_LtTypeWithMultiDepTwinSync,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_LtTypeWithMultiDepTwinSync,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_LtTypeWithMultiDepTwinSyncPtr,
  );

  List<String> greetBorrowMutSelfTwinSync() => RustLib.instance.api
          .crateApiPseudoManualLifetimeableTwinSyncLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithMultiDepTwinSyncstaticGreetBorrowMutSelfTwinSync(
        that: this,
      );

  List<String> greetBorrowSelfTwinSync() => RustLib.instance.api
          .crateApiPseudoManualLifetimeableTwinSyncLifetimeableAutoOwnedRustOpaqueFlutterRustBridgeforGeneratedRustAutoOpaqueInnerLtTypeWithMultiDepTwinSyncstaticGreetBorrowSelfTwinSync(
        that: this,
      );
}

@sealed
class MutexHideDataTwinNormalImpl extends RustOpaque
    implements MutexHideDataTwinNormal {
  // Not to be used by end users
  MutexHideDataTwinNormalImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MutexHideDataTwinNormalImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_MutexHideDataTwinNormal,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_MutexHideDataTwinNormal,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_MutexHideDataTwinNormalPtr,
  );
}

@sealed
class MutexHideDataTwinRustAsyncImpl extends RustOpaque
    implements MutexHideDataTwinRustAsync {
  // Not to be used by end users
  MutexHideDataTwinRustAsyncImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MutexHideDataTwinRustAsyncImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_MutexHideDataTwinRustAsync,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_MutexHideDataTwinRustAsync,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_MutexHideDataTwinRustAsyncPtr,
  );
}

@sealed
class MutexHideDataTwinSyncImpl extends RustOpaque
    implements MutexHideDataTwinSync {
  // Not to be used by end users
  MutexHideDataTwinSyncImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MutexHideDataTwinSyncImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_MutexHideDataTwinSync,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_MutexHideDataTwinSync,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_MutexHideDataTwinSyncPtr,
  );
}

@sealed
class MyAudioParamTwinNormalImpl extends RustOpaque
    implements MyAudioParamTwinNormal {
  // Not to be used by end users
  MyAudioParamTwinNormalImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MyAudioParamTwinNormalImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_MyAudioParamTwinNormal,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_MyAudioParamTwinNormal,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_MyAudioParamTwinNormalPtr,
  );

  Future<String> myMethodTwinNormal() => RustLib.instance.api
          .crateApiProxyMyAudioParamTwinNormalMyMethodTwinNormal(
        that: this,
      );
}

@sealed
class MyImplTraitWithSelfTwinNormalImpl extends RustOpaque
    implements MyImplTraitWithSelfTwinNormal {
  // Not to be used by end users
  MyImplTraitWithSelfTwinNormalImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MyImplTraitWithSelfTwinNormalImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_MyImplTraitWithSelfTwinNormal,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_MyImplTraitWithSelfTwinNormal,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_MyImplTraitWithSelfTwinNormalPtr,
  );

  Future<void> methodWithBadSelfTwinNormal(
          {required MyImplTraitWithSelfTwinNormal another}) =>
      RustLib.instance.api
          .crateApiImplTraitMyImplTraitWithSelfTwinNormalMethodWithBadSelfTwinNormal(
              that: this, another: another);

  Future<MyImplTraitWithSelfTwinNormal> methodWithGoodSelfTwinNormal() =>
      RustLib.instance.api
          .crateApiImplTraitMyImplTraitWithSelfTwinNormalMethodWithGoodSelfTwinNormal(
        that: this,
      );
}

@sealed
class MyImplTraitWithSelfTwinSyncImpl extends RustOpaque
    implements MyImplTraitWithSelfTwinSync {
  // Not to be used by end users
  MyImplTraitWithSelfTwinSyncImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MyImplTraitWithSelfTwinSyncImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_MyImplTraitWithSelfTwinSync,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_MyImplTraitWithSelfTwinSync,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_MyImplTraitWithSelfTwinSyncPtr,
  );

  Future<void> methodWithBadSelfTwinSync(
          {required MyImplTraitWithSelfTwinSync another}) =>
      RustLib.instance.api
          .crateApiPseudoManualImplTraitTwinSyncMyImplTraitWithSelfTwinSyncMethodWithBadSelfTwinSync(
              that: this, another: another);

  Future<MyImplTraitWithSelfTwinSync> methodWithGoodSelfTwinSync() =>
      RustLib.instance.api
          .crateApiPseudoManualImplTraitTwinSyncMyImplTraitWithSelfTwinSyncMethodWithGoodSelfTwinSync(
        that: this,
      );
}

@sealed
class MyNodeTwinNormalImpl extends RustOpaque implements MyNodeTwinNormal {
  // Not to be used by end users
  MyNodeTwinNormalImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MyNodeTwinNormalImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_MyNodeTwinNormal,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_MyNodeTwinNormal,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_MyNodeTwinNormalPtr,
  );

  Future<MyAudioParamTwinNormal> paramOneTwinNormal() => Future.value(
      MyAudioParamTwinNormalProxyVariantMyNodeTwinNormalParamOneTwinNormal(
          this));

  Future<MyAudioParamTwinNormal> paramTwoTwinNormal() => Future.value(
      MyAudioParamTwinNormalProxyVariantMyNodeTwinNormalParamTwoTwinNormal(
          this));
}

@sealed
class MyStructWithTryFromTwinNormalImpl extends RustOpaque
    implements MyStructWithTryFromTwinNormal {
  // Not to be used by end users
  MyStructWithTryFromTwinNormalImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MyStructWithTryFromTwinNormalImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_MyStructWithTryFromTwinNormal,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_MyStructWithTryFromTwinNormal,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_MyStructWithTryFromTwinNormalPtr,
  );

  Future<String> valueTwinNormal() => RustLib.instance.api
          .crateApiMiscNoTwinExampleAMyStructWithTryFromTwinNormalValueTwinNormal(
        that: this,
      );
}

@sealed
class NonCloneDataRawImpl extends RustOpaque implements NonCloneDataRaw {
  // Not to be used by end users
  NonCloneDataRawImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  NonCloneDataRawImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_NonCloneDataRaw,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_NonCloneDataRaw,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_NonCloneDataRawPtr,
  );
}

@sealed
class NonCloneDataTwinNormalImpl extends RustOpaque
    implements NonCloneDataTwinNormal {
  // Not to be used by end users
  NonCloneDataTwinNormalImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  NonCloneDataTwinNormalImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_NonCloneDataTwinNormal,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_NonCloneDataTwinNormal,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_NonCloneDataTwinNormalPtr,
  );
}

@sealed
class NonCloneDataTwinRustAsyncImpl extends RustOpaque
    implements NonCloneDataTwinRustAsync {
  // Not to be used by end users
  NonCloneDataTwinRustAsyncImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  NonCloneDataTwinRustAsyncImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_NonCloneDataTwinRustAsync,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_NonCloneDataTwinRustAsync,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_NonCloneDataTwinRustAsyncPtr,
  );
}

@sealed
class NonCloneDataTwinSyncImpl extends RustOpaque
    implements NonCloneDataTwinSync {
  // Not to be used by end users
  NonCloneDataTwinSyncImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  NonCloneDataTwinSyncImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_NonCloneDataTwinSync,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_NonCloneDataTwinSync,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_NonCloneDataTwinSyncPtr,
  );
}

@sealed
class NonCloneSimpleEnumTwinNormalImpl extends RustOpaque
    implements NonCloneSimpleEnumTwinNormal {
  // Not to be used by end users
  NonCloneSimpleEnumTwinNormalImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  NonCloneSimpleEnumTwinNormalImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_NonCloneSimpleEnumTwinNormal,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_NonCloneSimpleEnumTwinNormal,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_NonCloneSimpleEnumTwinNormalPtr,
  );
}

@sealed
class NonCloneSimpleEnumTwinRustAsyncImpl extends RustOpaque
    implements NonCloneSimpleEnumTwinRustAsync {
  // Not to be used by end users
  NonCloneSimpleEnumTwinRustAsyncImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  NonCloneSimpleEnumTwinRustAsyncImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_NonCloneSimpleEnumTwinRustAsync,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_NonCloneSimpleEnumTwinRustAsync,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_NonCloneSimpleEnumTwinRustAsyncPtr,
  );
}

@sealed
class NonCloneSimpleEnumTwinSyncImpl extends RustOpaque
    implements NonCloneSimpleEnumTwinSync {
  // Not to be used by end users
  NonCloneSimpleEnumTwinSyncImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  NonCloneSimpleEnumTwinSyncImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_NonCloneSimpleEnumTwinSync,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_NonCloneSimpleEnumTwinSync,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_NonCloneSimpleEnumTwinSyncPtr,
  );
}

@sealed
class NonCloneSimpleTwinNormalImpl extends RustOpaque
    implements NonCloneSimpleTwinNormal {
  // Not to be used by end users
  NonCloneSimpleTwinNormalImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  NonCloneSimpleTwinNormalImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_NonCloneSimpleTwinNormal,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_NonCloneSimpleTwinNormal,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_NonCloneSimpleTwinNormalPtr,
  );

  Future<void> instanceMethodArgBorrowTwinNormal() => RustLib.instance.api
          .crateApiRustAutoOpaqueNonCloneSimpleTwinNormalInstanceMethodArgBorrowTwinNormal(
        that: this,
      );

  Future<void> instanceMethodArgMutBorrowTwinNormal() => RustLib.instance.api
          .crateApiRustAutoOpaqueNonCloneSimpleTwinNormalInstanceMethodArgMutBorrowTwinNormal(
        that: this,
      );

  Future<void> instanceMethodArgOwnTwinNormal() => RustLib.instance.api
          .crateApiRustAutoOpaqueNonCloneSimpleTwinNormalInstanceMethodArgOwnTwinNormal(
        that: this,
      );

  Future<int> get instanceMethodGetterTwinNormal => RustLib.instance.api
          .crateApiRustAutoOpaqueNonCloneSimpleTwinNormalInstanceMethodGetterTwinNormal(
        that: this,
      );

  Future<NonCloneSimpleTwinNormal> instanceMethodReturnOwnTwinNormal() =>
      RustLib.instance.api
          .crateApiRustAutoOpaqueNonCloneSimpleTwinNormalInstanceMethodReturnOwnTwinNormal(
        that: this,
      );
}

@sealed
class NonCloneSimpleTwinRustAsyncImpl extends RustOpaque
    implements NonCloneSimpleTwinRustAsync {
  // Not to be used by end users
  NonCloneSimpleTwinRustAsyncImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  NonCloneSimpleTwinRustAsyncImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_NonCloneSimpleTwinRustAsync,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_NonCloneSimpleTwinRustAsync,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_NonCloneSimpleTwinRustAsyncPtr,
  );

  Future<void> instanceMethodArgBorrowTwinRustAsync() => RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodArgBorrowTwinRustAsync(
        that: this,
      );

  Future<void> instanceMethodArgMutBorrowTwinRustAsync() => RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodArgMutBorrowTwinRustAsync(
        that: this,
      );

  Future<void> instanceMethodArgOwnTwinRustAsync() => RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodArgOwnTwinRustAsync(
        that: this,
      );

  Future<int> get instanceMethodGetterTwinRustAsync => RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodGetterTwinRustAsync(
        that: this,
      );

  Future<NonCloneSimpleTwinRustAsync> instanceMethodReturnOwnTwinRustAsync() =>
      RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodReturnOwnTwinRustAsync(
        that: this,
      );
}

@sealed
class NonCloneSimpleTwinSyncImpl extends RustOpaque
    implements NonCloneSimpleTwinSync {
  // Not to be used by end users
  NonCloneSimpleTwinSyncImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  NonCloneSimpleTwinSyncImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_NonCloneSimpleTwinSync,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_NonCloneSimpleTwinSync,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_NonCloneSimpleTwinSyncPtr,
  );

  void instanceMethodArgBorrowTwinSync() => RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncInstanceMethodArgBorrowTwinSync(
        that: this,
      );

  void instanceMethodArgMutBorrowTwinSync() => RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncInstanceMethodArgMutBorrowTwinSync(
        that: this,
      );

  void instanceMethodArgOwnTwinSync() => RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncInstanceMethodArgOwnTwinSync(
        that: this,
      );

  int get instanceMethodGetterTwinSync => RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncInstanceMethodGetterTwinSync(
        that: this,
      );

  NonCloneSimpleTwinSync instanceMethodReturnOwnTwinSync() =>
      RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncInstanceMethodReturnOwnTwinSync(
        that: this,
      );
}

@sealed
class OpaqueItemTwinNormalImpl extends RustOpaque
    implements OpaqueItemTwinNormal {
  // Not to be used by end users
  OpaqueItemTwinNormalImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  OpaqueItemTwinNormalImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_OpaqueItemTwinNormal,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_OpaqueItemTwinNormal,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_OpaqueItemTwinNormalPtr,
  );
}

@sealed
class OpaqueOneTwinNormalImpl extends RustOpaque
    implements OpaqueOneTwinNormal {
  // Not to be used by end users
  OpaqueOneTwinNormalImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  OpaqueOneTwinNormalImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_OpaqueOneTwinNormal,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_OpaqueOneTwinNormal,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_OpaqueOneTwinNormalPtr,
  );
}

@sealed
class OpaqueOneTwinRustAsyncImpl extends RustOpaque
    implements OpaqueOneTwinRustAsync {
  // Not to be used by end users
  OpaqueOneTwinRustAsyncImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  OpaqueOneTwinRustAsyncImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_OpaqueOneTwinRustAsync,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_OpaqueOneTwinRustAsync,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_OpaqueOneTwinRustAsyncPtr,
  );
}

@sealed
class OpaqueOneTwinSyncImpl extends RustOpaque implements OpaqueOneTwinSync {
  // Not to be used by end users
  OpaqueOneTwinSyncImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  OpaqueOneTwinSyncImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_OpaqueOneTwinSync,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_OpaqueOneTwinSync,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_OpaqueOneTwinSyncPtr,
  );
}

@sealed
class OpaqueStructWithDartCodeTwinNormalImpl extends RustOpaque
    implements OpaqueStructWithDartCodeTwinNormal {
  // Not to be used by end users
  OpaqueStructWithDartCodeTwinNormalImpl.frbInternalDcoDecode(
      List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  OpaqueStructWithDartCodeTwinNormalImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_OpaqueStructWithDartCodeTwinNormal,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_OpaqueStructWithDartCodeTwinNormal,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_OpaqueStructWithDartCodeTwinNormalPtr,
  );

  Future<int> normalMethodTwinNormal() => RustLib.instance.api
          .crateApiDartCodeOpaqueStructWithDartCodeTwinNormalNormalMethodTwinNormal(
        that: this,
      );
}

@sealed
class OpaqueTwoTwinNormalImpl extends RustOpaque
    implements OpaqueTwoTwinNormal {
  // Not to be used by end users
  OpaqueTwoTwinNormalImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  OpaqueTwoTwinNormalImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_OpaqueTwoTwinNormal,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_OpaqueTwoTwinNormal,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_OpaqueTwoTwinNormalPtr,
  );
}

@sealed
class OpaqueTwoTwinRustAsyncImpl extends RustOpaque
    implements OpaqueTwoTwinRustAsync {
  // Not to be used by end users
  OpaqueTwoTwinRustAsyncImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  OpaqueTwoTwinRustAsyncImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_OpaqueTwoTwinRustAsync,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_OpaqueTwoTwinRustAsync,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_OpaqueTwoTwinRustAsyncPtr,
  );
}

@sealed
class OpaqueTwoTwinSyncImpl extends RustOpaque implements OpaqueTwoTwinSync {
  // Not to be used by end users
  OpaqueTwoTwinSyncImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  OpaqueTwoTwinSyncImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_OpaqueTwoTwinSync,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_OpaqueTwoTwinSync,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_OpaqueTwoTwinSyncPtr,
  );
}

@sealed
class RwLockHideDataTwinNormalImpl extends RustOpaque
    implements RwLockHideDataTwinNormal {
  // Not to be used by end users
  RwLockHideDataTwinNormalImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  RwLockHideDataTwinNormalImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_RwLockHideDataTwinNormal,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_RwLockHideDataTwinNormal,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_RwLockHideDataTwinNormalPtr,
  );
}

@sealed
class RwLockHideDataTwinRustAsyncImpl extends RustOpaque
    implements RwLockHideDataTwinRustAsync {
  // Not to be used by end users
  RwLockHideDataTwinRustAsyncImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  RwLockHideDataTwinRustAsyncImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_RwLockHideDataTwinRustAsync,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_RwLockHideDataTwinRustAsync,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_RwLockHideDataTwinRustAsyncPtr,
  );
}

@sealed
class RwLockHideDataTwinSyncImpl extends RustOpaque
    implements RwLockHideDataTwinSync {
  // Not to be used by end users
  RwLockHideDataTwinSyncImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  RwLockHideDataTwinSyncImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_RwLockHideDataTwinSync,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_RwLockHideDataTwinSync,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_RwLockHideDataTwinSyncPtr,
  );
}

@sealed
class SimpleLoggerImpl extends RustOpaque implements SimpleLogger {
  // Not to be used by end users
  SimpleLoggerImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SimpleLoggerImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_SimpleLogger,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_SimpleLogger,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_SimpleLoggerPtr,
  );

  List<String> getAndReset() =>
      RustLib.instance.api.crateApiMiscNoTwinExampleASimpleLoggerGetAndReset(
        that: this,
      );
}

@sealed
class SimpleOpaqueExternalStructWithMethodImpl extends RustOpaque
    implements SimpleOpaqueExternalStructWithMethod {
  // Not to be used by end users
  SimpleOpaqueExternalStructWithMethodImpl.frbInternalDcoDecode(
      List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SimpleOpaqueExternalStructWithMethodImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_SimpleOpaqueExternalStructWithMethod,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_SimpleOpaqueExternalStructWithMethod,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_SimpleOpaqueExternalStructWithMethodPtr,
  );

  Future<String> simpleExternalMethod() => RustLib.instance.api
          .crateApiExternalImplSimpleOpaqueExternalStructWithMethodSimpleExternalMethod(
        that: this,
      );
}

@sealed
class StaticGetterOnlyTwinNormalImpl extends RustOpaque
    implements StaticGetterOnlyTwinNormal {
  // Not to be used by end users
  StaticGetterOnlyTwinNormalImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  StaticGetterOnlyTwinNormalImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_StaticGetterOnlyTwinNormal,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_StaticGetterOnlyTwinNormal,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_StaticGetterOnlyTwinNormalPtr,
  );
}

@sealed
class StaticGetterOnlyTwinRustAsyncImpl extends RustOpaque
    implements StaticGetterOnlyTwinRustAsync {
  // Not to be used by end users
  StaticGetterOnlyTwinRustAsyncImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  StaticGetterOnlyTwinRustAsyncImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_StaticGetterOnlyTwinRustAsync,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_StaticGetterOnlyTwinRustAsync,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_StaticGetterOnlyTwinRustAsyncPtr,
  );
}

@sealed
class StaticGetterOnlyTwinSyncImpl extends RustOpaque
    implements StaticGetterOnlyTwinSync {
  // Not to be used by end users
  StaticGetterOnlyTwinSyncImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  StaticGetterOnlyTwinSyncImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_StaticGetterOnlyTwinSync,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_StaticGetterOnlyTwinSync,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_StaticGetterOnlyTwinSyncPtr,
  );
}

@sealed
class StructInMiscNoTwinExampleAImpl extends RustOpaque
    implements StructInMiscNoTwinExampleA {
  // Not to be used by end users
  StructInMiscNoTwinExampleAImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  StructInMiscNoTwinExampleAImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_StructInMiscNoTwinExampleA,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructInMiscNoTwinExampleA,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructInMiscNoTwinExampleAPtr,
  );

  Future<void> sampleFunctionA() => RustLib.instance.api
          .crateApiMiscNoTwinExampleAStructInMiscNoTwinExampleASampleFunctionA(
        that: this,
      );
}

@sealed
class StructInMiscNoTwinExampleBImpl extends RustOpaque
    implements StructInMiscNoTwinExampleB {
  // Not to be used by end users
  StructInMiscNoTwinExampleBImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  StructInMiscNoTwinExampleBImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_StructInMiscNoTwinExampleB,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructInMiscNoTwinExampleB,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructInMiscNoTwinExampleBPtr,
  );

  Future<StructInMiscNoTwinExampleA> getStructInMiscNoTwinExampleA() =>
      RustLib.instance.api
          .crateApiMiscNoTwinExampleBStructInMiscNoTwinExampleBGetStructInMiscNoTwinExampleA(
        that: this,
      );

  Future<void> sampleFunctionB() => RustLib.instance.api
          .crateApiMiscNoTwinExampleBStructInMiscNoTwinExampleBSampleFunctionB(
        that: this,
      );
}

@sealed
class StructOneWithTraitForDynTwinNormalImpl extends RustOpaque
    implements StructOneWithTraitForDynTwinNormal {
  // Not to be used by end users
  StructOneWithTraitForDynTwinNormalImpl.frbInternalDcoDecode(
      List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  StructOneWithTraitForDynTwinNormalImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_StructOneWithTraitForDynTwinNormal,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructOneWithTraitForDynTwinNormal,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructOneWithTraitForDynTwinNormalPtr,
  );

  int get one => RustLib.instance.api
          .crateApiDynTraitStructOneWithTraitForDynTwinNormalAutoAccessorGetOne(
        that: this,
      );

  set one(int one) => RustLib.instance.api
      .crateApiDynTraitStructOneWithTraitForDynTwinNormalAutoAccessorSetOne(
          that: this, one: one);

  Future<int> simpleMethodTwinNormal() => RustLib.instance.api
          .crateApiDynTraitStructOneWithTraitForDynTwinNormalSimpleMethodTwinNormal(
        that: this,
      );
}

@sealed
class StructOneWithTraitTwinNormalImpl extends RustOpaque
    implements StructOneWithTraitTwinNormal {
  // Not to be used by end users
  StructOneWithTraitTwinNormalImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  StructOneWithTraitTwinNormalImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_StructOneWithTraitTwinNormal,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructOneWithTraitTwinNormal,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructOneWithTraitTwinNormalPtr,
  );

  int get one => RustLib.instance.api
          .crateApiImplTraitStructOneWithTraitTwinNormalAutoAccessorGetOne(
        that: this,
      );

  set one(int one) => RustLib.instance.api
      .crateApiImplTraitStructOneWithTraitTwinNormalAutoAccessorSetOne(
          that: this, one: one);

  Future<int> simpleTraitFnReceiverBorrowTwinNormal() => RustLib.instance.api
          .crateApiImplTraitStructOneWithTraitTwinNormalSimpleTraitFnReceiverBorrowTwinNormal(
        that: this,
      );
}

@sealed
class StructOneWithTraitTwinSyncImpl extends RustOpaque
    implements StructOneWithTraitTwinSync {
  // Not to be used by end users
  StructOneWithTraitTwinSyncImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  StructOneWithTraitTwinSyncImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_StructOneWithTraitTwinSync,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructOneWithTraitTwinSync,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructOneWithTraitTwinSyncPtr,
  );

  int get one => RustLib.instance.api
          .crateApiPseudoManualImplTraitTwinSyncStructOneWithTraitTwinSyncAutoAccessorGetOne(
        that: this,
      );

  set one(int one) => RustLib.instance.api
      .crateApiPseudoManualImplTraitTwinSyncStructOneWithTraitTwinSyncAutoAccessorSetOne(
          that: this, one: one);

  Future<int> simpleTraitFnReceiverBorrowTwinSync() => RustLib.instance.api
          .crateApiPseudoManualImplTraitTwinSyncStructOneWithTraitTwinSyncSimpleTraitFnReceiverBorrowTwinSync(
        that: this,
      );
}

@sealed
class StructTwoWithTraitForDynTwinNormalImpl extends RustOpaque
    implements StructTwoWithTraitForDynTwinNormal {
  // Not to be used by end users
  StructTwoWithTraitForDynTwinNormalImpl.frbInternalDcoDecode(
      List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  StructTwoWithTraitForDynTwinNormalImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_StructTwoWithTraitForDynTwinNormal,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructTwoWithTraitForDynTwinNormal,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructTwoWithTraitForDynTwinNormalPtr,
  );

  int get two => RustLib.instance.api
          .crateApiDynTraitStructTwoWithTraitForDynTwinNormalAutoAccessorGetTwo(
        that: this,
      );

  set two(int two) => RustLib.instance.api
      .crateApiDynTraitStructTwoWithTraitForDynTwinNormalAutoAccessorSetTwo(
          that: this, two: two);

  Future<int> simpleMethodTwinNormal() => RustLib.instance.api
          .crateApiDynTraitStructTwoWithTraitForDynTwinNormalSimpleMethodTwinNormal(
        that: this,
      );
}

@sealed
class StructTwoWithTraitTwinNormalImpl extends RustOpaque
    implements StructTwoWithTraitTwinNormal {
  // Not to be used by end users
  StructTwoWithTraitTwinNormalImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  StructTwoWithTraitTwinNormalImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_StructTwoWithTraitTwinNormal,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructTwoWithTraitTwinNormal,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructTwoWithTraitTwinNormalPtr,
  );

  int get two => RustLib.instance.api
          .crateApiImplTraitStructTwoWithTraitTwinNormalAutoAccessorGetTwo(
        that: this,
      );

  set two(int two) => RustLib.instance.api
      .crateApiImplTraitStructTwoWithTraitTwinNormalAutoAccessorSetTwo(
          that: this, two: two);

  Future<int> simpleTraitFnReceiverBorrowTwinNormal() => RustLib.instance.api
          .crateApiImplTraitStructTwoWithTraitTwinNormalSimpleTraitFnReceiverBorrowTwinNormal(
        that: this,
      );
}

@sealed
class StructTwoWithTraitTwinSyncImpl extends RustOpaque
    implements StructTwoWithTraitTwinSync {
  // Not to be used by end users
  StructTwoWithTraitTwinSyncImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  StructTwoWithTraitTwinSyncImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_StructTwoWithTraitTwinSync,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructTwoWithTraitTwinSync,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructTwoWithTraitTwinSyncPtr,
  );

  int get two => RustLib.instance.api
          .crateApiPseudoManualImplTraitTwinSyncStructTwoWithTraitTwinSyncAutoAccessorGetTwo(
        that: this,
      );

  set two(int two) => RustLib.instance.api
      .crateApiPseudoManualImplTraitTwinSyncStructTwoWithTraitTwinSyncAutoAccessorSetTwo(
          that: this, two: two);

  Future<int> simpleTraitFnReceiverBorrowTwinSync() => RustLib.instance.api
          .crateApiPseudoManualImplTraitTwinSyncStructTwoWithTraitTwinSyncSimpleTraitFnReceiverBorrowTwinSync(
        that: this,
      );
}

@sealed
class StructWithGoodAndOpaqueFieldWithoutOptionTwinNormalImpl extends RustOpaque
    implements StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal {
  // Not to be used by end users
  StructWithGoodAndOpaqueFieldWithoutOptionTwinNormalImpl.frbInternalDcoDecode(
      List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  StructWithGoodAndOpaqueFieldWithoutOptionTwinNormalImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinNormalPtr,
  );

  String get good => RustLib.instance.api
          .crateApiRustAutoOpaqueStructWithGoodAndOpaqueFieldWithoutOptionTwinNormalAutoAccessorGetGood(
        that: this,
      );

  set good(String good) => RustLib.instance.api
      .crateApiRustAutoOpaqueStructWithGoodAndOpaqueFieldWithoutOptionTwinNormalAutoAccessorSetGood(
          that: this, good: good);
}

@sealed
class StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncImpl
    extends RustOpaque
    implements StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync {
  // Not to be used by end users
  StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncImpl.frbInternalDcoDecode(
      List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncPtr,
  );

  String get good => RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncAutoAccessorGetGood(
        that: this,
      );

  set good(String good) => RustLib.instance.api
      .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncAutoAccessorSetGood(
          that: this, good: good);
}

@sealed
class StructWithGoodAndOpaqueFieldWithoutOptionTwinSyncImpl extends RustOpaque
    implements StructWithGoodAndOpaqueFieldWithoutOptionTwinSync {
  // Not to be used by end users
  StructWithGoodAndOpaqueFieldWithoutOptionTwinSyncImpl.frbInternalDcoDecode(
      List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  StructWithGoodAndOpaqueFieldWithoutOptionTwinSyncImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinSync,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinSync,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinSyncPtr,
  );

  String get good => RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinSyncStructWithGoodAndOpaqueFieldWithoutOptionTwinSyncAutoAccessorGetGood(
        that: this,
      );

  set good(String good) => RustLib.instance.api
      .crateApiPseudoManualRustAutoOpaqueTwinSyncStructWithGoodAndOpaqueFieldWithoutOptionTwinSyncAutoAccessorSetGood(
          that: this, good: good);
}

@sealed
class StructWithImplBlockInMultiFileImpl extends RustOpaque
    implements StructWithImplBlockInMultiFile {
  // Not to be used by end users
  StructWithImplBlockInMultiFileImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  StructWithImplBlockInMultiFileImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_StructWithImplBlockInMultiFile,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructWithImplBlockInMultiFile,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructWithImplBlockInMultiFilePtr,
  );

  Future<void> methodInA() => RustLib.instance.api
          .crateApiMiscNoTwinExampleAStructWithImplBlockInMultiFileMethodInA(
        that: this,
      );

  Future<void> methodInB() => RustLib.instance.api
          .crateApiMiscNoTwinExampleAStructWithImplBlockInMultiFileMethodInB(
        that: this,
      );
}

@sealed
class StructWithRustAutoOpaqueFieldWithManyDeriveInnerImpl extends RustOpaque
    implements StructWithRustAutoOpaqueFieldWithManyDeriveInner {
  // Not to be used by end users
  StructWithRustAutoOpaqueFieldWithManyDeriveInnerImpl.frbInternalDcoDecode(
      List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  StructWithRustAutoOpaqueFieldWithManyDeriveInnerImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_StructWithRustAutoOpaqueFieldWithManyDeriveInner,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructWithRustAutoOpaqueFieldWithManyDeriveInner,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructWithRustAutoOpaqueFieldWithManyDeriveInnerPtr,
  );
}

@sealed
class StructWithSimpleSetterTwinNormalImpl extends RustOpaque
    implements StructWithSimpleSetterTwinNormal {
  // Not to be used by end users
  StructWithSimpleSetterTwinNormalImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  StructWithSimpleSetterTwinNormalImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_StructWithSimpleSetterTwinNormal,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructWithSimpleSetterTwinNormal,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructWithSimpleSetterTwinNormalPtr,
  );

  int get something => RustLib.instance.api
          .crateApiMiscNoTwinExampleAStructWithSimpleSetterTwinNormalGetSomething(
        that: this,
      );

  set something(int value) => RustLib.instance.api
      .crateApiMiscNoTwinExampleAStructWithSimpleSetterTwinNormalSetSomething(
          that: this, value: value);

  int get simpleGetter => RustLib.instance.api
          .crateApiMiscNoTwinExampleAStructWithSimpleSetterTwinNormalSimpleGetter(
        that: this,
      );

  set simpleSetter(int value) => RustLib.instance.api
      .crateApiMiscNoTwinExampleAStructWithSimpleSetterTwinNormalSimpleSetter(
          that: this, value: value);
}

@sealed
class TypeForIgnoreAllImpl extends RustOpaque implements TypeForIgnoreAll {
  // Not to be used by end users
  TypeForIgnoreAllImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  TypeForIgnoreAllImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_TypeForIgnoreAll,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_TypeForIgnoreAll,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_TypeForIgnoreAllPtr,
  );

  int get field2 => RustLib.instance.api
          .crateApiMiscNoTwinExampleATypeForIgnoreAllAutoAccessorGetField2(
        that: this,
      );

  set field2(int field2) => RustLib.instance.api
      .crateApiMiscNoTwinExampleATypeForIgnoreAllAutoAccessorSetField2(
          that: this, field2: field2);

  Future<int> field1() =>
      RustLib.instance.api.crateApiMiscNoTwinExampleATypeForIgnoreAllField1(
        that: this,
      );
}

@sealed
class TypeForIgnoreImpl extends RustOpaque implements TypeForIgnore {
  // Not to be used by end users
  TypeForIgnoreImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  TypeForIgnoreImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_TypeForIgnore,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_TypeForIgnore,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_TypeForIgnorePtr,
  );

  Future<int> field1() =>
      RustLib.instance.api.crateApiMiscNoTwinExampleATypeForIgnoreField1(
        that: this,
      );
}

class MyAudioParamTwinNormalProxyVariantMyNodeTwinNormalParamOneTwinNormal
    with SimpleDisposable
    implements MyAudioParamTwinNormal {
  final MyNodeTwinNormal _upstream;

  MyAudioParamTwinNormalProxyVariantMyNodeTwinNormalParamOneTwinNormal(
      this._upstream);

  Future<String> myMethodTwinNormal() => RustLib.instance.api
          .crateApiProxyMyAudioParamTwinNormalMyMethodTwinNormal(
        that: this,
      );
}

class MyAudioParamTwinNormalProxyVariantMyNodeTwinNormalParamTwoTwinNormal
    with SimpleDisposable
    implements MyAudioParamTwinNormal {
  final MyNodeTwinNormal _upstream;

  MyAudioParamTwinNormalProxyVariantMyNodeTwinNormalParamTwoTwinNormal(
      this._upstream);

  Future<String> myMethodTwinNormal() => RustLib.instance.api
          .crateApiProxyMyAudioParamTwinNormalMyMethodTwinNormal(
        that: this,
      );
}
