// AUTO-GENERATED FROM frb_example/pure_dart, DO NOT EDIT

// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `protobuf_for_benchmark.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct BinaryTreeProtobuf {
    // message fields
    pub name: ::std::string::String,
    pub left: ::protobuf::SingularPtrField<BinaryTreeProtobuf>,
    pub right: ::protobuf::SingularPtrField<BinaryTreeProtobuf>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BinaryTreeProtobuf {
    fn default() -> &'a BinaryTreeProtobuf {
        <BinaryTreeProtobuf as ::protobuf::Message>::default_instance()
    }
}

impl BinaryTreeProtobuf {
    pub fn new() -> BinaryTreeProtobuf {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .BinaryTreeProtobuf left = 2;


    pub fn get_left(&self) -> &BinaryTreeProtobuf {
        self.left.as_ref().unwrap_or_else(|| <BinaryTreeProtobuf as ::protobuf::Message>::default_instance())
    }
    pub fn clear_left(&mut self) {
        self.left.clear();
    }

    pub fn has_left(&self) -> bool {
        self.left.is_some()
    }

    // Param is passed by value, moved
    pub fn set_left(&mut self, v: BinaryTreeProtobuf) {
        self.left = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_left(&mut self) -> &mut BinaryTreeProtobuf {
        if self.left.is_none() {
            self.left.set_default();
        }
        self.left.as_mut().unwrap()
    }

    // Take field
    pub fn take_left(&mut self) -> BinaryTreeProtobuf {
        self.left.take().unwrap_or_else(|| BinaryTreeProtobuf::new())
    }

    // .BinaryTreeProtobuf right = 3;


    pub fn get_right(&self) -> &BinaryTreeProtobuf {
        self.right.as_ref().unwrap_or_else(|| <BinaryTreeProtobuf as ::protobuf::Message>::default_instance())
    }
    pub fn clear_right(&mut self) {
        self.right.clear();
    }

    pub fn has_right(&self) -> bool {
        self.right.is_some()
    }

    // Param is passed by value, moved
    pub fn set_right(&mut self, v: BinaryTreeProtobuf) {
        self.right = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_right(&mut self) -> &mut BinaryTreeProtobuf {
        if self.right.is_none() {
            self.right.set_default();
        }
        self.right.as_mut().unwrap()
    }

    // Take field
    pub fn take_right(&mut self) -> BinaryTreeProtobuf {
        self.right.take().unwrap_or_else(|| BinaryTreeProtobuf::new())
    }
}

impl ::protobuf::Message for BinaryTreeProtobuf {
    fn is_initialized(&self) -> bool {
        for v in &self.left {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.right {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.left)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.right)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if let Some(ref v) = self.left.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.right.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let Some(ref v) = self.left.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.right.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BinaryTreeProtobuf {
        BinaryTreeProtobuf::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &BinaryTreeProtobuf| { &m.name },
                |m: &mut BinaryTreeProtobuf| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BinaryTreeProtobuf>>(
                "left",
                |m: &BinaryTreeProtobuf| { &m.left },
                |m: &mut BinaryTreeProtobuf| { &mut m.left },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BinaryTreeProtobuf>>(
                "right",
                |m: &BinaryTreeProtobuf| { &m.right },
                |m: &mut BinaryTreeProtobuf| { &mut m.right },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BinaryTreeProtobuf>(
                "BinaryTreeProtobuf",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BinaryTreeProtobuf {
        static instance: ::protobuf::rt::LazyV2<BinaryTreeProtobuf> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BinaryTreeProtobuf::new)
    }
}

impl ::protobuf::Clear for BinaryTreeProtobuf {
    fn clear(&mut self) {
        self.name.clear();
        self.left.clear();
        self.right.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BinaryTreeProtobuf {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BinaryTreeProtobuf {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BlobProtobuf {
    // message fields
    pub first: ::std::vec::Vec<u8>,
    pub second: ::std::vec::Vec<u8>,
    pub third: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BlobProtobuf {
    fn default() -> &'a BlobProtobuf {
        <BlobProtobuf as ::protobuf::Message>::default_instance()
    }
}

impl BlobProtobuf {
    pub fn new() -> BlobProtobuf {
        ::std::default::Default::default()
    }

    // bytes first = 1;


    pub fn get_first(&self) -> &[u8] {
        &self.first
    }
    pub fn clear_first(&mut self) {
        self.first.clear();
    }

    // Param is passed by value, moved
    pub fn set_first(&mut self, v: ::std::vec::Vec<u8>) {
        self.first = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_first(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.first
    }

    // Take field
    pub fn take_first(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.first, ::std::vec::Vec::new())
    }

    // bytes second = 2;


    pub fn get_second(&self) -> &[u8] {
        &self.second
    }
    pub fn clear_second(&mut self) {
        self.second.clear();
    }

    // Param is passed by value, moved
    pub fn set_second(&mut self, v: ::std::vec::Vec<u8>) {
        self.second = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_second(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.second
    }

    // Take field
    pub fn take_second(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.second, ::std::vec::Vec::new())
    }

    // bytes third = 3;


    pub fn get_third(&self) -> &[u8] {
        &self.third
    }
    pub fn clear_third(&mut self) {
        self.third.clear();
    }

    // Param is passed by value, moved
    pub fn set_third(&mut self, v: ::std::vec::Vec<u8>) {
        self.third = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_third(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.third
    }

    // Take field
    pub fn take_third(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.third, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for BlobProtobuf {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.first)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.second)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.third)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.first.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.first);
        }
        if !self.second.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.second);
        }
        if !self.third.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.third);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.first.is_empty() {
            os.write_bytes(1, &self.first)?;
        }
        if !self.second.is_empty() {
            os.write_bytes(2, &self.second)?;
        }
        if !self.third.is_empty() {
            os.write_bytes(3, &self.third)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BlobProtobuf {
        BlobProtobuf::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "first",
                |m: &BlobProtobuf| { &m.first },
                |m: &mut BlobProtobuf| { &mut m.first },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "second",
                |m: &BlobProtobuf| { &m.second },
                |m: &mut BlobProtobuf| { &mut m.second },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "third",
                |m: &BlobProtobuf| { &m.third },
                |m: &mut BlobProtobuf| { &mut m.third },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BlobProtobuf>(
                "BlobProtobuf",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BlobProtobuf {
        static instance: ::protobuf::rt::LazyV2<BlobProtobuf> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BlobProtobuf::new)
    }
}

impl ::protobuf::Clear for BlobProtobuf {
    fn clear(&mut self) {
        self.first.clear();
        self.second.clear();
        self.third.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BlobProtobuf {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BlobProtobuf {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1cprotobuf_for_benchmark.proto\"|\n\x12BinaryTreeProtobuf\x12\x12\n\
    \x04name\x18\x01\x20\x01(\tR\x04name\x12'\n\x04left\x18\x02\x20\x01(\x0b\
    2\x13.BinaryTreeProtobufR\x04left\x12)\n\x05right\x18\x03\x20\x01(\x0b2\
    \x13.BinaryTreeProtobufR\x05right\"R\n\x0cBlobProtobuf\x12\x14\n\x05firs\
    t\x18\x01\x20\x01(\x0cR\x05first\x12\x16\n\x06second\x18\x02\x20\x01(\
    \x0cR\x06second\x12\x14\n\x05third\x18\x03\x20\x01(\x0cR\x05thirdJ\x8c\
    \x03\n\x06\x12\x04\0\0\x0c\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\n\n\x02\
    \x04\0\x12\x04\x02\0\x06\x01\n\n\n\x03\x04\0\x01\x12\x03\x02\x08\x1a\n\
    \x0b\n\x04\x04\0\x02\0\x12\x03\x03\x02\x12\n\x0c\n\x05\x04\0\x02\0\x05\
    \x12\x03\x03\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x03\t\r\n\x0c\n\
    \x05\x04\0\x02\0\x03\x12\x03\x03\x10\x11\n\x0b\n\x04\x04\0\x02\x01\x12\
    \x03\x04\x02\x1e\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x04\x02\x14\n\x0c\
    \n\x05\x04\0\x02\x01\x01\x12\x03\x04\x15\x19\n\x0c\n\x05\x04\0\x02\x01\
    \x03\x12\x03\x04\x1c\x1d\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x05\x02\x1f\n\
    \x0c\n\x05\x04\0\x02\x02\x06\x12\x03\x05\x02\x14\n\x0c\n\x05\x04\0\x02\
    \x02\x01\x12\x03\x05\x15\x1a\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x05\
    \x1d\x1e\n\n\n\x02\x04\x01\x12\x04\x08\0\x0c\x01\n\n\n\x03\x04\x01\x01\
    \x12\x03\x08\x08\x14\n\x0b\n\x04\x04\x01\x02\0\x12\x03\t\x02\x12\n\x0c\n\
    \x05\x04\x01\x02\0\x05\x12\x03\t\x02\x07\n\x0c\n\x05\x04\x01\x02\0\x01\
    \x12\x03\t\x08\r\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\t\x10\x11\n\x0b\n\
    \x04\x04\x01\x02\x01\x12\x03\n\x02\x13\n\x0c\n\x05\x04\x01\x02\x01\x05\
    \x12\x03\n\x02\x07\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\n\x08\x0e\n\
    \x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\n\x11\x12\n\x0b\n\x04\x04\x01\x02\
    \x02\x12\x03\x0b\x02\x12\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x0b\x02\
    \x07\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\x0b\x08\r\n\x0c\n\x05\x04\
    \x01\x02\x02\x03\x12\x03\x0b\x10\x11b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
