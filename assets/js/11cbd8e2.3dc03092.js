"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[2755],{15680:(e,t,r)=>{r.d(t,{xA:()=>o,yg:()=>d});var a=r(96540);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var u=a.createContext({}),p=function(e){var t=a.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},o=function(e){var t=p(e.components);return a.createElement(u.Provider,{value:t},e.children)},y={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,u=e.parentName,o=l(e,["components","mdxType","originalType","parentName"]),c=p(r),d=n,m=c["".concat(u,".").concat(d)]||c[d]||y[d]||i;return r?a.createElement(m,s(s({ref:t},o),{},{components:r})):a.createElement(m,s({ref:t},o))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,s=new Array(i);s[0]=c;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:n,s[1]=l;for(var p=2;p<i;p++)s[p]=r[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}c.displayName="MDXCreateElement"},99928:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>y,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=r(58168),n=(r(96540),r(15680));const i={},s="Dart dynamic type",l={unversionedId:"guides/types/arbitrary/dart-dynamic",id:"guides/types/arbitrary/dart-dynamic",title:"Dart dynamic type",description:"Dart's dynamic is a special type that can hold any type of value. Although it is possible",source:"@site/docs/guides/types/arbitrary/dart-dynamic.md",sourceDirName:"guides/types/arbitrary",slug:"/guides/types/arbitrary/dart-dynamic",permalink:"/flutter_rust_bridge/guides/types/arbitrary/dart-dynamic",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/guides/types/arbitrary/dart-dynamic.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Manual arbitrary Rust type",permalink:"/flutter_rust_bridge/guides/types/arbitrary/rust-opaque"},next:{title:"Two-way Road",permalink:"/flutter_rust_bridge/guides/direction/"}},u={},p=[{value:"Example",id:"example",level:2},{value:"Returning <code>dynamic</code>s",id:"returning-dynamics",level:2}],o={toc:p};function y(e){let{components:t,...r}=e;return(0,n.yg)("wrapper",(0,a.A)({},o,r,{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h1",{id:"dart-dynamic-type"},"Dart dynamic type"),(0,n.yg)("p",null,"Dart's ",(0,n.yg)("inlineCode",{parentName:"p"},"dynamic")," is a special type that can hold any type of value. Although it is possible\nto return a ",(0,n.yg)("inlineCode",{parentName:"p"},"dynamic")," to Dart in the form of ",(0,n.yg)("a",{parentName:"p",href:"https://docs.rs/flutter_rust_bridge/latest/flutter_rust_bridge/ffi/type.DartDynamic.html"},(0,n.yg)("inlineCode",{parentName:"a"},"DartDynamic")),", it is preferable to\nreturn an ",(0,n.yg)("inlineCode",{parentName:"p"},"enum")," instead that has a variant for each type you want to support."),(0,n.yg)("h2",{id:"example"},"Example"),(0,n.yg)("p",null,"Let's say you have a struct that can hold either a ",(0,n.yg)("inlineCode",{parentName:"p"},"u32")," or a ",(0,n.yg)("inlineCode",{parentName:"p"},"String")," and some\nother fields (in a significantly worse design):"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-rust"},"struct MyStruct {\n    a: Optional<u32>,\n    b: Optional<String>,\n}\n\nstruct DataStruct {\n    msg:  String,\n    data: MyStruct,\n}\n")),(0,n.yg)("p",null,"You can define an ",(0,n.yg)("inlineCode",{parentName:"p"},"enum")," in Rust to represent this:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-rust"},"enum MyEnum {\n    U32(u32),\n    String(String),\n}\n")),(0,n.yg)("p",null,"And then you can define a struct that holds this ",(0,n.yg)("inlineCode",{parentName:"p"},"enum"),":"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-rust"},"struct MyStruct {\n    msg:  String,\n    data: MyEnum,\n}\n")),(0,n.yg)("h2",{id:"returning-dynamics"},"Returning ",(0,n.yg)("inlineCode",{parentName:"h2"},"dynamic"),"s"),(0,n.yg)("p",null,"Aside from ",(0,n.yg)("a",{parentName:"p",href:"./dart-opaque"},(0,n.yg)("inlineCode",{parentName:"a"},"DartOpaque")),", you may also return a ",(0,n.yg)("inlineCode",{parentName:"p"},"dynamic")," type to Dart by specifing the return type as ",(0,n.yg)("a",{parentName:"p",href:"https://docs.rs/flutter_rust_bridge/latest/flutter_rust_bridge/ffi/type.DartDynamic.html"},(0,n.yg)("inlineCode",{parentName:"a"},"DartDynamic")),".\n",(0,n.yg)("a",{parentName:"p",href:"https://docs.rs/flutter_rust_bridge/latest/flutter_rust_bridge/ffi/type.DartDynamic.html"},(0,n.yg)("inlineCode",{parentName:"a"},"DartDynamic"))," is the umbrella type for all ",(0,n.yg)("a",{parentName:"p",href:"https://docs.rs/flutter_rust_bridge/latest/flutter_rust_bridge/ffi/io/ffi/enum.DartCObjectType.html"},"C-representable"),"\nDart values, which can be obtained from Rust types that implement\n",(0,n.yg)("a",{parentName:"p",href:"https://docs.rs/flutter_rust_bridge/latest/flutter_rust_bridge/ffi/trait.IntoDart.html"},(0,n.yg)("inlineCode",{parentName:"a"},"IntoDart")),"."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-rust"},'pub fn return_dynamic() -> DartDynamic {\n    vec![\n        ().into_dart(),\n        0i32.into_dart(),\n        format!("Hello there!").into_dart()\n    ].into_dart()\n}\n')),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-dart"},'final dynamic values = await api.returnDynamic();\nassert(values is List<dynamic>);\nassert(values[0] == null);\nassert(values[1] == 0);\nassert(values[2] == "Hello there!");\n')),(0,n.yg)("p",null,(0,n.yg)("a",{parentName:"p",href:"https://docs.rs/flutter_rust_bridge/latest/flutter_rust_bridge/ffi/type.DartDynamic.html"},(0,n.yg)("inlineCode",{parentName:"a"},"DartDynamic"))," is not supported as parameters, and structs that transitively include them may not be used in parameter positions either.\nIf you only care about accepting or returning an opaque Dart object without interacting with it, consider ",(0,n.yg)("a",{parentName:"p",href:"./dart-opaque"},(0,n.yg)("inlineCode",{parentName:"a"},"DartOpaque")),"."),(0,n.yg)("p",null,"This type is meant to be used only as an escape hatch, if your data cannot be expressed as either a fixed ",(0,n.yg)("a",{parentName:"p",href:"../translatable/detailed/struct"},"struct")," or ",(0,n.yg)("a",{parentName:"p",href:"../translatable/detailed/enum"},"enum"),"."))}y.isMDXComponent=!0}}]);