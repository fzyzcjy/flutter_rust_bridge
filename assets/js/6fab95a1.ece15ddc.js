"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[838],{15680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>d});var a=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),u=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=u(e.components);return a.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=u(t),d=r,y=m["".concat(l,".").concat(d)]||m[d]||c[d]||i;return t?a.createElement(y,s(s({ref:n},p),{},{components:t})):a.createElement(y,s({ref:n},p))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,s=new Array(i);s[0]=m;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var u=2;u<i;u++)s[u]=t[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},47854:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var a=t(58168),r=(t(96540),t(15680));const i={},s="Continuous Integration & Deployment (CI/CD)",o={unversionedId:"manual/integrate/library/ci",id:"manual/integrate/library/ci",title:"Continuous Integration & Deployment (CI/CD)",description:"The CI/CD detailed here, using GitHub Actions, automates a lot of the busy work",source:"@site/docs/manual/integrate/07-library/04-ci.md",sourceDirName:"manual/integrate/07-library",slug:"/manual/integrate/library/ci",permalink:"/flutter_rust_bridge/manual/integrate/library/ci",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/manual/integrate/07-library/04-ci.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Android",permalink:"/flutter_rust_bridge/manual/integrate/library/platform-setup/android"},next:{title:"Miscellaneous",permalink:"/flutter_rust_bridge/manual/miscellaneous"}},l={},u=[{value:"Dependabot (<code>/.github/dependabot.yaml</code>)",id:"dependabot-githubdependabotyaml",level:2},{value:"Continuous Integration (<code>/.github/workflows/build.yml</code>)",id:"continuous-integration-githubworkflowsbuildyml",level:2},{value:"Continuous Deployment",id:"continuous-deployment",level:2},{value:"Create new versions with Melos (<code>/.github/workflows/create-release.yml</code>)",id:"create-new-versions-with-melos-githubworkflowscreate-releaseyml",level:3},{value:"Publish new releases to GitHub releases and pub.dev (<code>/.github/workflows/publish-release.yml</code>)",id:"publish-new-releases-to-github-releases-and-pubdev-githubworkflowspublish-releaseyml",level:3}],p={toc:u};function c(e){let{components:n,...t}=e;return(0,r.yg)("wrapper",(0,a.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"continuous-integration--deployment-cicd"},"Continuous Integration & Deployment (CI/CD)"),(0,r.yg)("p",null,"The CI/CD detailed here, using GitHub Actions, automates a lot of the busy work\nthat you would otherwise need to maintain your library. These workflows include:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Automatic dependency updates with dependabot"),(0,r.yg)("li",{parentName:"ul"},"Continuous Integration (CI)",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Unit tests and code checks on pushes/PRs to ",(0,r.yg)("inlineCode",{parentName:"li"},"main")),(0,r.yg)("li",{parentName:"ul"},"Integration tests on real & emulated devices on pushes/PRs to ",(0,r.yg)("inlineCode",{parentName:"li"},"main")))),(0,r.yg)("li",{parentName:"ul"},"Continuous Deployment (CD)",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Manual version/release creation with Melos through a workflow dispatch",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"You can set this up to be automated, but in most cases you ",(0,r.yg)("em",{parentName:"li"},"don't")," want a new release on every commit to main"))),(0,r.yg)("li",{parentName:"ul"},"Automated publishing of new versions to GitHub releases and pub.dev")))),(0,r.yg)("h2",{id:"dependabot-githubdependabotyaml"},"Dependabot (",(0,r.yg)("inlineCode",{parentName:"h2"},"/.github/dependabot.yaml"),")"),(0,r.yg)("p",null,"It is highly recommended that you set up dependabot to automatically submit PRs when\nyour dependencies fall out of date."),(0,r.yg)("p",null,"Replace ",(0,r.yg)("inlineCode",{parentName:"p"},"library_name")," below with your library name."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},'version: 2\nenable-beta-ecosystems: true\nupdates:\n  - package-ecosystem: pub\n    directory: "/packages/library_name"\n    schedule:\n      interval: weekly\n  - package-ecosystem: pub\n    directory: "/packages/library_name/example"\n    schedule:\n      interval: weekly\n  - package-ecosystem: pub\n    directory: "/packages/flutter_library_name"\n    schedule:\n      interval: weekly\n  - package-ecosystem: pub\n    directory: "/packages/flutter_library_name/example"\n    schedule:\n      interval: weekly\n  - package-ecosystem: cargo\n    directory: "/packages/library_name/native"\n    schedule:\n      interval: weekly\n')),(0,r.yg)("h2",{id:"continuous-integration-githubworkflowsbuildyml"},"Continuous Integration (",(0,r.yg)("inlineCode",{parentName:"h2"},"/.github/workflows/build.yml"),")"),(0,r.yg)("p",null,"Replace ",(0,r.yg)("inlineCode",{parentName:"p"},"library_name")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"LibraryName")," below with your library name."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},"name: Build & Test\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n  schedule:\n    # runs the CI everyday at 10AM\n    - cron: \"0 10 * * *\"\n\njobs:\n  # General build, check, and test steps\n  build_and_test:\n    runs-on: ubuntu-latest\n\n    steps:\n      # Setup\n      - uses: actions/checkout@v3\n      - uses: flutter-actions/setup-flutter@v4\n      - uses: bluefireteam/melos-action@v2\n      - uses: dtolnay/rust-toolchain@stable\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Rust\n      - name: Check Rust format\n        working-directory: ./packages/library_name/native/src\n        run: rustfmt --check lib.rs\n      - name: Rust code analysis\n        run: cargo clippy -- -D warnings\n      - name: Run Rust tests\n        run: cargo test\n      - name: Build Rust code for Dart tests\n        run: cargo build -r\n\n      # Dart/Flutter\n      - name: Check Dart format\n        run: melos run check-format --no-select\n      - name: Dart code analysis\n        run: melos run analyze --no-select\n      - name: Run Dart tests\n        run: melos run test\n\n  macos_integration_test:\n    runs-on: macos-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: flutter-actions/setup-flutter@v4\n      - uses: bluefireteam/melos-action@v2\n      - uses: dtolnay/rust-toolchain@stable\n        with:\n          toolchain: stable\n\n      - name: Build the XCFramework\n        run: melos run build:apple\n      - name: Copy the XCFramework to the needed location\n        run: |\n          CURR_VERSION=library_name-v`awk '/^version: /{print $2}' packages/library_name/pubspec.yaml`\n          cp platform-build/LibraryName.xcframework.zip packages/flutter_library_name/macos/Frameworks/$CURR_VERSION.zip\n          echo Copied file!\n\n      - name: Run Flutter integration tests\n        working-directory: packages/flutter_library_name/example\n        run: flutter test -d macos integration_test\n\n  windows_integration_test:\n    runs-on: windows-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: flutter-actions/setup-flutter@v4\n      - uses: bluefireteam/melos-action@v2\n      - uses: goto-bus-stop/setup-zig@v2\n      - uses: KyleMayes/install-llvm-action@v1\n        with:\n          version: \"15\"\n      - uses: dtolnay/rust-toolchain@stable\n        with:\n          toolchain: stable\n\n      - name: Build the binaries\n        run: melos run build:other\n      - name: Copy the binaries to the needed location\n        shell: bash\n        run: |\n          CURR_VERSION=library_name-v`awk '/^version: /{print $2}' packages/library_name/pubspec.yaml`\n          cp platform-build/other.tar.gz packages/flutter_library_name/windows/$CURR_VERSION.tar.gz\n          echo Copied file!\n\n      - name: Run Flutter integration tests\n        working-directory: packages/flutter_library_name/example\n        run: flutter test -d windows integration_test\n\n  linux_integration_test:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install dependencies for flutter integration test\n        run: sudo apt update && sudo apt-get install -y libglu1-mesa ninja-build clang cmake pkg-config libgtk-3-dev liblzma-dev\n      - uses: pyvista/setup-headless-display-action@v1\n      - uses: flutter-actions/setup-flutter@v4\n      - uses: bluefireteam/melos-action@v2\n      - uses: goto-bus-stop/setup-zig@v2\n      - uses: KyleMayes/install-llvm-action@v1\n        with:\n          version: \"15\"\n      - uses: dtolnay/rust-toolchain@stable\n        with:\n          toolchain: stable\n\n      - name: Build the binaries\n        run: melos run build:other\n      - name: Copy the binaries to the needed location\n        run: |\n          CURR_VERSION=library_name-v`awk '/^version: /{print $2}' packages/library_name/pubspec.yaml`\n          cp platform-build/other.tar.gz packages/flutter_library_name/linux/$CURR_VERSION.tar.gz\n          echo Copied file!\n\n      - name: Run Flutter integration tests\n        working-directory: packages/flutter_library_name/example\n        run: flutter test -d linux integration_test\n\n  ios_integration_test:\n    runs-on: macos-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: flutter-actions/setup-flutter@v4\n      - uses: bluefireteam/melos-action@v2\n      - uses: dtolnay/rust-toolchain@stable\n        with:\n          toolchain: stable\n\n      - name: Start iOS Simulator\n        run: |\n          DEVICE_ID=$(xcrun xctrace list devices | grep iPhone | head -1 | awk '{print $NF}' | tr -d '()')\n          echo \"DEVICE_ID=$DEVICE_ID\" >> $GITHUB_ENV\n          xcrun simctl boot $DEVICE_ID\n\n      - name: Build the XCFramework\n        run: melos run build:apple\n      - name: Copy the XCFramework to the needed location\n        run: |\n          CURR_VERSION=library_name-v`awk '/^version: /{print $2}' packages/library_name/pubspec.yaml`\n          cp platform-build/LibraryName.xcframework.zip packages/flutter_library_name/ios/Frameworks/$CURR_VERSION.zip\n          echo Copied file!\n\n      - name: Run Flutter integration tests\n        working-directory: packages/flutter_library_name/example\n        run: flutter test -d ${{ env.DEVICE_ID }} integration_test\n\n  android_integration_test:\n    runs-on: macos-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: flutter-actions/setup-flutter@v4\n      - uses: bluefireteam/melos-action@v2\n      - uses: dtolnay/rust-toolchain@stable\n        with:\n          toolchain: stable\n      - uses: nttld/setup-ndk@v1\n        with:\n          ndk-version: r25b\n      - uses: actions/setup-java@v3\n        with:\n          distribution: zulu\n          java-version: \"11.x\"\n\n      - name: Build the binaries\n        run: melos run build:android\n      - name: Copy the binaries to the needed location\n        run: |\n          CURR_VERSION=library_name-v`awk '/^version: /{print $2}' packages/library_name/pubspec.yaml`\n          cp platform-build/android.tar.gz packages/flutter_library_name/android/$CURR_VERSION.tar.gz\n          echo Copied file!\n\n      - name: Run Flutter integration tests\n        uses: Wandalen/wretry.action@master # sometimes android tests are flaky\n        with:\n          attempt_limit: 5\n          action: reactivecircus/android-emulator-runner@v2\n          with: |\n            api-level: 33\n            target: google_apis\n            arch: x86_64\n            ram-size: 1024M\n            disk-size: 2048M\n            script: cd packages/flutter_library_name/example && flutter test -d `flutter devices | grep android | tr ' ' '\\n' | grep emulator-` integration_test\n")),(0,r.yg)("h2",{id:"continuous-deployment"},"Continuous Deployment"),(0,r.yg)("p",null,"There are two files you need for CD:"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"Create new versions/releases with Melos"),(0,r.yg)("li",{parentName:"ol"},"Publish new releases to GitHub releases and pub.dev")),(0,r.yg)("h3",{id:"create-new-versions-with-melos-githubworkflowscreate-releaseyml"},"Create new versions with Melos (",(0,r.yg)("inlineCode",{parentName:"h3"},"/.github/workflows/create-release.yml"),")"),(0,r.yg)("p",null,'You can create new releases of your library with this workflow by going to the\n"Actions" tab in your GitHub repo and manually starting this workflow with an\nappropriate option. The options are:'),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"--")," -> call ",(0,r.yg)("inlineCode",{parentName:"li"},"melos version")," with no additional parameters"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"--prerelease")," -> create a prerelease version instead of normal release (e.g., ",(0,r.yg)("inlineCode",{parentName:"li"},"1.0.0-dev.0"),")"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"--graduate")," -> graduate a prerelease version to a normal release (e.g., ",(0,r.yg)("inlineCode",{parentName:"li"},"1.0.0-dev.0")," becomes ",(0,r.yg)("inlineCode",{parentName:"li"},"1.0.0"),")")),(0,r.yg)("p",null,"You will need to set a repository secret of ",(0,r.yg)("inlineCode",{parentName:"p"},"BOT_ACCESS_TOKEN")," to your GitHub personal access token (PAT)\nto allow for pushes to main from this Action."),(0,r.yg)("p",null,"Change ",(0,r.yg)("inlineCode",{parentName:"p"},"YourName")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"your-email@example.com")," below as appropriate."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},'name: Create Release(s)\n\non:\n  workflow_dispatch:\n    inputs:\n      version_parameters:\n        description: \'Parameters to pass to "melos version"\'\n        required: true\n        default: " "\n        type: choice\n        options:\n          - "--"\n          - "--prerelease"\n          - "--graduate"\n\njobs:\n  create_release:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          token: ${{ secrets.BOT_ACCESS_TOKEN }}\n          fetch-depth: 0\n      - name: Setup git\n        run: |\n          git config user.name "YourName"\n          git config user.email "your-email@example.com"\n      - uses: flutter-actions/setup-flutter@v4\n      - uses: bluefireteam/melos-action@v2\n\n      - name: Create the new version(s)\n        run: melos version --yes ${{ inputs.version_parameters }}\n\n      - name: Push created version commit\n        run: git push\n      - name: Push modified tags\n        run: git push --tags\n')),(0,r.yg)("h3",{id:"publish-new-releases-to-github-releases-and-pubdev-githubworkflowspublish-releaseyml"},"Publish new releases to GitHub releases and pub.dev (",(0,r.yg)("inlineCode",{parentName:"h3"},"/.github/workflows/publish-release.yml"),")"),(0,r.yg)("p",null,"In order for this workflow to execute correctly and publish packages to pub.dev,\nyou need to have the contents of your pub credentials JSON file in a GitHub repo secret."),(0,r.yg)("p",null,"First you need to sign-in into your pub account locally by\nrunning the following command: ",(0,r.yg)("inlineCode",{parentName:"p"},"dart pub login"),"."),(0,r.yg)("p",null,"After the authorization is completed, open the credentials file, which can be found:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"On Linux, at ",(0,r.yg)("inlineCode",{parentName:"li"},"~/.config/dart/pub-credentials.json")),(0,r.yg)("li",{parentName:"ul"},"On macOS, at ",(0,r.yg)("inlineCode",{parentName:"li"},"~/Library/Application Support/dart/pub-credentials.json")),(0,r.yg)("li",{parentName:"ul"},"On Windows, at ",(0,r.yg)("inlineCode",{parentName:"li"},"C:\\Users\\YourUsername\\AppData\\Roaming\\dart\\pub-credentials.json"))),(0,r.yg)("p",null,"And copy the contents of this ",(0,r.yg)("inlineCode",{parentName:"p"},"pub-credentials.json")," file to a new GitHub repo secret named ",(0,r.yg)("inlineCode",{parentName:"p"},"PUB_CRED_JSON"),"."),(0,r.yg)("p",null,"This workflow is set to execute whenever new version tags are pushed up to GitHub."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},'name: Publish Release(s)\n\non:\n  push:\n    tags:\n      - "*"\n\njobs:\n  publish_github_release:\n    # macOS because we can cross-compile to all other platforms from it\n    runs-on: macos-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: flutter-actions/setup-flutter@v4\n      - uses: bluefireteam/melos-action@v2\n      - uses: goto-bus-stop/setup-zig@v2\n      - uses: KyleMayes/install-llvm-action@v1\n        with:\n          version: "15"\n      - uses: dtolnay/rust-toolchain@stable\n        with:\n          toolchain: stable\n      - uses: nttld/setup-ndk@v1\n        with:\n          ndk-version: r25b\n\n      - name: Build all library binaries\n        run: melos run build\n\n      - name: Create GitHub release\n        uses: softprops/action-gh-release@v1\n        with:\n          files: platform-build/*\n\n  publish_pub_release:\n    needs: publish_github_release\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: flutter-actions/setup-flutter@v4\n      - uses: bluefireteam/melos-action@v2\n      - name: Setup pub.dev credentials\n        run: |\n          mkdir -p $HOME/.config/dart\n          cat << EOF > $HOME/.config/dart/pub-credentials.json\n          ${{ secrets.PUB_CRED_JSON }}\n          EOF\n      - name: Dry-run publish to pub.dev\n        run: melos publish -y --dry-run\n      - name: Publish to pub.dev\n        run: melos publish -y --no-dry-run\n')))}c.isMDXComponent=!0}}]);