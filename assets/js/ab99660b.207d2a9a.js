"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[8822],{15680:(e,t,n)=>{n.d(t,{xA:()=>s,yg:()=>m});var r=n(96540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),d=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=d(e.components);return r.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),g=d(n),m=a,y=g["".concat(u,".").concat(m)]||g[m]||p[m]||i;return n?r.createElement(y,l(l({ref:t},s),{},{components:n})):r.createElement(y,l({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=g;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var d=2;d<i;d++)l[d]=n[d];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},70536:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var r=n(58168),a=(n(96540),n(15680));const i={},l="Overview",o={unversionedId:"guides/contributing/overview",id:"guides/contributing/overview",title:"Overview",description:"It is not a prerequisite to go through these documents before making a PR,",source:"@site/docs/guides/contributing/overview.md",sourceDirName:"guides/contributing",slug:"/guides/contributing/overview",permalink:"/flutter_rust_bridge/guides/contributing/overview",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/guides/contributing/overview.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Contributor guide & Implementations",permalink:"/flutter_rust_bridge/guides/contributing/"},next:{title:"Submodules",permalink:"/flutter_rust_bridge/guides/contributing/submodules/"}},u={},d=[{value:"Prelude",id:"prelude",level:2},{value:"Want to know more? Tell me",id:"want-to-know-more-tell-me",level:2},{value:"Main components and phases",id:"main-components-and-phases",level:2},{value:"Directory structure",id:"directory-structure",level:2},{value:"Code generator overview",id:"code-generator-overview",level:2},{value:"The story of a function call",id:"the-story-of-a-function-call",level:2},{value:"The codec",id:"the-codec",level:2}],s={toc:d};function p(e){let{components:t,...n}=e;return(0,a.yg)("wrapper",(0,r.A)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"overview"},"Overview"),(0,a.yg)("admonition",{type:"tip"},(0,a.yg)("p",{parentName:"admonition"},"It is not a prerequisite to go through these documents before making a PR,\nand these are here for completeness and cases when one needs to dig deeper into the internals.\nIn addition, feel free to ping me (@fzyzcjy) to ask for hints and suggestions on implementation.")),(0,a.yg)("h2",{id:"prelude"},"Prelude"),(0,a.yg)("p",null,"Firstly, welcome, and thanks for your contributions!"),(0,a.yg)("p",null,"If you want to contribute, feel free to create a ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/fzyzcjy/flutter_rust_bridge/pulls"},"Pull Request"),". If you need some ideas of what to contribute, have a look at the ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/fzyzcjy/flutter_rust_bridge/issues"},"Issues section")," of this repository."),(0,a.yg)("p",null,"For a checklist, have a look at the ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/fzyzcjy/flutter_rust_bridge/blob/master/.github/PULL_REQUEST_TEMPLATE.md"},"PR template"),"."),(0,a.yg)("h2",{id:"want-to-know-more-tell-me"},"Want to know more? Tell me"),(0,a.yg)("p",null,"What do you want to know? Feel free to create an issue in GitHub, and I will tell more :)"),(0,a.yg)("h2",{id:"main-components-and-phases"},"Main components and phases"),(0,a.yg)("p",null,"There are two phases:"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("strong",{parentName:"li"},"Code generation"),":\nWhen user runs ",(0,a.yg)("inlineCode",{parentName:"li"},"flutter_rust_bridge_codegen generate"),",\ninputs are parsed and Rust/Dart code are automatically generated.",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Corresponding components: ",(0,a.yg)("inlineCode",{parentName:"li"},"frb_codegen")))),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("strong",{parentName:"li"},"Running"),":\nWhen user runs the app,\nthe generated code works together with runtime code.",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Corresponding components: ",(0,a.yg)("inlineCode",{parentName:"li"},"frb_dart"),", ",(0,a.yg)("inlineCode",{parentName:"li"},"frb_rust"))))),(0,a.yg)("h2",{id:"directory-structure"},"Directory structure"),(0,a.yg)("admonition",{type:"tip"},(0,a.yg)("p",{parentName:"admonition"},"There is no need to read it word by word, since it serves as a reference to find the related directories.")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"frb_codegen")," (",(0,a.yg)("inlineCode",{parentName:"li"},"flutter_rust_bridge_codegen")," binary): Code generator. It inputs Rust files and generates Rust and Dart files."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"frb_example"),": Examples.",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"pure_dart"),": A pure-Dart example + contains most tests."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"dart_minimal"),": Minimalist pure-Dart example. Suitable as a playground."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"flutter_via_create")," / ",(0,a.yg)("inlineCode",{parentName:"li"},"flutter_via_integrate"),": Examples automatically generated via ",(0,a.yg)("inlineCode",{parentName:"li"},"flutter_rust_bridge_codegen create/integrate"),"."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"deliberate_bad"),": Deliberately buggy code to check sanitizers catch them."))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"frb_dart")," (",(0,a.yg)("inlineCode",{parentName:"li"},"flutter_rust_bridge")," Dart package): Support library for Dart - to be imported by users."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"frb_rust")," (",(0,a.yg)("inlineCode",{parentName:"li"},"flutter_rust_bridge")," Rust package): Support library for Rust - to be imported by users."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"frb_macros"),": Indeed part of ",(0,a.yg)("inlineCode",{parentName:"li"},"frb_rust"),". ",(0,a.yg)("small",null,"It is a separate package simply because limitation of proc macros.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"frb_utils"),": Utilities that may be published later."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"tools/frb_internal"),": Internal utilities for development of this library."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"website"),": The documentation."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},".github"),": GitHub-related.",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"workflows/ci.yaml"),": Definition of CI workflows.")))),(0,a.yg)("h2",{id:"code-generator-overview"},"Code generator overview"),(0,a.yg)("admonition",{type:"tip"},(0,a.yg)("p",{parentName:"admonition"},"There seems to be a lot of files in ",(0,a.yg)("inlineCode",{parentName:"p"},"frb_codegen"),",\nbut that is because I choose to modularize and keep each file focused and minimal.")),(0,a.yg)("p",null,"When someone runs ",(0,a.yg)("inlineCode",{parentName:"p"},"flutter_rust_bridge_codegen generate"),", the workflow is as follows:"),(0,a.yg)("mermaid",{value:"flowchart LR\nrust_input[Rust input] -- Parser --\x3e IR\nIR -- Generator --\x3e rust_dart[Rust and Dart output]"}),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"The input is the user-provided handwritten Rust code, usually user's ",(0,a.yg)("inlineCode",{parentName:"li"},"rust/src/api/**")," folder."),(0,a.yg)("li",{parentName:"ul"},"The parser converts the input code into IR (intermediate representations)."),(0,a.yg)("li",{parentName:"ul"},"IR is a data structure that represents the information of the code that we are interested in."),(0,a.yg)("li",{parentName:"ul"},"The generator converts the IR into final outputs."),(0,a.yg)("li",{parentName:"ul"},"The outputs are written to corresponding files."),(0,a.yg)("li",{parentName:"ul"},"Remark: There are also ",(0,a.yg)("inlineCode",{parentName:"li"},"preparer")," (to prepare environments) and ",(0,a.yg)("inlineCode",{parentName:"li"},"polisher")," (to do postprocessing).")),(0,a.yg)("p",null,"The ",(0,a.yg)("strong",{parentName:"p"},"generator")," part is naturally splitted into:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"api_dart"),": Generate direct user-facing files,\nlike ",(0,a.yg)("a",{parentName:"li",href:"https://github.com/fzyzcjy/flutter_rust_bridge/blob/master/frb_example/flutter_via_create/lib/src/rust/api/simple.dart"},"this one"),".\nIt is very thin, and forwards all function calls to the wire."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"wire/rust"),", ",(0,a.yg)("inlineCode",{parentName:"li"},"wire/dart"),", ",(0,a.yg)("inlineCode",{parentName:"li"},"wire/c"),": Generate the actual work to communicate between Rust and Dart,\ni.e. ",(0,a.yg)("inlineCode",{parentName:"li"},"frb_generated*.dart")," and ",(0,a.yg)("inlineCode",{parentName:"li"},"frb_generated*.rs"),".")),(0,a.yg)("h2",{id:"the-story-of-a-function-call"},"The story of a function call"),(0,a.yg)("admonition",{title:"Hint",type:"info"},(0,a.yg)("p",{parentName:"admonition"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"frb_example/dart_minimal")," sample is useful when you want to look at the generated code,\nsince it only has one function so the generated code is very short.")),(0,a.yg)("p",null,"Consider a very simple Rust function\n",(0,a.yg)("inlineCode",{parentName:"p"},"fn f(arg: String) {}"),"\ncalled in Dart\n(",(0,a.yg)("inlineCode",{parentName:"p"},"await f(arg: 'Hello')"),").\nWhat happens under the hood during the function call?"),(0,a.yg)("p",null,"In short, the user call invokes the Dart API layer, then Dart Wire layer, then Rust Wire layer,\nand finally Rust API layer.\nThen the reverse happens to pass the return value back to Dart."),(0,a.yg)("mermaid",{value:"flowchart LR\nuser_call[User call] --\x3e dart_api[Dart API]\ndart_api --\x3e dart_wire[Dart Wire]\ndart_wire --\x3e rust_wire[Rust Wire]\nrust_wire --\x3e rust_api[Rust API]"}),(0,a.yg)("p",null,"If you want to know more details, here is a table.\n(Code are adapted to ease understanding, thus it does not reflect actual details.)"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Name"),(0,a.yg)("th",{parentName:"tr",align:null},"Sample Location"),(0,a.yg)("th",{parentName:"tr",align:null},"Sample code"),(0,a.yg)("th",{parentName:"tr",align:null},"Source"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"User call"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"lib/main.dart")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"print(f('Hello'));")),(0,a.yg)("td",{parentName:"tr",align:null},"User provided")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Dart API"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"lib/src/rust/api/minimal.dart"),",",(0,a.yg)("br",null),(0,a.yg)("inlineCode",{parentName:"td"},"lib/src/rust/frb_generated.dart")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"void f(String arg) => wire_f(codec.encode(arg))")),(0,a.yg)("td",{parentName:"tr",align:null},"Generated")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Dart Wire"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"lib/src/rust/frb_generated.dart")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"void wire_f(char* ptr, int len); /* extern function */")),(0,a.yg)("td",{parentName:"tr",align:null},"Generated")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Rust Wire"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"rust/src/frb_generated.rs")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"fn wire_f(ptr: *mut u8, len: i32) { f(codec.decode(ptr, len)) }")),(0,a.yg)("td",{parentName:"tr",align:null},"Generated")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Rust API"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"rust/src/api/minimal.rs")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"fn f(arg: String) { user_code }")),(0,a.yg)("td",{parentName:"tr",align:null},"User provided")))),(0,a.yg)("p",null,"More details are discussed in the concrete submodules, ",(0,a.yg)("a",{parentName:"p",href:"submodules/cst-codec"},"CST codec")," and ",(0,a.yg)("a",{parentName:"p",href:"submodules/dco-codec"},"DCO codec"),"."),(0,a.yg)("h2",{id:"the-codec"},"The codec"),(0,a.yg)("admonition",{type:"info"},(0,a.yg)("p",{parentName:"admonition"},"If you want to add a feature, there is ",(0,a.yg)("strong",{parentName:"p"},"no need")," to implement for all codecs.\nIf you like, you can only implement for one codec.")),(0,a.yg)("p",null,'During the function call, codecs are used to convert between normal Dart/Rust data\nand the corresponding Dart/Rust "wire" data.\nCurrently, we have three codecs. A brief introduction is in ',(0,a.yg)("a",{parentName:"p",href:"../miscellaneous/codec"},"this page"),"."),(0,a.yg)("p",null,"Therefore, if you see modules named ",(0,a.yg)("inlineCode",{parentName:"p"},"cst"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"dco"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"sse"),", they correspond to the codecs."))}p.isMDXComponent=!0}}]);