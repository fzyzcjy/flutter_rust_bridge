"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[5029],{15680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>d});var a=n(96540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),g=u(n),d=r,y=g["".concat(l,".").concat(d)]||g[d]||c[d]||i;return n?a.createElement(y,o(o({ref:t},p),{},{components:n})):a.createElement(y,o({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var u=2;u<i;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},94319:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var a=n(58168),r=(n(96540),n(15680));const i={},o="Properties (Accessors)",s={unversionedId:"guides/types/arbitrary/rust-auto-opaque/properties",id:"guides/types/arbitrary/rust-auto-opaque/properties",title:"Properties (Accessors)",description:"The pub fields of an opaque struct will be automatically translated,",source:"@site/docs/guides/types/arbitrary/rust-auto-opaque/properties.md",sourceDirName:"guides/types/arbitrary/rust-auto-opaque",slug:"/guides/types/arbitrary/rust-auto-opaque/properties",permalink:"/flutter_rust_bridge/guides/types/arbitrary/rust-auto-opaque/properties",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/guides/types/arbitrary/rust-auto-opaque/properties.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Override opaqueness",permalink:"/flutter_rust_bridge/guides/types/arbitrary/rust-auto-opaque/override-defaults"},next:{title:"Opaque inside translatable",permalink:"/flutter_rust_bridge/guides/types/arbitrary/rust-auto-opaque/opaque-in-translatable"}},l={},u=[{value:"Example",id:"example",level:2},{value:"Disabling the automatic accessors",id:"disabling-the-automatic-accessors",level:2},{value:"Caveats",id:"caveats",level:2},{value:"Problem description",id:"problem-description",level:3},{value:"Solution 1",id:"solution-1",level:3},{value:"Solution 2",id:"solution-2",level:3},{value:"Solution 3",id:"solution-3",level:3}],p={toc:u};function c(e){let{components:t,...n}=e;return(0,r.yg)("wrapper",(0,a.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"properties-accessors"},"Properties (Accessors)"),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"pub")," fields of an opaque struct will be automatically translated,\nsuch that it can be used as if it is a normal field."),(0,r.yg)("h2",{id:"example"},"Example"),(0,r.yg)("p",null,"Suppose we have the following opaque type:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},"pub struct MyOpaqueType {\n    pub name: String,\n    #[frb(ignore)]\n    pub no_accessor: String,\n    db: Database,\n}\n")),(0,r.yg)("p",null,"Then, the public field, ",(0,r.yg)("inlineCode",{parentName:"p"},"name"),", will be recognized. The getters and setters will be generated:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-dart"},"// Auto-generated class\nclass MyOpaqueType {\n    String get name => ...;\n    set name(String value) => ...;\n    ...\n}\n")),(0,r.yg)("p",null,"Then, we can use it as if it is a normal field:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-dart"},"var object = MyOpaqueType();\nobject.name += 'a';\nprint('Hi ${object.name}');\n")),(0,r.yg)("h2",{id:"disabling-the-automatic-accessors"},"Disabling the automatic accessors"),(0,r.yg)("p",null,"Sometimes we don't want all or any of the ",(0,r.yg)("inlineCode",{parentName:"p"},"pub")," fields to have accessors\nautomatically generated for them. For this case you can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"ignore")," and\n",(0,r.yg)("inlineCode",{parentName:"p"},"ignore_all")," attributes."),(0,r.yg)("p",null,"Adding the ",(0,r.yg)("inlineCode",{parentName:"p"},"ignore")," attribute to a field will disable the automatic accessor\nfrom being generated for that field. Using the ",(0,r.yg)("inlineCode",{parentName:"p"},"ignore_all")," attribute on a\nstruct is equivalent to applying the ",(0,r.yg)("inlineCode",{parentName:"p"},"ignore")," attribute to all of its fields."),(0,r.yg)("p",null,"When using ",(0,r.yg)("inlineCode",{parentName:"p"},"ignore_all")," you can allow accessors from being generated only for\nspecific fields by annotating those fields with the ",(0,r.yg)("inlineCode",{parentName:"p"},"unignore")," attribute.\nThe names are experimental and may change in the future."),(0,r.yg)("h2",{id:"caveats"},"Caveats"),(0,r.yg)("admonition",{type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"There is no need to memorize anything here (or anything in doc) -\nthe code generator will provide warnings when detecting non-best-practices.")),(0,r.yg)("h3",{id:"problem-description"},"Problem description"),(0,r.yg)("p",null,"Because borrowed types are not (yet) supported, the current implementation clones the field when reading it.\nThis is no problem when the field type is something like integers, Strings, or ",(0,r.yg)("inlineCode",{parentName:"p"},"RustAutoOpaque<T>"),"s.\nHowever, it may be confusing in some scenarios.\nFor example,"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},"#[frb(opaque)]\npub struct A {\n    pub b: B,\n}\n\n#[frb(opaque)]\npub struct B {\n    pub c: i32,\n}\n")),(0,r.yg)("p",null,"Then, usage like"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-dart"},"var a = A(...);\na.b.c += 1;\nprint(a.b.c); // unchanged\n")),(0,r.yg)("p",null,"may be confusing since the ",(0,r.yg)("inlineCode",{parentName:"p"},"a.b.c")," is not changed.\nThis is because each access to ",(0,r.yg)("inlineCode",{parentName:"p"},"a.b")," creates a brand new ",(0,r.yg)("inlineCode",{parentName:"p"},"B")," instance."),(0,r.yg)("h3",{id:"solution-1"},"Solution 1"),(0,r.yg)("p",null,"One solution is to just add ",(0,r.yg)("inlineCode",{parentName:"p"},"RustAutoOpaque<...>")," like below.\nIt will not affect other things, for example, the generated type will still be ",(0,r.yg)("inlineCode",{parentName:"p"},"B"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},"pub struct A {\n    pub b: RustAutoOpaque<B>,\n}\n")),(0,r.yg)("p",null,"It works because ",(0,r.yg)("inlineCode",{parentName:"p"},"RustAutoOpaque<T>")," is indeed an ",(0,r.yg)("inlineCode",{parentName:"p"},"Arc"),",\nthus the cloned ",(0,r.yg)("inlineCode",{parentName:"p"},"b")," will point to the very same object instead of a brand new object."),(0,r.yg)("p",null,"To create/read/write objects of type ",(0,r.yg)("inlineCode",{parentName:"p"},"RustAutoOpaque<...>"),", please refer to ",(0,r.yg)("a",{parentName:"p",href:"struct"},"this page"),"."),(0,r.yg)("h3",{id:"solution-2"},"Solution 2"),(0,r.yg)("p",null,"Another way is to make the struct non-opaque (possibly by adding ",(0,r.yg)("inlineCode",{parentName:"p"},"#[frb(non_opaque)]"),"). "),(0,r.yg)("h3",{id:"solution-3"},"Solution 3"),(0,r.yg)("p",null,"Yet another way is to utilize the ",(0,r.yg)("a",{parentName:"p",href:"../../../misc-features/proxy"},"proxy")," feature."),(0,r.yg)("p",null,"This may be the default generated code instead in the future.\nIf this simplifies your scenario a lot, feel free to create an issue to discuss."))}c.isMDXComponent=!0}}]);