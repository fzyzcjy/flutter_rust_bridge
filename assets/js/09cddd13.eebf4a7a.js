"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[263],{15680:(e,t,n)=>{n.d(t,{xA:()=>d,yg:()=>g});var r=n(96540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),l=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=l(n),g=a,m=c["".concat(u,".").concat(g)]||c[g]||p[g]||o;return n?r.createElement(m,i(i({ref:t},d),{},{components:n})):r.createElement(m,i({ref:t},d))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=c;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},2234:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>_,contentTitle:()=>h,default:()=>w,frontMatter:()=>f,metadata:()=>b,toc:()=>y});var r=n(58168),a=(n(96540),n(15680));const o={toc:[]};function i(e){let{components:t,...n}=e;return(0,a.yg)("wrapper",(0,r.A)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"Flutter/Dart <-> Rust binding generator, feature-rich, but seamless and simple\n\nUsage: flutter_rust_bridge_codegen [OPTIONS] <COMMAND>\n\nCommands:\n  generate   Execute the main code generator\n  create     Create a new Flutter + Rust project\n  integrate  Integrate Rust into existing Flutter project\n  build-web  Compile for the Web (WASM)\n  help       Print this message or the help of the given subcommand(s)\n\nOptions:\n  -v, --verbose  Show debug messages\n  -h, --help     Print help\n  -V, --version  Print version\n")))}i.isMDXComponent=!0;const s={toc:[]};function u(e){let{components:t,...n}=e;return(0,a.yg)("wrapper",(0,r.A)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"Execute the main code generator\n\nUsage: flutter_rust_bridge_codegen generate [OPTIONS]\n\nOptions:\n      --watch\n          Automatically re-generate the output whenever the changes are detected on the input files\n\n      --config-file <CONFIG_FILE>\n          Path to a YAML config file.\n          \n          If present, other options and flags will be ignored. Accepts the same options as the CLI, but uses snake_case keys.\n\n  -r, --rust-input <RUST_INPUT>\n          Input Rust files, such as `crate::api,crate::hello::world,another-third-party-crate`\n\n  -d, --dart-output <DART_OUTPUT>\n          Directory of output generated Dart code\n\n  -c, --c-output <C_OUTPUT>\n          Output path of generated C header\n\n      --duplicated-c-output <DUPLICATED_C_OUTPUT>\n          Duplicate the files generated at the location `--c-output` specifies\n\n      --rust-root <RUST_ROOT>\n          Crate directory for your Rust project\n\n      --rust-output <RUST_OUTPUT>\n          Output path of generated Rust code\n\n      --dart-entrypoint-class-name <DART_ENTRYPOINT_CLASS_NAME>\n          Generated dart entrypoint class name\n\n      --dart-format-line-length <DART_FORMAT_LINE_LENGTH>\n          Line length for Dart formatting\n\n      --dart-preamble <DART_PREAMBLE>\n          Raw header of output generated Dart code, pasted as-it-is\n\n      --rust-preamble <RUST_PREAMBLE>\n          Raw header of output generated Rust code, pasted as-it-is\n\n      --no-dart-enums-style\n          The generated Dart enums will not have their variant names camelCased\n\n      --no-add-mod-to-lib\n          Skip automatically adding `mod frb_generated;` to `lib.rs`\n\n      --llvm-path <LLVM_PATH>...\n          Path to the installed LLVM\n\n      --llvm-compiler-opts <LLVM_COMPILER_OPTS>\n          LLVM compiler opts\n\n      --dart-root <DART_ROOT>...\n          Path to root of Dart project, otherwise inferred from --dart-output\n\n      --no-build-runner\n          Skip running build_runner even when codegen-required code is detected\n\n      --extra-headers <EXTRA_HEADERS>\n          extra_headers is used to add dependencies header\n\n      --no-web\n          Disable web module generation\n\n      --no-deps-check\n          Skip dependencies check\n\n      --default-external-library-loader-web-prefix <DEFAULT_EXTERNAL_LIBRARY_LOADER_WEB_PREFIX>\n          The value for defaultExternalLibraryLoader.webPrefix\n\n      --no-dart3\n          Disable language features introduced in Dart 3\n\n      --full-dep\n          Enable full dependencies\n\n      --enable-lifetime\n          Enable parsing types with lifetimes (e.g. references and borrows)\n\n      --type-64bit-int\n          Let 64 bit types be translated to `int`s instead of types like `BigInt`s\n\n      --no-default-dart-async\n          Whether default Dart code is asynchronous or synchronous\n\n      --no-auto-upgrade-dependency\n          Whether to skip auto upgrading the dependencies\n\n      --parse-const\n          Whether to automatically parse constants\n\n      --stop-on-error\n          If having error when, for example, parsing a function, directly stop instead of continue and skip it\n\n      --dump [<DUMP>...]\n          A list of data to be dumped. If specified without a value, defaults to all\n          \n          [possible values: config, source, hir, mir, generator-info, generator-spec, generator-text]\n\n      --dump-all\n          Dump all internal data. Same as `--dump` with all possible choices chosen\n\n      --rust-features <RUST_FEATURES>\n          List of cargo feature flags to enable when generating\n\n  -h, --help\n          Print help (see a summary with '-h')\n")))}u.isMDXComponent=!0;const l={toc:[]};function d(e){let{components:t,...n}=e;return(0,a.yg)("wrapper",(0,r.A)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},'Build for web platform\n\nUsage: flutter_rust_bridge build-web [arguments]\n-h, --help                          Print this usage information.\n    --dart-root                     Root folder of dart package\n-c, --rust-root                     Directory of the rust package\n                                    (defaults to "rust")\n-o, --output=<PKG>                  Output path\n    --release                       Compile in release mode\n-v, --[no-]verbose                  Display more verbose information\n    --cargo-build-args              Arguments passed to cargo-build\n    --wasm-bindgen-args             Arguments passed to wasm-bindgen\n    --wasm-pack-rustup-toolchain    Override RUSTUP_TOOLCHAIN environment variable when running wasm-pack\n    --wasm-pack-rustflags           Override RUSTFLAGS environment variable when running wasm-pack\n    --dart-compile-js-entrypoint    If specified, compile Dart into JavaScript and use this option as entrypoint\n\nRun "flutter_rust_bridge help" to see global options.\n')))}d.isMDXComponent=!0;const p={toc:[]};function c(e){let{components:t,...n}=e;return(0,a.yg)("wrapper",(0,r.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"Create a new Flutter + Rust project\n\nUsage: flutter_rust_bridge_codegen create [OPTIONS] <NAME>\n\nArguments:\n  <NAME>\n          Name of the new project\n\nOptions:\n      --org <ORG>\n          The organization responsible for your new Flutter project, in reverse domain name notation\n\n      --rust-crate-name <RUST_CRATE_NAME>\n          The name of the generated Rust crate\n\n      --rust-crate-dir <RUST_CRATE_DIR>\n          The directory of the generated Rust crate, relative to the project path\n\n  -t, --template <TEMPLATE>\n          The template type to use to generate the flutter files\n          \n          [default: app]\n\n          Possible values:\n          - app:    (default) a Flutter application\n          - plugin: A shareable Flutter project that can be used across multiple Flutter applications\n\n  -h, --help\n          Print help (see a summary with '-h')\n")))}c.isMDXComponent=!0;const g={toc:[]};function m(e){let{components:t,...n}=e;return(0,a.yg)("wrapper",(0,r.A)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"Integrate Rust into existing Flutter project\n\nUsage: flutter_rust_bridge_codegen integrate [OPTIONS]\n\nOptions:\n      --no-enable-integration-test\n          Generate code related to integration test\n\n      --rust-crate-name <RUST_CRATE_NAME>\n          The name of the generated Rust crate\n\n      --rust-crate-dir <RUST_CRATE_DIR>\n          The directory of the generated Rust crate, relative to the project path\n\n  -t, --template <TEMPLATE>\n          The template type to use for integration. This should usually match the type of flutter project being integrating with\n          \n          [default: app]\n\n          Possible values:\n          - app:    (default) a Flutter application\n          - plugin: A shareable Flutter project that can be used across multiple Flutter applications\n\n  -h, --help\n          Print help (see a summary with '-h')\n")))}m.isMDXComponent=!0;const f={},h="Full list of parameters",b={unversionedId:"guides/custom/codegen/full-list",id:"guides/custom/codegen/full-list",title:"Full list of parameters",description:"In this page, we show explanation of each parameter.",source:"@site/docs/guides/custom/codegen/full-list.md",sourceDirName:"guides/custom/codegen",slug:"/guides/custom/codegen/full-list",permalink:"/flutter_rust_bridge/guides/custom/codegen/full-list",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/guides/custom/codegen/full-list.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Provide parameters",permalink:"/flutter_rust_bridge/guides/custom/codegen/inputs"},next:{title:"Rust runtime",permalink:"/flutter_rust_bridge/guides/custom/rust/"}},_={},y=[{value:"<code>flutter_rust_bridge_codegen</code>",id:"flutter_rust_bridge_codegen",level:2},{value:"<code>flutter_rust_bridge_codegen generate</code>",id:"flutter_rust_bridge_codegen-generate",level:2},{value:"<code>flutter_rust_bridge_codegen build-web</code>",id:"flutter_rust_bridge_codegen-build-web",level:2},{value:"<code>flutter_rust_bridge_codegen create</code>",id:"flutter_rust_bridge_codegen-create",level:2},{value:"<code>flutter_rust_bridge_codegen integrate</code>",id:"flutter_rust_bridge_codegen-integrate",level:2}],T={toc:y};function w(e){let{components:t,...n}=e;return(0,a.yg)("wrapper",(0,r.A)({},T,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"full-list-of-parameters"},"Full list of parameters"),(0,a.yg)("p",null,"In this page, we show explanation of each parameter.\nSimply add ",(0,a.yg)("inlineCode",{parentName:"p"},"--help")," to see full documentation. The following is a snapshot when running the command with ",(0,a.yg)("inlineCode",{parentName:"p"},"--help"),":"),(0,a.yg)("h2",{id:"flutter_rust_bridge_codegen"},(0,a.yg)("inlineCode",{parentName:"h2"},"flutter_rust_bridge_codegen")),(0,a.yg)(i,{mdxType:"CommandMain"}),(0,a.yg)("h2",{id:"flutter_rust_bridge_codegen-generate"},(0,a.yg)("inlineCode",{parentName:"h2"},"flutter_rust_bridge_codegen generate")),(0,a.yg)(u,{mdxType:"CommandGenerate"}),(0,a.yg)("h2",{id:"flutter_rust_bridge_codegen-build-web"},(0,a.yg)("inlineCode",{parentName:"h2"},"flutter_rust_bridge_codegen build-web")),(0,a.yg)(d,{mdxType:"CommandBuildWeb"}),(0,a.yg)("h2",{id:"flutter_rust_bridge_codegen-create"},(0,a.yg)("inlineCode",{parentName:"h2"},"flutter_rust_bridge_codegen create")),(0,a.yg)(c,{mdxType:"CommandCreate"}),(0,a.yg)("h2",{id:"flutter_rust_bridge_codegen-integrate"},(0,a.yg)("inlineCode",{parentName:"h2"},"flutter_rust_bridge_codegen integrate")),(0,a.yg)(m,{mdxType:"CommandIntegrate"}))}w.isMDXComponent=!0}}]);